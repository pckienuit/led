
led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003444  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003550  08003550  00004550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003574  08003574  0000508c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003574  08003574  0000508c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003574  08003574  0000508c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003574  08003574  00004574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003578  08003578  00004578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  0800357c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e38  2000008c  08003608  0000508c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ec4  08003608  00005ec4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008919  00000000  00000000  000050b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018ac  00000000  00000000  0000d9ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a20  00000000  00000000  0000f280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007da  00000000  00000000  0000fca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172d5  00000000  00000000  0001047a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000af6d  00000000  00000000  0002774f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008815f  00000000  00000000  000326bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ba81b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029dc  00000000  00000000  000ba860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000bd23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000008c 	.word	0x2000008c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003538 	.word	0x08003538

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000090 	.word	0x20000090
 8000148:	08003538 	.word	0x08003538

0800014c <HAL_TIM_PWM_PulseFinishedCallback>:
// Color and speed control
volatile int current_color = COLOR_BLUE;  // Start with blue
volatile int current_speed = 5;           // Speed from 1 (slow) to 10 (fast)
volatile int current_brightness = 50;     // Brightness from 1 (dim) to 100 (bright)

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8000154:	2100      	movs	r1, #0
 8000156:	4805      	ldr	r0, [pc, #20]	@ (800016c <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000158:	f002 fb30 	bl	80027bc <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;
 800015c:	4b04      	ldr	r3, [pc, #16]	@ (8000170 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 800015e:	2201      	movs	r2, #1
 8000160:	601a      	str	r2, [r3, #0]
}
 8000162:	bf00      	nop
 8000164:	3708      	adds	r7, #8
 8000166:	46bd      	mov	sp, r7
 8000168:	bd80      	pop	{r7, pc}
 800016a:	bf00      	nop
 800016c:	200000a8 	.word	0x200000a8
 8000170:	20000314 	.word	0x20000314

08000174 <Keypad_Init>:

// Keypad functions
void Keypad_Init(void) {
 8000174:	b580      	push	{r7, lr}
 8000176:	b088      	sub	sp, #32
 8000178:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800017a:	f107 0308 	add.w	r3, r7, #8
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
 8000182:	605a      	str	r2, [r3, #4]
 8000184:	609a      	str	r2, [r3, #8]
 8000186:	60da      	str	r2, [r3, #12]
    
    // Enable GPIOA clock (changed from GPIOB)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000188:	4b2b      	ldr	r3, [pc, #172]	@ (8000238 <Keypad_Init+0xc4>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a2a      	ldr	r2, [pc, #168]	@ (8000238 <Keypad_Init+0xc4>)
 800018e:	f043 0304 	orr.w	r3, r3, #4
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b28      	ldr	r3, [pc, #160]	@ (8000238 <Keypad_Init+0xc4>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0304 	and.w	r3, r3, #4
 800019c:	607b      	str	r3, [r7, #4]
 800019e:	687b      	ldr	r3, [r7, #4]
    
    // Configure row pins as output
    for(int i = 0; i < KEYPAD_ROWS; i++) {
 80001a0:	2300      	movs	r3, #0
 80001a2:	61fb      	str	r3, [r7, #28]
 80001a4:	e023      	b.n	80001ee <Keypad_Init+0x7a>
        GPIO_InitStruct.Pin = keypad_row_pins[i];
 80001a6:	4a25      	ldr	r2, [pc, #148]	@ (800023c <Keypad_Init+0xc8>)
 80001a8:	69fb      	ldr	r3, [r7, #28]
 80001aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80001ae:	60bb      	str	r3, [r7, #8]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001b0:	2301      	movs	r3, #1
 80001b2:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001b4:	2300      	movs	r3, #0
 80001b6:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001b8:	2302      	movs	r3, #2
 80001ba:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(keypad_row_ports[i], &GPIO_InitStruct);
 80001bc:	4a20      	ldr	r2, [pc, #128]	@ (8000240 <Keypad_Init+0xcc>)
 80001be:	69fb      	ldr	r3, [r7, #28]
 80001c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001c4:	f107 0208 	add.w	r2, r7, #8
 80001c8:	4611      	mov	r1, r2
 80001ca:	4618      	mov	r0, r3
 80001cc:	f001 fb1a 	bl	8001804 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(keypad_row_ports[i], keypad_row_pins[i], GPIO_PIN_SET);
 80001d0:	4a1b      	ldr	r2, [pc, #108]	@ (8000240 <Keypad_Init+0xcc>)
 80001d2:	69fb      	ldr	r3, [r7, #28]
 80001d4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80001d8:	4a18      	ldr	r2, [pc, #96]	@ (800023c <Keypad_Init+0xc8>)
 80001da:	69fb      	ldr	r3, [r7, #28]
 80001dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80001e0:	2201      	movs	r2, #1
 80001e2:	4619      	mov	r1, r3
 80001e4:	f001 fca9 	bl	8001b3a <HAL_GPIO_WritePin>
    for(int i = 0; i < KEYPAD_ROWS; i++) {
 80001e8:	69fb      	ldr	r3, [r7, #28]
 80001ea:	3301      	adds	r3, #1
 80001ec:	61fb      	str	r3, [r7, #28]
 80001ee:	69fb      	ldr	r3, [r7, #28]
 80001f0:	2b03      	cmp	r3, #3
 80001f2:	ddd8      	ble.n	80001a6 <Keypad_Init+0x32>
    }
    
    // Configure column pins as input with pull-up
    for(int i = 0; i < KEYPAD_COLS; i++) {
 80001f4:	2300      	movs	r3, #0
 80001f6:	61bb      	str	r3, [r7, #24]
 80001f8:	e015      	b.n	8000226 <Keypad_Init+0xb2>
        GPIO_InitStruct.Pin = keypad_col_pins[i];
 80001fa:	4a12      	ldr	r2, [pc, #72]	@ (8000244 <Keypad_Init+0xd0>)
 80001fc:	69bb      	ldr	r3, [r7, #24]
 80001fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000202:	60bb      	str	r3, [r7, #8]
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000204:	2300      	movs	r3, #0
 8000206:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000208:	2301      	movs	r3, #1
 800020a:	613b      	str	r3, [r7, #16]
        HAL_GPIO_Init(keypad_col_ports[i], &GPIO_InitStruct);
 800020c:	4a0e      	ldr	r2, [pc, #56]	@ (8000248 <Keypad_Init+0xd4>)
 800020e:	69bb      	ldr	r3, [r7, #24]
 8000210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000214:	f107 0208 	add.w	r2, r7, #8
 8000218:	4611      	mov	r1, r2
 800021a:	4618      	mov	r0, r3
 800021c:	f001 faf2 	bl	8001804 <HAL_GPIO_Init>
    for(int i = 0; i < KEYPAD_COLS; i++) {
 8000220:	69bb      	ldr	r3, [r7, #24]
 8000222:	3301      	adds	r3, #1
 8000224:	61bb      	str	r3, [r7, #24]
 8000226:	69bb      	ldr	r3, [r7, #24]
 8000228:	2b03      	cmp	r3, #3
 800022a:	dde6      	ble.n	80001fa <Keypad_Init+0x86>
    }
}
 800022c:	bf00      	nop
 800022e:	bf00      	nop
 8000230:	3720      	adds	r7, #32
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	40021000 	.word	0x40021000
 800023c:	20000040 	.word	0x20000040
 8000240:	20000030 	.word	0x20000030
 8000244:	20000058 	.word	0x20000058
 8000248:	20000048 	.word	0x20000048

0800024c <Keypad_Read>:

char Keypad_Read(void) {
 800024c:	b580      	push	{r7, lr}
 800024e:	b084      	sub	sp, #16
 8000250:	af00      	add	r7, sp, #0
    for(int row = 0; row < KEYPAD_ROWS; row++) {
 8000252:	2300      	movs	r3, #0
 8000254:	60fb      	str	r3, [r7, #12]
 8000256:	e061      	b.n	800031c <Keypad_Read+0xd0>
        // Set current row LOW, others HIGH
        for(int i = 0; i < KEYPAD_ROWS; i++) {
 8000258:	2300      	movs	r3, #0
 800025a:	60bb      	str	r3, [r7, #8]
 800025c:	e01f      	b.n	800029e <Keypad_Read+0x52>
            if(i == row) {
 800025e:	68ba      	ldr	r2, [r7, #8]
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	429a      	cmp	r2, r3
 8000264:	d10c      	bne.n	8000280 <Keypad_Read+0x34>
                HAL_GPIO_WritePin(keypad_row_ports[i], keypad_row_pins[i], GPIO_PIN_RESET);
 8000266:	4a31      	ldr	r2, [pc, #196]	@ (800032c <Keypad_Read+0xe0>)
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800026e:	4a30      	ldr	r2, [pc, #192]	@ (8000330 <Keypad_Read+0xe4>)
 8000270:	68bb      	ldr	r3, [r7, #8]
 8000272:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000276:	2200      	movs	r2, #0
 8000278:	4619      	mov	r1, r3
 800027a:	f001 fc5e 	bl	8001b3a <HAL_GPIO_WritePin>
 800027e:	e00b      	b.n	8000298 <Keypad_Read+0x4c>
            } else {
                HAL_GPIO_WritePin(keypad_row_ports[i], keypad_row_pins[i], GPIO_PIN_SET);
 8000280:	4a2a      	ldr	r2, [pc, #168]	@ (800032c <Keypad_Read+0xe0>)
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000288:	4a29      	ldr	r2, [pc, #164]	@ (8000330 <Keypad_Read+0xe4>)
 800028a:	68bb      	ldr	r3, [r7, #8]
 800028c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000290:	2201      	movs	r2, #1
 8000292:	4619      	mov	r1, r3
 8000294:	f001 fc51 	bl	8001b3a <HAL_GPIO_WritePin>
        for(int i = 0; i < KEYPAD_ROWS; i++) {
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	3301      	adds	r3, #1
 800029c:	60bb      	str	r3, [r7, #8]
 800029e:	68bb      	ldr	r3, [r7, #8]
 80002a0:	2b03      	cmp	r3, #3
 80002a2:	dddc      	ble.n	800025e <Keypad_Read+0x12>
            }
        }
        
        HAL_Delay(2); // Small delay for stabilization
 80002a4:	2002      	movs	r0, #2
 80002a6:	f000 ff15 	bl	80010d4 <HAL_Delay>
        
        // Read columns
        for(int col = 0; col < KEYPAD_COLS; col++) {
 80002aa:	2300      	movs	r3, #0
 80002ac:	607b      	str	r3, [r7, #4]
 80002ae:	e02f      	b.n	8000310 <Keypad_Read+0xc4>
            if(HAL_GPIO_ReadPin(keypad_col_ports[col], keypad_col_pins[col]) == GPIO_PIN_RESET) {
 80002b0:	4a20      	ldr	r2, [pc, #128]	@ (8000334 <Keypad_Read+0xe8>)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002b8:	491f      	ldr	r1, [pc, #124]	@ (8000338 <Keypad_Read+0xec>)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80002c0:	4619      	mov	r1, r3
 80002c2:	4610      	mov	r0, r2
 80002c4:	f001 fc22 	bl	8001b0c <HAL_GPIO_ReadPin>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d11d      	bne.n	800030a <Keypad_Read+0xbe>
                // Button pressed, wait for release
                while(HAL_GPIO_ReadPin(keypad_col_ports[col], keypad_col_pins[col]) == GPIO_PIN_RESET) {
 80002ce:	e002      	b.n	80002d6 <Keypad_Read+0x8a>
                    HAL_Delay(10);
 80002d0:	200a      	movs	r0, #10
 80002d2:	f000 feff 	bl	80010d4 <HAL_Delay>
                while(HAL_GPIO_ReadPin(keypad_col_ports[col], keypad_col_pins[col]) == GPIO_PIN_RESET) {
 80002d6:	4a17      	ldr	r2, [pc, #92]	@ (8000334 <Keypad_Read+0xe8>)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002de:	4916      	ldr	r1, [pc, #88]	@ (8000338 <Keypad_Read+0xec>)
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80002e6:	4619      	mov	r1, r3
 80002e8:	4610      	mov	r0, r2
 80002ea:	f001 fc0f 	bl	8001b0c <HAL_GPIO_ReadPin>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d0ed      	beq.n	80002d0 <Keypad_Read+0x84>
                }
                HAL_Delay(50); // Debounce delay
 80002f4:	2032      	movs	r0, #50	@ 0x32
 80002f6:	f000 feed 	bl	80010d4 <HAL_Delay>
                return keypad_layout[row][col];
 80002fa:	4a10      	ldr	r2, [pc, #64]	@ (800033c <Keypad_Read+0xf0>)
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	009b      	lsls	r3, r3, #2
 8000300:	441a      	add	r2, r3
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	4413      	add	r3, r2
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	e00c      	b.n	8000324 <Keypad_Read+0xd8>
        for(int col = 0; col < KEYPAD_COLS; col++) {
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	3301      	adds	r3, #1
 800030e:	607b      	str	r3, [r7, #4]
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	2b03      	cmp	r3, #3
 8000314:	ddcc      	ble.n	80002b0 <Keypad_Read+0x64>
    for(int row = 0; row < KEYPAD_ROWS; row++) {
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	3301      	adds	r3, #1
 800031a:	60fb      	str	r3, [r7, #12]
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	2b03      	cmp	r3, #3
 8000320:	dd9a      	ble.n	8000258 <Keypad_Read+0xc>
            }
        }
    }
    return 0; // No key pressed
 8000322:	2300      	movs	r3, #0
}
 8000324:	4618      	mov	r0, r3
 8000326:	3710      	adds	r7, #16
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}
 800032c:	20000030 	.word	0x20000030
 8000330:	20000040 	.word	0x20000040
 8000334:	20000048 	.word	0x20000048
 8000338:	20000058 	.word	0x20000058
 800033c:	20000060 	.word	0x20000060

08000340 <Process_Keypad_Input>:

void Process_Keypad_Input(char key) {
 8000340:	b480      	push	{r7}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0
 8000346:	4603      	mov	r3, r0
 8000348:	71fb      	strb	r3, [r7, #7]
    switch(key) {
 800034a:	79fb      	ldrb	r3, [r7, #7]
 800034c:	3b31      	subs	r3, #49	@ 0x31
 800034e:	2b15      	cmp	r3, #21
 8000350:	f200 8092 	bhi.w	8000478 <Process_Keypad_Input+0x138>
 8000354:	a201      	add	r2, pc, #4	@ (adr r2, 800035c <Process_Keypad_Input+0x1c>)
 8000356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800035a:	bf00      	nop
 800035c:	080003b5 	.word	0x080003b5
 8000360:	080003ed 	.word	0x080003ed
 8000364:	08000401 	.word	0x08000401
 8000368:	08000479 	.word	0x08000479
 800036c:	080003c3 	.word	0x080003c3
 8000370:	08000415 	.word	0x08000415
 8000374:	0800042f 	.word	0x0800042f
 8000378:	08000479 	.word	0x08000479
 800037c:	080003d1 	.word	0x080003d1
 8000380:	08000479 	.word	0x08000479
 8000384:	08000479 	.word	0x08000479
 8000388:	08000479 	.word	0x08000479
 800038c:	08000479 	.word	0x08000479
 8000390:	08000479 	.word	0x08000479
 8000394:	08000479 	.word	0x08000479
 8000398:	08000479 	.word	0x08000479
 800039c:	08000449 	.word	0x08000449
 80003a0:	08000479 	.word	0x08000479
 80003a4:	08000479 	.word	0x08000479
 80003a8:	080003df 	.word	0x080003df
 80003ac:	08000479 	.word	0x08000479
 80003b0:	0800046b 	.word	0x0800046b
        // Effects
        case '1':  // S1 - Fade effect
            current_effect = EFFECT_FADE;
 80003b4:	4b38      	ldr	r3, [pc, #224]	@ (8000498 <Process_Keypad_Input+0x158>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
            effect_changed = 1;
 80003ba:	4b38      	ldr	r3, [pc, #224]	@ (800049c <Process_Keypad_Input+0x15c>)
 80003bc:	2201      	movs	r2, #1
 80003be:	601a      	str	r2, [r3, #0]
            break;
 80003c0:	e065      	b.n	800048e <Process_Keypad_Input+0x14e>
        case '5':  // S5 - Rainbow effect  
            current_effect = EFFECT_RAINBOW;
 80003c2:	4b35      	ldr	r3, [pc, #212]	@ (8000498 <Process_Keypad_Input+0x158>)
 80003c4:	2201      	movs	r2, #1
 80003c6:	601a      	str	r2, [r3, #0]
            effect_changed = 1;
 80003c8:	4b34      	ldr	r3, [pc, #208]	@ (800049c <Process_Keypad_Input+0x15c>)
 80003ca:	2201      	movs	r2, #1
 80003cc:	601a      	str	r2, [r3, #0]
            break;
 80003ce:	e05e      	b.n	800048e <Process_Keypad_Input+0x14e>
        case '9':  // S9 - Run effect
            current_effect = EFFECT_RUN;
 80003d0:	4b31      	ldr	r3, [pc, #196]	@ (8000498 <Process_Keypad_Input+0x158>)
 80003d2:	2202      	movs	r2, #2
 80003d4:	601a      	str	r2, [r3, #0]
            effect_changed = 1;
 80003d6:	4b31      	ldr	r3, [pc, #196]	@ (800049c <Process_Keypad_Input+0x15c>)
 80003d8:	2201      	movs	r2, #1
 80003da:	601a      	str	r2, [r3, #0]
            break;
 80003dc:	e057      	b.n	800048e <Process_Keypad_Input+0x14e>
        case 'D':  // S13 - Flashing effect
            current_effect = EFFECT_FLASHING;
 80003de:	4b2e      	ldr	r3, [pc, #184]	@ (8000498 <Process_Keypad_Input+0x158>)
 80003e0:	2203      	movs	r2, #3
 80003e2:	601a      	str	r2, [r3, #0]
            effect_changed = 1;
 80003e4:	4b2d      	ldr	r3, [pc, #180]	@ (800049c <Process_Keypad_Input+0x15c>)
 80003e6:	2201      	movs	r2, #1
 80003e8:	601a      	str	r2, [r3, #0]
            break;
 80003ea:	e050      	b.n	800048e <Process_Keypad_Input+0x14e>
            
        // Speed control
        case '2':  // S2 - Decrease speed
            if(current_speed > 1) current_speed--;
 80003ec:	4b2c      	ldr	r3, [pc, #176]	@ (80004a0 <Process_Keypad_Input+0x160>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	2b01      	cmp	r3, #1
 80003f2:	dd43      	ble.n	800047c <Process_Keypad_Input+0x13c>
 80003f4:	4b2a      	ldr	r3, [pc, #168]	@ (80004a0 <Process_Keypad_Input+0x160>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	3b01      	subs	r3, #1
 80003fa:	4a29      	ldr	r2, [pc, #164]	@ (80004a0 <Process_Keypad_Input+0x160>)
 80003fc:	6013      	str	r3, [r2, #0]
            break;
 80003fe:	e03d      	b.n	800047c <Process_Keypad_Input+0x13c>
        case '3':  // S3 - Increase speed
            if(current_speed < 10) current_speed++;
 8000400:	4b27      	ldr	r3, [pc, #156]	@ (80004a0 <Process_Keypad_Input+0x160>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	2b09      	cmp	r3, #9
 8000406:	dc3b      	bgt.n	8000480 <Process_Keypad_Input+0x140>
 8000408:	4b25      	ldr	r3, [pc, #148]	@ (80004a0 <Process_Keypad_Input+0x160>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	3301      	adds	r3, #1
 800040e:	4a24      	ldr	r2, [pc, #144]	@ (80004a0 <Process_Keypad_Input+0x160>)
 8000410:	6013      	str	r3, [r2, #0]
            break;
 8000412:	e035      	b.n	8000480 <Process_Keypad_Input+0x140>
            
        // Brightness control
        case '6':  // S6 - Decrease brightness
            current_brightness -= 10;
 8000414:	4b23      	ldr	r3, [pc, #140]	@ (80004a4 <Process_Keypad_Input+0x164>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	3b0a      	subs	r3, #10
 800041a:	4a22      	ldr	r2, [pc, #136]	@ (80004a4 <Process_Keypad_Input+0x164>)
 800041c:	6013      	str	r3, [r2, #0]
            if(current_brightness < 1) current_brightness = 1;
 800041e:	4b21      	ldr	r3, [pc, #132]	@ (80004a4 <Process_Keypad_Input+0x164>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	2b00      	cmp	r3, #0
 8000424:	dc2e      	bgt.n	8000484 <Process_Keypad_Input+0x144>
 8000426:	4b1f      	ldr	r3, [pc, #124]	@ (80004a4 <Process_Keypad_Input+0x164>)
 8000428:	2201      	movs	r2, #1
 800042a:	601a      	str	r2, [r3, #0]
            break;
 800042c:	e02a      	b.n	8000484 <Process_Keypad_Input+0x144>
        case '7':  // S7 - Increase brightness
            current_brightness += 10;
 800042e:	4b1d      	ldr	r3, [pc, #116]	@ (80004a4 <Process_Keypad_Input+0x164>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	330a      	adds	r3, #10
 8000434:	4a1b      	ldr	r2, [pc, #108]	@ (80004a4 <Process_Keypad_Input+0x164>)
 8000436:	6013      	str	r3, [r2, #0]
            if(current_brightness > 100) current_brightness = 100;
 8000438:	4b1a      	ldr	r3, [pc, #104]	@ (80004a4 <Process_Keypad_Input+0x164>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	2b64      	cmp	r3, #100	@ 0x64
 800043e:	dd23      	ble.n	8000488 <Process_Keypad_Input+0x148>
 8000440:	4b18      	ldr	r3, [pc, #96]	@ (80004a4 <Process_Keypad_Input+0x164>)
 8000442:	2264      	movs	r2, #100	@ 0x64
 8000444:	601a      	str	r2, [r3, #0]
            break;
 8000446:	e01f      	b.n	8000488 <Process_Keypad_Input+0x148>
            
        // Color and control
        case 'A':  // S10 - Change color (not for Rainbow)
            if(current_effect != EFFECT_RAINBOW) {
 8000448:	4b13      	ldr	r3, [pc, #76]	@ (8000498 <Process_Keypad_Input+0x158>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	2b01      	cmp	r3, #1
 800044e:	d01d      	beq.n	800048c <Process_Keypad_Input+0x14c>
                current_color = (current_color + 1) % MAX_COLORS;
 8000450:	4b15      	ldr	r3, [pc, #84]	@ (80004a8 <Process_Keypad_Input+0x168>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	3301      	adds	r3, #1
 8000456:	425a      	negs	r2, r3
 8000458:	f003 0303 	and.w	r3, r3, #3
 800045c:	f002 0203 	and.w	r2, r2, #3
 8000460:	bf58      	it	pl
 8000462:	4253      	negpl	r3, r2
 8000464:	4a10      	ldr	r2, [pc, #64]	@ (80004a8 <Process_Keypad_Input+0x168>)
 8000466:	6013      	str	r3, [r2, #0]
            }
            break;
 8000468:	e010      	b.n	800048c <Process_Keypad_Input+0x14c>
        case 'F':  // S15 - Turn off
            current_effect = EFFECT_OFF;
 800046a:	4b0b      	ldr	r3, [pc, #44]	@ (8000498 <Process_Keypad_Input+0x158>)
 800046c:	2204      	movs	r2, #4
 800046e:	601a      	str	r2, [r3, #0]
            effect_changed = 1;
 8000470:	4b0a      	ldr	r3, [pc, #40]	@ (800049c <Process_Keypad_Input+0x15c>)
 8000472:	2201      	movs	r2, #1
 8000474:	601a      	str	r2, [r3, #0]
            break;
 8000476:	e00a      	b.n	800048e <Process_Keypad_Input+0x14e>
        case '4':  // S4 - Disabled (problematic) 
        case '8':  // S8 - Disabled (problematic)
        case 'C':  // S12 - Disabled (problematic)
        default:
            // Do nothing for problematic keys and others
            break;
 8000478:	bf00      	nop
 800047a:	e008      	b.n	800048e <Process_Keypad_Input+0x14e>
            break;
 800047c:	bf00      	nop
 800047e:	e006      	b.n	800048e <Process_Keypad_Input+0x14e>
            break;
 8000480:	bf00      	nop
 8000482:	e004      	b.n	800048e <Process_Keypad_Input+0x14e>
            break;
 8000484:	bf00      	nop
 8000486:	e002      	b.n	800048e <Process_Keypad_Input+0x14e>
            break;
 8000488:	bf00      	nop
 800048a:	e000      	b.n	800048e <Process_Keypad_Input+0x14e>
            break;
 800048c:	bf00      	nop
    }
}
 800048e:	bf00      	nop
 8000490:	370c      	adds	r7, #12
 8000492:	46bd      	mov	sp, r7
 8000494:	bc80      	pop	{r7}
 8000496:	4770      	bx	lr
 8000498:	20000070 	.word	0x20000070
 800049c:	20000074 	.word	0x20000074
 80004a0:	20000078 	.word	0x20000078
 80004a4:	2000007c 	.word	0x2000007c
 80004a8:	20000318 	.word	0x20000318

080004ac <Set_LED>:

void Set_LED (int LEDnum, int Red, int Green, int Blue) {
 80004ac:	b480      	push	{r7}
 80004ae:	b085      	sub	sp, #20
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	60f8      	str	r0, [r7, #12]
 80004b4:	60b9      	str	r1, [r7, #8]
 80004b6:	607a      	str	r2, [r7, #4]
 80004b8:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	b2d9      	uxtb	r1, r3
 80004be:	4a10      	ldr	r2, [pc, #64]	@ (8000500 <Set_LED+0x54>)
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	b2d9      	uxtb	r1, r3
 80004ca:	4a0d      	ldr	r2, [pc, #52]	@ (8000500 <Set_LED+0x54>)
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	009b      	lsls	r3, r3, #2
 80004d0:	4413      	add	r3, r2
 80004d2:	460a      	mov	r2, r1
 80004d4:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 80004d6:	68bb      	ldr	r3, [r7, #8]
 80004d8:	b2d9      	uxtb	r1, r3
 80004da:	4a09      	ldr	r2, [pc, #36]	@ (8000500 <Set_LED+0x54>)
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	009b      	lsls	r3, r3, #2
 80004e0:	4413      	add	r3, r2
 80004e2:	460a      	mov	r2, r1
 80004e4:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	b2d9      	uxtb	r1, r3
 80004ea:	4a05      	ldr	r2, [pc, #20]	@ (8000500 <Set_LED+0x54>)
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	009b      	lsls	r3, r3, #2
 80004f0:	4413      	add	r3, r2
 80004f2:	460a      	mov	r2, r1
 80004f4:	70da      	strb	r2, [r3, #3]
}
 80004f6:	bf00      	nop
 80004f8:	3714      	adds	r7, #20
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bc80      	pop	{r7}
 80004fe:	4770      	bx	lr
 8000500:	20000134 	.word	0x20000134

08000504 <Set_All_LEDs_Same_Color>:

// Function to set all LEDs to the same color
void Set_All_LEDs_Same_Color(int Red, int Green, int Blue) {
 8000504:	b580      	push	{r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af00      	add	r7, sp, #0
 800050a:	60f8      	str	r0, [r7, #12]
 800050c:	60b9      	str	r1, [r7, #8]
 800050e:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < MAX_LED; i++) {
 8000510:	2300      	movs	r3, #0
 8000512:	617b      	str	r3, [r7, #20]
 8000514:	e008      	b.n	8000528 <Set_All_LEDs_Same_Color+0x24>
        Set_LED(i, Red, Green, Blue);
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	68ba      	ldr	r2, [r7, #8]
 800051a:	68f9      	ldr	r1, [r7, #12]
 800051c:	6978      	ldr	r0, [r7, #20]
 800051e:	f7ff ffc5 	bl	80004ac <Set_LED>
    for (int i = 0; i < MAX_LED; i++) {
 8000522:	697b      	ldr	r3, [r7, #20]
 8000524:	3301      	adds	r3, #1
 8000526:	617b      	str	r3, [r7, #20]
 8000528:	697b      	ldr	r3, [r7, #20]
 800052a:	2b3b      	cmp	r3, #59	@ 0x3b
 800052c:	ddf3      	ble.n	8000516 <Set_All_LEDs_Same_Color+0x12>
    }
}
 800052e:	bf00      	nop
 8000530:	bf00      	nop
 8000532:	3718      	adds	r7, #24
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}

08000538 <Set_Brightness>:

#define PI 3.14159265

void Set_Brightness (int brightness) {
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if (brightness > 100) brightness = 100;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2b64      	cmp	r3, #100	@ 0x64
 8000544:	dd01      	ble.n	800054a <Set_Brightness+0x12>
 8000546:	2364      	movs	r3, #100	@ 0x64
 8000548:	607b      	str	r3, [r7, #4]
	if (brightness < 0) brightness = 0;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2b00      	cmp	r3, #0
 800054e:	da01      	bge.n	8000554 <Set_Brightness+0x1c>
 8000550:	2300      	movs	r3, #0
 8000552:	607b      	str	r3, [r7, #4]
	
	for (int i=0; i < MAX_LED; i++) {
 8000554:	2300      	movs	r3, #0
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	e02d      	b.n	80005b6 <Set_Brightness+0x7e>
		LED_Mod[i][0] = LED_Data[i][0];
 800055a:	4a1b      	ldr	r2, [pc, #108]	@ (80005c8 <Set_Brightness+0x90>)
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8000562:	4a1a      	ldr	r2, [pc, #104]	@ (80005cc <Set_Brightness+0x94>)
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j = 1; j < 4; ++j) {
 800056a:	2301      	movs	r3, #1
 800056c:	60bb      	str	r3, [r7, #8]
 800056e:	e01c      	b.n	80005aa <Set_Brightness+0x72>
			// Simple percentage calculation: brightness from 0-100%
			LED_Mod[i][j] = (LED_Data[i][j] * brightness) / 100;
 8000570:	4a15      	ldr	r2, [pc, #84]	@ (80005c8 <Set_Brightness+0x90>)
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	009b      	lsls	r3, r3, #2
 8000576:	441a      	add	r2, r3
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	4413      	add	r3, r2
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	461a      	mov	r2, r3
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	fb02 f303 	mul.w	r3, r2, r3
 8000586:	4a12      	ldr	r2, [pc, #72]	@ (80005d0 <Set_Brightness+0x98>)
 8000588:	fb82 1203 	smull	r1, r2, r2, r3
 800058c:	1152      	asrs	r2, r2, #5
 800058e:	17db      	asrs	r3, r3, #31
 8000590:	1ad3      	subs	r3, r2, r3
 8000592:	b2d9      	uxtb	r1, r3
 8000594:	4a0d      	ldr	r2, [pc, #52]	@ (80005cc <Set_Brightness+0x94>)
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	009b      	lsls	r3, r3, #2
 800059a:	441a      	add	r2, r3
 800059c:	68bb      	ldr	r3, [r7, #8]
 800059e:	4413      	add	r3, r2
 80005a0:	460a      	mov	r2, r1
 80005a2:	701a      	strb	r2, [r3, #0]
		for (int j = 1; j < 4; ++j) {
 80005a4:	68bb      	ldr	r3, [r7, #8]
 80005a6:	3301      	adds	r3, #1
 80005a8:	60bb      	str	r3, [r7, #8]
 80005aa:	68bb      	ldr	r3, [r7, #8]
 80005ac:	2b03      	cmp	r3, #3
 80005ae:	dddf      	ble.n	8000570 <Set_Brightness+0x38>
	for (int i=0; i < MAX_LED; i++) {
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	3301      	adds	r3, #1
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	2b3b      	cmp	r3, #59	@ 0x3b
 80005ba:	ddce      	ble.n	800055a <Set_Brightness+0x22>
		}
	}

#endif
}
 80005bc:	bf00      	nop
 80005be:	bf00      	nop
 80005c0:	3714      	adds	r7, #20
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr
 80005c8:	20000134 	.word	0x20000134
 80005cc:	20000224 	.word	0x20000224
 80005d0:	51eb851f 	.word	0x51eb851f

080005d4 <WS2812_Send>:
//
//	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, 24);
//}


void WS2812_Send (void) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b086      	sub	sp, #24
 80005d8:	af00      	add	r7, sp, #0
	uint32_t indx = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]
	uint32_t color;

	for (int i = 0; i < MAX_LED; ++i) {
 80005de:	2300      	movs	r3, #0
 80005e0:	613b      	str	r3, [r7, #16]
 80005e2:	e036      	b.n	8000652 <WS2812_Send+0x7e>
		color = ((LED_Mod[i][1] << 16) | (LED_Mod[i][2] << 8) | (LED_Mod[i][3]));
 80005e4:	4a39      	ldr	r2, [pc, #228]	@ (80006cc <WS2812_Send+0xf8>)
 80005e6:	693b      	ldr	r3, [r7, #16]
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	4413      	add	r3, r2
 80005ec:	785b      	ldrb	r3, [r3, #1]
 80005ee:	041a      	lsls	r2, r3, #16
 80005f0:	4936      	ldr	r1, [pc, #216]	@ (80006cc <WS2812_Send+0xf8>)
 80005f2:	693b      	ldr	r3, [r7, #16]
 80005f4:	009b      	lsls	r3, r3, #2
 80005f6:	440b      	add	r3, r1
 80005f8:	789b      	ldrb	r3, [r3, #2]
 80005fa:	021b      	lsls	r3, r3, #8
 80005fc:	431a      	orrs	r2, r3
 80005fe:	4933      	ldr	r1, [pc, #204]	@ (80006cc <WS2812_Send+0xf8>)
 8000600:	693b      	ldr	r3, [r7, #16]
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	440b      	add	r3, r1
 8000606:	78db      	ldrb	r3, [r3, #3]
 8000608:	4313      	orrs	r3, r2
 800060a:	603b      	str	r3, [r7, #0]

		for (int j = 23; j >= 0; j--) {
 800060c:	2317      	movs	r3, #23
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	e019      	b.n	8000646 <WS2812_Send+0x72>
			if (color&(1<<j)) {
 8000612:	2201      	movs	r2, #1
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	fa02 f303 	lsl.w	r3, r2, r3
 800061a:	461a      	mov	r2, r3
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	4013      	ands	r3, r2
 8000620:	2b00      	cmp	r3, #0
 8000622:	d005      	beq.n	8000630 <WS2812_Send+0x5c>
				pwmData[indx] = 60;
 8000624:	4a2a      	ldr	r2, [pc, #168]	@ (80006d0 <WS2812_Send+0xfc>)
 8000626:	697b      	ldr	r3, [r7, #20]
 8000628:	213c      	movs	r1, #60	@ 0x3c
 800062a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800062e:	e004      	b.n	800063a <WS2812_Send+0x66>
			} else {
				pwmData[indx] = 30;
 8000630:	4a27      	ldr	r2, [pc, #156]	@ (80006d0 <WS2812_Send+0xfc>)
 8000632:	697b      	ldr	r3, [r7, #20]
 8000634:	211e      	movs	r1, #30
 8000636:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}

			indx++;
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	3301      	adds	r3, #1
 800063e:	617b      	str	r3, [r7, #20]
		for (int j = 23; j >= 0; j--) {
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	3b01      	subs	r3, #1
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	2b00      	cmp	r3, #0
 800064a:	dae2      	bge.n	8000612 <WS2812_Send+0x3e>
	for (int i = 0; i < MAX_LED; ++i) {
 800064c:	693b      	ldr	r3, [r7, #16]
 800064e:	3301      	adds	r3, #1
 8000650:	613b      	str	r3, [r7, #16]
 8000652:	693b      	ldr	r3, [r7, #16]
 8000654:	2b3b      	cmp	r3, #59	@ 0x3b
 8000656:	ddc5      	ble.n	80005e4 <WS2812_Send+0x10>
		}
	}

	for (int i = 0; i < 50; ++i) {
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	e00a      	b.n	8000674 <WS2812_Send+0xa0>
		pwmData[indx] = 0;
 800065e:	4a1c      	ldr	r2, [pc, #112]	@ (80006d0 <WS2812_Send+0xfc>)
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	2100      	movs	r1, #0
 8000664:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	3301      	adds	r3, #1
 800066c:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 50; ++i) {
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	3301      	adds	r3, #1
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	2b31      	cmp	r3, #49	@ 0x31
 8000678:	ddf1      	ble.n	800065e <WS2812_Send+0x8a>
	}

	// Reset flag before starting DMA
	datasentflag = 0;
 800067a:	4b16      	ldr	r3, [pc, #88]	@ (80006d4 <WS2812_Send+0x100>)
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
	
	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 8000680:	697b      	ldr	r3, [r7, #20]
 8000682:	b29b      	uxth	r3, r3
 8000684:	4a12      	ldr	r2, [pc, #72]	@ (80006d0 <WS2812_Send+0xfc>)
 8000686:	2100      	movs	r1, #0
 8000688:	4813      	ldr	r0, [pc, #76]	@ (80006d8 <WS2812_Send+0x104>)
 800068a:	f001 fef5 	bl	8002478 <HAL_TIM_PWM_Start_DMA>
	
	// Add timeout to prevent infinite loop
	uint32_t timeout = 1000000;  // Adjust timeout value
 800068e:	4b13      	ldr	r3, [pc, #76]	@ (80006dc <WS2812_Send+0x108>)
 8000690:	607b      	str	r3, [r7, #4]
	while(!datasentflag && timeout > 0) {
 8000692:	e002      	b.n	800069a <WS2812_Send+0xc6>
		timeout--;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	3b01      	subs	r3, #1
 8000698:	607b      	str	r3, [r7, #4]
	while(!datasentflag && timeout > 0) {
 800069a:	4b0e      	ldr	r3, [pc, #56]	@ (80006d4 <WS2812_Send+0x100>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d102      	bne.n	80006a8 <WS2812_Send+0xd4>
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d1f5      	bne.n	8000694 <WS2812_Send+0xc0>
	}
	
	// Force stop if timeout occurred
	if (timeout == 0) {
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d106      	bne.n	80006bc <WS2812_Send+0xe8>
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 80006ae:	2100      	movs	r1, #0
 80006b0:	4809      	ldr	r0, [pc, #36]	@ (80006d8 <WS2812_Send+0x104>)
 80006b2:	f002 f883 	bl	80027bc <HAL_TIM_PWM_Stop_DMA>
		datasentflag = 1;
 80006b6:	4b07      	ldr	r3, [pc, #28]	@ (80006d4 <WS2812_Send+0x100>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	601a      	str	r2, [r3, #0]
	}
	
	datasentflag = 0;
 80006bc:	4b05      	ldr	r3, [pc, #20]	@ (80006d4 <WS2812_Send+0x100>)
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
}
 80006c2:	bf00      	nop
 80006c4:	3718      	adds	r7, #24
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000224 	.word	0x20000224
 80006d0:	2000031c 	.word	0x2000031c
 80006d4:	20000314 	.word	0x20000314
 80006d8:	200000a8 	.word	0x200000a8
 80006dc:	000f4240 	.word	0x000f4240

080006e0 <Rainbow_Effect>:
		WS2812_Send();
		HAL_Delay(LED_DELAY/speed);
	}
}

void Rainbow_Effect (int speed) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08a      	sub	sp, #40	@ 0x28
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
	if (speed > 10) speed = 10;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2b0a      	cmp	r3, #10
 80006ec:	dd01      	ble.n	80006f2 <Rainbow_Effect+0x12>
 80006ee:	230a      	movs	r3, #10
 80006f0:	607b      	str	r3, [r7, #4]
	if (speed < 1)	speed = 1;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	dc01      	bgt.n	80006fc <Rainbow_Effect+0x1c>
 80006f8:	2301      	movs	r3, #1
 80006fa:	607b      	str	r3, [r7, #4]

	for (int hue = 0; hue < 360; hue += 36) {
 80006fc:	2300      	movs	r3, #0
 80006fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8000700:	e0c7      	b.n	8000892 <Rainbow_Effect+0x1b2>
		int red, green, blue;

		for (int led_num = 0; led_num < MAX_LED; ++led_num) {
 8000702:	2300      	movs	r3, #0
 8000704:	617b      	str	r3, [r7, #20]
 8000706:	e0af      	b.n	8000868 <Rainbow_Effect+0x188>
			if (hue > 359) hue = 0;
 8000708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800070a:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 800070e:	db01      	blt.n	8000714 <Rainbow_Effect+0x34>
 8000710:	2300      	movs	r3, #0
 8000712:	627b      	str	r3, [r7, #36]	@ 0x24
			hue += led_num;
 8000714:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	4413      	add	r3, r2
 800071a:	627b      	str	r3, [r7, #36]	@ 0x24
			int sector = hue / 60;
 800071c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800071e:	4a62      	ldr	r2, [pc, #392]	@ (80008a8 <Rainbow_Effect+0x1c8>)
 8000720:	fb82 1203 	smull	r1, r2, r2, r3
 8000724:	441a      	add	r2, r3
 8000726:	1152      	asrs	r2, r2, #5
 8000728:	17db      	asrs	r3, r3, #31
 800072a:	1ad3      	subs	r3, r2, r3
 800072c:	613b      	str	r3, [r7, #16]
			int remainder = hue % 60;
 800072e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000730:	4b5d      	ldr	r3, [pc, #372]	@ (80008a8 <Rainbow_Effect+0x1c8>)
 8000732:	fb83 1302 	smull	r1, r3, r3, r2
 8000736:	4413      	add	r3, r2
 8000738:	1159      	asrs	r1, r3, #5
 800073a:	17d3      	asrs	r3, r2, #31
 800073c:	1ac9      	subs	r1, r1, r3
 800073e:	460b      	mov	r3, r1
 8000740:	011b      	lsls	r3, r3, #4
 8000742:	1a5b      	subs	r3, r3, r1
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	1ad3      	subs	r3, r2, r3
 8000748:	60fb      	str	r3, [r7, #12]

			switch(sector) {
 800074a:	693b      	ldr	r3, [r7, #16]
 800074c:	2b05      	cmp	r3, #5
 800074e:	d878      	bhi.n	8000842 <Rainbow_Effect+0x162>
 8000750:	a201      	add	r2, pc, #4	@ (adr r2, 8000758 <Rainbow_Effect+0x78>)
 8000752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000756:	bf00      	nop
 8000758:	08000771 	.word	0x08000771
 800075c:	08000793 	.word	0x08000793
 8000760:	080007b7 	.word	0x080007b7
 8000764:	080007d9 	.word	0x080007d9
 8000768:	080007fd 	.word	0x080007fd
 800076c:	0800081f 	.word	0x0800081f
				case 0: red = 255; green = (remainder * 255) / 60; blue = 0; break;
 8000770:	23ff      	movs	r3, #255	@ 0xff
 8000772:	623b      	str	r3, [r7, #32]
 8000774:	68fa      	ldr	r2, [r7, #12]
 8000776:	4613      	mov	r3, r2
 8000778:	021b      	lsls	r3, r3, #8
 800077a:	1a9b      	subs	r3, r3, r2
 800077c:	4a4a      	ldr	r2, [pc, #296]	@ (80008a8 <Rainbow_Effect+0x1c8>)
 800077e:	fb82 1203 	smull	r1, r2, r2, r3
 8000782:	441a      	add	r2, r3
 8000784:	1152      	asrs	r2, r2, #5
 8000786:	17db      	asrs	r3, r3, #31
 8000788:	1ad3      	subs	r3, r2, r3
 800078a:	61fb      	str	r3, [r7, #28]
 800078c:	2300      	movs	r3, #0
 800078e:	61bb      	str	r3, [r7, #24]
 8000790:	e05e      	b.n	8000850 <Rainbow_Effect+0x170>
				case 1: red = 255 - ((remainder * 255) / 60); green = 255; blue = 0; break;
 8000792:	68fa      	ldr	r2, [r7, #12]
 8000794:	4613      	mov	r3, r2
 8000796:	021b      	lsls	r3, r3, #8
 8000798:	1a9b      	subs	r3, r3, r2
 800079a:	4a43      	ldr	r2, [pc, #268]	@ (80008a8 <Rainbow_Effect+0x1c8>)
 800079c:	fb82 1203 	smull	r1, r2, r2, r3
 80007a0:	441a      	add	r2, r3
 80007a2:	1152      	asrs	r2, r2, #5
 80007a4:	17db      	asrs	r3, r3, #31
 80007a6:	1a9b      	subs	r3, r3, r2
 80007a8:	33ff      	adds	r3, #255	@ 0xff
 80007aa:	623b      	str	r3, [r7, #32]
 80007ac:	23ff      	movs	r3, #255	@ 0xff
 80007ae:	61fb      	str	r3, [r7, #28]
 80007b0:	2300      	movs	r3, #0
 80007b2:	61bb      	str	r3, [r7, #24]
 80007b4:	e04c      	b.n	8000850 <Rainbow_Effect+0x170>
				case 2: red = 0; green = 255; blue = (remainder * 255) / 60; break;
 80007b6:	2300      	movs	r3, #0
 80007b8:	623b      	str	r3, [r7, #32]
 80007ba:	23ff      	movs	r3, #255	@ 0xff
 80007bc:	61fb      	str	r3, [r7, #28]
 80007be:	68fa      	ldr	r2, [r7, #12]
 80007c0:	4613      	mov	r3, r2
 80007c2:	021b      	lsls	r3, r3, #8
 80007c4:	1a9b      	subs	r3, r3, r2
 80007c6:	4a38      	ldr	r2, [pc, #224]	@ (80008a8 <Rainbow_Effect+0x1c8>)
 80007c8:	fb82 1203 	smull	r1, r2, r2, r3
 80007cc:	441a      	add	r2, r3
 80007ce:	1152      	asrs	r2, r2, #5
 80007d0:	17db      	asrs	r3, r3, #31
 80007d2:	1ad3      	subs	r3, r2, r3
 80007d4:	61bb      	str	r3, [r7, #24]
 80007d6:	e03b      	b.n	8000850 <Rainbow_Effect+0x170>
				case 3: red = 0; green = 255 - ((remainder * 255) / 60); blue = 255; break;
 80007d8:	2300      	movs	r3, #0
 80007da:	623b      	str	r3, [r7, #32]
 80007dc:	68fa      	ldr	r2, [r7, #12]
 80007de:	4613      	mov	r3, r2
 80007e0:	021b      	lsls	r3, r3, #8
 80007e2:	1a9b      	subs	r3, r3, r2
 80007e4:	4a30      	ldr	r2, [pc, #192]	@ (80008a8 <Rainbow_Effect+0x1c8>)
 80007e6:	fb82 1203 	smull	r1, r2, r2, r3
 80007ea:	441a      	add	r2, r3
 80007ec:	1152      	asrs	r2, r2, #5
 80007ee:	17db      	asrs	r3, r3, #31
 80007f0:	1a9b      	subs	r3, r3, r2
 80007f2:	33ff      	adds	r3, #255	@ 0xff
 80007f4:	61fb      	str	r3, [r7, #28]
 80007f6:	23ff      	movs	r3, #255	@ 0xff
 80007f8:	61bb      	str	r3, [r7, #24]
 80007fa:	e029      	b.n	8000850 <Rainbow_Effect+0x170>
				case 4: red = (remainder * 255) / 60; green = 0; blue = 255; break;
 80007fc:	68fa      	ldr	r2, [r7, #12]
 80007fe:	4613      	mov	r3, r2
 8000800:	021b      	lsls	r3, r3, #8
 8000802:	1a9b      	subs	r3, r3, r2
 8000804:	4a28      	ldr	r2, [pc, #160]	@ (80008a8 <Rainbow_Effect+0x1c8>)
 8000806:	fb82 1203 	smull	r1, r2, r2, r3
 800080a:	441a      	add	r2, r3
 800080c:	1152      	asrs	r2, r2, #5
 800080e:	17db      	asrs	r3, r3, #31
 8000810:	1ad3      	subs	r3, r2, r3
 8000812:	623b      	str	r3, [r7, #32]
 8000814:	2300      	movs	r3, #0
 8000816:	61fb      	str	r3, [r7, #28]
 8000818:	23ff      	movs	r3, #255	@ 0xff
 800081a:	61bb      	str	r3, [r7, #24]
 800081c:	e018      	b.n	8000850 <Rainbow_Effect+0x170>
				case 5: red = 255; green = 0; blue = 255 - ((remainder * 255) / 60); break;
 800081e:	23ff      	movs	r3, #255	@ 0xff
 8000820:	623b      	str	r3, [r7, #32]
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]
 8000826:	68fa      	ldr	r2, [r7, #12]
 8000828:	4613      	mov	r3, r2
 800082a:	021b      	lsls	r3, r3, #8
 800082c:	1a9b      	subs	r3, r3, r2
 800082e:	4a1e      	ldr	r2, [pc, #120]	@ (80008a8 <Rainbow_Effect+0x1c8>)
 8000830:	fb82 1203 	smull	r1, r2, r2, r3
 8000834:	441a      	add	r2, r3
 8000836:	1152      	asrs	r2, r2, #5
 8000838:	17db      	asrs	r3, r3, #31
 800083a:	1a9b      	subs	r3, r3, r2
 800083c:	33ff      	adds	r3, #255	@ 0xff
 800083e:	61bb      	str	r3, [r7, #24]
 8000840:	e006      	b.n	8000850 <Rainbow_Effect+0x170>
				default: red = 255; green = 0; blue = 0; break;
 8000842:	23ff      	movs	r3, #255	@ 0xff
 8000844:	623b      	str	r3, [r7, #32]
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
 800084a:	2300      	movs	r3, #0
 800084c:	61bb      	str	r3, [r7, #24]
 800084e:	bf00      	nop
			}

			//Set_All_LEDs_Same_Color(red, green, blue);

			Set_LED(led_num, red, green, blue);
 8000850:	69bb      	ldr	r3, [r7, #24]
 8000852:	69fa      	ldr	r2, [r7, #28]
 8000854:	6a39      	ldr	r1, [r7, #32]
 8000856:	6978      	ldr	r0, [r7, #20]
 8000858:	f7ff fe28 	bl	80004ac <Set_LED>
			HAL_Delay(1);
 800085c:	2001      	movs	r0, #1
 800085e:	f000 fc39 	bl	80010d4 <HAL_Delay>
		for (int led_num = 0; led_num < MAX_LED; ++led_num) {
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	3301      	adds	r3, #1
 8000866:	617b      	str	r3, [r7, #20]
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	2b3b      	cmp	r3, #59	@ 0x3b
 800086c:	f77f af4c 	ble.w	8000708 <Rainbow_Effect+0x28>
		}

		Set_Brightness(current_brightness);
 8000870:	4b0e      	ldr	r3, [pc, #56]	@ (80008ac <Rainbow_Effect+0x1cc>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff fe5f 	bl	8000538 <Set_Brightness>
		WS2812_Send();
 800087a:	f7ff feab 	bl	80005d4 <WS2812_Send>
		HAL_Delay(LED_DELAY/speed);
 800087e:	220a      	movs	r2, #10
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	fb92 f3f3 	sdiv	r3, r2, r3
 8000886:	4618      	mov	r0, r3
 8000888:	f000 fc24 	bl	80010d4 <HAL_Delay>
	for (int hue = 0; hue < 360; hue += 36) {
 800088c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800088e:	3324      	adds	r3, #36	@ 0x24
 8000890:	627b      	str	r3, [r7, #36]	@ 0x24
 8000892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000894:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8000898:	f6ff af33 	blt.w	8000702 <Rainbow_Effect+0x22>
	}
}
 800089c:	bf00      	nop
 800089e:	bf00      	nop
 80008a0:	3728      	adds	r7, #40	@ 0x28
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	88888889 	.word	0x88888889
 80008ac:	2000007c 	.word	0x2000007c

080008b0 <Pixel_Run_Effect>:

void Pixel_Run_Effect (int speed, int red, int green, int blue) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	60f8      	str	r0, [r7, #12]
 80008b8:	60b9      	str	r1, [r7, #8]
 80008ba:	607a      	str	r2, [r7, #4]
 80008bc:	603b      	str	r3, [r7, #0]
	if (speed > 10) speed = 10;
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	2b0a      	cmp	r3, #10
 80008c2:	dd01      	ble.n	80008c8 <Pixel_Run_Effect+0x18>
 80008c4:	230a      	movs	r3, #10
 80008c6:	60fb      	str	r3, [r7, #12]
	if (speed < 1)	speed = 1;
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	dc01      	bgt.n	80008d2 <Pixel_Run_Effect+0x22>
 80008ce:	2301      	movs	r3, #1
 80008d0:	60fb      	str	r3, [r7, #12]

	Set_LED(MAX_LED-1, 0, 0 , 0);
 80008d2:	2300      	movs	r3, #0
 80008d4:	2200      	movs	r2, #0
 80008d6:	2100      	movs	r1, #0
 80008d8:	203b      	movs	r0, #59	@ 0x3b
 80008da:	f7ff fde7 	bl	80004ac <Set_LED>
	for (int i = 1; i < MAX_LED; ++i) {
 80008de:	2301      	movs	r3, #1
 80008e0:	617b      	str	r3, [r7, #20]
 80008e2:	e01d      	b.n	8000920 <Pixel_Run_Effect+0x70>
		Set_LED(i, red, green, blue);
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	687a      	ldr	r2, [r7, #4]
 80008e8:	68b9      	ldr	r1, [r7, #8]
 80008ea:	6978      	ldr	r0, [r7, #20]
 80008ec:	f7ff fdde 	bl	80004ac <Set_LED>
		Set_LED(i-1, 0, 0 , 0);
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	1e58      	subs	r0, r3, #1
 80008f4:	2300      	movs	r3, #0
 80008f6:	2200      	movs	r2, #0
 80008f8:	2100      	movs	r1, #0
 80008fa:	f7ff fdd7 	bl	80004ac <Set_LED>
		Set_Brightness(current_brightness);
 80008fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000930 <Pixel_Run_Effect+0x80>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff fe18 	bl	8000538 <Set_Brightness>
		WS2812_Send();
 8000908:	f7ff fe64 	bl	80005d4 <WS2812_Send>
		HAL_Delay((LED_DELAY*3)/speed);
 800090c:	221e      	movs	r2, #30
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	fb92 f3f3 	sdiv	r3, r2, r3
 8000914:	4618      	mov	r0, r3
 8000916:	f000 fbdd 	bl	80010d4 <HAL_Delay>
	for (int i = 1; i < MAX_LED; ++i) {
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	3301      	adds	r3, #1
 800091e:	617b      	str	r3, [r7, #20]
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	2b3b      	cmp	r3, #59	@ 0x3b
 8000924:	ddde      	ble.n	80008e4 <Pixel_Run_Effect+0x34>
	}
}
 8000926:	bf00      	nop
 8000928:	bf00      	nop
 800092a:	3718      	adds	r7, #24
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	2000007c 	.word	0x2000007c

08000934 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000934:	b5b0      	push	{r4, r5, r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800093a:	f000 fb69 	bl	8001010 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800093e:	f000 f8ff 	bl	8000b40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000942:	f000 fa01 	bl	8000d48 <MX_GPIO_Init>
  MX_DMA_Init();
 8000946:	f000 f9e1 	bl	8000d0c <MX_DMA_Init>
  MX_TIM1_Init();
 800094a:	f000 f93f 	bl	8000bcc <MX_TIM1_Init>
  
  /* USER CODE BEGIN 2 */
  
  // Initialize keypad
  Keypad_Init();
 800094e:	f7ff fc11 	bl	8000174 <Keypad_Init>
  
  // Turn off all LEDs initially
  Set_All_LEDs_Same_Color(0, 0, 0);
 8000952:	2200      	movs	r2, #0
 8000954:	2100      	movs	r1, #0
 8000956:	2000      	movs	r0, #0
 8000958:	f7ff fdd4 	bl	8000504 <Set_All_LEDs_Same_Color>
  Set_Brightness(0);
 800095c:	2000      	movs	r0, #0
 800095e:	f7ff fdeb 	bl	8000538 <Set_Brightness>
  WS2812_Send();
 8000962:	f7ff fe37 	bl	80005d4 <WS2812_Send>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // Check for keypad input
    char key = Keypad_Read();
 8000966:	f7ff fc71 	bl	800024c <Keypad_Read>
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
    if(key != 0) {
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d003      	beq.n	800097c <main+0x48>
        Process_Keypad_Input(key);
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff fce2 	bl	8000340 <Process_Keypad_Input>
    }
    
    // Run current effect based on state
    switch(current_effect) {
 800097c:	4b6b      	ldr	r3, [pc, #428]	@ (8000b2c <main+0x1f8>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2b03      	cmp	r3, #3
 8000982:	f200 80c3 	bhi.w	8000b0c <main+0x1d8>
 8000986:	a201      	add	r2, pc, #4	@ (adr r2, 800098c <main+0x58>)
 8000988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800098c:	0800099d 	.word	0x0800099d
 8000990:	08000a3d 	.word	0x08000a3d
 8000994:	08000a49 	.word	0x08000a49
 8000998:	08000a8f 	.word	0x08000a8f
        case EFFECT_FADE:
            Set_All_LEDs_Same_Color(color_values[current_color][0], 
 800099c:	4b64      	ldr	r3, [pc, #400]	@ (8000b30 <main+0x1fc>)
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	4964      	ldr	r1, [pc, #400]	@ (8000b34 <main+0x200>)
 80009a2:	4613      	mov	r3, r2
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	4413      	add	r3, r2
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	440b      	add	r3, r1
 80009ac:	6818      	ldr	r0, [r3, #0]
 80009ae:	4b60      	ldr	r3, [pc, #384]	@ (8000b30 <main+0x1fc>)
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	4960      	ldr	r1, [pc, #384]	@ (8000b34 <main+0x200>)
 80009b4:	4613      	mov	r3, r2
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	4413      	add	r3, r2
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	440b      	add	r3, r1
 80009be:	3304      	adds	r3, #4
 80009c0:	6819      	ldr	r1, [r3, #0]
 80009c2:	4b5b      	ldr	r3, [pc, #364]	@ (8000b30 <main+0x1fc>)
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	4c5b      	ldr	r4, [pc, #364]	@ (8000b34 <main+0x200>)
 80009c8:	4613      	mov	r3, r2
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	4413      	add	r3, r2
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	4423      	add	r3, r4
 80009d2:	3308      	adds	r3, #8
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	461a      	mov	r2, r3
 80009d8:	f7ff fd94 	bl	8000504 <Set_All_LEDs_Same_Color>
                                  color_values[current_color][1], 
                                  color_values[current_color][2]);
            // Apply fade with current brightness
            for (int brightness = 0; brightness <= current_brightness; brightness += 2) {
 80009dc:	2300      	movs	r3, #0
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	e00f      	b.n	8000a02 <main+0xce>
                Set_Brightness(brightness);
 80009e2:	68f8      	ldr	r0, [r7, #12]
 80009e4:	f7ff fda8 	bl	8000538 <Set_Brightness>
                WS2812_Send();
 80009e8:	f7ff fdf4 	bl	80005d4 <WS2812_Send>
                HAL_Delay((LED_DELAY * 5) / current_speed);
 80009ec:	4b52      	ldr	r3, [pc, #328]	@ (8000b38 <main+0x204>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2232      	movs	r2, #50	@ 0x32
 80009f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80009f6:	4618      	mov	r0, r3
 80009f8:	f000 fb6c 	bl	80010d4 <HAL_Delay>
            for (int brightness = 0; brightness <= current_brightness; brightness += 2) {
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	3302      	adds	r3, #2
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	4b4e      	ldr	r3, [pc, #312]	@ (8000b3c <main+0x208>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	68fa      	ldr	r2, [r7, #12]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	ddea      	ble.n	80009e2 <main+0xae>
            }
            for (int brightness = current_brightness; brightness >= 0; brightness -= 2) {
 8000a0c:	4b4b      	ldr	r3, [pc, #300]	@ (8000b3c <main+0x208>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	e00f      	b.n	8000a34 <main+0x100>
                Set_Brightness(brightness);
 8000a14:	68b8      	ldr	r0, [r7, #8]
 8000a16:	f7ff fd8f 	bl	8000538 <Set_Brightness>
                WS2812_Send();
 8000a1a:	f7ff fddb 	bl	80005d4 <WS2812_Send>
                HAL_Delay((LED_DELAY * 5) / current_speed);
 8000a1e:	4b46      	ldr	r3, [pc, #280]	@ (8000b38 <main+0x204>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2232      	movs	r2, #50	@ 0x32
 8000a24:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f000 fb53 	bl	80010d4 <HAL_Delay>
            for (int brightness = current_brightness; brightness >= 0; brightness -= 2) {
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	3b02      	subs	r3, #2
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	daec      	bge.n	8000a14 <main+0xe0>
            }
            break;
 8000a3a:	e075      	b.n	8000b28 <main+0x1f4>
            
        case EFFECT_RAINBOW:
            Rainbow_Effect(current_speed);
 8000a3c:	4b3e      	ldr	r3, [pc, #248]	@ (8000b38 <main+0x204>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff fe4d 	bl	80006e0 <Rainbow_Effect>
            // Rainbow effect handles its own brightness, but we can limit it
            break;
 8000a46:	e06f      	b.n	8000b28 <main+0x1f4>
            
        case EFFECT_RUN:
            Pixel_Run_Effect(current_speed, color_values[current_color][0], 
 8000a48:	4b3b      	ldr	r3, [pc, #236]	@ (8000b38 <main+0x204>)
 8000a4a:	6818      	ldr	r0, [r3, #0]
 8000a4c:	4b38      	ldr	r3, [pc, #224]	@ (8000b30 <main+0x1fc>)
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	4938      	ldr	r1, [pc, #224]	@ (8000b34 <main+0x200>)
 8000a52:	4613      	mov	r3, r2
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	4413      	add	r3, r2
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	440b      	add	r3, r1
 8000a5c:	6819      	ldr	r1, [r3, #0]
 8000a5e:	4b34      	ldr	r3, [pc, #208]	@ (8000b30 <main+0x1fc>)
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	4c34      	ldr	r4, [pc, #208]	@ (8000b34 <main+0x200>)
 8000a64:	4613      	mov	r3, r2
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	4413      	add	r3, r2
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	4423      	add	r3, r4
 8000a6e:	3304      	adds	r3, #4
 8000a70:	681c      	ldr	r4, [r3, #0]
 8000a72:	4b2f      	ldr	r3, [pc, #188]	@ (8000b30 <main+0x1fc>)
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	4d2f      	ldr	r5, [pc, #188]	@ (8000b34 <main+0x200>)
 8000a78:	4613      	mov	r3, r2
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	4413      	add	r3, r2
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	442b      	add	r3, r5
 8000a82:	3308      	adds	r3, #8
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4622      	mov	r2, r4
 8000a88:	f7ff ff12 	bl	80008b0 <Pixel_Run_Effect>
                           color_values[current_color][1], 
                           color_values[current_color][2]);
            break;
 8000a8c:	e04c      	b.n	8000b28 <main+0x1f4>
            
        case EFFECT_FLASHING:
            Set_All_LEDs_Same_Color(color_values[current_color][0], 
 8000a8e:	4b28      	ldr	r3, [pc, #160]	@ (8000b30 <main+0x1fc>)
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	4928      	ldr	r1, [pc, #160]	@ (8000b34 <main+0x200>)
 8000a94:	4613      	mov	r3, r2
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	4413      	add	r3, r2
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	440b      	add	r3, r1
 8000a9e:	6818      	ldr	r0, [r3, #0]
 8000aa0:	4b23      	ldr	r3, [pc, #140]	@ (8000b30 <main+0x1fc>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	4923      	ldr	r1, [pc, #140]	@ (8000b34 <main+0x200>)
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	4413      	add	r3, r2
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	440b      	add	r3, r1
 8000ab0:	3304      	adds	r3, #4
 8000ab2:	6819      	ldr	r1, [r3, #0]
 8000ab4:	4b1e      	ldr	r3, [pc, #120]	@ (8000b30 <main+0x1fc>)
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	4c1e      	ldr	r4, [pc, #120]	@ (8000b34 <main+0x200>)
 8000aba:	4613      	mov	r3, r2
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	4413      	add	r3, r2
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	4423      	add	r3, r4
 8000ac4:	3308      	adds	r3, #8
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	f7ff fd1b 	bl	8000504 <Set_All_LEDs_Same_Color>
                                  color_values[current_color][1], 
                                  color_values[current_color][2]);
            Set_Brightness(current_brightness);
 8000ace:	4b1b      	ldr	r3, [pc, #108]	@ (8000b3c <main+0x208>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff fd30 	bl	8000538 <Set_Brightness>
            WS2812_Send();
 8000ad8:	f7ff fd7c 	bl	80005d4 <WS2812_Send>
            HAL_Delay((LED_DELAY * 30) / current_speed);
 8000adc:	4b16      	ldr	r3, [pc, #88]	@ (8000b38 <main+0x204>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000ae4:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f000 faf3 	bl	80010d4 <HAL_Delay>
            Set_Brightness(0);
 8000aee:	2000      	movs	r0, #0
 8000af0:	f7ff fd22 	bl	8000538 <Set_Brightness>
            WS2812_Send();
 8000af4:	f7ff fd6e 	bl	80005d4 <WS2812_Send>
            HAL_Delay((LED_DELAY * 30) / current_speed);
 8000af8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b38 <main+0x204>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000b00:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b04:	4618      	mov	r0, r3
 8000b06:	f000 fae5 	bl	80010d4 <HAL_Delay>
            break;
 8000b0a:	e00d      	b.n	8000b28 <main+0x1f4>
            
        case EFFECT_OFF:
        default:
            Set_All_LEDs_Same_Color(0, 0, 0);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2100      	movs	r1, #0
 8000b10:	2000      	movs	r0, #0
 8000b12:	f7ff fcf7 	bl	8000504 <Set_All_LEDs_Same_Color>
            Set_Brightness(0);
 8000b16:	2000      	movs	r0, #0
 8000b18:	f7ff fd0e 	bl	8000538 <Set_Brightness>
            WS2812_Send();
 8000b1c:	f7ff fd5a 	bl	80005d4 <WS2812_Send>
            HAL_Delay(100);
 8000b20:	2064      	movs	r0, #100	@ 0x64
 8000b22:	f000 fad7 	bl	80010d4 <HAL_Delay>
            break;
 8000b26:	bf00      	nop
  {
 8000b28:	e71d      	b.n	8000966 <main+0x32>
 8000b2a:	bf00      	nop
 8000b2c:	20000070 	.word	0x20000070
 8000b30:	20000318 	.word	0x20000318
 8000b34:	20000000 	.word	0x20000000
 8000b38:	20000078 	.word	0x20000078
 8000b3c:	2000007c 	.word	0x2000007c

08000b40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b090      	sub	sp, #64	@ 0x40
 8000b44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b46:	f107 0318 	add.w	r3, r7, #24
 8000b4a:	2228      	movs	r2, #40	@ 0x28
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f002 fcc5 	bl	80034de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
 8000b60:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b62:	2301      	movs	r3, #1
 8000b64:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b66:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b6a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b70:	2301      	movs	r3, #1
 8000b72:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b74:	2302      	movs	r3, #2
 8000b76:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b78:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b7c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b7e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b84:	f107 0318 	add.w	r3, r7, #24
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f000 ffef 	bl	8001b6c <HAL_RCC_OscConfig>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000b94:	f000 f924 	bl	8000de0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b98:	230f      	movs	r3, #15
 8000b9a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ba4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ba8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000baa:	2300      	movs	r3, #0
 8000bac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bae:	1d3b      	adds	r3, r7, #4
 8000bb0:	2102      	movs	r1, #2
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f001 fa5c 	bl	8002070 <HAL_RCC_ClockConfig>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000bbe:	f000 f90f 	bl	8000de0 <Error_Handler>
  }
}
 8000bc2:	bf00      	nop
 8000bc4:	3740      	adds	r7, #64	@ 0x40
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b096      	sub	sp, #88	@ 0x58
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bd2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]
 8000bdc:	609a      	str	r2, [r3, #8]
 8000bde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	60da      	str	r2, [r3, #12]
 8000bf8:	611a      	str	r2, [r3, #16]
 8000bfa:	615a      	str	r2, [r3, #20]
 8000bfc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	2220      	movs	r2, #32
 8000c02:	2100      	movs	r1, #0
 8000c04:	4618      	mov	r0, r3
 8000c06:	f002 fc6a 	bl	80034de <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c0a:	4b3e      	ldr	r3, [pc, #248]	@ (8000d04 <MX_TIM1_Init+0x138>)
 8000c0c:	4a3e      	ldr	r2, [pc, #248]	@ (8000d08 <MX_TIM1_Init+0x13c>)
 8000c0e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c10:	4b3c      	ldr	r3, [pc, #240]	@ (8000d04 <MX_TIM1_Init+0x138>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c16:	4b3b      	ldr	r3, [pc, #236]	@ (8000d04 <MX_TIM1_Init+0x138>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 8000c1c:	4b39      	ldr	r3, [pc, #228]	@ (8000d04 <MX_TIM1_Init+0x138>)
 8000c1e:	2259      	movs	r2, #89	@ 0x59
 8000c20:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c22:	4b38      	ldr	r3, [pc, #224]	@ (8000d04 <MX_TIM1_Init+0x138>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c28:	4b36      	ldr	r3, [pc, #216]	@ (8000d04 <MX_TIM1_Init+0x138>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c2e:	4b35      	ldr	r3, [pc, #212]	@ (8000d04 <MX_TIM1_Init+0x138>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c34:	4833      	ldr	r0, [pc, #204]	@ (8000d04 <MX_TIM1_Init+0x138>)
 8000c36:	f001 fb77 	bl	8002328 <HAL_TIM_Base_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000c40:	f000 f8ce 	bl	8000de0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c48:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c4a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000c4e:	4619      	mov	r1, r3
 8000c50:	482c      	ldr	r0, [pc, #176]	@ (8000d04 <MX_TIM1_Init+0x138>)
 8000c52:	f001 ff3b 	bl	8002acc <HAL_TIM_ConfigClockSource>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000c5c:	f000 f8c0 	bl	8000de0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c60:	4828      	ldr	r0, [pc, #160]	@ (8000d04 <MX_TIM1_Init+0x138>)
 8000c62:	f001 fbb0 	bl	80023c6 <HAL_TIM_PWM_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000c6c:	f000 f8b8 	bl	8000de0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c70:	2300      	movs	r3, #0
 8000c72:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c74:	2300      	movs	r3, #0
 8000c76:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c78:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4821      	ldr	r0, [pc, #132]	@ (8000d04 <MX_TIM1_Init+0x138>)
 8000c80:	f002 fb7e 	bl	8003380 <HAL_TIMEx_MasterConfigSynchronization>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000c8a:	f000 f8a9 	bl	8000de0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c8e:	2360      	movs	r3, #96	@ 0x60
 8000c90:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c96:	2300      	movs	r3, #0
 8000c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000caa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cae:	2200      	movs	r2, #0
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4814      	ldr	r0, [pc, #80]	@ (8000d04 <MX_TIM1_Init+0x138>)
 8000cb4:	f001 fe48 	bl	8002948 <HAL_TIM_PWM_ConfigChannel>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000cbe:	f000 f88f 	bl	8000de0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cd6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cda:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ce0:	1d3b      	adds	r3, r7, #4
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4807      	ldr	r0, [pc, #28]	@ (8000d04 <MX_TIM1_Init+0x138>)
 8000ce6:	f002 fba9 	bl	800343c <HAL_TIMEx_ConfigBreakDeadTime>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000cf0:	f000 f876 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000cf4:	4803      	ldr	r0, [pc, #12]	@ (8000d04 <MX_TIM1_Init+0x138>)
 8000cf6:	f000 f8f5 	bl	8000ee4 <HAL_TIM_MspPostInit>

}
 8000cfa:	bf00      	nop
 8000cfc:	3758      	adds	r7, #88	@ 0x58
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	200000a8 	.word	0x200000a8
 8000d08:	40012c00 	.word	0x40012c00

08000d0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d12:	4b0c      	ldr	r3, [pc, #48]	@ (8000d44 <MX_DMA_Init+0x38>)
 8000d14:	695b      	ldr	r3, [r3, #20]
 8000d16:	4a0b      	ldr	r2, [pc, #44]	@ (8000d44 <MX_DMA_Init+0x38>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	6153      	str	r3, [r2, #20]
 8000d1e:	4b09      	ldr	r3, [pc, #36]	@ (8000d44 <MX_DMA_Init+0x38>)
 8000d20:	695b      	ldr	r3, [r3, #20]
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	200c      	movs	r0, #12
 8000d30:	f000 facb 	bl	80012ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000d34:	200c      	movs	r0, #12
 8000d36:	f000 fae4 	bl	8001302 <HAL_NVIC_EnableIRQ>

}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40021000 	.word	0x40021000

08000d48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b088      	sub	sp, #32
 8000d4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4e:	f107 0310 	add.w	r3, r7, #16
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd8 <MX_GPIO_Init+0x90>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	4a1d      	ldr	r2, [pc, #116]	@ (8000dd8 <MX_GPIO_Init+0x90>)
 8000d62:	f043 0310 	orr.w	r3, r3, #16
 8000d66:	6193      	str	r3, [r2, #24]
 8000d68:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd8 <MX_GPIO_Init+0x90>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	f003 0310 	and.w	r3, r3, #16
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d74:	4b18      	ldr	r3, [pc, #96]	@ (8000dd8 <MX_GPIO_Init+0x90>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	4a17      	ldr	r2, [pc, #92]	@ (8000dd8 <MX_GPIO_Init+0x90>)
 8000d7a:	f043 0320 	orr.w	r3, r3, #32
 8000d7e:	6193      	str	r3, [r2, #24]
 8000d80:	4b15      	ldr	r3, [pc, #84]	@ (8000dd8 <MX_GPIO_Init+0x90>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	f003 0320 	and.w	r3, r3, #32
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8c:	4b12      	ldr	r3, [pc, #72]	@ (8000dd8 <MX_GPIO_Init+0x90>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	4a11      	ldr	r2, [pc, #68]	@ (8000dd8 <MX_GPIO_Init+0x90>)
 8000d92:	f043 0304 	orr.w	r3, r3, #4
 8000d96:	6193      	str	r3, [r2, #24]
 8000d98:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd8 <MX_GPIO_Init+0x90>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	f003 0304 	and.w	r3, r3, #4
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000da4:	2200      	movs	r2, #0
 8000da6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000daa:	480c      	ldr	r0, [pc, #48]	@ (8000ddc <MX_GPIO_Init+0x94>)
 8000dac:	f000 fec5 	bl	8001b3a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000db0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000db4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db6:	2301      	movs	r3, #1
 8000db8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc2:	f107 0310 	add.w	r3, r7, #16
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4804      	ldr	r0, [pc, #16]	@ (8000ddc <MX_GPIO_Init+0x94>)
 8000dca:	f000 fd1b 	bl	8001804 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000dce:	bf00      	nop
 8000dd0:	3720      	adds	r7, #32
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	40011000 	.word	0x40011000

08000de0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de4:	b672      	cpsid	i
}
 8000de6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de8:	bf00      	nop
 8000dea:	e7fd      	b.n	8000de8 <Error_Handler+0x8>

08000dec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000df2:	4b15      	ldr	r3, [pc, #84]	@ (8000e48 <HAL_MspInit+0x5c>)
 8000df4:	699b      	ldr	r3, [r3, #24]
 8000df6:	4a14      	ldr	r2, [pc, #80]	@ (8000e48 <HAL_MspInit+0x5c>)
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	6193      	str	r3, [r2, #24]
 8000dfe:	4b12      	ldr	r3, [pc, #72]	@ (8000e48 <HAL_MspInit+0x5c>)
 8000e00:	699b      	ldr	r3, [r3, #24]
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	60bb      	str	r3, [r7, #8]
 8000e08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e48 <HAL_MspInit+0x5c>)
 8000e0c:	69db      	ldr	r3, [r3, #28]
 8000e0e:	4a0e      	ldr	r2, [pc, #56]	@ (8000e48 <HAL_MspInit+0x5c>)
 8000e10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e14:	61d3      	str	r3, [r2, #28]
 8000e16:	4b0c      	ldr	r3, [pc, #48]	@ (8000e48 <HAL_MspInit+0x5c>)
 8000e18:	69db      	ldr	r3, [r3, #28]
 8000e1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e1e:	607b      	str	r3, [r7, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e22:	4b0a      	ldr	r3, [pc, #40]	@ (8000e4c <HAL_MspInit+0x60>)
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	4a04      	ldr	r2, [pc, #16]	@ (8000e4c <HAL_MspInit+0x60>)
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	3714      	adds	r7, #20
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	40010000 	.word	0x40010000

08000e50 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ed4 <HAL_TIM_Base_MspInit+0x84>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d133      	bne.n	8000eca <HAL_TIM_Base_MspInit+0x7a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e62:	4b1d      	ldr	r3, [pc, #116]	@ (8000ed8 <HAL_TIM_Base_MspInit+0x88>)
 8000e64:	699b      	ldr	r3, [r3, #24]
 8000e66:	4a1c      	ldr	r2, [pc, #112]	@ (8000ed8 <HAL_TIM_Base_MspInit+0x88>)
 8000e68:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e6c:	6193      	str	r3, [r2, #24]
 8000e6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed8 <HAL_TIM_Base_MspInit+0x88>)
 8000e70:	699b      	ldr	r3, [r3, #24]
 8000e72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8000e7a:	4b18      	ldr	r3, [pc, #96]	@ (8000edc <HAL_TIM_Base_MspInit+0x8c>)
 8000e7c:	4a18      	ldr	r2, [pc, #96]	@ (8000ee0 <HAL_TIM_Base_MspInit+0x90>)
 8000e7e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e80:	4b16      	ldr	r3, [pc, #88]	@ (8000edc <HAL_TIM_Base_MspInit+0x8c>)
 8000e82:	2210      	movs	r2, #16
 8000e84:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e86:	4b15      	ldr	r3, [pc, #84]	@ (8000edc <HAL_TIM_Base_MspInit+0x8c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000e8c:	4b13      	ldr	r3, [pc, #76]	@ (8000edc <HAL_TIM_Base_MspInit+0x8c>)
 8000e8e:	2280      	movs	r2, #128	@ 0x80
 8000e90:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e92:	4b12      	ldr	r3, [pc, #72]	@ (8000edc <HAL_TIM_Base_MspInit+0x8c>)
 8000e94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e98:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e9a:	4b10      	ldr	r3, [pc, #64]	@ (8000edc <HAL_TIM_Base_MspInit+0x8c>)
 8000e9c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ea0:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8000edc <HAL_TIM_Base_MspInit+0x8c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8000edc <HAL_TIM_Base_MspInit+0x8c>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000eae:	480b      	ldr	r0, [pc, #44]	@ (8000edc <HAL_TIM_Base_MspInit+0x8c>)
 8000eb0:	f000 fa42 	bl	8001338 <HAL_DMA_Init>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8000eba:	f7ff ff91 	bl	8000de0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a06      	ldr	r2, [pc, #24]	@ (8000edc <HAL_TIM_Base_MspInit+0x8c>)
 8000ec2:	625a      	str	r2, [r3, #36]	@ 0x24
 8000ec4:	4a05      	ldr	r2, [pc, #20]	@ (8000edc <HAL_TIM_Base_MspInit+0x8c>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000eca:	bf00      	nop
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40012c00 	.word	0x40012c00
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	200000f0 	.word	0x200000f0
 8000ee0:	4002001c 	.word	0x4002001c

08000ee4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b088      	sub	sp, #32
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 0310 	add.w	r3, r7, #16
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a10      	ldr	r2, [pc, #64]	@ (8000f40 <HAL_TIM_MspPostInit+0x5c>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d118      	bne.n	8000f36 <HAL_TIM_MspPostInit+0x52>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f04:	4b0f      	ldr	r3, [pc, #60]	@ (8000f44 <HAL_TIM_MspPostInit+0x60>)
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	4a0e      	ldr	r2, [pc, #56]	@ (8000f44 <HAL_TIM_MspPostInit+0x60>)
 8000f0a:	f043 0304 	orr.w	r3, r3, #4
 8000f0e:	6193      	str	r3, [r2, #24]
 8000f10:	4b0c      	ldr	r3, [pc, #48]	@ (8000f44 <HAL_TIM_MspPostInit+0x60>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	f003 0304 	and.w	r3, r3, #4
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f22:	2302      	movs	r3, #2
 8000f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f26:	2302      	movs	r3, #2
 8000f28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2a:	f107 0310 	add.w	r3, r7, #16
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4805      	ldr	r0, [pc, #20]	@ (8000f48 <HAL_TIM_MspPostInit+0x64>)
 8000f32:	f000 fc67 	bl	8001804 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f36:	bf00      	nop
 8000f38:	3720      	adds	r7, #32
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40012c00 	.word	0x40012c00
 8000f44:	40021000 	.word	0x40021000
 8000f48:	40010800 	.word	0x40010800

08000f4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <NMI_Handler+0x4>

08000f54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <HardFault_Handler+0x4>

08000f5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <MemManage_Handler+0x4>

08000f64 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <BusFault_Handler+0x4>

08000f6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <UsageFault_Handler+0x4>

08000f74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr

08000f80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr

08000f8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr

08000f98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f9c:	f000 f87e 	bl	800109c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000fa8:	4802      	ldr	r0, [pc, #8]	@ (8000fb4 <DMA1_Channel2_IRQHandler+0x10>)
 8000faa:	f000 faf7 	bl	800159c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	200000f0 	.word	0x200000f0

08000fb8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr

08000fc4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fc4:	f7ff fff8 	bl	8000fb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fc8:	480b      	ldr	r0, [pc, #44]	@ (8000ff8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000fca:	490c      	ldr	r1, [pc, #48]	@ (8000ffc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000fcc:	4a0c      	ldr	r2, [pc, #48]	@ (8001000 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000fce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fd0:	e002      	b.n	8000fd8 <LoopCopyDataInit>

08000fd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fd6:	3304      	adds	r3, #4

08000fd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fdc:	d3f9      	bcc.n	8000fd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fde:	4a09      	ldr	r2, [pc, #36]	@ (8001004 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000fe0:	4c09      	ldr	r4, [pc, #36]	@ (8001008 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fe2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe4:	e001      	b.n	8000fea <LoopFillZerobss>

08000fe6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fe6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe8:	3204      	adds	r2, #4

08000fea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fec:	d3fb      	bcc.n	8000fe6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fee:	f002 fa7f 	bl	80034f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ff2:	f7ff fc9f 	bl	8000934 <main>
  bx lr
 8000ff6:	4770      	bx	lr
  ldr r0, =_sdata
 8000ff8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ffc:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001000:	0800357c 	.word	0x0800357c
  ldr r2, =_sbss
 8001004:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001008:	20000ec4 	.word	0x20000ec4

0800100c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800100c:	e7fe      	b.n	800100c <ADC1_2_IRQHandler>
	...

08001010 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001014:	4b08      	ldr	r3, [pc, #32]	@ (8001038 <HAL_Init+0x28>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a07      	ldr	r2, [pc, #28]	@ (8001038 <HAL_Init+0x28>)
 800101a:	f043 0310 	orr.w	r3, r3, #16
 800101e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001020:	2003      	movs	r0, #3
 8001022:	f000 f947 	bl	80012b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001026:	200f      	movs	r0, #15
 8001028:	f000 f808 	bl	800103c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800102c:	f7ff fede 	bl	8000dec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40022000 	.word	0x40022000

0800103c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001044:	4b12      	ldr	r3, [pc, #72]	@ (8001090 <HAL_InitTick+0x54>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	4b12      	ldr	r3, [pc, #72]	@ (8001094 <HAL_InitTick+0x58>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	4619      	mov	r1, r3
 800104e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001052:	fbb3 f3f1 	udiv	r3, r3, r1
 8001056:	fbb2 f3f3 	udiv	r3, r2, r3
 800105a:	4618      	mov	r0, r3
 800105c:	f000 f95f 	bl	800131e <HAL_SYSTICK_Config>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e00e      	b.n	8001088 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2b0f      	cmp	r3, #15
 800106e:	d80a      	bhi.n	8001086 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001070:	2200      	movs	r2, #0
 8001072:	6879      	ldr	r1, [r7, #4]
 8001074:	f04f 30ff 	mov.w	r0, #4294967295
 8001078:	f000 f927 	bl	80012ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800107c:	4a06      	ldr	r2, [pc, #24]	@ (8001098 <HAL_InitTick+0x5c>)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001082:	2300      	movs	r3, #0
 8001084:	e000      	b.n	8001088 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
}
 8001088:	4618      	mov	r0, r3
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000080 	.word	0x20000080
 8001094:	20000088 	.word	0x20000088
 8001098:	20000084 	.word	0x20000084

0800109c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010a0:	4b05      	ldr	r3, [pc, #20]	@ (80010b8 <HAL_IncTick+0x1c>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	461a      	mov	r2, r3
 80010a6:	4b05      	ldr	r3, [pc, #20]	@ (80010bc <HAL_IncTick+0x20>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4413      	add	r3, r2
 80010ac:	4a03      	ldr	r2, [pc, #12]	@ (80010bc <HAL_IncTick+0x20>)
 80010ae:	6013      	str	r3, [r2, #0]
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr
 80010b8:	20000088 	.word	0x20000088
 80010bc:	20000ec0 	.word	0x20000ec0

080010c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return uwTick;
 80010c4:	4b02      	ldr	r3, [pc, #8]	@ (80010d0 <HAL_GetTick+0x10>)
 80010c6:	681b      	ldr	r3, [r3, #0]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr
 80010d0:	20000ec0 	.word	0x20000ec0

080010d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010dc:	f7ff fff0 	bl	80010c0 <HAL_GetTick>
 80010e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ec:	d005      	beq.n	80010fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001118 <HAL_Delay+0x44>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	461a      	mov	r2, r3
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4413      	add	r3, r2
 80010f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010fa:	bf00      	nop
 80010fc:	f7ff ffe0 	bl	80010c0 <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	429a      	cmp	r2, r3
 800110a:	d8f7      	bhi.n	80010fc <HAL_Delay+0x28>
  {
  }
}
 800110c:	bf00      	nop
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000088 	.word	0x20000088

0800111c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800112c:	4b0c      	ldr	r3, [pc, #48]	@ (8001160 <__NVIC_SetPriorityGrouping+0x44>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001132:	68ba      	ldr	r2, [r7, #8]
 8001134:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001138:	4013      	ands	r3, r2
 800113a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001144:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001148:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800114c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800114e:	4a04      	ldr	r2, [pc, #16]	@ (8001160 <__NVIC_SetPriorityGrouping+0x44>)
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	60d3      	str	r3, [r2, #12]
}
 8001154:	bf00      	nop
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001168:	4b04      	ldr	r3, [pc, #16]	@ (800117c <__NVIC_GetPriorityGrouping+0x18>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	0a1b      	lsrs	r3, r3, #8
 800116e:	f003 0307 	and.w	r3, r3, #7
}
 8001172:	4618      	mov	r0, r3
 8001174:	46bd      	mov	sp, r7
 8001176:	bc80      	pop	{r7}
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	2b00      	cmp	r3, #0
 8001190:	db0b      	blt.n	80011aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	f003 021f 	and.w	r2, r3, #31
 8001198:	4906      	ldr	r1, [pc, #24]	@ (80011b4 <__NVIC_EnableIRQ+0x34>)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	095b      	lsrs	r3, r3, #5
 80011a0:	2001      	movs	r0, #1
 80011a2:	fa00 f202 	lsl.w	r2, r0, r2
 80011a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr
 80011b4:	e000e100 	.word	0xe000e100

080011b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	6039      	str	r1, [r7, #0]
 80011c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	db0a      	blt.n	80011e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	490c      	ldr	r1, [pc, #48]	@ (8001204 <__NVIC_SetPriority+0x4c>)
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	0112      	lsls	r2, r2, #4
 80011d8:	b2d2      	uxtb	r2, r2
 80011da:	440b      	add	r3, r1
 80011dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e0:	e00a      	b.n	80011f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	4908      	ldr	r1, [pc, #32]	@ (8001208 <__NVIC_SetPriority+0x50>)
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	f003 030f 	and.w	r3, r3, #15
 80011ee:	3b04      	subs	r3, #4
 80011f0:	0112      	lsls	r2, r2, #4
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	440b      	add	r3, r1
 80011f6:	761a      	strb	r2, [r3, #24]
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bc80      	pop	{r7}
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e000e100 	.word	0xe000e100
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800120c:	b480      	push	{r7}
 800120e:	b089      	sub	sp, #36	@ 0x24
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	f1c3 0307 	rsb	r3, r3, #7
 8001226:	2b04      	cmp	r3, #4
 8001228:	bf28      	it	cs
 800122a:	2304      	movcs	r3, #4
 800122c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3304      	adds	r3, #4
 8001232:	2b06      	cmp	r3, #6
 8001234:	d902      	bls.n	800123c <NVIC_EncodePriority+0x30>
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3b03      	subs	r3, #3
 800123a:	e000      	b.n	800123e <NVIC_EncodePriority+0x32>
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001240:	f04f 32ff 	mov.w	r2, #4294967295
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43da      	mvns	r2, r3
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	401a      	ands	r2, r3
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001254:	f04f 31ff 	mov.w	r1, #4294967295
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	fa01 f303 	lsl.w	r3, r1, r3
 800125e:	43d9      	mvns	r1, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001264:	4313      	orrs	r3, r2
         );
}
 8001266:	4618      	mov	r0, r3
 8001268:	3724      	adds	r7, #36	@ 0x24
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr

08001270 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3b01      	subs	r3, #1
 800127c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001280:	d301      	bcc.n	8001286 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001282:	2301      	movs	r3, #1
 8001284:	e00f      	b.n	80012a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001286:	4a0a      	ldr	r2, [pc, #40]	@ (80012b0 <SysTick_Config+0x40>)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3b01      	subs	r3, #1
 800128c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800128e:	210f      	movs	r1, #15
 8001290:	f04f 30ff 	mov.w	r0, #4294967295
 8001294:	f7ff ff90 	bl	80011b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001298:	4b05      	ldr	r3, [pc, #20]	@ (80012b0 <SysTick_Config+0x40>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800129e:	4b04      	ldr	r3, [pc, #16]	@ (80012b0 <SysTick_Config+0x40>)
 80012a0:	2207      	movs	r2, #7
 80012a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	e000e010 	.word	0xe000e010

080012b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f7ff ff2d 	bl	800111c <__NVIC_SetPriorityGrouping>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b086      	sub	sp, #24
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	4603      	mov	r3, r0
 80012d2:	60b9      	str	r1, [r7, #8]
 80012d4:	607a      	str	r2, [r7, #4]
 80012d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012dc:	f7ff ff42 	bl	8001164 <__NVIC_GetPriorityGrouping>
 80012e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	68b9      	ldr	r1, [r7, #8]
 80012e6:	6978      	ldr	r0, [r7, #20]
 80012e8:	f7ff ff90 	bl	800120c <NVIC_EncodePriority>
 80012ec:	4602      	mov	r2, r0
 80012ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f2:	4611      	mov	r1, r2
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff ff5f 	bl	80011b8 <__NVIC_SetPriority>
}
 80012fa:	bf00      	nop
 80012fc:	3718      	adds	r7, #24
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b082      	sub	sp, #8
 8001306:	af00      	add	r7, sp, #0
 8001308:	4603      	mov	r3, r0
 800130a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800130c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff35 	bl	8001180 <__NVIC_EnableIRQ>
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff ffa2 	bl	8001270 <SysTick_Config>
 800132c:	4603      	mov	r3, r0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001340:	2300      	movs	r3, #0
 8001342:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e043      	b.n	80013d6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	461a      	mov	r2, r3
 8001354:	4b22      	ldr	r3, [pc, #136]	@ (80013e0 <HAL_DMA_Init+0xa8>)
 8001356:	4413      	add	r3, r2
 8001358:	4a22      	ldr	r2, [pc, #136]	@ (80013e4 <HAL_DMA_Init+0xac>)
 800135a:	fba2 2303 	umull	r2, r3, r2, r3
 800135e:	091b      	lsrs	r3, r3, #4
 8001360:	009a      	lsls	r2, r3, #2
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a1f      	ldr	r2, [pc, #124]	@ (80013e8 <HAL_DMA_Init+0xb0>)
 800136a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2202      	movs	r2, #2
 8001370:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001382:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001386:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001390:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800139c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	695b      	ldr	r3, [r3, #20]
 80013a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	69db      	ldr	r3, [r3, #28]
 80013ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80013b0:	68fa      	ldr	r2, [r7, #12]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	68fa      	ldr	r2, [r7, #12]
 80013bc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2201      	movs	r2, #1
 80013c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr
 80013e0:	bffdfff8 	.word	0xbffdfff8
 80013e4:	cccccccd 	.word	0xcccccccd
 80013e8:	40020000 	.word	0x40020000

080013ec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
 80013f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013fa:	2300      	movs	r3, #0
 80013fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d101      	bne.n	800140c <HAL_DMA_Start_IT+0x20>
 8001408:	2302      	movs	r3, #2
 800140a:	e04b      	b.n	80014a4 <HAL_DMA_Start_IT+0xb8>
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2201      	movs	r2, #1
 8001410:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800141a:	b2db      	uxtb	r3, r3
 800141c:	2b01      	cmp	r3, #1
 800141e:	d13a      	bne.n	8001496 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	2202      	movs	r2, #2
 8001424:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2200      	movs	r2, #0
 800142c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f022 0201 	bic.w	r2, r2, #1
 800143c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	68b9      	ldr	r1, [r7, #8]
 8001444:	68f8      	ldr	r0, [r7, #12]
 8001446:	f000 f9af 	bl	80017a8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800144e:	2b00      	cmp	r3, #0
 8001450:	d008      	beq.n	8001464 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f042 020e 	orr.w	r2, r2, #14
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	e00f      	b.n	8001484 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f022 0204 	bic.w	r2, r2, #4
 8001472:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f042 020a 	orr.w	r2, r2, #10
 8001482:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f042 0201 	orr.w	r2, r2, #1
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	e005      	b.n	80014a2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2200      	movs	r2, #0
 800149a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800149e:	2302      	movs	r3, #2
 80014a0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80014a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3718      	adds	r7, #24
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014b4:	2300      	movs	r3, #0
 80014b6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d005      	beq.n	80014d0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2204      	movs	r2, #4
 80014c8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	73fb      	strb	r3, [r7, #15]
 80014ce:	e051      	b.n	8001574 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f022 020e 	bic.w	r2, r2, #14
 80014de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f022 0201 	bic.w	r2, r2, #1
 80014ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a22      	ldr	r2, [pc, #136]	@ (8001580 <HAL_DMA_Abort_IT+0xd4>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d029      	beq.n	800154e <HAL_DMA_Abort_IT+0xa2>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a21      	ldr	r2, [pc, #132]	@ (8001584 <HAL_DMA_Abort_IT+0xd8>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d022      	beq.n	800154a <HAL_DMA_Abort_IT+0x9e>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a1f      	ldr	r2, [pc, #124]	@ (8001588 <HAL_DMA_Abort_IT+0xdc>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d01a      	beq.n	8001544 <HAL_DMA_Abort_IT+0x98>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a1e      	ldr	r2, [pc, #120]	@ (800158c <HAL_DMA_Abort_IT+0xe0>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d012      	beq.n	800153e <HAL_DMA_Abort_IT+0x92>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a1c      	ldr	r2, [pc, #112]	@ (8001590 <HAL_DMA_Abort_IT+0xe4>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d00a      	beq.n	8001538 <HAL_DMA_Abort_IT+0x8c>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a1b      	ldr	r2, [pc, #108]	@ (8001594 <HAL_DMA_Abort_IT+0xe8>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d102      	bne.n	8001532 <HAL_DMA_Abort_IT+0x86>
 800152c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001530:	e00e      	b.n	8001550 <HAL_DMA_Abort_IT+0xa4>
 8001532:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001536:	e00b      	b.n	8001550 <HAL_DMA_Abort_IT+0xa4>
 8001538:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800153c:	e008      	b.n	8001550 <HAL_DMA_Abort_IT+0xa4>
 800153e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001542:	e005      	b.n	8001550 <HAL_DMA_Abort_IT+0xa4>
 8001544:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001548:	e002      	b.n	8001550 <HAL_DMA_Abort_IT+0xa4>
 800154a:	2310      	movs	r3, #16
 800154c:	e000      	b.n	8001550 <HAL_DMA_Abort_IT+0xa4>
 800154e:	2301      	movs	r3, #1
 8001550:	4a11      	ldr	r2, [pc, #68]	@ (8001598 <HAL_DMA_Abort_IT+0xec>)
 8001552:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2201      	movs	r2, #1
 8001558:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001568:	2b00      	cmp	r3, #0
 800156a:	d003      	beq.n	8001574 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	4798      	blx	r3
    } 
  }
  return status;
 8001574:	7bfb      	ldrb	r3, [r7, #15]
}
 8001576:	4618      	mov	r0, r3
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40020008 	.word	0x40020008
 8001584:	4002001c 	.word	0x4002001c
 8001588:	40020030 	.word	0x40020030
 800158c:	40020044 	.word	0x40020044
 8001590:	40020058 	.word	0x40020058
 8001594:	4002006c 	.word	0x4002006c
 8001598:	40020000 	.word	0x40020000

0800159c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b8:	2204      	movs	r2, #4
 80015ba:	409a      	lsls	r2, r3
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	4013      	ands	r3, r2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d04f      	beq.n	8001664 <HAL_DMA_IRQHandler+0xc8>
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	f003 0304 	and.w	r3, r3, #4
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d04a      	beq.n	8001664 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0320 	and.w	r3, r3, #32
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d107      	bne.n	80015ec <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f022 0204 	bic.w	r2, r2, #4
 80015ea:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a66      	ldr	r2, [pc, #408]	@ (800178c <HAL_DMA_IRQHandler+0x1f0>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d029      	beq.n	800164a <HAL_DMA_IRQHandler+0xae>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a65      	ldr	r2, [pc, #404]	@ (8001790 <HAL_DMA_IRQHandler+0x1f4>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d022      	beq.n	8001646 <HAL_DMA_IRQHandler+0xaa>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a63      	ldr	r2, [pc, #396]	@ (8001794 <HAL_DMA_IRQHandler+0x1f8>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d01a      	beq.n	8001640 <HAL_DMA_IRQHandler+0xa4>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a62      	ldr	r2, [pc, #392]	@ (8001798 <HAL_DMA_IRQHandler+0x1fc>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d012      	beq.n	800163a <HAL_DMA_IRQHandler+0x9e>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a60      	ldr	r2, [pc, #384]	@ (800179c <HAL_DMA_IRQHandler+0x200>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d00a      	beq.n	8001634 <HAL_DMA_IRQHandler+0x98>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a5f      	ldr	r2, [pc, #380]	@ (80017a0 <HAL_DMA_IRQHandler+0x204>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d102      	bne.n	800162e <HAL_DMA_IRQHandler+0x92>
 8001628:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800162c:	e00e      	b.n	800164c <HAL_DMA_IRQHandler+0xb0>
 800162e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001632:	e00b      	b.n	800164c <HAL_DMA_IRQHandler+0xb0>
 8001634:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001638:	e008      	b.n	800164c <HAL_DMA_IRQHandler+0xb0>
 800163a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800163e:	e005      	b.n	800164c <HAL_DMA_IRQHandler+0xb0>
 8001640:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001644:	e002      	b.n	800164c <HAL_DMA_IRQHandler+0xb0>
 8001646:	2340      	movs	r3, #64	@ 0x40
 8001648:	e000      	b.n	800164c <HAL_DMA_IRQHandler+0xb0>
 800164a:	2304      	movs	r3, #4
 800164c:	4a55      	ldr	r2, [pc, #340]	@ (80017a4 <HAL_DMA_IRQHandler+0x208>)
 800164e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001654:	2b00      	cmp	r3, #0
 8001656:	f000 8094 	beq.w	8001782 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001662:	e08e      	b.n	8001782 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001668:	2202      	movs	r2, #2
 800166a:	409a      	lsls	r2, r3
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	4013      	ands	r3, r2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d056      	beq.n	8001722 <HAL_DMA_IRQHandler+0x186>
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d051      	beq.n	8001722 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0320 	and.w	r3, r3, #32
 8001688:	2b00      	cmp	r3, #0
 800168a:	d10b      	bne.n	80016a4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f022 020a 	bic.w	r2, r2, #10
 800169a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2201      	movs	r2, #1
 80016a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a38      	ldr	r2, [pc, #224]	@ (800178c <HAL_DMA_IRQHandler+0x1f0>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d029      	beq.n	8001702 <HAL_DMA_IRQHandler+0x166>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a37      	ldr	r2, [pc, #220]	@ (8001790 <HAL_DMA_IRQHandler+0x1f4>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d022      	beq.n	80016fe <HAL_DMA_IRQHandler+0x162>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a35      	ldr	r2, [pc, #212]	@ (8001794 <HAL_DMA_IRQHandler+0x1f8>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d01a      	beq.n	80016f8 <HAL_DMA_IRQHandler+0x15c>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a34      	ldr	r2, [pc, #208]	@ (8001798 <HAL_DMA_IRQHandler+0x1fc>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d012      	beq.n	80016f2 <HAL_DMA_IRQHandler+0x156>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a32      	ldr	r2, [pc, #200]	@ (800179c <HAL_DMA_IRQHandler+0x200>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d00a      	beq.n	80016ec <HAL_DMA_IRQHandler+0x150>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a31      	ldr	r2, [pc, #196]	@ (80017a0 <HAL_DMA_IRQHandler+0x204>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d102      	bne.n	80016e6 <HAL_DMA_IRQHandler+0x14a>
 80016e0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80016e4:	e00e      	b.n	8001704 <HAL_DMA_IRQHandler+0x168>
 80016e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80016ea:	e00b      	b.n	8001704 <HAL_DMA_IRQHandler+0x168>
 80016ec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80016f0:	e008      	b.n	8001704 <HAL_DMA_IRQHandler+0x168>
 80016f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016f6:	e005      	b.n	8001704 <HAL_DMA_IRQHandler+0x168>
 80016f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016fc:	e002      	b.n	8001704 <HAL_DMA_IRQHandler+0x168>
 80016fe:	2320      	movs	r3, #32
 8001700:	e000      	b.n	8001704 <HAL_DMA_IRQHandler+0x168>
 8001702:	2302      	movs	r3, #2
 8001704:	4a27      	ldr	r2, [pc, #156]	@ (80017a4 <HAL_DMA_IRQHandler+0x208>)
 8001706:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001714:	2b00      	cmp	r3, #0
 8001716:	d034      	beq.n	8001782 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001720:	e02f      	b.n	8001782 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001726:	2208      	movs	r2, #8
 8001728:	409a      	lsls	r2, r3
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	4013      	ands	r3, r2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d028      	beq.n	8001784 <HAL_DMA_IRQHandler+0x1e8>
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	f003 0308 	and.w	r3, r3, #8
 8001738:	2b00      	cmp	r3, #0
 800173a:	d023      	beq.n	8001784 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f022 020e 	bic.w	r2, r2, #14
 800174a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001754:	2101      	movs	r1, #1
 8001756:	fa01 f202 	lsl.w	r2, r1, r2
 800175a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2201      	movs	r2, #1
 8001760:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2201      	movs	r2, #1
 8001766:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001776:	2b00      	cmp	r3, #0
 8001778:	d004      	beq.n	8001784 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	4798      	blx	r3
    }
  }
  return;
 8001782:	bf00      	nop
 8001784:	bf00      	nop
}
 8001786:	3710      	adds	r7, #16
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40020008 	.word	0x40020008
 8001790:	4002001c 	.word	0x4002001c
 8001794:	40020030 	.word	0x40020030
 8001798:	40020044 	.word	0x40020044
 800179c:	40020058 	.word	0x40020058
 80017a0:	4002006c 	.word	0x4002006c
 80017a4:	40020000 	.word	0x40020000

080017a8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
 80017b4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017be:	2101      	movs	r1, #1
 80017c0:	fa01 f202 	lsl.w	r2, r1, r2
 80017c4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b10      	cmp	r3, #16
 80017d4:	d108      	bne.n	80017e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	68ba      	ldr	r2, [r7, #8]
 80017e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80017e6:	e007      	b.n	80017f8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	68ba      	ldr	r2, [r7, #8]
 80017ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	60da      	str	r2, [r3, #12]
}
 80017f8:	bf00      	nop
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr
	...

08001804 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001804:	b480      	push	{r7}
 8001806:	b08b      	sub	sp, #44	@ 0x2c
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800180e:	2300      	movs	r3, #0
 8001810:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001812:	2300      	movs	r3, #0
 8001814:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001816:	e169      	b.n	8001aec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001818:	2201      	movs	r2, #1
 800181a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	69fa      	ldr	r2, [r7, #28]
 8001828:	4013      	ands	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	429a      	cmp	r2, r3
 8001832:	f040 8158 	bne.w	8001ae6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	4a9a      	ldr	r2, [pc, #616]	@ (8001aa4 <HAL_GPIO_Init+0x2a0>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d05e      	beq.n	80018fe <HAL_GPIO_Init+0xfa>
 8001840:	4a98      	ldr	r2, [pc, #608]	@ (8001aa4 <HAL_GPIO_Init+0x2a0>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d875      	bhi.n	8001932 <HAL_GPIO_Init+0x12e>
 8001846:	4a98      	ldr	r2, [pc, #608]	@ (8001aa8 <HAL_GPIO_Init+0x2a4>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d058      	beq.n	80018fe <HAL_GPIO_Init+0xfa>
 800184c:	4a96      	ldr	r2, [pc, #600]	@ (8001aa8 <HAL_GPIO_Init+0x2a4>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d86f      	bhi.n	8001932 <HAL_GPIO_Init+0x12e>
 8001852:	4a96      	ldr	r2, [pc, #600]	@ (8001aac <HAL_GPIO_Init+0x2a8>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d052      	beq.n	80018fe <HAL_GPIO_Init+0xfa>
 8001858:	4a94      	ldr	r2, [pc, #592]	@ (8001aac <HAL_GPIO_Init+0x2a8>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d869      	bhi.n	8001932 <HAL_GPIO_Init+0x12e>
 800185e:	4a94      	ldr	r2, [pc, #592]	@ (8001ab0 <HAL_GPIO_Init+0x2ac>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d04c      	beq.n	80018fe <HAL_GPIO_Init+0xfa>
 8001864:	4a92      	ldr	r2, [pc, #584]	@ (8001ab0 <HAL_GPIO_Init+0x2ac>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d863      	bhi.n	8001932 <HAL_GPIO_Init+0x12e>
 800186a:	4a92      	ldr	r2, [pc, #584]	@ (8001ab4 <HAL_GPIO_Init+0x2b0>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d046      	beq.n	80018fe <HAL_GPIO_Init+0xfa>
 8001870:	4a90      	ldr	r2, [pc, #576]	@ (8001ab4 <HAL_GPIO_Init+0x2b0>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d85d      	bhi.n	8001932 <HAL_GPIO_Init+0x12e>
 8001876:	2b12      	cmp	r3, #18
 8001878:	d82a      	bhi.n	80018d0 <HAL_GPIO_Init+0xcc>
 800187a:	2b12      	cmp	r3, #18
 800187c:	d859      	bhi.n	8001932 <HAL_GPIO_Init+0x12e>
 800187e:	a201      	add	r2, pc, #4	@ (adr r2, 8001884 <HAL_GPIO_Init+0x80>)
 8001880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001884:	080018ff 	.word	0x080018ff
 8001888:	080018d9 	.word	0x080018d9
 800188c:	080018eb 	.word	0x080018eb
 8001890:	0800192d 	.word	0x0800192d
 8001894:	08001933 	.word	0x08001933
 8001898:	08001933 	.word	0x08001933
 800189c:	08001933 	.word	0x08001933
 80018a0:	08001933 	.word	0x08001933
 80018a4:	08001933 	.word	0x08001933
 80018a8:	08001933 	.word	0x08001933
 80018ac:	08001933 	.word	0x08001933
 80018b0:	08001933 	.word	0x08001933
 80018b4:	08001933 	.word	0x08001933
 80018b8:	08001933 	.word	0x08001933
 80018bc:	08001933 	.word	0x08001933
 80018c0:	08001933 	.word	0x08001933
 80018c4:	08001933 	.word	0x08001933
 80018c8:	080018e1 	.word	0x080018e1
 80018cc:	080018f5 	.word	0x080018f5
 80018d0:	4a79      	ldr	r2, [pc, #484]	@ (8001ab8 <HAL_GPIO_Init+0x2b4>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d013      	beq.n	80018fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018d6:	e02c      	b.n	8001932 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	623b      	str	r3, [r7, #32]
          break;
 80018de:	e029      	b.n	8001934 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	3304      	adds	r3, #4
 80018e6:	623b      	str	r3, [r7, #32]
          break;
 80018e8:	e024      	b.n	8001934 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	3308      	adds	r3, #8
 80018f0:	623b      	str	r3, [r7, #32]
          break;
 80018f2:	e01f      	b.n	8001934 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	330c      	adds	r3, #12
 80018fa:	623b      	str	r3, [r7, #32]
          break;
 80018fc:	e01a      	b.n	8001934 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d102      	bne.n	800190c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001906:	2304      	movs	r3, #4
 8001908:	623b      	str	r3, [r7, #32]
          break;
 800190a:	e013      	b.n	8001934 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d105      	bne.n	8001920 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001914:	2308      	movs	r3, #8
 8001916:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	69fa      	ldr	r2, [r7, #28]
 800191c:	611a      	str	r2, [r3, #16]
          break;
 800191e:	e009      	b.n	8001934 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001920:	2308      	movs	r3, #8
 8001922:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	69fa      	ldr	r2, [r7, #28]
 8001928:	615a      	str	r2, [r3, #20]
          break;
 800192a:	e003      	b.n	8001934 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800192c:	2300      	movs	r3, #0
 800192e:	623b      	str	r3, [r7, #32]
          break;
 8001930:	e000      	b.n	8001934 <HAL_GPIO_Init+0x130>
          break;
 8001932:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	2bff      	cmp	r3, #255	@ 0xff
 8001938:	d801      	bhi.n	800193e <HAL_GPIO_Init+0x13a>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	e001      	b.n	8001942 <HAL_GPIO_Init+0x13e>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	3304      	adds	r3, #4
 8001942:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	2bff      	cmp	r3, #255	@ 0xff
 8001948:	d802      	bhi.n	8001950 <HAL_GPIO_Init+0x14c>
 800194a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	e002      	b.n	8001956 <HAL_GPIO_Init+0x152>
 8001950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001952:	3b08      	subs	r3, #8
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	210f      	movs	r1, #15
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	fa01 f303 	lsl.w	r3, r1, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	401a      	ands	r2, r3
 8001968:	6a39      	ldr	r1, [r7, #32]
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	fa01 f303 	lsl.w	r3, r1, r3
 8001970:	431a      	orrs	r2, r3
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	f000 80b1 	beq.w	8001ae6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001984:	4b4d      	ldr	r3, [pc, #308]	@ (8001abc <HAL_GPIO_Init+0x2b8>)
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	4a4c      	ldr	r2, [pc, #304]	@ (8001abc <HAL_GPIO_Init+0x2b8>)
 800198a:	f043 0301 	orr.w	r3, r3, #1
 800198e:	6193      	str	r3, [r2, #24]
 8001990:	4b4a      	ldr	r3, [pc, #296]	@ (8001abc <HAL_GPIO_Init+0x2b8>)
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800199c:	4a48      	ldr	r2, [pc, #288]	@ (8001ac0 <HAL_GPIO_Init+0x2bc>)
 800199e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a0:	089b      	lsrs	r3, r3, #2
 80019a2:	3302      	adds	r3, #2
 80019a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ac:	f003 0303 	and.w	r3, r3, #3
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	220f      	movs	r2, #15
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	4013      	ands	r3, r2
 80019be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4a40      	ldr	r2, [pc, #256]	@ (8001ac4 <HAL_GPIO_Init+0x2c0>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d013      	beq.n	80019f0 <HAL_GPIO_Init+0x1ec>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a3f      	ldr	r2, [pc, #252]	@ (8001ac8 <HAL_GPIO_Init+0x2c4>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d00d      	beq.n	80019ec <HAL_GPIO_Init+0x1e8>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a3e      	ldr	r2, [pc, #248]	@ (8001acc <HAL_GPIO_Init+0x2c8>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d007      	beq.n	80019e8 <HAL_GPIO_Init+0x1e4>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a3d      	ldr	r2, [pc, #244]	@ (8001ad0 <HAL_GPIO_Init+0x2cc>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d101      	bne.n	80019e4 <HAL_GPIO_Init+0x1e0>
 80019e0:	2303      	movs	r3, #3
 80019e2:	e006      	b.n	80019f2 <HAL_GPIO_Init+0x1ee>
 80019e4:	2304      	movs	r3, #4
 80019e6:	e004      	b.n	80019f2 <HAL_GPIO_Init+0x1ee>
 80019e8:	2302      	movs	r3, #2
 80019ea:	e002      	b.n	80019f2 <HAL_GPIO_Init+0x1ee>
 80019ec:	2301      	movs	r3, #1
 80019ee:	e000      	b.n	80019f2 <HAL_GPIO_Init+0x1ee>
 80019f0:	2300      	movs	r3, #0
 80019f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019f4:	f002 0203 	and.w	r2, r2, #3
 80019f8:	0092      	lsls	r2, r2, #2
 80019fa:	4093      	lsls	r3, r2
 80019fc:	68fa      	ldr	r2, [r7, #12]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a02:	492f      	ldr	r1, [pc, #188]	@ (8001ac0 <HAL_GPIO_Init+0x2bc>)
 8001a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a06:	089b      	lsrs	r3, r3, #2
 8001a08:	3302      	adds	r3, #2
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d006      	beq.n	8001a2a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a1c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a1e:	689a      	ldr	r2, [r3, #8]
 8001a20:	492c      	ldr	r1, [pc, #176]	@ (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	608b      	str	r3, [r1, #8]
 8001a28:	e006      	b.n	8001a38 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a2a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a2c:	689a      	ldr	r2, [r3, #8]
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	43db      	mvns	r3, r3
 8001a32:	4928      	ldr	r1, [pc, #160]	@ (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a34:	4013      	ands	r3, r2
 8001a36:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d006      	beq.n	8001a52 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a44:	4b23      	ldr	r3, [pc, #140]	@ (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a46:	68da      	ldr	r2, [r3, #12]
 8001a48:	4922      	ldr	r1, [pc, #136]	@ (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	60cb      	str	r3, [r1, #12]
 8001a50:	e006      	b.n	8001a60 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a52:	4b20      	ldr	r3, [pc, #128]	@ (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a54:	68da      	ldr	r2, [r3, #12]
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	491e      	ldr	r1, [pc, #120]	@ (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d006      	beq.n	8001a7a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a6c:	4b19      	ldr	r3, [pc, #100]	@ (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	4918      	ldr	r1, [pc, #96]	@ (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	604b      	str	r3, [r1, #4]
 8001a78:	e006      	b.n	8001a88 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a7a:	4b16      	ldr	r3, [pc, #88]	@ (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a7c:	685a      	ldr	r2, [r3, #4]
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	43db      	mvns	r3, r3
 8001a82:	4914      	ldr	r1, [pc, #80]	@ (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a84:	4013      	ands	r3, r2
 8001a86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d021      	beq.n	8001ad8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a94:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	490e      	ldr	r1, [pc, #56]	@ (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	600b      	str	r3, [r1, #0]
 8001aa0:	e021      	b.n	8001ae6 <HAL_GPIO_Init+0x2e2>
 8001aa2:	bf00      	nop
 8001aa4:	10320000 	.word	0x10320000
 8001aa8:	10310000 	.word	0x10310000
 8001aac:	10220000 	.word	0x10220000
 8001ab0:	10210000 	.word	0x10210000
 8001ab4:	10120000 	.word	0x10120000
 8001ab8:	10110000 	.word	0x10110000
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	40010000 	.word	0x40010000
 8001ac4:	40010800 	.word	0x40010800
 8001ac8:	40010c00 	.word	0x40010c00
 8001acc:	40011000 	.word	0x40011000
 8001ad0:	40011400 	.word	0x40011400
 8001ad4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8001b08 <HAL_GPIO_Init+0x304>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	4909      	ldr	r1, [pc, #36]	@ (8001b08 <HAL_GPIO_Init+0x304>)
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae8:	3301      	adds	r3, #1
 8001aea:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af2:	fa22 f303 	lsr.w	r3, r2, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f47f ae8e 	bne.w	8001818 <HAL_GPIO_Init+0x14>
  }
}
 8001afc:	bf00      	nop
 8001afe:	bf00      	nop
 8001b00:	372c      	adds	r7, #44	@ 0x2c
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bc80      	pop	{r7}
 8001b06:	4770      	bx	lr
 8001b08:	40010400 	.word	0x40010400

08001b0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	460b      	mov	r3, r1
 8001b16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	887b      	ldrh	r3, [r7, #2]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d002      	beq.n	8001b2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b24:	2301      	movs	r3, #1
 8001b26:	73fb      	strb	r3, [r7, #15]
 8001b28:	e001      	b.n	8001b2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bc80      	pop	{r7}
 8001b38:	4770      	bx	lr

08001b3a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
 8001b42:	460b      	mov	r3, r1
 8001b44:	807b      	strh	r3, [r7, #2]
 8001b46:	4613      	mov	r3, r2
 8001b48:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b4a:	787b      	ldrb	r3, [r7, #1]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d003      	beq.n	8001b58 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b50:	887a      	ldrh	r2, [r7, #2]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b56:	e003      	b.n	8001b60 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b58:	887b      	ldrh	r3, [r7, #2]
 8001b5a:	041a      	lsls	r2, r3, #16
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	611a      	str	r2, [r3, #16]
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr
	...

08001b6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e272      	b.n	8002064 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f000 8087 	beq.w	8001c9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b8c:	4b92      	ldr	r3, [pc, #584]	@ (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 030c 	and.w	r3, r3, #12
 8001b94:	2b04      	cmp	r3, #4
 8001b96:	d00c      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b98:	4b8f      	ldr	r3, [pc, #572]	@ (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 030c 	and.w	r3, r3, #12
 8001ba0:	2b08      	cmp	r3, #8
 8001ba2:	d112      	bne.n	8001bca <HAL_RCC_OscConfig+0x5e>
 8001ba4:	4b8c      	ldr	r3, [pc, #560]	@ (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bb0:	d10b      	bne.n	8001bca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb2:	4b89      	ldr	r3, [pc, #548]	@ (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d06c      	beq.n	8001c98 <HAL_RCC_OscConfig+0x12c>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d168      	bne.n	8001c98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e24c      	b.n	8002064 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bd2:	d106      	bne.n	8001be2 <HAL_RCC_OscConfig+0x76>
 8001bd4:	4b80      	ldr	r3, [pc, #512]	@ (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a7f      	ldr	r2, [pc, #508]	@ (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001bda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bde:	6013      	str	r3, [r2, #0]
 8001be0:	e02e      	b.n	8001c40 <HAL_RCC_OscConfig+0xd4>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10c      	bne.n	8001c04 <HAL_RCC_OscConfig+0x98>
 8001bea:	4b7b      	ldr	r3, [pc, #492]	@ (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a7a      	ldr	r2, [pc, #488]	@ (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bf4:	6013      	str	r3, [r2, #0]
 8001bf6:	4b78      	ldr	r3, [pc, #480]	@ (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a77      	ldr	r2, [pc, #476]	@ (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c00:	6013      	str	r3, [r2, #0]
 8001c02:	e01d      	b.n	8001c40 <HAL_RCC_OscConfig+0xd4>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c0c:	d10c      	bne.n	8001c28 <HAL_RCC_OscConfig+0xbc>
 8001c0e:	4b72      	ldr	r3, [pc, #456]	@ (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a71      	ldr	r2, [pc, #452]	@ (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001c14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c18:	6013      	str	r3, [r2, #0]
 8001c1a:	4b6f      	ldr	r3, [pc, #444]	@ (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a6e      	ldr	r2, [pc, #440]	@ (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001c20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	e00b      	b.n	8001c40 <HAL_RCC_OscConfig+0xd4>
 8001c28:	4b6b      	ldr	r3, [pc, #428]	@ (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a6a      	ldr	r2, [pc, #424]	@ (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001c2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c32:	6013      	str	r3, [r2, #0]
 8001c34:	4b68      	ldr	r3, [pc, #416]	@ (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a67      	ldr	r2, [pc, #412]	@ (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001c3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c3e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d013      	beq.n	8001c70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c48:	f7ff fa3a 	bl	80010c0 <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c50:	f7ff fa36 	bl	80010c0 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b64      	cmp	r3, #100	@ 0x64
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e200      	b.n	8002064 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c62:	4b5d      	ldr	r3, [pc, #372]	@ (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d0f0      	beq.n	8001c50 <HAL_RCC_OscConfig+0xe4>
 8001c6e:	e014      	b.n	8001c9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c70:	f7ff fa26 	bl	80010c0 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c78:	f7ff fa22 	bl	80010c0 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b64      	cmp	r3, #100	@ 0x64
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e1ec      	b.n	8002064 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c8a:	4b53      	ldr	r3, [pc, #332]	@ (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1f0      	bne.n	8001c78 <HAL_RCC_OscConfig+0x10c>
 8001c96:	e000      	b.n	8001c9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d063      	beq.n	8001d6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ca6:	4b4c      	ldr	r3, [pc, #304]	@ (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f003 030c 	and.w	r3, r3, #12
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d00b      	beq.n	8001cca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cb2:	4b49      	ldr	r3, [pc, #292]	@ (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f003 030c 	and.w	r3, r3, #12
 8001cba:	2b08      	cmp	r3, #8
 8001cbc:	d11c      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x18c>
 8001cbe:	4b46      	ldr	r3, [pc, #280]	@ (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d116      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cca:	4b43      	ldr	r3, [pc, #268]	@ (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d005      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x176>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d001      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e1c0      	b.n	8002064 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce2:	4b3d      	ldr	r3, [pc, #244]	@ (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	4939      	ldr	r1, [pc, #228]	@ (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cf6:	e03a      	b.n	8001d6e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d020      	beq.n	8001d42 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d00:	4b36      	ldr	r3, [pc, #216]	@ (8001ddc <HAL_RCC_OscConfig+0x270>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d06:	f7ff f9db 	bl	80010c0 <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d0e:	f7ff f9d7 	bl	80010c0 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e1a1      	b.n	8002064 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d20:	4b2d      	ldr	r3, [pc, #180]	@ (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d0f0      	beq.n	8001d0e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d2c:	4b2a      	ldr	r3, [pc, #168]	@ (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	695b      	ldr	r3, [r3, #20]
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	4927      	ldr	r1, [pc, #156]	@ (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	600b      	str	r3, [r1, #0]
 8001d40:	e015      	b.n	8001d6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d42:	4b26      	ldr	r3, [pc, #152]	@ (8001ddc <HAL_RCC_OscConfig+0x270>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d48:	f7ff f9ba 	bl	80010c0 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d50:	f7ff f9b6 	bl	80010c0 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e180      	b.n	8002064 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d62:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1f0      	bne.n	8001d50 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0308 	and.w	r3, r3, #8
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d03a      	beq.n	8001df0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d019      	beq.n	8001db6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d82:	4b17      	ldr	r3, [pc, #92]	@ (8001de0 <HAL_RCC_OscConfig+0x274>)
 8001d84:	2201      	movs	r2, #1
 8001d86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d88:	f7ff f99a 	bl	80010c0 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d90:	f7ff f996 	bl	80010c0 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e160      	b.n	8002064 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001da2:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d0f0      	beq.n	8001d90 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001dae:	2001      	movs	r0, #1
 8001db0:	f000 fa9c 	bl	80022ec <RCC_Delay>
 8001db4:	e01c      	b.n	8001df0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001db6:	4b0a      	ldr	r3, [pc, #40]	@ (8001de0 <HAL_RCC_OscConfig+0x274>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dbc:	f7ff f980 	bl	80010c0 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dc2:	e00f      	b.n	8001de4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dc4:	f7ff f97c 	bl	80010c0 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d908      	bls.n	8001de4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e146      	b.n	8002064 <HAL_RCC_OscConfig+0x4f8>
 8001dd6:	bf00      	nop
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	42420000 	.word	0x42420000
 8001de0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001de4:	4b92      	ldr	r3, [pc, #584]	@ (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1e9      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0304 	and.w	r3, r3, #4
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 80a6 	beq.w	8001f4a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e02:	4b8b      	ldr	r3, [pc, #556]	@ (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d10d      	bne.n	8001e2a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e0e:	4b88      	ldr	r3, [pc, #544]	@ (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	4a87      	ldr	r2, [pc, #540]	@ (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001e14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e18:	61d3      	str	r3, [r2, #28]
 8001e1a:	4b85      	ldr	r3, [pc, #532]	@ (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e22:	60bb      	str	r3, [r7, #8]
 8001e24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e26:	2301      	movs	r3, #1
 8001e28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e2a:	4b82      	ldr	r3, [pc, #520]	@ (8002034 <HAL_RCC_OscConfig+0x4c8>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d118      	bne.n	8001e68 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e36:	4b7f      	ldr	r3, [pc, #508]	@ (8002034 <HAL_RCC_OscConfig+0x4c8>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a7e      	ldr	r2, [pc, #504]	@ (8002034 <HAL_RCC_OscConfig+0x4c8>)
 8001e3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e42:	f7ff f93d 	bl	80010c0 <HAL_GetTick>
 8001e46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e48:	e008      	b.n	8001e5c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e4a:	f7ff f939 	bl	80010c0 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b64      	cmp	r3, #100	@ 0x64
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e103      	b.n	8002064 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e5c:	4b75      	ldr	r3, [pc, #468]	@ (8002034 <HAL_RCC_OscConfig+0x4c8>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d0f0      	beq.n	8001e4a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d106      	bne.n	8001e7e <HAL_RCC_OscConfig+0x312>
 8001e70:	4b6f      	ldr	r3, [pc, #444]	@ (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	4a6e      	ldr	r2, [pc, #440]	@ (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001e76:	f043 0301 	orr.w	r3, r3, #1
 8001e7a:	6213      	str	r3, [r2, #32]
 8001e7c:	e02d      	b.n	8001eda <HAL_RCC_OscConfig+0x36e>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10c      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x334>
 8001e86:	4b6a      	ldr	r3, [pc, #424]	@ (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001e88:	6a1b      	ldr	r3, [r3, #32]
 8001e8a:	4a69      	ldr	r2, [pc, #420]	@ (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001e8c:	f023 0301 	bic.w	r3, r3, #1
 8001e90:	6213      	str	r3, [r2, #32]
 8001e92:	4b67      	ldr	r3, [pc, #412]	@ (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001e94:	6a1b      	ldr	r3, [r3, #32]
 8001e96:	4a66      	ldr	r2, [pc, #408]	@ (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001e98:	f023 0304 	bic.w	r3, r3, #4
 8001e9c:	6213      	str	r3, [r2, #32]
 8001e9e:	e01c      	b.n	8001eda <HAL_RCC_OscConfig+0x36e>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	2b05      	cmp	r3, #5
 8001ea6:	d10c      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x356>
 8001ea8:	4b61      	ldr	r3, [pc, #388]	@ (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	4a60      	ldr	r2, [pc, #384]	@ (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001eae:	f043 0304 	orr.w	r3, r3, #4
 8001eb2:	6213      	str	r3, [r2, #32]
 8001eb4:	4b5e      	ldr	r3, [pc, #376]	@ (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
 8001eb8:	4a5d      	ldr	r2, [pc, #372]	@ (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001eba:	f043 0301 	orr.w	r3, r3, #1
 8001ebe:	6213      	str	r3, [r2, #32]
 8001ec0:	e00b      	b.n	8001eda <HAL_RCC_OscConfig+0x36e>
 8001ec2:	4b5b      	ldr	r3, [pc, #364]	@ (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	4a5a      	ldr	r2, [pc, #360]	@ (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001ec8:	f023 0301 	bic.w	r3, r3, #1
 8001ecc:	6213      	str	r3, [r2, #32]
 8001ece:	4b58      	ldr	r3, [pc, #352]	@ (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	4a57      	ldr	r2, [pc, #348]	@ (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001ed4:	f023 0304 	bic.w	r3, r3, #4
 8001ed8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d015      	beq.n	8001f0e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee2:	f7ff f8ed 	bl	80010c0 <HAL_GetTick>
 8001ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ee8:	e00a      	b.n	8001f00 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eea:	f7ff f8e9 	bl	80010c0 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e0b1      	b.n	8002064 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f00:	4b4b      	ldr	r3, [pc, #300]	@ (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d0ee      	beq.n	8001eea <HAL_RCC_OscConfig+0x37e>
 8001f0c:	e014      	b.n	8001f38 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f0e:	f7ff f8d7 	bl	80010c0 <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f14:	e00a      	b.n	8001f2c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f16:	f7ff f8d3 	bl	80010c0 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e09b      	b.n	8002064 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f2c:	4b40      	ldr	r3, [pc, #256]	@ (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1ee      	bne.n	8001f16 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f38:	7dfb      	ldrb	r3, [r7, #23]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d105      	bne.n	8001f4a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f3e:	4b3c      	ldr	r3, [pc, #240]	@ (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	4a3b      	ldr	r2, [pc, #236]	@ (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001f44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f48:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69db      	ldr	r3, [r3, #28]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f000 8087 	beq.w	8002062 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f54:	4b36      	ldr	r3, [pc, #216]	@ (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f003 030c 	and.w	r3, r3, #12
 8001f5c:	2b08      	cmp	r3, #8
 8001f5e:	d061      	beq.n	8002024 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	69db      	ldr	r3, [r3, #28]
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d146      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f68:	4b33      	ldr	r3, [pc, #204]	@ (8002038 <HAL_RCC_OscConfig+0x4cc>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6e:	f7ff f8a7 	bl	80010c0 <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f74:	e008      	b.n	8001f88 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f76:	f7ff f8a3 	bl	80010c0 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e06d      	b.n	8002064 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f88:	4b29      	ldr	r3, [pc, #164]	@ (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1f0      	bne.n	8001f76 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f9c:	d108      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f9e:	4b24      	ldr	r3, [pc, #144]	@ (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	4921      	ldr	r1, [pc, #132]	@ (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fb0:	4b1f      	ldr	r3, [pc, #124]	@ (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a19      	ldr	r1, [r3, #32]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc0:	430b      	orrs	r3, r1
 8001fc2:	491b      	ldr	r1, [pc, #108]	@ (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fc8:	4b1b      	ldr	r3, [pc, #108]	@ (8002038 <HAL_RCC_OscConfig+0x4cc>)
 8001fca:	2201      	movs	r2, #1
 8001fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fce:	f7ff f877 	bl	80010c0 <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fd4:	e008      	b.n	8001fe8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd6:	f7ff f873 	bl	80010c0 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e03d      	b.n	8002064 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fe8:	4b11      	ldr	r3, [pc, #68]	@ (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0f0      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x46a>
 8001ff4:	e035      	b.n	8002062 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ff6:	4b10      	ldr	r3, [pc, #64]	@ (8002038 <HAL_RCC_OscConfig+0x4cc>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffc:	f7ff f860 	bl	80010c0 <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002004:	f7ff f85c 	bl	80010c0 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e026      	b.n	8002064 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002016:	4b06      	ldr	r3, [pc, #24]	@ (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1f0      	bne.n	8002004 <HAL_RCC_OscConfig+0x498>
 8002022:	e01e      	b.n	8002062 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	69db      	ldr	r3, [r3, #28]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d107      	bne.n	800203c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e019      	b.n	8002064 <HAL_RCC_OscConfig+0x4f8>
 8002030:	40021000 	.word	0x40021000
 8002034:	40007000 	.word	0x40007000
 8002038:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800203c:	4b0b      	ldr	r3, [pc, #44]	@ (800206c <HAL_RCC_OscConfig+0x500>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a1b      	ldr	r3, [r3, #32]
 800204c:	429a      	cmp	r2, r3
 800204e:	d106      	bne.n	800205e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800205a:	429a      	cmp	r2, r3
 800205c:	d001      	beq.n	8002062 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e000      	b.n	8002064 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3718      	adds	r7, #24
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40021000 	.word	0x40021000

08002070 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d101      	bne.n	8002084 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e0d0      	b.n	8002226 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002084:	4b6a      	ldr	r3, [pc, #424]	@ (8002230 <HAL_RCC_ClockConfig+0x1c0>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	429a      	cmp	r2, r3
 8002090:	d910      	bls.n	80020b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002092:	4b67      	ldr	r3, [pc, #412]	@ (8002230 <HAL_RCC_ClockConfig+0x1c0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f023 0207 	bic.w	r2, r3, #7
 800209a:	4965      	ldr	r1, [pc, #404]	@ (8002230 <HAL_RCC_ClockConfig+0x1c0>)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	4313      	orrs	r3, r2
 80020a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a2:	4b63      	ldr	r3, [pc, #396]	@ (8002230 <HAL_RCC_ClockConfig+0x1c0>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d001      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e0b8      	b.n	8002226 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d020      	beq.n	8002102 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d005      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020cc:	4b59      	ldr	r3, [pc, #356]	@ (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	4a58      	ldr	r2, [pc, #352]	@ (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 80020d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80020d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0308 	and.w	r3, r3, #8
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d005      	beq.n	80020f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020e4:	4b53      	ldr	r3, [pc, #332]	@ (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	4a52      	ldr	r2, [pc, #328]	@ (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 80020ea:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80020ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f0:	4b50      	ldr	r3, [pc, #320]	@ (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	494d      	ldr	r1, [pc, #308]	@ (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b00      	cmp	r3, #0
 800210c:	d040      	beq.n	8002190 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d107      	bne.n	8002126 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002116:	4b47      	ldr	r3, [pc, #284]	@ (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d115      	bne.n	800214e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e07f      	b.n	8002226 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b02      	cmp	r3, #2
 800212c:	d107      	bne.n	800213e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800212e:	4b41      	ldr	r3, [pc, #260]	@ (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d109      	bne.n	800214e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e073      	b.n	8002226 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800213e:	4b3d      	ldr	r3, [pc, #244]	@ (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e06b      	b.n	8002226 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800214e:	4b39      	ldr	r3, [pc, #228]	@ (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f023 0203 	bic.w	r2, r3, #3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	4936      	ldr	r1, [pc, #216]	@ (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 800215c:	4313      	orrs	r3, r2
 800215e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002160:	f7fe ffae 	bl	80010c0 <HAL_GetTick>
 8002164:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002166:	e00a      	b.n	800217e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002168:	f7fe ffaa 	bl	80010c0 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002176:	4293      	cmp	r3, r2
 8002178:	d901      	bls.n	800217e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e053      	b.n	8002226 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800217e:	4b2d      	ldr	r3, [pc, #180]	@ (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f003 020c 	and.w	r2, r3, #12
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	429a      	cmp	r2, r3
 800218e:	d1eb      	bne.n	8002168 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002190:	4b27      	ldr	r3, [pc, #156]	@ (8002230 <HAL_RCC_ClockConfig+0x1c0>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0307 	and.w	r3, r3, #7
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	429a      	cmp	r2, r3
 800219c:	d210      	bcs.n	80021c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800219e:	4b24      	ldr	r3, [pc, #144]	@ (8002230 <HAL_RCC_ClockConfig+0x1c0>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f023 0207 	bic.w	r2, r3, #7
 80021a6:	4922      	ldr	r1, [pc, #136]	@ (8002230 <HAL_RCC_ClockConfig+0x1c0>)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ae:	4b20      	ldr	r3, [pc, #128]	@ (8002230 <HAL_RCC_ClockConfig+0x1c0>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d001      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e032      	b.n	8002226 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d008      	beq.n	80021de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021cc:	4b19      	ldr	r3, [pc, #100]	@ (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	4916      	ldr	r1, [pc, #88]	@ (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0308 	and.w	r3, r3, #8
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d009      	beq.n	80021fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021ea:	4b12      	ldr	r3, [pc, #72]	@ (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	490e      	ldr	r1, [pc, #56]	@ (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021fe:	f000 f821 	bl	8002244 <HAL_RCC_GetSysClockFreq>
 8002202:	4602      	mov	r2, r0
 8002204:	4b0b      	ldr	r3, [pc, #44]	@ (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	091b      	lsrs	r3, r3, #4
 800220a:	f003 030f 	and.w	r3, r3, #15
 800220e:	490a      	ldr	r1, [pc, #40]	@ (8002238 <HAL_RCC_ClockConfig+0x1c8>)
 8002210:	5ccb      	ldrb	r3, [r1, r3]
 8002212:	fa22 f303 	lsr.w	r3, r2, r3
 8002216:	4a09      	ldr	r2, [pc, #36]	@ (800223c <HAL_RCC_ClockConfig+0x1cc>)
 8002218:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800221a:	4b09      	ldr	r3, [pc, #36]	@ (8002240 <HAL_RCC_ClockConfig+0x1d0>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f7fe ff0c 	bl	800103c <HAL_InitTick>

  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40022000 	.word	0x40022000
 8002234:	40021000 	.word	0x40021000
 8002238:	08003550 	.word	0x08003550
 800223c:	20000080 	.word	0x20000080
 8002240:	20000084 	.word	0x20000084

08002244 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002244:	b480      	push	{r7}
 8002246:	b087      	sub	sp, #28
 8002248:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]
 800224e:	2300      	movs	r3, #0
 8002250:	60bb      	str	r3, [r7, #8]
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]
 8002256:	2300      	movs	r3, #0
 8002258:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800225a:	2300      	movs	r3, #0
 800225c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800225e:	4b1e      	ldr	r3, [pc, #120]	@ (80022d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f003 030c 	and.w	r3, r3, #12
 800226a:	2b04      	cmp	r3, #4
 800226c:	d002      	beq.n	8002274 <HAL_RCC_GetSysClockFreq+0x30>
 800226e:	2b08      	cmp	r3, #8
 8002270:	d003      	beq.n	800227a <HAL_RCC_GetSysClockFreq+0x36>
 8002272:	e027      	b.n	80022c4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002274:	4b19      	ldr	r3, [pc, #100]	@ (80022dc <HAL_RCC_GetSysClockFreq+0x98>)
 8002276:	613b      	str	r3, [r7, #16]
      break;
 8002278:	e027      	b.n	80022ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	0c9b      	lsrs	r3, r3, #18
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	4a17      	ldr	r2, [pc, #92]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002284:	5cd3      	ldrb	r3, [r2, r3]
 8002286:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d010      	beq.n	80022b4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002292:	4b11      	ldr	r3, [pc, #68]	@ (80022d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	0c5b      	lsrs	r3, r3, #17
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	4a11      	ldr	r2, [pc, #68]	@ (80022e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800229e:	5cd3      	ldrb	r3, [r2, r3]
 80022a0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a0d      	ldr	r2, [pc, #52]	@ (80022dc <HAL_RCC_GetSysClockFreq+0x98>)
 80022a6:	fb03 f202 	mul.w	r2, r3, r2
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b0:	617b      	str	r3, [r7, #20]
 80022b2:	e004      	b.n	80022be <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a0c      	ldr	r2, [pc, #48]	@ (80022e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022b8:	fb02 f303 	mul.w	r3, r2, r3
 80022bc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	613b      	str	r3, [r7, #16]
      break;
 80022c2:	e002      	b.n	80022ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022c4:	4b05      	ldr	r3, [pc, #20]	@ (80022dc <HAL_RCC_GetSysClockFreq+0x98>)
 80022c6:	613b      	str	r3, [r7, #16]
      break;
 80022c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022ca:	693b      	ldr	r3, [r7, #16]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	371c      	adds	r7, #28
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bc80      	pop	{r7}
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	40021000 	.word	0x40021000
 80022dc:	007a1200 	.word	0x007a1200
 80022e0:	08003560 	.word	0x08003560
 80022e4:	08003570 	.word	0x08003570
 80022e8:	003d0900 	.word	0x003d0900

080022ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002320 <RCC_Delay+0x34>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a0a      	ldr	r2, [pc, #40]	@ (8002324 <RCC_Delay+0x38>)
 80022fa:	fba2 2303 	umull	r2, r3, r2, r3
 80022fe:	0a5b      	lsrs	r3, r3, #9
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	fb02 f303 	mul.w	r3, r2, r3
 8002306:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002308:	bf00      	nop
  }
  while (Delay --);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	1e5a      	subs	r2, r3, #1
 800230e:	60fa      	str	r2, [r7, #12]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1f9      	bne.n	8002308 <RCC_Delay+0x1c>
}
 8002314:	bf00      	nop
 8002316:	bf00      	nop
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr
 8002320:	20000080 	.word	0x20000080
 8002324:	10624dd3 	.word	0x10624dd3

08002328 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e041      	b.n	80023be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d106      	bne.n	8002354 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f7fe fd7e 	bl	8000e50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2202      	movs	r2, #2
 8002358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3304      	adds	r3, #4
 8002364:	4619      	mov	r1, r3
 8002366:	4610      	mov	r0, r2
 8002368:	f000 fd5a 	bl	8002e20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b082      	sub	sp, #8
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e041      	b.n	800245c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d106      	bne.n	80023f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 f839 	bl	8002464 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2202      	movs	r2, #2
 80023f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	3304      	adds	r3, #4
 8002402:	4619      	mov	r1, r3
 8002404:	4610      	mov	r0, r2
 8002406:	f000 fd0b 	bl	8002e20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2201      	movs	r2, #1
 800243e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2201      	movs	r2, #1
 800244e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2201      	movs	r2, #1
 8002456:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	bc80      	pop	{r7}
 8002474:	4770      	bx	lr
	...

08002478 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
 8002484:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8002486:	2300      	movs	r3, #0
 8002488:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d109      	bne.n	80024a4 <HAL_TIM_PWM_Start_DMA+0x2c>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002496:	b2db      	uxtb	r3, r3
 8002498:	2b02      	cmp	r3, #2
 800249a:	bf0c      	ite	eq
 800249c:	2301      	moveq	r3, #1
 800249e:	2300      	movne	r3, #0
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	e022      	b.n	80024ea <HAL_TIM_PWM_Start_DMA+0x72>
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	d109      	bne.n	80024be <HAL_TIM_PWM_Start_DMA+0x46>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	bf0c      	ite	eq
 80024b6:	2301      	moveq	r3, #1
 80024b8:	2300      	movne	r3, #0
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	e015      	b.n	80024ea <HAL_TIM_PWM_Start_DMA+0x72>
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	2b08      	cmp	r3, #8
 80024c2:	d109      	bne.n	80024d8 <HAL_TIM_PWM_Start_DMA+0x60>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	bf0c      	ite	eq
 80024d0:	2301      	moveq	r3, #1
 80024d2:	2300      	movne	r3, #0
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	e008      	b.n	80024ea <HAL_TIM_PWM_Start_DMA+0x72>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	bf0c      	ite	eq
 80024e4:	2301      	moveq	r3, #1
 80024e6:	2300      	movne	r3, #0
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80024ee:	2302      	movs	r3, #2
 80024f0:	e153      	b.n	800279a <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d109      	bne.n	800250c <HAL_TIM_PWM_Start_DMA+0x94>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b01      	cmp	r3, #1
 8002502:	bf0c      	ite	eq
 8002504:	2301      	moveq	r3, #1
 8002506:	2300      	movne	r3, #0
 8002508:	b2db      	uxtb	r3, r3
 800250a:	e022      	b.n	8002552 <HAL_TIM_PWM_Start_DMA+0xda>
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	2b04      	cmp	r3, #4
 8002510:	d109      	bne.n	8002526 <HAL_TIM_PWM_Start_DMA+0xae>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b01      	cmp	r3, #1
 800251c:	bf0c      	ite	eq
 800251e:	2301      	moveq	r3, #1
 8002520:	2300      	movne	r3, #0
 8002522:	b2db      	uxtb	r3, r3
 8002524:	e015      	b.n	8002552 <HAL_TIM_PWM_Start_DMA+0xda>
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	2b08      	cmp	r3, #8
 800252a:	d109      	bne.n	8002540 <HAL_TIM_PWM_Start_DMA+0xc8>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b01      	cmp	r3, #1
 8002536:	bf0c      	ite	eq
 8002538:	2301      	moveq	r3, #1
 800253a:	2300      	movne	r3, #0
 800253c:	b2db      	uxtb	r3, r3
 800253e:	e008      	b.n	8002552 <HAL_TIM_PWM_Start_DMA+0xda>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b01      	cmp	r3, #1
 800254a:	bf0c      	ite	eq
 800254c:	2301      	moveq	r3, #1
 800254e:	2300      	movne	r3, #0
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d024      	beq.n	80025a0 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d002      	beq.n	8002562 <HAL_TIM_PWM_Start_DMA+0xea>
 800255c:	887b      	ldrh	r3, [r7, #2]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e119      	b.n	800279a <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d104      	bne.n	8002576 <HAL_TIM_PWM_Start_DMA+0xfe>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2202      	movs	r2, #2
 8002570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002574:	e016      	b.n	80025a4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	2b04      	cmp	r3, #4
 800257a:	d104      	bne.n	8002586 <HAL_TIM_PWM_Start_DMA+0x10e>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2202      	movs	r2, #2
 8002580:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002584:	e00e      	b.n	80025a4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	2b08      	cmp	r3, #8
 800258a:	d104      	bne.n	8002596 <HAL_TIM_PWM_Start_DMA+0x11e>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2202      	movs	r2, #2
 8002590:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002594:	e006      	b.n	80025a4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2202      	movs	r2, #2
 800259a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800259e:	e001      	b.n	80025a4 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e0fa      	b.n	800279a <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	2b0c      	cmp	r3, #12
 80025a8:	f200 80ae 	bhi.w	8002708 <HAL_TIM_PWM_Start_DMA+0x290>
 80025ac:	a201      	add	r2, pc, #4	@ (adr r2, 80025b4 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80025ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b2:	bf00      	nop
 80025b4:	080025e9 	.word	0x080025e9
 80025b8:	08002709 	.word	0x08002709
 80025bc:	08002709 	.word	0x08002709
 80025c0:	08002709 	.word	0x08002709
 80025c4:	08002631 	.word	0x08002631
 80025c8:	08002709 	.word	0x08002709
 80025cc:	08002709 	.word	0x08002709
 80025d0:	08002709 	.word	0x08002709
 80025d4:	08002679 	.word	0x08002679
 80025d8:	08002709 	.word	0x08002709
 80025dc:	08002709 	.word	0x08002709
 80025e0:	08002709 	.word	0x08002709
 80025e4:	080026c1 	.word	0x080026c1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ec:	4a6d      	ldr	r2, [pc, #436]	@ (80027a4 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80025ee:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f4:	4a6c      	ldr	r2, [pc, #432]	@ (80027a8 <HAL_TIM_PWM_Start_DMA+0x330>)
 80025f6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fc:	4a6b      	ldr	r2, [pc, #428]	@ (80027ac <HAL_TIM_PWM_Start_DMA+0x334>)
 80025fe:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002604:	6879      	ldr	r1, [r7, #4]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	3334      	adds	r3, #52	@ 0x34
 800260c:	461a      	mov	r2, r3
 800260e:	887b      	ldrh	r3, [r7, #2]
 8002610:	f7fe feec 	bl	80013ec <HAL_DMA_Start_IT>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e0bd      	b.n	800279a <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68da      	ldr	r2, [r3, #12]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800262c:	60da      	str	r2, [r3, #12]
      break;
 800262e:	e06e      	b.n	800270e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002634:	4a5b      	ldr	r2, [pc, #364]	@ (80027a4 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002636:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800263c:	4a5a      	ldr	r2, [pc, #360]	@ (80027a8 <HAL_TIM_PWM_Start_DMA+0x330>)
 800263e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002644:	4a59      	ldr	r2, [pc, #356]	@ (80027ac <HAL_TIM_PWM_Start_DMA+0x334>)
 8002646:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800264c:	6879      	ldr	r1, [r7, #4]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	3338      	adds	r3, #56	@ 0x38
 8002654:	461a      	mov	r2, r3
 8002656:	887b      	ldrh	r3, [r7, #2]
 8002658:	f7fe fec8 	bl	80013ec <HAL_DMA_Start_IT>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e099      	b.n	800279a <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68da      	ldr	r2, [r3, #12]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002674:	60da      	str	r2, [r3, #12]
      break;
 8002676:	e04a      	b.n	800270e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800267c:	4a49      	ldr	r2, [pc, #292]	@ (80027a4 <HAL_TIM_PWM_Start_DMA+0x32c>)
 800267e:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002684:	4a48      	ldr	r2, [pc, #288]	@ (80027a8 <HAL_TIM_PWM_Start_DMA+0x330>)
 8002686:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800268c:	4a47      	ldr	r2, [pc, #284]	@ (80027ac <HAL_TIM_PWM_Start_DMA+0x334>)
 800268e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002694:	6879      	ldr	r1, [r7, #4]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	333c      	adds	r3, #60	@ 0x3c
 800269c:	461a      	mov	r2, r3
 800269e:	887b      	ldrh	r3, [r7, #2]
 80026a0:	f7fe fea4 	bl	80013ec <HAL_DMA_Start_IT>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e075      	b.n	800279a <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68da      	ldr	r2, [r3, #12]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026bc:	60da      	str	r2, [r3, #12]
      break;
 80026be:	e026      	b.n	800270e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c4:	4a37      	ldr	r2, [pc, #220]	@ (80027a4 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80026c6:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026cc:	4a36      	ldr	r2, [pc, #216]	@ (80027a8 <HAL_TIM_PWM_Start_DMA+0x330>)
 80026ce:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d4:	4a35      	ldr	r2, [pc, #212]	@ (80027ac <HAL_TIM_PWM_Start_DMA+0x334>)
 80026d6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80026dc:	6879      	ldr	r1, [r7, #4]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	3340      	adds	r3, #64	@ 0x40
 80026e4:	461a      	mov	r2, r3
 80026e6:	887b      	ldrh	r3, [r7, #2]
 80026e8:	f7fe fe80 	bl	80013ec <HAL_DMA_Start_IT>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e051      	b.n	800279a <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68da      	ldr	r2, [r3, #12]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002704:	60da      	str	r2, [r3, #12]
      break;
 8002706:	e002      	b.n	800270e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	75fb      	strb	r3, [r7, #23]
      break;
 800270c:	bf00      	nop
  }

  if (status == HAL_OK)
 800270e:	7dfb      	ldrb	r3, [r7, #23]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d141      	bne.n	8002798 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2201      	movs	r2, #1
 800271a:	68b9      	ldr	r1, [r7, #8]
 800271c:	4618      	mov	r0, r3
 800271e:	f000 fe0b 	bl	8003338 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a22      	ldr	r2, [pc, #136]	@ (80027b0 <HAL_TIM_PWM_Start_DMA+0x338>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d107      	bne.n	800273c <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800273a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a1b      	ldr	r2, [pc, #108]	@ (80027b0 <HAL_TIM_PWM_Start_DMA+0x338>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d00e      	beq.n	8002764 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800274e:	d009      	beq.n	8002764 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a17      	ldr	r2, [pc, #92]	@ (80027b4 <HAL_TIM_PWM_Start_DMA+0x33c>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d004      	beq.n	8002764 <HAL_TIM_PWM_Start_DMA+0x2ec>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a16      	ldr	r2, [pc, #88]	@ (80027b8 <HAL_TIM_PWM_Start_DMA+0x340>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d111      	bne.n	8002788 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	2b06      	cmp	r3, #6
 8002774:	d010      	beq.n	8002798 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f042 0201 	orr.w	r2, r2, #1
 8002784:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002786:	e007      	b.n	8002798 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f042 0201 	orr.w	r2, r2, #1
 8002796:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002798:	7dfb      	ldrb	r3, [r7, #23]
}
 800279a:	4618      	mov	r0, r3
 800279c:	3718      	adds	r7, #24
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	08002d11 	.word	0x08002d11
 80027a8:	08002db9 	.word	0x08002db9
 80027ac:	08002c7f 	.word	0x08002c7f
 80027b0:	40012c00 	.word	0x40012c00
 80027b4:	40000400 	.word	0x40000400
 80027b8:	40000800 	.word	0x40000800

080027bc <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027c6:	2300      	movs	r3, #0
 80027c8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	2b0c      	cmp	r3, #12
 80027ce:	d855      	bhi.n	800287c <HAL_TIM_PWM_Stop_DMA+0xc0>
 80027d0:	a201      	add	r2, pc, #4	@ (adr r2, 80027d8 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80027d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d6:	bf00      	nop
 80027d8:	0800280d 	.word	0x0800280d
 80027dc:	0800287d 	.word	0x0800287d
 80027e0:	0800287d 	.word	0x0800287d
 80027e4:	0800287d 	.word	0x0800287d
 80027e8:	08002829 	.word	0x08002829
 80027ec:	0800287d 	.word	0x0800287d
 80027f0:	0800287d 	.word	0x0800287d
 80027f4:	0800287d 	.word	0x0800287d
 80027f8:	08002845 	.word	0x08002845
 80027fc:	0800287d 	.word	0x0800287d
 8002800:	0800287d 	.word	0x0800287d
 8002804:	0800287d 	.word	0x0800287d
 8002808:	08002861 	.word	0x08002861
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68da      	ldr	r2, [r3, #12]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800281a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002820:	4618      	mov	r0, r3
 8002822:	f7fe fe43 	bl	80014ac <HAL_DMA_Abort_IT>
      break;
 8002826:	e02c      	b.n	8002882 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68da      	ldr	r2, [r3, #12]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002836:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800283c:	4618      	mov	r0, r3
 800283e:	f7fe fe35 	bl	80014ac <HAL_DMA_Abort_IT>
      break;
 8002842:	e01e      	b.n	8002882 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68da      	ldr	r2, [r3, #12]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002852:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002858:	4618      	mov	r0, r3
 800285a:	f7fe fe27 	bl	80014ac <HAL_DMA_Abort_IT>
      break;
 800285e:	e010      	b.n	8002882 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800286e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002874:	4618      	mov	r0, r3
 8002876:	f7fe fe19 	bl	80014ac <HAL_DMA_Abort_IT>
      break;
 800287a:	e002      	b.n	8002882 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	73fb      	strb	r3, [r7, #15]
      break;
 8002880:	bf00      	nop
  }

  if (status == HAL_OK)
 8002882:	7bfb      	ldrb	r3, [r7, #15]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d157      	bne.n	8002938 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2200      	movs	r2, #0
 800288e:	6839      	ldr	r1, [r7, #0]
 8002890:	4618      	mov	r0, r3
 8002892:	f000 fd51 	bl	8003338 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a2a      	ldr	r2, [pc, #168]	@ (8002944 <HAL_TIM_PWM_Stop_DMA+0x188>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d117      	bne.n	80028d0 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6a1a      	ldr	r2, [r3, #32]
 80028a6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80028aa:	4013      	ands	r3, r2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d10f      	bne.n	80028d0 <HAL_TIM_PWM_Stop_DMA+0x114>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6a1a      	ldr	r2, [r3, #32]
 80028b6:	f240 4344 	movw	r3, #1092	@ 0x444
 80028ba:	4013      	ands	r3, r2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d107      	bne.n	80028d0 <HAL_TIM_PWM_Stop_DMA+0x114>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80028ce:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6a1a      	ldr	r2, [r3, #32]
 80028d6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80028da:	4013      	ands	r3, r2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10f      	bne.n	8002900 <HAL_TIM_PWM_Stop_DMA+0x144>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6a1a      	ldr	r2, [r3, #32]
 80028e6:	f240 4344 	movw	r3, #1092	@ 0x444
 80028ea:	4013      	ands	r3, r2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d107      	bne.n	8002900 <HAL_TIM_PWM_Stop_DMA+0x144>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 0201 	bic.w	r2, r2, #1
 80028fe:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d104      	bne.n	8002910 <HAL_TIM_PWM_Stop_DMA+0x154>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800290e:	e013      	b.n	8002938 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	2b04      	cmp	r3, #4
 8002914:	d104      	bne.n	8002920 <HAL_TIM_PWM_Stop_DMA+0x164>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2201      	movs	r2, #1
 800291a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800291e:	e00b      	b.n	8002938 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	2b08      	cmp	r3, #8
 8002924:	d104      	bne.n	8002930 <HAL_TIM_PWM_Stop_DMA+0x174>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800292e:	e003      	b.n	8002938 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8002938:	7bfb      	ldrb	r3, [r7, #15]
}
 800293a:	4618      	mov	r0, r3
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40012c00 	.word	0x40012c00

08002948 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002954:	2300      	movs	r3, #0
 8002956:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800295e:	2b01      	cmp	r3, #1
 8002960:	d101      	bne.n	8002966 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002962:	2302      	movs	r3, #2
 8002964:	e0ae      	b.n	8002ac4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b0c      	cmp	r3, #12
 8002972:	f200 809f 	bhi.w	8002ab4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002976:	a201      	add	r2, pc, #4	@ (adr r2, 800297c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800297c:	080029b1 	.word	0x080029b1
 8002980:	08002ab5 	.word	0x08002ab5
 8002984:	08002ab5 	.word	0x08002ab5
 8002988:	08002ab5 	.word	0x08002ab5
 800298c:	080029f1 	.word	0x080029f1
 8002990:	08002ab5 	.word	0x08002ab5
 8002994:	08002ab5 	.word	0x08002ab5
 8002998:	08002ab5 	.word	0x08002ab5
 800299c:	08002a33 	.word	0x08002a33
 80029a0:	08002ab5 	.word	0x08002ab5
 80029a4:	08002ab5 	.word	0x08002ab5
 80029a8:	08002ab5 	.word	0x08002ab5
 80029ac:	08002a73 	.word	0x08002a73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68b9      	ldr	r1, [r7, #8]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 faa0 	bl	8002efc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	699a      	ldr	r2, [r3, #24]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f042 0208 	orr.w	r2, r2, #8
 80029ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	699a      	ldr	r2, [r3, #24]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 0204 	bic.w	r2, r2, #4
 80029da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6999      	ldr	r1, [r3, #24]
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	691a      	ldr	r2, [r3, #16]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	619a      	str	r2, [r3, #24]
      break;
 80029ee:	e064      	b.n	8002aba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68b9      	ldr	r1, [r7, #8]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f000 fae6 	bl	8002fc8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	699a      	ldr	r2, [r3, #24]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	699a      	ldr	r2, [r3, #24]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6999      	ldr	r1, [r3, #24]
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	021a      	lsls	r2, r3, #8
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	619a      	str	r2, [r3, #24]
      break;
 8002a30:	e043      	b.n	8002aba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68b9      	ldr	r1, [r7, #8]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f000 fb2f 	bl	800309c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	69da      	ldr	r2, [r3, #28]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f042 0208 	orr.w	r2, r2, #8
 8002a4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	69da      	ldr	r2, [r3, #28]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 0204 	bic.w	r2, r2, #4
 8002a5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	69d9      	ldr	r1, [r3, #28]
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	691a      	ldr	r2, [r3, #16]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	61da      	str	r2, [r3, #28]
      break;
 8002a70:	e023      	b.n	8002aba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68b9      	ldr	r1, [r7, #8]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f000 fb79 	bl	8003170 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	69da      	ldr	r2, [r3, #28]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	69da      	ldr	r2, [r3, #28]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	69d9      	ldr	r1, [r3, #28]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	021a      	lsls	r2, r3, #8
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	61da      	str	r2, [r3, #28]
      break;
 8002ab2:	e002      	b.n	8002aba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8002ab8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002ac2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3718      	adds	r7, #24
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d101      	bne.n	8002ae8 <HAL_TIM_ConfigClockSource+0x1c>
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	e0b4      	b.n	8002c52 <HAL_TIM_ConfigClockSource+0x186>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2202      	movs	r2, #2
 8002af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002b06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68ba      	ldr	r2, [r7, #8]
 8002b16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b20:	d03e      	beq.n	8002ba0 <HAL_TIM_ConfigClockSource+0xd4>
 8002b22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b26:	f200 8087 	bhi.w	8002c38 <HAL_TIM_ConfigClockSource+0x16c>
 8002b2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b2e:	f000 8086 	beq.w	8002c3e <HAL_TIM_ConfigClockSource+0x172>
 8002b32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b36:	d87f      	bhi.n	8002c38 <HAL_TIM_ConfigClockSource+0x16c>
 8002b38:	2b70      	cmp	r3, #112	@ 0x70
 8002b3a:	d01a      	beq.n	8002b72 <HAL_TIM_ConfigClockSource+0xa6>
 8002b3c:	2b70      	cmp	r3, #112	@ 0x70
 8002b3e:	d87b      	bhi.n	8002c38 <HAL_TIM_ConfigClockSource+0x16c>
 8002b40:	2b60      	cmp	r3, #96	@ 0x60
 8002b42:	d050      	beq.n	8002be6 <HAL_TIM_ConfigClockSource+0x11a>
 8002b44:	2b60      	cmp	r3, #96	@ 0x60
 8002b46:	d877      	bhi.n	8002c38 <HAL_TIM_ConfigClockSource+0x16c>
 8002b48:	2b50      	cmp	r3, #80	@ 0x50
 8002b4a:	d03c      	beq.n	8002bc6 <HAL_TIM_ConfigClockSource+0xfa>
 8002b4c:	2b50      	cmp	r3, #80	@ 0x50
 8002b4e:	d873      	bhi.n	8002c38 <HAL_TIM_ConfigClockSource+0x16c>
 8002b50:	2b40      	cmp	r3, #64	@ 0x40
 8002b52:	d058      	beq.n	8002c06 <HAL_TIM_ConfigClockSource+0x13a>
 8002b54:	2b40      	cmp	r3, #64	@ 0x40
 8002b56:	d86f      	bhi.n	8002c38 <HAL_TIM_ConfigClockSource+0x16c>
 8002b58:	2b30      	cmp	r3, #48	@ 0x30
 8002b5a:	d064      	beq.n	8002c26 <HAL_TIM_ConfigClockSource+0x15a>
 8002b5c:	2b30      	cmp	r3, #48	@ 0x30
 8002b5e:	d86b      	bhi.n	8002c38 <HAL_TIM_ConfigClockSource+0x16c>
 8002b60:	2b20      	cmp	r3, #32
 8002b62:	d060      	beq.n	8002c26 <HAL_TIM_ConfigClockSource+0x15a>
 8002b64:	2b20      	cmp	r3, #32
 8002b66:	d867      	bhi.n	8002c38 <HAL_TIM_ConfigClockSource+0x16c>
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d05c      	beq.n	8002c26 <HAL_TIM_ConfigClockSource+0x15a>
 8002b6c:	2b10      	cmp	r3, #16
 8002b6e:	d05a      	beq.n	8002c26 <HAL_TIM_ConfigClockSource+0x15a>
 8002b70:	e062      	b.n	8002c38 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b82:	f000 fbba 	bl	80032fa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002b94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68ba      	ldr	r2, [r7, #8]
 8002b9c:	609a      	str	r2, [r3, #8]
      break;
 8002b9e:	e04f      	b.n	8002c40 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002bb0:	f000 fba3 	bl	80032fa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002bc2:	609a      	str	r2, [r3, #8]
      break;
 8002bc4:	e03c      	b.n	8002c40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	f000 fb1a 	bl	800320c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2150      	movs	r1, #80	@ 0x50
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 fb71 	bl	80032c6 <TIM_ITRx_SetConfig>
      break;
 8002be4:	e02c      	b.n	8002c40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	f000 fb38 	bl	8003268 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2160      	movs	r1, #96	@ 0x60
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 fb61 	bl	80032c6 <TIM_ITRx_SetConfig>
      break;
 8002c04:	e01c      	b.n	8002c40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c12:	461a      	mov	r2, r3
 8002c14:	f000 fafa 	bl	800320c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2140      	movs	r1, #64	@ 0x40
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 fb51 	bl	80032c6 <TIM_ITRx_SetConfig>
      break;
 8002c24:	e00c      	b.n	8002c40 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4610      	mov	r0, r2
 8002c32:	f000 fb48 	bl	80032c6 <TIM_ITRx_SetConfig>
      break;
 8002c36:	e003      	b.n	8002c40 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c3c:	e000      	b.n	8002c40 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc80      	pop	{r7}
 8002c6a:	4770      	bx	lr

08002c6c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bc80      	pop	{r7}
 8002c7c:	4770      	bx	lr

08002c7e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b084      	sub	sp, #16
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d107      	bne.n	8002ca6 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ca4:	e02a      	b.n	8002cfc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d107      	bne.n	8002cc0 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002cbe:	e01d      	b.n	8002cfc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d107      	bne.n	8002cda <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2204      	movs	r2, #4
 8002cce:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002cd8:	e010      	b.n	8002cfc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d107      	bne.n	8002cf4 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2208      	movs	r2, #8
 8002ce8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002cf2:	e003      	b.n	8002cfc <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f7ff ffb5 	bl	8002c6c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	771a      	strb	r2, [r3, #28]
}
 8002d08:	bf00      	nop
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d10b      	bne.n	8002d40 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d136      	bne.n	8002da4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d3e:	e031      	b.n	8002da4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d10b      	bne.n	8002d62 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2202      	movs	r2, #2
 8002d4e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d125      	bne.n	8002da4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d60:	e020      	b.n	8002da4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d10b      	bne.n	8002d84 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2204      	movs	r2, #4
 8002d70:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d114      	bne.n	8002da4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d82:	e00f      	b.n	8002da4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d10a      	bne.n	8002da4 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2208      	movs	r2, #8
 8002d92:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d103      	bne.n	8002da4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f7fd f9d1 	bl	800014c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	771a      	strb	r2, [r3, #28]
}
 8002db0:	bf00      	nop
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d103      	bne.n	8002dd8 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	771a      	strb	r2, [r3, #28]
 8002dd6:	e019      	b.n	8002e0c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d103      	bne.n	8002dea <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2202      	movs	r2, #2
 8002de6:	771a      	strb	r2, [r3, #28]
 8002de8:	e010      	b.n	8002e0c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d103      	bne.n	8002dfc <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2204      	movs	r2, #4
 8002df8:	771a      	strb	r2, [r3, #28]
 8002dfa:	e007      	b.n	8002e0c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d102      	bne.n	8002e0c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2208      	movs	r2, #8
 8002e0a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f7ff ff24 	bl	8002c5a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	771a      	strb	r2, [r3, #28]
}
 8002e18:	bf00      	nop
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a2f      	ldr	r2, [pc, #188]	@ (8002ef0 <TIM_Base_SetConfig+0xd0>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d00b      	beq.n	8002e50 <TIM_Base_SetConfig+0x30>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e3e:	d007      	beq.n	8002e50 <TIM_Base_SetConfig+0x30>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a2c      	ldr	r2, [pc, #176]	@ (8002ef4 <TIM_Base_SetConfig+0xd4>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d003      	beq.n	8002e50 <TIM_Base_SetConfig+0x30>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4a2b      	ldr	r2, [pc, #172]	@ (8002ef8 <TIM_Base_SetConfig+0xd8>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d108      	bne.n	8002e62 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a22      	ldr	r2, [pc, #136]	@ (8002ef0 <TIM_Base_SetConfig+0xd0>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d00b      	beq.n	8002e82 <TIM_Base_SetConfig+0x62>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e70:	d007      	beq.n	8002e82 <TIM_Base_SetConfig+0x62>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a1f      	ldr	r2, [pc, #124]	@ (8002ef4 <TIM_Base_SetConfig+0xd4>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d003      	beq.n	8002e82 <TIM_Base_SetConfig+0x62>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a1e      	ldr	r2, [pc, #120]	@ (8002ef8 <TIM_Base_SetConfig+0xd8>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d108      	bne.n	8002e94 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a0d      	ldr	r2, [pc, #52]	@ (8002ef0 <TIM_Base_SetConfig+0xd0>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d103      	bne.n	8002ec8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	691a      	ldr	r2, [r3, #16]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d005      	beq.n	8002ee6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	f023 0201 	bic.w	r2, r3, #1
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	611a      	str	r2, [r3, #16]
  }
}
 8002ee6:	bf00      	nop
 8002ee8:	3714      	adds	r7, #20
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bc80      	pop	{r7}
 8002eee:	4770      	bx	lr
 8002ef0:	40012c00 	.word	0x40012c00
 8002ef4:	40000400 	.word	0x40000400
 8002ef8:	40000800 	.word	0x40000800

08002efc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b087      	sub	sp, #28
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	f023 0201 	bic.w	r2, r3, #1
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f023 0303 	bic.w	r3, r3, #3
 8002f32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	f023 0302 	bic.w	r3, r3, #2
 8002f44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a1c      	ldr	r2, [pc, #112]	@ (8002fc4 <TIM_OC1_SetConfig+0xc8>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d10c      	bne.n	8002f72 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	f023 0308 	bic.w	r3, r3, #8
 8002f5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	697a      	ldr	r2, [r7, #20]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	f023 0304 	bic.w	r3, r3, #4
 8002f70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a13      	ldr	r2, [pc, #76]	@ (8002fc4 <TIM_OC1_SetConfig+0xc8>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d111      	bne.n	8002f9e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002f88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	621a      	str	r2, [r3, #32]
}
 8002fb8:	bf00      	nop
 8002fba:	371c      	adds	r7, #28
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bc80      	pop	{r7}
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	40012c00 	.word	0x40012c00

08002fc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b087      	sub	sp, #28
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	f023 0210 	bic.w	r2, r3, #16
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ffe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	021b      	lsls	r3, r3, #8
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	4313      	orrs	r3, r2
 800300a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	f023 0320 	bic.w	r3, r3, #32
 8003012:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	011b      	lsls	r3, r3, #4
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	4313      	orrs	r3, r2
 800301e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a1d      	ldr	r2, [pc, #116]	@ (8003098 <TIM_OC2_SetConfig+0xd0>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d10d      	bne.n	8003044 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800302e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	011b      	lsls	r3, r3, #4
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	4313      	orrs	r3, r2
 800303a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003042:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a14      	ldr	r2, [pc, #80]	@ (8003098 <TIM_OC2_SetConfig+0xd0>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d113      	bne.n	8003074 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003052:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800305a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	4313      	orrs	r3, r2
 8003066:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	4313      	orrs	r3, r2
 8003072:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	621a      	str	r2, [r3, #32]
}
 800308e:	bf00      	nop
 8003090:	371c      	adds	r7, #28
 8003092:	46bd      	mov	sp, r7
 8003094:	bc80      	pop	{r7}
 8003096:	4770      	bx	lr
 8003098:	40012c00 	.word	0x40012c00

0800309c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800309c:	b480      	push	{r7}
 800309e:	b087      	sub	sp, #28
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f023 0303 	bic.w	r3, r3, #3
 80030d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	4313      	orrs	r3, r2
 80030dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80030e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	021b      	lsls	r3, r3, #8
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a1d      	ldr	r2, [pc, #116]	@ (800316c <TIM_OC3_SetConfig+0xd0>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d10d      	bne.n	8003116 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003100:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	021b      	lsls	r3, r3, #8
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	4313      	orrs	r3, r2
 800310c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003114:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a14      	ldr	r2, [pc, #80]	@ (800316c <TIM_OC3_SetConfig+0xd0>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d113      	bne.n	8003146 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003124:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800312c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	011b      	lsls	r3, r3, #4
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	4313      	orrs	r3, r2
 8003138:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	011b      	lsls	r3, r3, #4
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	4313      	orrs	r3, r2
 8003144:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685a      	ldr	r2, [r3, #4]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	621a      	str	r2, [r3, #32]
}
 8003160:	bf00      	nop
 8003162:	371c      	adds	r7, #28
 8003164:	46bd      	mov	sp, r7
 8003166:	bc80      	pop	{r7}
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	40012c00 	.word	0x40012c00

08003170 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003170:	b480      	push	{r7}
 8003172:	b087      	sub	sp, #28
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800319e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	021b      	lsls	r3, r3, #8
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80031ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	031b      	lsls	r3, r3, #12
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a0f      	ldr	r2, [pc, #60]	@ (8003208 <TIM_OC4_SetConfig+0x98>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d109      	bne.n	80031e4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80031d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	019b      	lsls	r3, r3, #6
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	621a      	str	r2, [r3, #32]
}
 80031fe:	bf00      	nop
 8003200:	371c      	adds	r7, #28
 8003202:	46bd      	mov	sp, r7
 8003204:	bc80      	pop	{r7}
 8003206:	4770      	bx	lr
 8003208:	40012c00 	.word	0x40012c00

0800320c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800320c:	b480      	push	{r7}
 800320e:	b087      	sub	sp, #28
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	f023 0201 	bic.w	r2, r3, #1
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003236:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	011b      	lsls	r3, r3, #4
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	4313      	orrs	r3, r2
 8003240:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f023 030a 	bic.w	r3, r3, #10
 8003248:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	4313      	orrs	r3, r2
 8003250:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	621a      	str	r2, [r3, #32]
}
 800325e:	bf00      	nop
 8003260:	371c      	adds	r7, #28
 8003262:	46bd      	mov	sp, r7
 8003264:	bc80      	pop	{r7}
 8003266:	4770      	bx	lr

08003268 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003268:	b480      	push	{r7}
 800326a:	b087      	sub	sp, #28
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6a1b      	ldr	r3, [r3, #32]
 8003278:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	f023 0210 	bic.w	r2, r3, #16
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003292:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	031b      	lsls	r3, r3, #12
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	4313      	orrs	r3, r2
 800329c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80032a4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	621a      	str	r2, [r3, #32]
}
 80032bc:	bf00      	nop
 80032be:	371c      	adds	r7, #28
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bc80      	pop	{r7}
 80032c4:	4770      	bx	lr

080032c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032c6:	b480      	push	{r7}
 80032c8:	b085      	sub	sp, #20
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
 80032ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	f043 0307 	orr.w	r3, r3, #7
 80032e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	609a      	str	r2, [r3, #8]
}
 80032f0:	bf00      	nop
 80032f2:	3714      	adds	r7, #20
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bc80      	pop	{r7}
 80032f8:	4770      	bx	lr

080032fa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032fa:	b480      	push	{r7}
 80032fc:	b087      	sub	sp, #28
 80032fe:	af00      	add	r7, sp, #0
 8003300:	60f8      	str	r0, [r7, #12]
 8003302:	60b9      	str	r1, [r7, #8]
 8003304:	607a      	str	r2, [r7, #4]
 8003306:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003314:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	021a      	lsls	r2, r3, #8
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	431a      	orrs	r2, r3
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	4313      	orrs	r3, r2
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	4313      	orrs	r3, r2
 8003326:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	609a      	str	r2, [r3, #8]
}
 800332e:	bf00      	nop
 8003330:	371c      	adds	r7, #28
 8003332:	46bd      	mov	sp, r7
 8003334:	bc80      	pop	{r7}
 8003336:	4770      	bx	lr

08003338 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003338:	b480      	push	{r7}
 800333a:	b087      	sub	sp, #28
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	f003 031f 	and.w	r3, r3, #31
 800334a:	2201      	movs	r2, #1
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6a1a      	ldr	r2, [r3, #32]
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	43db      	mvns	r3, r3
 800335a:	401a      	ands	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6a1a      	ldr	r2, [r3, #32]
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	f003 031f 	and.w	r3, r3, #31
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	fa01 f303 	lsl.w	r3, r1, r3
 8003370:	431a      	orrs	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	621a      	str	r2, [r3, #32]
}
 8003376:	bf00      	nop
 8003378:	371c      	adds	r7, #28
 800337a:	46bd      	mov	sp, r7
 800337c:	bc80      	pop	{r7}
 800337e:	4770      	bx	lr

08003380 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003390:	2b01      	cmp	r3, #1
 8003392:	d101      	bne.n	8003398 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003394:	2302      	movs	r3, #2
 8003396:	e046      	b.n	8003426 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2202      	movs	r2, #2
 80033a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a16      	ldr	r2, [pc, #88]	@ (8003430 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d00e      	beq.n	80033fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033e4:	d009      	beq.n	80033fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a12      	ldr	r2, [pc, #72]	@ (8003434 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d004      	beq.n	80033fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a10      	ldr	r2, [pc, #64]	@ (8003438 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d10c      	bne.n	8003414 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003400:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	4313      	orrs	r3, r2
 800340a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68ba      	ldr	r2, [r7, #8]
 8003412:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3714      	adds	r7, #20
 800342a:	46bd      	mov	sp, r7
 800342c:	bc80      	pop	{r7}
 800342e:	4770      	bx	lr
 8003430:	40012c00 	.word	0x40012c00
 8003434:	40000400 	.word	0x40000400
 8003438:	40000800 	.word	0x40000800

0800343c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003446:	2300      	movs	r3, #0
 8003448:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003450:	2b01      	cmp	r3, #1
 8003452:	d101      	bne.n	8003458 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003454:	2302      	movs	r3, #2
 8003456:	e03d      	b.n	80034d4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	4313      	orrs	r3, r2
 800346c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	4313      	orrs	r3, r2
 800347a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	4313      	orrs	r3, r2
 8003488:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4313      	orrs	r3, r2
 8003496:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	69db      	ldr	r3, [r3, #28]
 80034be:	4313      	orrs	r3, r2
 80034c0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3714      	adds	r7, #20
 80034d8:	46bd      	mov	sp, r7
 80034da:	bc80      	pop	{r7}
 80034dc:	4770      	bx	lr

080034de <memset>:
 80034de:	4603      	mov	r3, r0
 80034e0:	4402      	add	r2, r0
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d100      	bne.n	80034e8 <memset+0xa>
 80034e6:	4770      	bx	lr
 80034e8:	f803 1b01 	strb.w	r1, [r3], #1
 80034ec:	e7f9      	b.n	80034e2 <memset+0x4>
	...

080034f0 <__libc_init_array>:
 80034f0:	b570      	push	{r4, r5, r6, lr}
 80034f2:	2600      	movs	r6, #0
 80034f4:	4d0c      	ldr	r5, [pc, #48]	@ (8003528 <__libc_init_array+0x38>)
 80034f6:	4c0d      	ldr	r4, [pc, #52]	@ (800352c <__libc_init_array+0x3c>)
 80034f8:	1b64      	subs	r4, r4, r5
 80034fa:	10a4      	asrs	r4, r4, #2
 80034fc:	42a6      	cmp	r6, r4
 80034fe:	d109      	bne.n	8003514 <__libc_init_array+0x24>
 8003500:	f000 f81a 	bl	8003538 <_init>
 8003504:	2600      	movs	r6, #0
 8003506:	4d0a      	ldr	r5, [pc, #40]	@ (8003530 <__libc_init_array+0x40>)
 8003508:	4c0a      	ldr	r4, [pc, #40]	@ (8003534 <__libc_init_array+0x44>)
 800350a:	1b64      	subs	r4, r4, r5
 800350c:	10a4      	asrs	r4, r4, #2
 800350e:	42a6      	cmp	r6, r4
 8003510:	d105      	bne.n	800351e <__libc_init_array+0x2e>
 8003512:	bd70      	pop	{r4, r5, r6, pc}
 8003514:	f855 3b04 	ldr.w	r3, [r5], #4
 8003518:	4798      	blx	r3
 800351a:	3601      	adds	r6, #1
 800351c:	e7ee      	b.n	80034fc <__libc_init_array+0xc>
 800351e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003522:	4798      	blx	r3
 8003524:	3601      	adds	r6, #1
 8003526:	e7f2      	b.n	800350e <__libc_init_array+0x1e>
 8003528:	08003574 	.word	0x08003574
 800352c:	08003574 	.word	0x08003574
 8003530:	08003574 	.word	0x08003574
 8003534:	08003578 	.word	0x08003578

08003538 <_init>:
 8003538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800353a:	bf00      	nop
 800353c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800353e:	bc08      	pop	{r3}
 8003540:	469e      	mov	lr, r3
 8003542:	4770      	bx	lr

08003544 <_fini>:
 8003544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003546:	bf00      	nop
 8003548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800354a:	bc08      	pop	{r3}
 800354c:	469e      	mov	lr, r3
 800354e:	4770      	bx	lr
