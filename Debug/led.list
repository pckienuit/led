
led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004808  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08004914  08004914  00005914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a9c  08004a9c  00006044  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004a9c  08004a9c  00006044  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004a9c  08004a9c  00006044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a9c  08004a9c  00005a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004aa0  08004aa0  00005aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000044  20000000  08004aa4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e9c  20000044  08004ae8  00006044  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ee0  08004ae8  00006ee0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006044  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ad01  00000000  00000000  0000606d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ee2  00000000  00000000  00010d6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c68  00000000  00000000  00012c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000099b  00000000  00000000  000138b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000184a5  00000000  00000000  00014253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd43  00000000  00000000  0002c6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e062  00000000  00000000  0003a43b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c849d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034d4  00000000  00000000  000c84e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000cb9b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000044 	.word	0x20000044
 8000128:	00000000 	.word	0x00000000
 800012c:	080048fc 	.word	0x080048fc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000048 	.word	0x20000048
 8000148:	080048fc 	.word	0x080048fc

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2iz>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80006fc:	d30f      	bcc.n	800071e <__aeabi_f2iz+0x2a>
 80006fe:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d90d      	bls.n	8000724 <__aeabi_f2iz+0x30>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000710:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	bf18      	it	ne
 800071a:	4240      	negne	r0, r0
 800071c:	4770      	bx	lr
 800071e:	f04f 0000 	mov.w	r0, #0
 8000722:	4770      	bx	lr
 8000724:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000728:	d101      	bne.n	800072e <__aeabi_f2iz+0x3a>
 800072a:	0242      	lsls	r2, r0, #9
 800072c:	d105      	bne.n	800073a <__aeabi_f2iz+0x46>
 800072e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000732:	bf08      	it	eq
 8000734:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr

08000740 <__aeabi_f2uiz>:
 8000740:	0042      	lsls	r2, r0, #1
 8000742:	d20e      	bcs.n	8000762 <__aeabi_f2uiz+0x22>
 8000744:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000748:	d30b      	bcc.n	8000762 <__aeabi_f2uiz+0x22>
 800074a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800074e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000752:	d409      	bmi.n	8000768 <__aeabi_f2uiz+0x28>
 8000754:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000758:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800075c:	fa23 f002 	lsr.w	r0, r3, r2
 8000760:	4770      	bx	lr
 8000762:	f04f 0000 	mov.w	r0, #0
 8000766:	4770      	bx	lr
 8000768:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800076c:	d101      	bne.n	8000772 <__aeabi_f2uiz+0x32>
 800076e:	0242      	lsls	r2, r0, #9
 8000770:	d102      	bne.n	8000778 <__aeabi_f2uiz+0x38>
 8000772:	f04f 30ff 	mov.w	r0, #4294967295
 8000776:	4770      	bx	lr
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop

08000780 <LCD_Parallel_Init>:
#include "lcd_parallel.h"
#include <string.h>
#include <stdio.h>

void LCD_Parallel_Init(void) {
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
    // Initialize GPIO pins
    LCD_Parallel_GPIO_Init();
 8000784:	f000 f840 	bl	8000808 <LCD_Parallel_GPIO_Init>
    
    // Wait for LCD to power up completely
    HAL_Delay(100);
 8000788:	2064      	movs	r0, #100	@ 0x64
 800078a:	f001 fa95 	bl	8001cb8 <HAL_Delay>
    
    // Set RS = 0 (command mode)
    HAL_GPIO_WritePin(LCD_RS_PORT, LCD_RS_PIN, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	2101      	movs	r1, #1
 8000792:	481c      	ldr	r0, [pc, #112]	@ (8000804 <LCD_Parallel_Init+0x84>)
 8000794:	f002 fafe 	bl	8002d94 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_E_PORT, LCD_E_PIN, GPIO_PIN_RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	2102      	movs	r1, #2
 800079c:	4819      	ldr	r0, [pc, #100]	@ (8000804 <LCD_Parallel_Init+0x84>)
 800079e:	f002 faf9 	bl	8002d94 <HAL_GPIO_WritePin>
    
    // Initialize LCD in 4-bit mode according to datasheet timing
    // First: Send 0x3 three times to establish 8-bit communication
    LCD_Parallel_Write4Bits(0x03);
 80007a2:	2003      	movs	r0, #3
 80007a4:	f000 f90a 	bl	80009bc <LCD_Parallel_Write4Bits>
    HAL_Delay(10);  // Wait > 4.1ms
 80007a8:	200a      	movs	r0, #10
 80007aa:	f001 fa85 	bl	8001cb8 <HAL_Delay>
    
    LCD_Parallel_Write4Bits(0x03);
 80007ae:	2003      	movs	r0, #3
 80007b0:	f000 f904 	bl	80009bc <LCD_Parallel_Write4Bits>
    HAL_Delay(5);   // Wait > 100us
 80007b4:	2005      	movs	r0, #5
 80007b6:	f001 fa7f 	bl	8001cb8 <HAL_Delay>
    
    LCD_Parallel_Write4Bits(0x03);
 80007ba:	2003      	movs	r0, #3
 80007bc:	f000 f8fe 	bl	80009bc <LCD_Parallel_Write4Bits>
    HAL_Delay(5);   // Wait > 100us
 80007c0:	2005      	movs	r0, #5
 80007c2:	f001 fa79 	bl	8001cb8 <HAL_Delay>
    
    // Switch to 4-bit mode
    LCD_Parallel_Write4Bits(0x02);
 80007c6:	2002      	movs	r0, #2
 80007c8:	f000 f8f8 	bl	80009bc <LCD_Parallel_Write4Bits>
    HAL_Delay(5);
 80007cc:	2005      	movs	r0, #5
 80007ce:	f001 fa73 	bl	8001cb8 <HAL_Delay>
    
    // Function set: 4-bit, 2 line, 5x8 dots
    LCD_Parallel_SendCommand(LCD_FUNCTION_SET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
 80007d2:	2028      	movs	r0, #40	@ 0x28
 80007d4:	f000 f8af 	bl	8000936 <LCD_Parallel_SendCommand>
    HAL_Delay(5);
 80007d8:	2005      	movs	r0, #5
 80007da:	f001 fa6d 	bl	8001cb8 <HAL_Delay>
    
    // Display control: display on, cursor off, blink off
    LCD_Parallel_SendCommand(LCD_DISPLAY_CONTROL | LCD_DISPLAY_ON | LCD_CURSOR_OFF | LCD_BLINK_OFF);
 80007de:	200c      	movs	r0, #12
 80007e0:	f000 f8a9 	bl	8000936 <LCD_Parallel_SendCommand>
    HAL_Delay(5);
 80007e4:	2005      	movs	r0, #5
 80007e6:	f001 fa67 	bl	8001cb8 <HAL_Delay>
    
    // Clear display
    LCD_Parallel_Clear();
 80007ea:	f000 f85b 	bl	80008a4 <LCD_Parallel_Clear>
    HAL_Delay(5);
 80007ee:	2005      	movs	r0, #5
 80007f0:	f001 fa62 	bl	8001cb8 <HAL_Delay>
    
    // Entry mode: left to right, no shift
    LCD_Parallel_SendCommand(LCD_ENTRY_MODE_SET | LCD_ENTRY_LEFT | LCD_ENTRY_SHIFT_DECREMENT);
 80007f4:	2006      	movs	r0, #6
 80007f6:	f000 f89e 	bl	8000936 <LCD_Parallel_SendCommand>
    HAL_Delay(5);
 80007fa:	2005      	movs	r0, #5
 80007fc:	f001 fa5c 	bl	8001cb8 <HAL_Delay>
}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40010c00 	.word	0x40010c00

08000808 <LCD_Parallel_GPIO_Init>:

void LCD_Parallel_GPIO_Init(void) {
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080e:	f107 0308 	add.w	r3, r7, #8
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
    
    // Enable GPIOB clock
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800081c:	4b1f      	ldr	r3, [pc, #124]	@ (800089c <LCD_Parallel_GPIO_Init+0x94>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	4a1e      	ldr	r2, [pc, #120]	@ (800089c <LCD_Parallel_GPIO_Init+0x94>)
 8000822:	f043 0308 	orr.w	r3, r3, #8
 8000826:	6193      	str	r3, [r2, #24]
 8000828:	4b1c      	ldr	r3, [pc, #112]	@ (800089c <LCD_Parallel_GPIO_Init+0x94>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	f003 0308 	and.w	r3, r3, #8
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	687b      	ldr	r3, [r7, #4]
    
    // Configure RS pin (PB0)
    GPIO_InitStruct.Pin = LCD_RS_PIN;
 8000834:	2301      	movs	r3, #1
 8000836:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000838:	2301      	movs	r3, #1
 800083a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2302      	movs	r3, #2
 8000842:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LCD_RS_PORT, &GPIO_InitStruct);
 8000844:	f107 0308 	add.w	r3, r7, #8
 8000848:	4619      	mov	r1, r3
 800084a:	4815      	ldr	r0, [pc, #84]	@ (80008a0 <LCD_Parallel_GPIO_Init+0x98>)
 800084c:	f002 f91e 	bl	8002a8c <HAL_GPIO_Init>
    
    // Configure E pin (PB1)
    GPIO_InitStruct.Pin = LCD_E_PIN;
 8000850:	2302      	movs	r3, #2
 8000852:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(LCD_E_PORT, &GPIO_InitStruct);
 8000854:	f107 0308 	add.w	r3, r7, #8
 8000858:	4619      	mov	r1, r3
 800085a:	4811      	ldr	r0, [pc, #68]	@ (80008a0 <LCD_Parallel_GPIO_Init+0x98>)
 800085c:	f002 f916 	bl	8002a8c <HAL_GPIO_Init>
    
    // Configure Data pins (PB12, PB13, PB14, PB15)
    GPIO_InitStruct.Pin = LCD_D4_PIN | LCD_D5_PIN | LCD_D6_PIN | LCD_D7_PIN;
 8000860:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000864:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(LCD_D4_PORT, &GPIO_InitStruct);
 8000866:	f107 0308 	add.w	r3, r7, #8
 800086a:	4619      	mov	r1, r3
 800086c:	480c      	ldr	r0, [pc, #48]	@ (80008a0 <LCD_Parallel_GPIO_Init+0x98>)
 800086e:	f002 f90d 	bl	8002a8c <HAL_GPIO_Init>
    
    // Initialize all pins to LOW
    HAL_GPIO_WritePin(LCD_RS_PORT, LCD_RS_PIN, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2101      	movs	r1, #1
 8000876:	480a      	ldr	r0, [pc, #40]	@ (80008a0 <LCD_Parallel_GPIO_Init+0x98>)
 8000878:	f002 fa8c 	bl	8002d94 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_E_PORT, LCD_E_PIN, GPIO_PIN_RESET);
 800087c:	2200      	movs	r2, #0
 800087e:	2102      	movs	r1, #2
 8000880:	4807      	ldr	r0, [pc, #28]	@ (80008a0 <LCD_Parallel_GPIO_Init+0x98>)
 8000882:	f002 fa87 	bl	8002d94 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D4_PORT, LCD_D4_PIN | LCD_D5_PIN | LCD_D6_PIN | LCD_D7_PIN, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800088c:	4804      	ldr	r0, [pc, #16]	@ (80008a0 <LCD_Parallel_GPIO_Init+0x98>)
 800088e:	f002 fa81 	bl	8002d94 <HAL_GPIO_WritePin>
}
 8000892:	bf00      	nop
 8000894:	3718      	adds	r7, #24
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40021000 	.word	0x40021000
 80008a0:	40010c00 	.word	0x40010c00

080008a4 <LCD_Parallel_Clear>:

void LCD_Parallel_Clear(void) {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
    LCD_Parallel_SendCommand(LCD_CLEAR_DISPLAY);
 80008a8:	2001      	movs	r0, #1
 80008aa:	f000 f844 	bl	8000936 <LCD_Parallel_SendCommand>
    HAL_Delay(2);
 80008ae:	2002      	movs	r0, #2
 80008b0:	f001 fa02 	bl	8001cb8 <HAL_Delay>
}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <LCD_Parallel_SetCursor>:

void LCD_Parallel_SetCursor(uint8_t row, uint8_t col) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	460a      	mov	r2, r1
 80008c2:	71fb      	strb	r3, [r7, #7]
 80008c4:	4613      	mov	r3, r2
 80008c6:	71bb      	strb	r3, [r7, #6]
    uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 80008c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000908 <LCD_Parallel_SetCursor+0x50>)
 80008ca:	60fb      	str	r3, [r7, #12]
    if (row >= LCD_ROWS) {
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d901      	bls.n	80008d6 <LCD_Parallel_SetCursor+0x1e>
        row = LCD_ROWS - 1;
 80008d2:	2301      	movs	r3, #1
 80008d4:	71fb      	strb	r3, [r7, #7]
    }
    if (col >= LCD_COLS) {
 80008d6:	79bb      	ldrb	r3, [r7, #6]
 80008d8:	2b0f      	cmp	r3, #15
 80008da:	d901      	bls.n	80008e0 <LCD_Parallel_SetCursor+0x28>
        col = LCD_COLS - 1;
 80008dc:	230f      	movs	r3, #15
 80008de:	71bb      	strb	r3, [r7, #6]
    }
    LCD_Parallel_SendCommand(LCD_SET_DDRAM_ADDR | (col + row_offsets[row]));
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	3310      	adds	r3, #16
 80008e4:	443b      	add	r3, r7
 80008e6:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 80008ea:	79bb      	ldrb	r3, [r7, #6]
 80008ec:	4413      	add	r3, r2
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	b25b      	sxtb	r3, r3
 80008f2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80008f6:	b25b      	sxtb	r3, r3
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	4618      	mov	r0, r3
 80008fc:	f000 f81b 	bl	8000936 <LCD_Parallel_SendCommand>
}
 8000900:	bf00      	nop
 8000902:	3710      	adds	r7, #16
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	54144000 	.word	0x54144000

0800090c <LCD_Parallel_Print>:

void LCD_Parallel_Print(char *str) {
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000914:	e006      	b.n	8000924 <LCD_Parallel_Print+0x18>
        LCD_Parallel_SendData(*str++);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	1c5a      	adds	r2, r3, #1
 800091a:	607a      	str	r2, [r7, #4]
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	4618      	mov	r0, r3
 8000920:	f000 f817 	bl	8000952 <LCD_Parallel_SendData>
    while (*str) {
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d1f4      	bne.n	8000916 <LCD_Parallel_Print+0xa>
    }
}
 800092c:	bf00      	nop
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <LCD_Parallel_SendCommand>:

void LCD_Parallel_WriteCustomChar(uint8_t location) {
    LCD_Parallel_SendData(location);
}

void LCD_Parallel_SendCommand(uint8_t cmd) {
 8000936:	b580      	push	{r7, lr}
 8000938:	b082      	sub	sp, #8
 800093a:	af00      	add	r7, sp, #0
 800093c:	4603      	mov	r3, r0
 800093e:	71fb      	strb	r3, [r7, #7]
    LCD_Parallel_Send(cmd, 0);
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	2100      	movs	r1, #0
 8000944:	4618      	mov	r0, r3
 8000946:	f000 f813 	bl	8000970 <LCD_Parallel_Send>
}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <LCD_Parallel_SendData>:

void LCD_Parallel_SendData(uint8_t data) {
 8000952:	b580      	push	{r7, lr}
 8000954:	b082      	sub	sp, #8
 8000956:	af00      	add	r7, sp, #0
 8000958:	4603      	mov	r3, r0
 800095a:	71fb      	strb	r3, [r7, #7]
    LCD_Parallel_Send(data, 1);
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	2101      	movs	r1, #1
 8000960:	4618      	mov	r0, r3
 8000962:	f000 f805 	bl	8000970 <LCD_Parallel_Send>
}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
	...

08000970 <LCD_Parallel_Send>:

void LCD_Parallel_Send(uint8_t data, uint8_t rs) {
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	460a      	mov	r2, r1
 800097a:	71fb      	strb	r3, [r7, #7]
 800097c:	4613      	mov	r3, r2
 800097e:	71bb      	strb	r3, [r7, #6]
    // Set RS pin (0 = command, 1 = data)
    HAL_GPIO_WritePin(LCD_RS_PORT, LCD_RS_PIN, rs ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000980:	79bb      	ldrb	r3, [r7, #6]
 8000982:	2b00      	cmp	r3, #0
 8000984:	bf14      	ite	ne
 8000986:	2301      	movne	r3, #1
 8000988:	2300      	moveq	r3, #0
 800098a:	b2db      	uxtb	r3, r3
 800098c:	461a      	mov	r2, r3
 800098e:	2101      	movs	r1, #1
 8000990:	4809      	ldr	r0, [pc, #36]	@ (80009b8 <LCD_Parallel_Send+0x48>)
 8000992:	f002 f9ff 	bl	8002d94 <HAL_GPIO_WritePin>
    
    // Send upper 4 bits
    LCD_Parallel_Write4Bits(data >> 4);
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	091b      	lsrs	r3, r3, #4
 800099a:	b2db      	uxtb	r3, r3
 800099c:	4618      	mov	r0, r3
 800099e:	f000 f80d 	bl	80009bc <LCD_Parallel_Write4Bits>
    
    // Send lower 4 bits
    LCD_Parallel_Write4Bits(data & 0x0F);
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	f003 030f 	and.w	r3, r3, #15
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	4618      	mov	r0, r3
 80009ac:	f000 f806 	bl	80009bc <LCD_Parallel_Write4Bits>
}
 80009b0:	bf00      	nop
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40010c00 	.word	0x40010c00

080009bc <LCD_Parallel_Write4Bits>:

void LCD_Parallel_Write4Bits(uint8_t data) {
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	71fb      	strb	r3, [r7, #7]
    // Set data on D4-D7 pins (PB12-PB15)
    HAL_GPIO_WritePin(LCD_D4_PORT, LCD_D4_PIN, (data & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	f003 0301 	and.w	r3, r3, #1
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	461a      	mov	r2, r3
 80009d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009d4:	4816      	ldr	r0, [pc, #88]	@ (8000a30 <LCD_Parallel_Write4Bits+0x74>)
 80009d6:	f002 f9dd 	bl	8002d94 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_PORT, LCD_D5_PIN, (data & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	105b      	asrs	r3, r3, #1
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	f003 0301 	and.w	r3, r3, #1
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	461a      	mov	r2, r3
 80009e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009ec:	4810      	ldr	r0, [pc, #64]	@ (8000a30 <LCD_Parallel_Write4Bits+0x74>)
 80009ee:	f002 f9d1 	bl	8002d94 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_PORT, LCD_D6_PIN, (data & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	109b      	asrs	r3, r3, #2
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	f003 0301 	and.w	r3, r3, #1
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	461a      	mov	r2, r3
 8000a00:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a04:	480a      	ldr	r0, [pc, #40]	@ (8000a30 <LCD_Parallel_Write4Bits+0x74>)
 8000a06:	f002 f9c5 	bl	8002d94 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_PORT, LCD_D7_PIN, (data & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	10db      	asrs	r3, r3, #3
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	f003 0301 	and.w	r3, r3, #1
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	461a      	mov	r2, r3
 8000a18:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a1c:	4804      	ldr	r0, [pc, #16]	@ (8000a30 <LCD_Parallel_Write4Bits+0x74>)
 8000a1e:	f002 f9b9 	bl	8002d94 <HAL_GPIO_WritePin>
    
    // Pulse Enable pin
    LCD_Parallel_EnablePulse();
 8000a22:	f000 f807 	bl	8000a34 <LCD_Parallel_EnablePulse>
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40010c00 	.word	0x40010c00

08000a34 <LCD_Parallel_EnablePulse>:

void LCD_Parallel_EnablePulse(void) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LCD_E_PORT, LCD_E_PIN, GPIO_PIN_SET);
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	2102      	movs	r1, #2
 8000a3e:	4810      	ldr	r0, [pc, #64]	@ (8000a80 <LCD_Parallel_EnablePulse+0x4c>)
 8000a40:	f002 f9a8 	bl	8002d94 <HAL_GPIO_WritePin>
    
    // Enable pulse width (minimum 450ns, loop delay)
    for(volatile int i = 0; i < 50; i++);
 8000a44:	2300      	movs	r3, #0
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	e002      	b.n	8000a50 <LCD_Parallel_EnablePulse+0x1c>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2b31      	cmp	r3, #49	@ 0x31
 8000a54:	ddf9      	ble.n	8000a4a <LCD_Parallel_EnablePulse+0x16>
    
    HAL_GPIO_WritePin(LCD_E_PORT, LCD_E_PIN, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2102      	movs	r1, #2
 8000a5a:	4809      	ldr	r0, [pc, #36]	@ (8000a80 <LCD_Parallel_EnablePulse+0x4c>)
 8000a5c:	f002 f99a 	bl	8002d94 <HAL_GPIO_WritePin>
    
    // Commands need > 37us to settle  
    for(volatile int i = 0; i < 1000; i++);
 8000a60:	2300      	movs	r3, #0
 8000a62:	603b      	str	r3, [r7, #0]
 8000a64:	e002      	b.n	8000a6c <LCD_Parallel_EnablePulse+0x38>
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000a72:	dbf8      	blt.n	8000a66 <LCD_Parallel_EnablePulse+0x32>
}
 8000a74:	bf00      	nop
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40010c00 	.word	0x40010c00

08000a84 <calculate_frequency>:
volatile int mn = 5000, mx = 0, avg = 0, cnt = 0;

// Khai báo prototype của hàm
void reset_sound_stats(void);

int calculate_frequency(int adc_value) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
    if (adc_value < 1700) return 0;  // Dưới ngưỡng phát hiện
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8000a92:	4293      	cmp	r3, r2
 8000a94:	dc01      	bgt.n	8000a9a <calculate_frequency+0x16>
 8000a96:	2300      	movs	r3, #0
 8000a98:	e02a      	b.n	8000af0 <calculate_frequency+0x6c>
    if (adc_value > 4000) return 0;  // Trên ngưỡng đo
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8000aa0:	dd01      	ble.n	8000aa6 <calculate_frequency+0x22>
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	e024      	b.n	8000af0 <calculate_frequency+0x6c>

    // Công thức tính tần số dựa trên ADC value
    // Dựa vào pattern: ADC value tăng theo log của tần số
    // Công thức: f = BASE_FREQ * (1 + k * log(ADC/BASE_ADC))
    float normalized_value = (float)(adc_value - 1700) / (4000 - 1700);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	f2a3 63a4 	subw	r3, r3, #1700	@ 0x6a4
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff fc07 	bl	80002c0 <__aeabi_i2f>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	4910      	ldr	r1, [pc, #64]	@ (8000af8 <calculate_frequency+0x74>)
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff fd0a 	bl	80004d0 <__aeabi_fdiv>
 8000abc:	4603      	mov	r3, r0
 8000abe:	60bb      	str	r3, [r7, #8]
    int estimated_freq = BASE_FREQ + (int)(normalized_value * 1800); // 1800 = 2000 - 200
 8000ac0:	490e      	ldr	r1, [pc, #56]	@ (8000afc <calculate_frequency+0x78>)
 8000ac2:	68b8      	ldr	r0, [r7, #8]
 8000ac4:	f7ff fc50 	bl	8000368 <__aeabi_fmul>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff fe12 	bl	80006f4 <__aeabi_f2iz>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	33c8      	adds	r3, #200	@ 0xc8
 8000ad4:	60fb      	str	r3, [r7, #12]

    // Giới hạn tần số trong khoảng hợp lệ
    if (estimated_freq < BASE_FREQ) estimated_freq = BASE_FREQ;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	2bc7      	cmp	r3, #199	@ 0xc7
 8000ada:	dc01      	bgt.n	8000ae0 <calculate_frequency+0x5c>
 8000adc:	23c8      	movs	r3, #200	@ 0xc8
 8000ade:	60fb      	str	r3, [r7, #12]
    if (estimated_freq > MAX_FREQ) estimated_freq = MAX_FREQ;
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000ae6:	dd02      	ble.n	8000aee <calculate_frequency+0x6a>
 8000ae8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000aec:	60fb      	str	r3, [r7, #12]

    return estimated_freq;
 8000aee:	68fb      	ldr	r3, [r7, #12]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3710      	adds	r7, #16
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	450fc000 	.word	0x450fc000
 8000afc:	44e10000 	.word	0x44e10000

08000b00 <int_to_string>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Function to convert integer to string
char* int_to_string(int num, char* str) {
 8000b00:	b480      	push	{r7}
 8000b02:	b089      	sub	sp, #36	@ 0x24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	6039      	str	r1, [r7, #0]
    int i = 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61fb      	str	r3, [r7, #28]
    int is_negative = 0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61bb      	str	r3, [r7, #24]
    
    // Handle negative numbers
    if (num < 0) {
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	da04      	bge.n	8000b22 <int_to_string+0x22>
        is_negative = 1;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	61bb      	str	r3, [r7, #24]
        num = -num;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	425b      	negs	r3, r3
 8000b20:	607b      	str	r3, [r7, #4]
    }
    
    // Handle zero
    if (num == 0) {
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d12c      	bne.n	8000b82 <int_to_string+0x82>
        str[i++] = '0';
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	1c5a      	adds	r2, r3, #1
 8000b2c:	61fa      	str	r2, [r7, #28]
 8000b2e:	461a      	mov	r2, r3
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	4413      	add	r3, r2
 8000b34:	2230      	movs	r2, #48	@ 0x30
 8000b36:	701a      	strb	r2, [r3, #0]
        str[i] = '\0';
 8000b38:	69fb      	ldr	r3, [r7, #28]
 8000b3a:	683a      	ldr	r2, [r7, #0]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	2200      	movs	r2, #0
 8000b40:	701a      	strb	r2, [r3, #0]
        return str;
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	e053      	b.n	8000bee <int_to_string+0xee>
    }
    
    // Convert number to string in reverse order
    while (num > 0) {
        str[i++] = num % 10 + '0';
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	4b2b      	ldr	r3, [pc, #172]	@ (8000bf8 <int_to_string+0xf8>)
 8000b4a:	fb83 1302 	smull	r1, r3, r3, r2
 8000b4e:	1099      	asrs	r1, r3, #2
 8000b50:	17d3      	asrs	r3, r2, #31
 8000b52:	1ac9      	subs	r1, r1, r3
 8000b54:	460b      	mov	r3, r1
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	440b      	add	r3, r1
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	1ad1      	subs	r1, r2, r3
 8000b5e:	b2ca      	uxtb	r2, r1
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	1c59      	adds	r1, r3, #1
 8000b64:	61f9      	str	r1, [r7, #28]
 8000b66:	4619      	mov	r1, r3
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	440b      	add	r3, r1
 8000b6c:	3230      	adds	r2, #48	@ 0x30
 8000b6e:	b2d2      	uxtb	r2, r2
 8000b70:	701a      	strb	r2, [r3, #0]
        num = num / 10;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4a20      	ldr	r2, [pc, #128]	@ (8000bf8 <int_to_string+0xf8>)
 8000b76:	fb82 1203 	smull	r1, r2, r2, r3
 8000b7a:	1092      	asrs	r2, r2, #2
 8000b7c:	17db      	asrs	r3, r3, #31
 8000b7e:	1ad3      	subs	r3, r2, r3
 8000b80:	607b      	str	r3, [r7, #4]
    while (num > 0) {
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	dcde      	bgt.n	8000b46 <int_to_string+0x46>
    }
    
    // Add negative sign if needed
    if (is_negative) {
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d007      	beq.n	8000b9e <int_to_string+0x9e>
        str[i++] = '-';
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	1c5a      	adds	r2, r3, #1
 8000b92:	61fa      	str	r2, [r7, #28]
 8000b94:	461a      	mov	r2, r3
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	4413      	add	r3, r2
 8000b9a:	222d      	movs	r2, #45	@ 0x2d
 8000b9c:	701a      	strb	r2, [r3, #0]
    }
    
    // Reverse the string
    int start = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	617b      	str	r3, [r7, #20]
    int end = i - 1;
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	3b01      	subs	r3, #1
 8000ba6:	613b      	str	r3, [r7, #16]
    while (start < end) {
 8000ba8:	e017      	b.n	8000bda <int_to_string+0xda>
        char temp = str[start];
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	683a      	ldr	r2, [r7, #0]
 8000bae:	4413      	add	r3, r2
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	73fb      	strb	r3, [r7, #15]
        str[start] = str[end];
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	683a      	ldr	r2, [r7, #0]
 8000bb8:	441a      	add	r2, r3
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	6839      	ldr	r1, [r7, #0]
 8000bbe:	440b      	add	r3, r1
 8000bc0:	7812      	ldrb	r2, [r2, #0]
 8000bc2:	701a      	strb	r2, [r3, #0]
        str[end] = temp;
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	683a      	ldr	r2, [r7, #0]
 8000bc8:	4413      	add	r3, r2
 8000bca:	7bfa      	ldrb	r2, [r7, #15]
 8000bcc:	701a      	strb	r2, [r3, #0]
        start++;
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	617b      	str	r3, [r7, #20]
        end--;
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	613b      	str	r3, [r7, #16]
    while (start < end) {
 8000bda:	697a      	ldr	r2, [r7, #20]
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	429a      	cmp	r2, r3
 8000be0:	dbe3      	blt.n	8000baa <int_to_string+0xaa>
    }
    
    // Add null terminator
    str[i] = '\0';
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	683a      	ldr	r2, [r7, #0]
 8000be6:	4413      	add	r3, r2
 8000be8:	2200      	movs	r2, #0
 8000bea:	701a      	strb	r2, [r3, #0]
    return str;
 8000bec:	683b      	ldr	r3, [r7, #0]
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3724      	adds	r7, #36	@ 0x24
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr
 8000bf8:	66666667 	.word	0x66666667

08000bfc <HAL_TIM_PWM_PulseFinishedCallback>:
// Color and speed control
volatile int current_color = COLOR_BLUE;  // Start with blue
volatile int current_speed = 5;           // Speed from 1 (slow) to 10 (fast)
volatile int current_brightness = 50;     // Brightness from 1 (dim) to 100 (bright)

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8000c04:	2100      	movs	r1, #0
 8000c06:	4805      	ldr	r0, [pc, #20]	@ (8000c1c <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000c08:	f002 ffba 	bl	8003b80 <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;
 8000c0c:	4b04      	ldr	r3, [pc, #16]	@ (8000c20 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000c0e:	2201      	movs	r2, #1
 8000c10:	601a      	str	r2, [r3, #0]
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	200000b8 	.word	0x200000b8
 8000c20:	20000334 	.word	0x20000334

08000c24 <Keypad_Init>:

// Keypad functions
void Keypad_Init(void) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b088      	sub	sp, #32
 8000c28:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2a:	f107 0308 	add.w	r3, r7, #8
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	60da      	str	r2, [r3, #12]

    // Enable GPIOA clock
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c38:	4b2b      	ldr	r3, [pc, #172]	@ (8000ce8 <Keypad_Init+0xc4>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	4a2a      	ldr	r2, [pc, #168]	@ (8000ce8 <Keypad_Init+0xc4>)
 8000c3e:	f043 0304 	orr.w	r3, r3, #4
 8000c42:	6193      	str	r3, [r2, #24]
 8000c44:	4b28      	ldr	r3, [pc, #160]	@ (8000ce8 <Keypad_Init+0xc4>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	f003 0304 	and.w	r3, r3, #4
 8000c4c:	607b      	str	r3, [r7, #4]
 8000c4e:	687b      	ldr	r3, [r7, #4]

    // Configure row pins as output
    for(int i = 0; i < KEYPAD_ROWS; i++) {
 8000c50:	2300      	movs	r3, #0
 8000c52:	61fb      	str	r3, [r7, #28]
 8000c54:	e023      	b.n	8000c9e <Keypad_Init+0x7a>
        GPIO_InitStruct.Pin = keypad_row_pins[i];
 8000c56:	4a25      	ldr	r2, [pc, #148]	@ (8000cec <Keypad_Init+0xc8>)
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c5e:	60bb      	str	r3, [r7, #8]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c60:	2301      	movs	r3, #1
 8000c62:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(keypad_row_ports[i], &GPIO_InitStruct);
 8000c6c:	4a20      	ldr	r2, [pc, #128]	@ (8000cf0 <Keypad_Init+0xcc>)
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c74:	f107 0208 	add.w	r2, r7, #8
 8000c78:	4611      	mov	r1, r2
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f001 ff06 	bl	8002a8c <HAL_GPIO_Init>
        HAL_GPIO_WritePin(keypad_row_ports[i], keypad_row_pins[i], GPIO_PIN_SET);
 8000c80:	4a1b      	ldr	r2, [pc, #108]	@ (8000cf0 <Keypad_Init+0xcc>)
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000c88:	4a18      	ldr	r2, [pc, #96]	@ (8000cec <Keypad_Init+0xc8>)
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c90:	2201      	movs	r2, #1
 8000c92:	4619      	mov	r1, r3
 8000c94:	f002 f87e 	bl	8002d94 <HAL_GPIO_WritePin>
    for(int i = 0; i < KEYPAD_ROWS; i++) {
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	61fb      	str	r3, [r7, #28]
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	2b03      	cmp	r3, #3
 8000ca2:	ddd8      	ble.n	8000c56 <Keypad_Init+0x32>
    }

    // Configure column pins as input with pull-up
    for(int i = 0; i < KEYPAD_COLS; i++) {
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61bb      	str	r3, [r7, #24]
 8000ca8:	e015      	b.n	8000cd6 <Keypad_Init+0xb2>
        GPIO_InitStruct.Pin = keypad_col_pins[i];
 8000caa:	4a12      	ldr	r2, [pc, #72]	@ (8000cf4 <Keypad_Init+0xd0>)
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cb2:	60bb      	str	r3, [r7, #8]
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	613b      	str	r3, [r7, #16]
        HAL_GPIO_Init(keypad_col_ports[i], &GPIO_InitStruct);
 8000cbc:	4a0e      	ldr	r2, [pc, #56]	@ (8000cf8 <Keypad_Init+0xd4>)
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cc4:	f107 0208 	add.w	r2, r7, #8
 8000cc8:	4611      	mov	r1, r2
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f001 fede 	bl	8002a8c <HAL_GPIO_Init>
    for(int i = 0; i < KEYPAD_COLS; i++) {
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	61bb      	str	r3, [r7, #24]
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	2b03      	cmp	r3, #3
 8000cda:	dde6      	ble.n	8000caa <Keypad_Init+0x86>
    }
}
 8000cdc:	bf00      	nop
 8000cde:	bf00      	nop
 8000ce0:	3720      	adds	r7, #32
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	20000014 	.word	0x20000014
 8000cf0:	20000004 	.word	0x20000004
 8000cf4:	2000002c 	.word	0x2000002c
 8000cf8:	2000001c 	.word	0x2000001c

08000cfc <Set_LED>:
            // Do nothing for problematic keys and others
            break;
    }
}

void Set_LED (int LEDnum, int Red, int Green, int Blue) {
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
 8000d08:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	b2d9      	uxtb	r1, r3
 8000d0e:	4a10      	ldr	r2, [pc, #64]	@ (8000d50 <Set_LED+0x54>)
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	b2d9      	uxtb	r1, r3
 8000d1a:	4a0d      	ldr	r2, [pc, #52]	@ (8000d50 <Set_LED+0x54>)
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	4413      	add	r3, r2
 8000d22:	460a      	mov	r2, r1
 8000d24:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	b2d9      	uxtb	r1, r3
 8000d2a:	4a09      	ldr	r2, [pc, #36]	@ (8000d50 <Set_LED+0x54>)
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	4413      	add	r3, r2
 8000d32:	460a      	mov	r2, r1
 8000d34:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	b2d9      	uxtb	r1, r3
 8000d3a:	4a05      	ldr	r2, [pc, #20]	@ (8000d50 <Set_LED+0x54>)
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	4413      	add	r3, r2
 8000d42:	460a      	mov	r2, r1
 8000d44:	70da      	strb	r2, [r3, #3]
}
 8000d46:	bf00      	nop
 8000d48:	3714      	adds	r7, #20
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr
 8000d50:	20000154 	.word	0x20000154

08000d54 <Set_All_LEDs_Same_Color>:

// Function to set all LEDs to the same color
void Set_All_LEDs_Same_Color(int Red, int Green, int Blue) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < MAX_LED; i++) {
 8000d60:	2300      	movs	r3, #0
 8000d62:	617b      	str	r3, [r7, #20]
 8000d64:	e008      	b.n	8000d78 <Set_All_LEDs_Same_Color+0x24>
        Set_LED(i, Red, Green, Blue);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	68ba      	ldr	r2, [r7, #8]
 8000d6a:	68f9      	ldr	r1, [r7, #12]
 8000d6c:	6978      	ldr	r0, [r7, #20]
 8000d6e:	f7ff ffc5 	bl	8000cfc <Set_LED>
    for (int i = 0; i < MAX_LED; i++) {
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	3301      	adds	r3, #1
 8000d76:	617b      	str	r3, [r7, #20]
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	2b3b      	cmp	r3, #59	@ 0x3b
 8000d7c:	ddf3      	ble.n	8000d66 <Set_All_LEDs_Same_Color+0x12>
    }
}
 8000d7e:	bf00      	nop
 8000d80:	bf00      	nop
 8000d82:	3718      	adds	r7, #24
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <Set_LED_Col>:

void Set_LED_Col (int col_num, int Red, int Green, int Blue) {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
 8000d94:	603b      	str	r3, [r7, #0]
	Set_LED(40-col_num, Red, Green, Blue); //top, from right
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	f1c3 0028 	rsb	r0, r3, #40	@ 0x28
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	68b9      	ldr	r1, [r7, #8]
 8000da2:	f7ff ffab 	bl	8000cfc <Set_LED>
	Set_LED(16+col_num, Red, Green, Blue); //mid, from left
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	f103 0010 	add.w	r0, r3, #16
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	68b9      	ldr	r1, [r7, #8]
 8000db2:	f7ff ffa3 	bl	8000cfc <Set_LED>
	Set_LED(11-col_num, Red, Green, Blue);  //bot, from right
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	f1c3 000b 	rsb	r0, r3, #11
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	68b9      	ldr	r1, [r7, #8]
 8000dc2:	f7ff ff9b 	bl	8000cfc <Set_LED>
}
 8000dc6:	bf00      	nop
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
	...

08000dd0 <Set_Brightness>:
			{11, 10,  9,  8,  7,  6,  5,  4,  3,  2},
	};
	Set_LED(LED_Matrix[row][col], Red, Green, Blue);
}

void Set_Brightness (int brightness) {
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if (brightness > 100) brightness = 100;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2b64      	cmp	r3, #100	@ 0x64
 8000ddc:	dd01      	ble.n	8000de2 <Set_Brightness+0x12>
 8000dde:	2364      	movs	r3, #100	@ 0x64
 8000de0:	607b      	str	r3, [r7, #4]
	if (brightness < 0) brightness = 0;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	da01      	bge.n	8000dec <Set_Brightness+0x1c>
 8000de8:	2300      	movs	r3, #0
 8000dea:	607b      	str	r3, [r7, #4]

	for (int i=0; i < MAX_LED; i++) {
 8000dec:	2300      	movs	r3, #0
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	e02d      	b.n	8000e4e <Set_Brightness+0x7e>
		LED_Mod[i][0] = LED_Data[i][0];
 8000df2:	4a1b      	ldr	r2, [pc, #108]	@ (8000e60 <Set_Brightness+0x90>)
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8000dfa:	4a1a      	ldr	r2, [pc, #104]	@ (8000e64 <Set_Brightness+0x94>)
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j = 1; j < 4; ++j) {
 8000e02:	2301      	movs	r3, #1
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	e01c      	b.n	8000e42 <Set_Brightness+0x72>
			// Simple percentage calculation: brightness from 0-100%
			LED_Mod[i][j] = (LED_Data[i][j] * brightness) / 100;
 8000e08:	4a15      	ldr	r2, [pc, #84]	@ (8000e60 <Set_Brightness+0x90>)
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	441a      	add	r2, r3
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	4413      	add	r3, r2
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	461a      	mov	r2, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	fb02 f303 	mul.w	r3, r2, r3
 8000e1e:	4a12      	ldr	r2, [pc, #72]	@ (8000e68 <Set_Brightness+0x98>)
 8000e20:	fb82 1203 	smull	r1, r2, r2, r3
 8000e24:	1152      	asrs	r2, r2, #5
 8000e26:	17db      	asrs	r3, r3, #31
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	b2d9      	uxtb	r1, r3
 8000e2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e64 <Set_Brightness+0x94>)
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	441a      	add	r2, r3
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	4413      	add	r3, r2
 8000e38:	460a      	mov	r2, r1
 8000e3a:	701a      	strb	r2, [r3, #0]
		for (int j = 1; j < 4; ++j) {
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	2b03      	cmp	r3, #3
 8000e46:	dddf      	ble.n	8000e08 <Set_Brightness+0x38>
	for (int i=0; i < MAX_LED; i++) {
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	2b3b      	cmp	r3, #59	@ 0x3b
 8000e52:	ddce      	ble.n	8000df2 <Set_Brightness+0x22>
		}
	}

#endif
}
 8000e54:	bf00      	nop
 8000e56:	bf00      	nop
 8000e58:	3714      	adds	r7, #20
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc80      	pop	{r7}
 8000e5e:	4770      	bx	lr
 8000e60:	20000154 	.word	0x20000154
 8000e64:	20000244 	.word	0x20000244
 8000e68:	51eb851f 	.word	0x51eb851f

08000e6c <WS2812_Send>:
//
//	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, 24);
//}


void WS2812_Send (void) {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
	uint32_t indx = 0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
	uint32_t color;

	for (int i = 0; i < MAX_LED; ++i) {
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
 8000e7a:	e036      	b.n	8000eea <WS2812_Send+0x7e>
		color = ((LED_Mod[i][1] << 16) | (LED_Mod[i][2] << 8) | (LED_Mod[i][3]));
 8000e7c:	4a39      	ldr	r2, [pc, #228]	@ (8000f64 <WS2812_Send+0xf8>)
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	4413      	add	r3, r2
 8000e84:	785b      	ldrb	r3, [r3, #1]
 8000e86:	041a      	lsls	r2, r3, #16
 8000e88:	4936      	ldr	r1, [pc, #216]	@ (8000f64 <WS2812_Send+0xf8>)
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	440b      	add	r3, r1
 8000e90:	789b      	ldrb	r3, [r3, #2]
 8000e92:	021b      	lsls	r3, r3, #8
 8000e94:	431a      	orrs	r2, r3
 8000e96:	4933      	ldr	r1, [pc, #204]	@ (8000f64 <WS2812_Send+0xf8>)
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	440b      	add	r3, r1
 8000e9e:	78db      	ldrb	r3, [r3, #3]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	603b      	str	r3, [r7, #0]

		for (int j = 23; j >= 0; j--) {
 8000ea4:	2317      	movs	r3, #23
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	e019      	b.n	8000ede <WS2812_Send+0x72>
			if (color&(1<<j)) {
 8000eaa:	2201      	movs	r2, #1
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d005      	beq.n	8000ec8 <WS2812_Send+0x5c>
				pwmData[indx] = 60;
 8000ebc:	4a2a      	ldr	r2, [pc, #168]	@ (8000f68 <WS2812_Send+0xfc>)
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	213c      	movs	r1, #60	@ 0x3c
 8000ec2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000ec6:	e004      	b.n	8000ed2 <WS2812_Send+0x66>
			} else {
				pwmData[indx] = 30;
 8000ec8:	4a27      	ldr	r2, [pc, #156]	@ (8000f68 <WS2812_Send+0xfc>)
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	211e      	movs	r1, #30
 8000ece:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}

			indx++;
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	617b      	str	r3, [r7, #20]
		for (int j = 23; j >= 0; j--) {
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	dae2      	bge.n	8000eaa <WS2812_Send+0x3e>
	for (int i = 0; i < MAX_LED; ++i) {
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	613b      	str	r3, [r7, #16]
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	2b3b      	cmp	r3, #59	@ 0x3b
 8000eee:	ddc5      	ble.n	8000e7c <WS2812_Send+0x10>
		}
	}

	for (int i = 0; i < 50; ++i) {
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	e00a      	b.n	8000f0c <WS2812_Send+0xa0>
		pwmData[indx] = 0;
 8000ef6:	4a1c      	ldr	r2, [pc, #112]	@ (8000f68 <WS2812_Send+0xfc>)
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	2100      	movs	r1, #0
 8000efc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	3301      	adds	r3, #1
 8000f04:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 50; ++i) {
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	60bb      	str	r3, [r7, #8]
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	2b31      	cmp	r3, #49	@ 0x31
 8000f10:	ddf1      	ble.n	8000ef6 <WS2812_Send+0x8a>
	}

	// Reset flag before starting DMA
	datasentflag = 0;
 8000f12:	4b16      	ldr	r3, [pc, #88]	@ (8000f6c <WS2812_Send+0x100>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	4a12      	ldr	r2, [pc, #72]	@ (8000f68 <WS2812_Send+0xfc>)
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4813      	ldr	r0, [pc, #76]	@ (8000f70 <WS2812_Send+0x104>)
 8000f22:	f002 fc8b 	bl	800383c <HAL_TIM_PWM_Start_DMA>

	// Add timeout to prevent infinite loop
	uint32_t timeout = 1000000;  // Adjust timeout value
 8000f26:	4b13      	ldr	r3, [pc, #76]	@ (8000f74 <WS2812_Send+0x108>)
 8000f28:	607b      	str	r3, [r7, #4]
	while(!datasentflag && timeout > 0) {
 8000f2a:	e002      	b.n	8000f32 <WS2812_Send+0xc6>
		timeout--;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	607b      	str	r3, [r7, #4]
	while(!datasentflag && timeout > 0) {
 8000f32:	4b0e      	ldr	r3, [pc, #56]	@ (8000f6c <WS2812_Send+0x100>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d102      	bne.n	8000f40 <WS2812_Send+0xd4>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d1f5      	bne.n	8000f2c <WS2812_Send+0xc0>
	}

	// Force stop if timeout occurred
	if (timeout == 0) {
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d106      	bne.n	8000f54 <WS2812_Send+0xe8>
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8000f46:	2100      	movs	r1, #0
 8000f48:	4809      	ldr	r0, [pc, #36]	@ (8000f70 <WS2812_Send+0x104>)
 8000f4a:	f002 fe19 	bl	8003b80 <HAL_TIM_PWM_Stop_DMA>
		datasentflag = 1;
 8000f4e:	4b07      	ldr	r3, [pc, #28]	@ (8000f6c <WS2812_Send+0x100>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	601a      	str	r2, [r3, #0]
	}

	datasentflag = 0;
 8000f54:	4b05      	ldr	r3, [pc, #20]	@ (8000f6c <WS2812_Send+0x100>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
}
 8000f5a:	bf00      	nop
 8000f5c:	3718      	adds	r7, #24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000244 	.word	0x20000244
 8000f68:	20000338 	.word	0x20000338
 8000f6c:	20000334 	.word	0x20000334
 8000f70:	200000b8 	.word	0x200000b8
 8000f74:	000f4240 	.word	0x000f4240

08000f78 <reset_sound_stats>:
    
    Set_Brightness(current_brightness);
    WS2812_Send();
}

void reset_sound_stats(void) {
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
    mn = 5000;  // Reset min về giá trị cao
 8000f7c:	4b08      	ldr	r3, [pc, #32]	@ (8000fa0 <reset_sound_stats+0x28>)
 8000f7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f82:	601a      	str	r2, [r3, #0]
    mx = 0;     // Reset max về 0
 8000f84:	4b07      	ldr	r3, [pc, #28]	@ (8000fa4 <reset_sound_stats+0x2c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
    avg = 0;    // Reset average về 0
 8000f8a:	4b07      	ldr	r3, [pc, #28]	@ (8000fa8 <reset_sound_stats+0x30>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
    cnt = 0;    // Reset counter về 0
 8000f90:	4b06      	ldr	r3, [pc, #24]	@ (8000fac <reset_sound_stats+0x34>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bc80      	pop	{r7}
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	20000000 	.word	0x20000000
 8000fa4:	20000148 	.word	0x20000148
 8000fa8:	2000014c 	.word	0x2000014c
 8000fac:	20000150 	.word	0x20000150

08000fb0 <get_frequency_column>:

// Hàm để xác định cột LED dựa trên tần số
int get_frequency_column(int freq) {
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
    if (freq < FREQ_MIN) return -1;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2bc7      	cmp	r3, #199	@ 0xc7
 8000fbc:	dc02      	bgt.n	8000fc4 <get_frequency_column+0x14>
 8000fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc2:	e00f      	b.n	8000fe4 <get_frequency_column+0x34>
    if (freq > FREQ_MAX) return -1;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000fca:	dd02      	ble.n	8000fd2 <get_frequency_column+0x22>
 8000fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd0:	e008      	b.n	8000fe4 <get_frequency_column+0x34>
    
    return (freq - FREQ_MIN) / FREQ_STEP;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	3bc8      	subs	r3, #200	@ 0xc8
 8000fd6:	4a06      	ldr	r2, [pc, #24]	@ (8000ff0 <get_frequency_column+0x40>)
 8000fd8:	fb82 1203 	smull	r1, r2, r2, r3
 8000fdc:	441a      	add	r2, r3
 8000fde:	11d2      	asrs	r2, r2, #7
 8000fe0:	17db      	asrs	r3, r3, #31
 8000fe2:	1ad3      	subs	r3, r2, r3
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bc80      	pop	{r7}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	b60b60b7 	.word	0xb60b60b7

08000ff4 <get_frequency_color>:

// Hàm lấy màu dựa trên cột
void get_frequency_color(int freq, float intensity, uint8_t* r, uint8_t* g, uint8_t* b) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
 8001000:	603b      	str	r3, [r7, #0]
    int column = get_frequency_column(freq);
 8001002:	68f8      	ldr	r0, [r7, #12]
 8001004:	f7ff ffd4 	bl	8000fb0 <get_frequency_column>
 8001008:	6178      	str	r0, [r7, #20]
    if (column < 0) column = 0;
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	2b00      	cmp	r3, #0
 800100e:	da01      	bge.n	8001014 <get_frequency_color+0x20>
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
    if (column >= FREQ_COLUMNS) column = FREQ_COLUMNS - 1;
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	2b09      	cmp	r3, #9
 8001018:	dd01      	ble.n	800101e <get_frequency_color+0x2a>
 800101a:	2309      	movs	r3, #9
 800101c:	617b      	str	r3, [r7, #20]
    
    // Chuyển đổi từ xanh dương -> xanh lá -> vàng -> cam -> đỏ
    switch(column) {
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	2b09      	cmp	r3, #9
 8001022:	f200 8114 	bhi.w	800124e <get_frequency_color+0x25a>
 8001026:	a201      	add	r2, pc, #4	@ (adr r2, 800102c <get_frequency_color+0x38>)
 8001028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800102c:	08001055 	.word	0x08001055
 8001030:	0800107b 	.word	0x0800107b
 8001034:	080010b3 	.word	0x080010b3
 8001038:	080010eb 	.word	0x080010eb
 800103c:	08001111 	.word	0x08001111
 8001040:	08001149 	.word	0x08001149
 8001044:	08001181 	.word	0x08001181
 8001048:	080011b9 	.word	0x080011b9
 800104c:	080011f1 	.word	0x080011f1
 8001050:	08001229 	.word	0x08001229
        case 0: // Xanh dương đậm
            *r = 0;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2200      	movs	r2, #0
 8001058:	701a      	strb	r2, [r3, #0]
            *g = 0;
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	2200      	movs	r2, #0
 800105e:	701a      	strb	r2, [r3, #0]
            *b = (uint8_t)(intensity * 255);
 8001060:	497d      	ldr	r1, [pc, #500]	@ (8001258 <get_frequency_color+0x264>)
 8001062:	68b8      	ldr	r0, [r7, #8]
 8001064:	f7ff f980 	bl	8000368 <__aeabi_fmul>
 8001068:	4603      	mov	r3, r0
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fb68 	bl	8000740 <__aeabi_f2uiz>
 8001070:	4603      	mov	r3, r0
 8001072:	b2da      	uxtb	r2, r3
 8001074:	6a3b      	ldr	r3, [r7, #32]
 8001076:	701a      	strb	r2, [r3, #0]
            break;
 8001078:	e0e9      	b.n	800124e <get_frequency_color+0x25a>
        case 1: // Xanh dương nhạt
            *r = 0;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	701a      	strb	r2, [r3, #0]
            *g = (uint8_t)(intensity * 100);
 8001080:	4976      	ldr	r1, [pc, #472]	@ (800125c <get_frequency_color+0x268>)
 8001082:	68b8      	ldr	r0, [r7, #8]
 8001084:	f7ff f970 	bl	8000368 <__aeabi_fmul>
 8001088:	4603      	mov	r3, r0
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fb58 	bl	8000740 <__aeabi_f2uiz>
 8001090:	4603      	mov	r3, r0
 8001092:	b2da      	uxtb	r2, r3
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	701a      	strb	r2, [r3, #0]
            *b = (uint8_t)(intensity * 255);
 8001098:	496f      	ldr	r1, [pc, #444]	@ (8001258 <get_frequency_color+0x264>)
 800109a:	68b8      	ldr	r0, [r7, #8]
 800109c:	f7ff f964 	bl	8000368 <__aeabi_fmul>
 80010a0:	4603      	mov	r3, r0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff fb4c 	bl	8000740 <__aeabi_f2uiz>
 80010a8:	4603      	mov	r3, r0
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	6a3b      	ldr	r3, [r7, #32]
 80010ae:	701a      	strb	r2, [r3, #0]
            break;
 80010b0:	e0cd      	b.n	800124e <get_frequency_color+0x25a>
        case 2: // Xanh lá nhạt
            *r = 0;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	701a      	strb	r2, [r3, #0]
            *g = (uint8_t)(intensity * 255);
 80010b8:	4967      	ldr	r1, [pc, #412]	@ (8001258 <get_frequency_color+0x264>)
 80010ba:	68b8      	ldr	r0, [r7, #8]
 80010bc:	f7ff f954 	bl	8000368 <__aeabi_fmul>
 80010c0:	4603      	mov	r3, r0
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff fb3c 	bl	8000740 <__aeabi_f2uiz>
 80010c8:	4603      	mov	r3, r0
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	701a      	strb	r2, [r3, #0]
            *b = (uint8_t)(intensity * 100);
 80010d0:	4962      	ldr	r1, [pc, #392]	@ (800125c <get_frequency_color+0x268>)
 80010d2:	68b8      	ldr	r0, [r7, #8]
 80010d4:	f7ff f948 	bl	8000368 <__aeabi_fmul>
 80010d8:	4603      	mov	r3, r0
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff fb30 	bl	8000740 <__aeabi_f2uiz>
 80010e0:	4603      	mov	r3, r0
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	6a3b      	ldr	r3, [r7, #32]
 80010e6:	701a      	strb	r2, [r3, #0]
            break;
 80010e8:	e0b1      	b.n	800124e <get_frequency_color+0x25a>
        case 3: // Xanh lá đậm
            *r = 0;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2200      	movs	r2, #0
 80010ee:	701a      	strb	r2, [r3, #0]
            *g = (uint8_t)(intensity * 255);
 80010f0:	4959      	ldr	r1, [pc, #356]	@ (8001258 <get_frequency_color+0x264>)
 80010f2:	68b8      	ldr	r0, [r7, #8]
 80010f4:	f7ff f938 	bl	8000368 <__aeabi_fmul>
 80010f8:	4603      	mov	r3, r0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fb20 	bl	8000740 <__aeabi_f2uiz>
 8001100:	4603      	mov	r3, r0
 8001102:	b2da      	uxtb	r2, r3
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	701a      	strb	r2, [r3, #0]
            *b = 0;
 8001108:	6a3b      	ldr	r3, [r7, #32]
 800110a:	2200      	movs	r2, #0
 800110c:	701a      	strb	r2, [r3, #0]
            break;
 800110e:	e09e      	b.n	800124e <get_frequency_color+0x25a>
        case 4: // Xanh lá - vàng
            *r = (uint8_t)(intensity * 100);
 8001110:	4952      	ldr	r1, [pc, #328]	@ (800125c <get_frequency_color+0x268>)
 8001112:	68b8      	ldr	r0, [r7, #8]
 8001114:	f7ff f928 	bl	8000368 <__aeabi_fmul>
 8001118:	4603      	mov	r3, r0
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff fb10 	bl	8000740 <__aeabi_f2uiz>
 8001120:	4603      	mov	r3, r0
 8001122:	b2da      	uxtb	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	701a      	strb	r2, [r3, #0]
            *g = (uint8_t)(intensity * 255);
 8001128:	494b      	ldr	r1, [pc, #300]	@ (8001258 <get_frequency_color+0x264>)
 800112a:	68b8      	ldr	r0, [r7, #8]
 800112c:	f7ff f91c 	bl	8000368 <__aeabi_fmul>
 8001130:	4603      	mov	r3, r0
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff fb04 	bl	8000740 <__aeabi_f2uiz>
 8001138:	4603      	mov	r3, r0
 800113a:	b2da      	uxtb	r2, r3
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	701a      	strb	r2, [r3, #0]
            *b = 0;
 8001140:	6a3b      	ldr	r3, [r7, #32]
 8001142:	2200      	movs	r2, #0
 8001144:	701a      	strb	r2, [r3, #0]
            break;
 8001146:	e082      	b.n	800124e <get_frequency_color+0x25a>
        case 5: // Vàng
            *r = (uint8_t)(intensity * 255);
 8001148:	4943      	ldr	r1, [pc, #268]	@ (8001258 <get_frequency_color+0x264>)
 800114a:	68b8      	ldr	r0, [r7, #8]
 800114c:	f7ff f90c 	bl	8000368 <__aeabi_fmul>
 8001150:	4603      	mov	r3, r0
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff faf4 	bl	8000740 <__aeabi_f2uiz>
 8001158:	4603      	mov	r3, r0
 800115a:	b2da      	uxtb	r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	701a      	strb	r2, [r3, #0]
            *g = (uint8_t)(intensity * 255);
 8001160:	493d      	ldr	r1, [pc, #244]	@ (8001258 <get_frequency_color+0x264>)
 8001162:	68b8      	ldr	r0, [r7, #8]
 8001164:	f7ff f900 	bl	8000368 <__aeabi_fmul>
 8001168:	4603      	mov	r3, r0
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff fae8 	bl	8000740 <__aeabi_f2uiz>
 8001170:	4603      	mov	r3, r0
 8001172:	b2da      	uxtb	r2, r3
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	701a      	strb	r2, [r3, #0]
            *b = 0;
 8001178:	6a3b      	ldr	r3, [r7, #32]
 800117a:	2200      	movs	r2, #0
 800117c:	701a      	strb	r2, [r3, #0]
            break;
 800117e:	e066      	b.n	800124e <get_frequency_color+0x25a>
        case 6: // Cam nhạt
            *r = (uint8_t)(intensity * 255);
 8001180:	4935      	ldr	r1, [pc, #212]	@ (8001258 <get_frequency_color+0x264>)
 8001182:	68b8      	ldr	r0, [r7, #8]
 8001184:	f7ff f8f0 	bl	8000368 <__aeabi_fmul>
 8001188:	4603      	mov	r3, r0
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff fad8 	bl	8000740 <__aeabi_f2uiz>
 8001190:	4603      	mov	r3, r0
 8001192:	b2da      	uxtb	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	701a      	strb	r2, [r3, #0]
            *g = (uint8_t)(intensity * 180);
 8001198:	4931      	ldr	r1, [pc, #196]	@ (8001260 <get_frequency_color+0x26c>)
 800119a:	68b8      	ldr	r0, [r7, #8]
 800119c:	f7ff f8e4 	bl	8000368 <__aeabi_fmul>
 80011a0:	4603      	mov	r3, r0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff facc 	bl	8000740 <__aeabi_f2uiz>
 80011a8:	4603      	mov	r3, r0
 80011aa:	b2da      	uxtb	r2, r3
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	701a      	strb	r2, [r3, #0]
            *b = 0;
 80011b0:	6a3b      	ldr	r3, [r7, #32]
 80011b2:	2200      	movs	r2, #0
 80011b4:	701a      	strb	r2, [r3, #0]
            break;
 80011b6:	e04a      	b.n	800124e <get_frequency_color+0x25a>
        case 7: // Cam đậm
            *r = (uint8_t)(intensity * 255);
 80011b8:	4927      	ldr	r1, [pc, #156]	@ (8001258 <get_frequency_color+0x264>)
 80011ba:	68b8      	ldr	r0, [r7, #8]
 80011bc:	f7ff f8d4 	bl	8000368 <__aeabi_fmul>
 80011c0:	4603      	mov	r3, r0
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff fabc 	bl	8000740 <__aeabi_f2uiz>
 80011c8:	4603      	mov	r3, r0
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	701a      	strb	r2, [r3, #0]
            *g = (uint8_t)(intensity * 100);
 80011d0:	4922      	ldr	r1, [pc, #136]	@ (800125c <get_frequency_color+0x268>)
 80011d2:	68b8      	ldr	r0, [r7, #8]
 80011d4:	f7ff f8c8 	bl	8000368 <__aeabi_fmul>
 80011d8:	4603      	mov	r3, r0
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fab0 	bl	8000740 <__aeabi_f2uiz>
 80011e0:	4603      	mov	r3, r0
 80011e2:	b2da      	uxtb	r2, r3
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	701a      	strb	r2, [r3, #0]
            *b = 0;
 80011e8:	6a3b      	ldr	r3, [r7, #32]
 80011ea:	2200      	movs	r2, #0
 80011ec:	701a      	strb	r2, [r3, #0]
            break;
 80011ee:	e02e      	b.n	800124e <get_frequency_color+0x25a>
        case 8: // Đỏ cam
            *r = (uint8_t)(intensity * 255);
 80011f0:	4919      	ldr	r1, [pc, #100]	@ (8001258 <get_frequency_color+0x264>)
 80011f2:	68b8      	ldr	r0, [r7, #8]
 80011f4:	f7ff f8b8 	bl	8000368 <__aeabi_fmul>
 80011f8:	4603      	mov	r3, r0
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff faa0 	bl	8000740 <__aeabi_f2uiz>
 8001200:	4603      	mov	r3, r0
 8001202:	b2da      	uxtb	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	701a      	strb	r2, [r3, #0]
            *g = (uint8_t)(intensity * 50);
 8001208:	4916      	ldr	r1, [pc, #88]	@ (8001264 <get_frequency_color+0x270>)
 800120a:	68b8      	ldr	r0, [r7, #8]
 800120c:	f7ff f8ac 	bl	8000368 <__aeabi_fmul>
 8001210:	4603      	mov	r3, r0
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff fa94 	bl	8000740 <__aeabi_f2uiz>
 8001218:	4603      	mov	r3, r0
 800121a:	b2da      	uxtb	r2, r3
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	701a      	strb	r2, [r3, #0]
            *b = 0;
 8001220:	6a3b      	ldr	r3, [r7, #32]
 8001222:	2200      	movs	r2, #0
 8001224:	701a      	strb	r2, [r3, #0]
            break;
 8001226:	e012      	b.n	800124e <get_frequency_color+0x25a>
        case 9: // Đỏ
            *r = (uint8_t)(intensity * 255);
 8001228:	490b      	ldr	r1, [pc, #44]	@ (8001258 <get_frequency_color+0x264>)
 800122a:	68b8      	ldr	r0, [r7, #8]
 800122c:	f7ff f89c 	bl	8000368 <__aeabi_fmul>
 8001230:	4603      	mov	r3, r0
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff fa84 	bl	8000740 <__aeabi_f2uiz>
 8001238:	4603      	mov	r3, r0
 800123a:	b2da      	uxtb	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	701a      	strb	r2, [r3, #0]
            *g = 0;
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	2200      	movs	r2, #0
 8001244:	701a      	strb	r2, [r3, #0]
            *b = 0;
 8001246:	6a3b      	ldr	r3, [r7, #32]
 8001248:	2200      	movs	r2, #0
 800124a:	701a      	strb	r2, [r3, #0]
            break;
 800124c:	bf00      	nop
    }
}
 800124e:	bf00      	nop
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	437f0000 	.word	0x437f0000
 800125c:	42c80000 	.word	0x42c80000
 8001260:	43340000 	.word	0x43340000
 8001264:	42480000 	.word	0x42480000

08001268 <Frequency_Column_Effect>:

// Hàm hiệu ứng nháy theo tần số
void Frequency_Column_Effect(int adc_value) {
 8001268:	b5b0      	push	{r4, r5, r7, lr}
 800126a:	b08c      	sub	sp, #48	@ 0x30
 800126c:	af02      	add	r7, sp, #8
 800126e:	6078      	str	r0, [r7, #4]
    // Tính cường độ dựa trên giá trị ADC
    float intensity = (float)(adc_value - 1700) / (4000 - 1700);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f2a3 63a4 	subw	r3, r3, #1700	@ 0x6a4
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff f822 	bl	80002c0 <__aeabi_i2f>
 800127c:	4603      	mov	r3, r0
 800127e:	4968      	ldr	r1, [pc, #416]	@ (8001420 <Frequency_Column_Effect+0x1b8>)
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff f925 	bl	80004d0 <__aeabi_fdiv>
 8001286:	4603      	mov	r3, r0
 8001288:	627b      	str	r3, [r7, #36]	@ 0x24
    if (intensity < 0.05f) intensity = 0;  // Thêm ngưỡng để tránh nhiễu
 800128a:	4966      	ldr	r1, [pc, #408]	@ (8001424 <Frequency_Column_Effect+0x1bc>)
 800128c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800128e:	f7ff fa09 	bl	80006a4 <__aeabi_fcmplt>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d002      	beq.n	800129e <Frequency_Column_Effect+0x36>
 8001298:	f04f 0300 	mov.w	r3, #0
 800129c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (intensity > 1) intensity = 1;
 800129e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80012a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80012a4:	f7ff fa1c 	bl	80006e0 <__aeabi_fcmpgt>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d002      	beq.n	80012b4 <Frequency_Column_Effect+0x4c>
 80012ae:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80012b2:	627b      	str	r3, [r7, #36]	@ 0x24
    
    // Tính số cột cần sáng dựa trên cường độ
    int num_columns = (int)(intensity * FREQ_COLUMNS);
 80012b4:	495c      	ldr	r1, [pc, #368]	@ (8001428 <Frequency_Column_Effect+0x1c0>)
 80012b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80012b8:	f7ff f856 	bl	8000368 <__aeabi_fmul>
 80012bc:	4603      	mov	r3, r0
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff fa18 	bl	80006f4 <__aeabi_f2iz>
 80012c4:	4603      	mov	r3, r0
 80012c6:	61bb      	str	r3, [r7, #24]
    
    // Cập nhật từng cột
    for (int i = 0; i < FREQ_COLUMNS; i++) {
 80012c8:	2300      	movs	r3, #0
 80012ca:	623b      	str	r3, [r7, #32]
 80012cc:	e098      	b.n	8001400 <Frequency_Column_Effect+0x198>
        float target_intensity;
        if (i < num_columns) {
 80012ce:	6a3a      	ldr	r2, [r7, #32]
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	da02      	bge.n	80012dc <Frequency_Column_Effect+0x74>
            target_intensity = intensity;  // Sử dụng cường độ thực tế
 80012d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d8:	61fb      	str	r3, [r7, #28]
 80012da:	e002      	b.n	80012e2 <Frequency_Column_Effect+0x7a>
        } else {
            target_intensity = 0.0f;  // Tắt hoàn toàn
 80012dc:	f04f 0300 	mov.w	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
        }
        
        // Áp dụng smoothing
        prev_intensities[i] = prev_intensities[i] * (1.0f - SMOOTHING_FACTOR) + 
 80012e2:	4a52      	ldr	r2, [pc, #328]	@ (800142c <Frequency_Column_Effect+0x1c4>)
 80012e4:	6a3b      	ldr	r3, [r7, #32]
 80012e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ea:	4951      	ldr	r1, [pc, #324]	@ (8001430 <Frequency_Column_Effect+0x1c8>)
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff f83b 	bl	8000368 <__aeabi_fmul>
 80012f2:	4603      	mov	r3, r0
 80012f4:	461c      	mov	r4, r3
                            target_intensity * SMOOTHING_FACTOR;
 80012f6:	494f      	ldr	r1, [pc, #316]	@ (8001434 <Frequency_Column_Effect+0x1cc>)
 80012f8:	69f8      	ldr	r0, [r7, #28]
 80012fa:	f7ff f835 	bl	8000368 <__aeabi_fmul>
 80012fe:	4603      	mov	r3, r0
        prev_intensities[i] = prev_intensities[i] * (1.0f - SMOOTHING_FACTOR) + 
 8001300:	4619      	mov	r1, r3
 8001302:	4620      	mov	r0, r4
 8001304:	f7fe ff28 	bl	8000158 <__addsf3>
 8001308:	4603      	mov	r3, r0
 800130a:	4619      	mov	r1, r3
 800130c:	4a47      	ldr	r2, [pc, #284]	@ (800142c <Frequency_Column_Effect+0x1c4>)
 800130e:	6a3b      	ldr	r3, [r7, #32]
 8001310:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        
        // Thêm hiệu ứng fade cho các cột cao hơn
        float fade_factor = 1.0f - ((float)i / FREQ_COLUMNS) * 0.3f;
 8001314:	6a38      	ldr	r0, [r7, #32]
 8001316:	f7fe ffd3 	bl	80002c0 <__aeabi_i2f>
 800131a:	4603      	mov	r3, r0
 800131c:	4942      	ldr	r1, [pc, #264]	@ (8001428 <Frequency_Column_Effect+0x1c0>)
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff f8d6 	bl	80004d0 <__aeabi_fdiv>
 8001324:	4603      	mov	r3, r0
 8001326:	4943      	ldr	r1, [pc, #268]	@ (8001434 <Frequency_Column_Effect+0x1cc>)
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff f81d 	bl	8000368 <__aeabi_fmul>
 800132e:	4603      	mov	r3, r0
 8001330:	4619      	mov	r1, r3
 8001332:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001336:	f7fe ff0d 	bl	8000154 <__aeabi_fsub>
 800133a:	4603      	mov	r3, r0
 800133c:	617b      	str	r3, [r7, #20]
        
        uint8_t r, g, b;
        get_frequency_color(FREQ_MIN + i * FREQ_STEP, 1.0, &r, &g, &b);
 800133e:	6a3b      	ldr	r3, [r7, #32]
 8001340:	22b4      	movs	r2, #180	@ 0xb4
 8001342:	fb02 f303 	mul.w	r3, r2, r3
 8001346:	f103 00c8 	add.w	r0, r3, #200	@ 0xc8
 800134a:	f107 010e 	add.w	r1, r7, #14
 800134e:	f107 020f 	add.w	r2, r7, #15
 8001352:	f107 030d 	add.w	r3, r7, #13
 8001356:	9300      	str	r3, [sp, #0]
 8001358:	460b      	mov	r3, r1
 800135a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800135e:	f7ff fe49 	bl	8000ff4 <get_frequency_color>
        
        // Áp dụng cường độ và fade
        float final_intensity = prev_intensities[i] * fade_factor;
 8001362:	4a32      	ldr	r2, [pc, #200]	@ (800142c <Frequency_Column_Effect+0x1c4>)
 8001364:	6a3b      	ldr	r3, [r7, #32]
 8001366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800136a:	4619      	mov	r1, r3
 800136c:	6978      	ldr	r0, [r7, #20]
 800136e:	f7fe fffb 	bl	8000368 <__aeabi_fmul>
 8001372:	4603      	mov	r3, r0
 8001374:	613b      	str	r3, [r7, #16]
        
        // Chỉ cập nhật LED nếu có cường độ đáng kể
        if (final_intensity > 0.01f) {
 8001376:	4930      	ldr	r1, [pc, #192]	@ (8001438 <Frequency_Column_Effect+0x1d0>)
 8001378:	6938      	ldr	r0, [r7, #16]
 800137a:	f7ff f9b1 	bl	80006e0 <__aeabi_fcmpgt>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d034      	beq.n	80013ee <Frequency_Column_Effect+0x186>
            Set_LED_Col(i, 
                       (uint8_t)(r * final_intensity), 
 8001384:	7bfb      	ldrb	r3, [r7, #15]
 8001386:	4618      	mov	r0, r3
 8001388:	f7fe ff9a 	bl	80002c0 <__aeabi_i2f>
 800138c:	4603      	mov	r3, r0
 800138e:	6939      	ldr	r1, [r7, #16]
 8001390:	4618      	mov	r0, r3
 8001392:	f7fe ffe9 	bl	8000368 <__aeabi_fmul>
 8001396:	4603      	mov	r3, r0
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff f9d1 	bl	8000740 <__aeabi_f2uiz>
 800139e:	4603      	mov	r3, r0
 80013a0:	b2db      	uxtb	r3, r3
            Set_LED_Col(i, 
 80013a2:	461c      	mov	r4, r3
                       (uint8_t)(g * final_intensity), 
 80013a4:	7bbb      	ldrb	r3, [r7, #14]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7fe ff8a 	bl	80002c0 <__aeabi_i2f>
 80013ac:	4603      	mov	r3, r0
 80013ae:	6939      	ldr	r1, [r7, #16]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7fe ffd9 	bl	8000368 <__aeabi_fmul>
 80013b6:	4603      	mov	r3, r0
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff f9c1 	bl	8000740 <__aeabi_f2uiz>
 80013be:	4603      	mov	r3, r0
 80013c0:	b2db      	uxtb	r3, r3
            Set_LED_Col(i, 
 80013c2:	461d      	mov	r5, r3
                       (uint8_t)(b * final_intensity));
 80013c4:	7b7b      	ldrb	r3, [r7, #13]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7fe ff7a 	bl	80002c0 <__aeabi_i2f>
 80013cc:	4603      	mov	r3, r0
 80013ce:	6939      	ldr	r1, [r7, #16]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7fe ffc9 	bl	8000368 <__aeabi_fmul>
 80013d6:	4603      	mov	r3, r0
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff f9b1 	bl	8000740 <__aeabi_f2uiz>
 80013de:	4603      	mov	r3, r0
 80013e0:	b2db      	uxtb	r3, r3
            Set_LED_Col(i, 
 80013e2:	462a      	mov	r2, r5
 80013e4:	4621      	mov	r1, r4
 80013e6:	6a38      	ldr	r0, [r7, #32]
 80013e8:	f7ff fcce 	bl	8000d88 <Set_LED_Col>
 80013ec:	e005      	b.n	80013fa <Frequency_Column_Effect+0x192>
        } else {
            Set_LED_Col(i, 0, 0, 0);  // Tắt hoàn toàn nếu cường độ quá thấp
 80013ee:	2300      	movs	r3, #0
 80013f0:	2200      	movs	r2, #0
 80013f2:	2100      	movs	r1, #0
 80013f4:	6a38      	ldr	r0, [r7, #32]
 80013f6:	f7ff fcc7 	bl	8000d88 <Set_LED_Col>
    for (int i = 0; i < FREQ_COLUMNS; i++) {
 80013fa:	6a3b      	ldr	r3, [r7, #32]
 80013fc:	3301      	adds	r3, #1
 80013fe:	623b      	str	r3, [r7, #32]
 8001400:	6a3b      	ldr	r3, [r7, #32]
 8001402:	2b09      	cmp	r3, #9
 8001404:	f77f af63 	ble.w	80012ce <Frequency_Column_Effect+0x66>
        }
    }
    
    Set_Brightness(current_brightness);
 8001408:	4b0c      	ldr	r3, [pc, #48]	@ (800143c <Frequency_Column_Effect+0x1d4>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff fcdf 	bl	8000dd0 <Set_Brightness>
    WS2812_Send();
 8001412:	f7ff fd2b 	bl	8000e6c <WS2812_Send>
}
 8001416:	bf00      	nop
 8001418:	3728      	adds	r7, #40	@ 0x28
 800141a:	46bd      	mov	sp, r7
 800141c:	bdb0      	pop	{r4, r5, r7, pc}
 800141e:	bf00      	nop
 8001420:	450fc000 	.word	0x450fc000
 8001424:	3d4ccccd 	.word	0x3d4ccccd
 8001428:	41200000 	.word	0x41200000
 800142c:	20000060 	.word	0x20000060
 8001430:	3f333333 	.word	0x3f333333
 8001434:	3e99999a 	.word	0x3e99999a
 8001438:	3c23d70a 	.word	0x3c23d70a
 800143c:	20000034 	.word	0x20000034

08001440 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b090      	sub	sp, #64	@ 0x40
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001446:	f000 fbd5 	bl	8001bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800144a:	f000 f8db 	bl	8001604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800144e:	f000 fa31 	bl	80018b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001452:	f000 fa11 	bl	8001878 <MX_DMA_Init>
  MX_TIM1_Init();
 8001456:	f000 f96f 	bl	8001738 <MX_TIM1_Init>
  MX_ADC1_Init();
 800145a:	f000 f92f 	bl	80016bc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  // Initialize keypad
  Keypad_Init();
 800145e:	f7ff fbe1 	bl	8000c24 <Keypad_Init>

  // Initialize LCD Parallel
  LCD_Parallel_Init();
 8001462:	f7ff f98d 	bl	8000780 <LCD_Parallel_Init>
  LCD_Parallel_Clear();
 8001466:	f7ff fa1d 	bl	80008a4 <LCD_Parallel_Clear>
  //LCD_Parallel_DisplayOn();
  //LCD_Parallel_CursorOn();

  // Turn off all LEDs initially
  Set_All_LEDs_Same_Color(0, 0, 0);
 800146a:	2200      	movs	r2, #0
 800146c:	2100      	movs	r1, #0
 800146e:	2000      	movs	r0, #0
 8001470:	f7ff fc70 	bl	8000d54 <Set_All_LEDs_Same_Color>
  Set_Brightness(0);
 8001474:	2000      	movs	r0, #0
 8001476:	f7ff fcab 	bl	8000dd0 <Set_Brightness>
  WS2812_Send();
 800147a:	f7ff fcf7 	bl	8000e6c <WS2812_Send>

  // Reset sound stats
  reset_sound_stats();
 800147e:	f7ff fd7b 	bl	8000f78 <reset_sound_stats>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	HAL_ADC_Start(&hadc1);
 8001482:	4855      	ldr	r0, [pc, #340]	@ (80015d8 <main+0x198>)
 8001484:	f000 fd14 	bl	8001eb0 <HAL_ADC_Start>
	var = HAL_ADC_GetValue(&hadc1);
 8001488:	4853      	ldr	r0, [pc, #332]	@ (80015d8 <main+0x198>)
 800148a:	f000 fdeb 	bl	8002064 <HAL_ADC_GetValue>
 800148e:	4603      	mov	r3, r0
 8001490:	4a52      	ldr	r2, [pc, #328]	@ (80015dc <main+0x19c>)
 8001492:	6013      	str	r3, [r2, #0]
	HAL_ADC_Stop(&hadc1);
 8001494:	4850      	ldr	r0, [pc, #320]	@ (80015d8 <main+0x198>)
 8001496:	f000 fdb9 	bl	800200c <HAL_ADC_Stop>

	if (var > mx) mx = var;
 800149a:	4b50      	ldr	r3, [pc, #320]	@ (80015dc <main+0x19c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a50      	ldr	r2, [pc, #320]	@ (80015e0 <main+0x1a0>)
 80014a0:	6812      	ldr	r2, [r2, #0]
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d904      	bls.n	80014b0 <main+0x70>
 80014a6:	4b4d      	ldr	r3, [pc, #308]	@ (80015dc <main+0x19c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	461a      	mov	r2, r3
 80014ac:	4b4c      	ldr	r3, [pc, #304]	@ (80015e0 <main+0x1a0>)
 80014ae:	601a      	str	r2, [r3, #0]
	if (var < mn && var > SILENT_VALUE && calculate_frequency(var) > 0) mn = var;
 80014b0:	4b4a      	ldr	r3, [pc, #296]	@ (80015dc <main+0x19c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a4b      	ldr	r2, [pc, #300]	@ (80015e4 <main+0x1a4>)
 80014b6:	6812      	ldr	r2, [r2, #0]
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d211      	bcs.n	80014e0 <main+0xa0>
 80014bc:	4b47      	ldr	r3, [pc, #284]	@ (80015dc <main+0x19c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 80014c4:	d90c      	bls.n	80014e0 <main+0xa0>
 80014c6:	4b45      	ldr	r3, [pc, #276]	@ (80015dc <main+0x19c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff fada 	bl	8000a84 <calculate_frequency>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	dd04      	ble.n	80014e0 <main+0xa0>
 80014d6:	4b41      	ldr	r3, [pc, #260]	@ (80015dc <main+0x19c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	461a      	mov	r2, r3
 80014dc:	4b41      	ldr	r3, [pc, #260]	@ (80015e4 <main+0x1a4>)
 80014de:	601a      	str	r2, [r3, #0]
	avg += var;
 80014e0:	4b41      	ldr	r3, [pc, #260]	@ (80015e8 <main+0x1a8>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	461a      	mov	r2, r3
 80014e6:	4b3d      	ldr	r3, [pc, #244]	@ (80015dc <main+0x19c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4413      	add	r3, r2
 80014ec:	461a      	mov	r2, r3
 80014ee:	4b3e      	ldr	r3, [pc, #248]	@ (80015e8 <main+0x1a8>)
 80014f0:	601a      	str	r2, [r3, #0]
	cnt++;
 80014f2:	4b3e      	ldr	r3, [pc, #248]	@ (80015ec <main+0x1ac>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	3301      	adds	r3, #1
 80014f8:	4a3c      	ldr	r2, [pc, #240]	@ (80015ec <main+0x1ac>)
 80014fa:	6013      	str	r3, [r2, #0]


	// Khai báo biến chuỗi
	char t[20], mnt[10], mxt[10], freqt[10];
	int freq = calculate_frequency(var);
 80014fc:	4b37      	ldr	r3, [pc, #220]	@ (80015dc <main+0x19c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff fabf 	bl	8000a84 <calculate_frequency>
 8001506:	63f8      	str	r0, [r7, #60]	@ 0x3c

	// Cập nhật hiệu ứng LED
	Frequency_Column_Effect(var);
 8001508:	4b34      	ldr	r3, [pc, #208]	@ (80015dc <main+0x19c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff feab 	bl	8001268 <Frequency_Column_Effect>

	// Hiển thị thông tin LCD
	LCD_Parallel_Clear();
 8001512:	f7ff f9c7 	bl	80008a4 <LCD_Parallel_Clear>

	// Dòng 1: Hiển thị giá trị ADC và tần số
	LCD_Parallel_SetCursor(0, 0);
 8001516:	2100      	movs	r1, #0
 8001518:	2000      	movs	r0, #0
 800151a:	f7ff f9cd 	bl	80008b8 <LCD_Parallel_SetCursor>
	LCD_Parallel_Print("ADC:");
 800151e:	4834      	ldr	r0, [pc, #208]	@ (80015f0 <main+0x1b0>)
 8001520:	f7ff f9f4 	bl	800090c <LCD_Parallel_Print>
	LCD_Parallel_Print(int_to_string(var, t));
 8001524:	4b2d      	ldr	r3, [pc, #180]	@ (80015dc <main+0x19c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	461a      	mov	r2, r3
 800152a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800152e:	4619      	mov	r1, r3
 8001530:	4610      	mov	r0, r2
 8001532:	f7ff fae5 	bl	8000b00 <int_to_string>
 8001536:	4603      	mov	r3, r0
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff f9e7 	bl	800090c <LCD_Parallel_Print>

	LCD_Parallel_SetCursor(0, 8);
 800153e:	2108      	movs	r1, #8
 8001540:	2000      	movs	r0, #0
 8001542:	f7ff f9b9 	bl	80008b8 <LCD_Parallel_SetCursor>
	LCD_Parallel_Print("Hz:");
 8001546:	482b      	ldr	r0, [pc, #172]	@ (80015f4 <main+0x1b4>)
 8001548:	f7ff f9e0 	bl	800090c <LCD_Parallel_Print>
	LCD_Parallel_Print(int_to_string(freq, freqt));
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	4619      	mov	r1, r3
 8001550:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001552:	f7ff fad5 	bl	8000b00 <int_to_string>
 8001556:	4603      	mov	r3, r0
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff f9d7 	bl	800090c <LCD_Parallel_Print>

	// Dòng 2: Hiển thị giá trị min và max
	LCD_Parallel_SetCursor(1, 0);
 800155e:	2100      	movs	r1, #0
 8001560:	2001      	movs	r0, #1
 8001562:	f7ff f9a9 	bl	80008b8 <LCD_Parallel_SetCursor>
	LCD_Parallel_Print("Min:");
 8001566:	4824      	ldr	r0, [pc, #144]	@ (80015f8 <main+0x1b8>)
 8001568:	f7ff f9d0 	bl	800090c <LCD_Parallel_Print>
	if(mn != 5000)
 800156c:	4b1d      	ldr	r3, [pc, #116]	@ (80015e4 <main+0x1a4>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001574:	4293      	cmp	r3, r2
 8001576:	d010      	beq.n	800159a <main+0x15a>
		LCD_Parallel_Print(int_to_string(calculate_frequency(mn), mnt));
 8001578:	4b1a      	ldr	r3, [pc, #104]	@ (80015e4 <main+0x1a4>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fa81 	bl	8000a84 <calculate_frequency>
 8001582:	4602      	mov	r2, r0
 8001584:	f107 031c 	add.w	r3, r7, #28
 8001588:	4619      	mov	r1, r3
 800158a:	4610      	mov	r0, r2
 800158c:	f7ff fab8 	bl	8000b00 <int_to_string>
 8001590:	4603      	mov	r3, r0
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff f9ba 	bl	800090c <LCD_Parallel_Print>
 8001598:	e002      	b.n	80015a0 <main+0x160>
	else
		LCD_Parallel_Print("NaN");
 800159a:	4818      	ldr	r0, [pc, #96]	@ (80015fc <main+0x1bc>)
 800159c:	f7ff f9b6 	bl	800090c <LCD_Parallel_Print>

	LCD_Parallel_SetCursor(1, 8);
 80015a0:	2108      	movs	r1, #8
 80015a2:	2001      	movs	r0, #1
 80015a4:	f7ff f988 	bl	80008b8 <LCD_Parallel_SetCursor>
	LCD_Parallel_Print("Max:");
 80015a8:	4815      	ldr	r0, [pc, #84]	@ (8001600 <main+0x1c0>)
 80015aa:	f7ff f9af 	bl	800090c <LCD_Parallel_Print>
	LCD_Parallel_Print(int_to_string(calculate_frequency(mx), mxt));
 80015ae:	4b0c      	ldr	r3, [pc, #48]	@ (80015e0 <main+0x1a0>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff fa66 	bl	8000a84 <calculate_frequency>
 80015b8:	4602      	mov	r2, r0
 80015ba:	f107 0310 	add.w	r3, r7, #16
 80015be:	4619      	mov	r1, r3
 80015c0:	4610      	mov	r0, r2
 80015c2:	f7ff fa9d 	bl	8000b00 <int_to_string>
 80015c6:	4603      	mov	r3, r0
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff f99f 	bl	800090c <LCD_Parallel_Print>

	HAL_Delay(10);
 80015ce:	200a      	movs	r0, #10
 80015d0:	f000 fb72 	bl	8001cb8 <HAL_Delay>
  {
 80015d4:	e755      	b.n	8001482 <main+0x42>
 80015d6:	bf00      	nop
 80015d8:	20000088 	.word	0x20000088
 80015dc:	20000144 	.word	0x20000144
 80015e0:	20000148 	.word	0x20000148
 80015e4:	20000000 	.word	0x20000000
 80015e8:	2000014c 	.word	0x2000014c
 80015ec:	20000150 	.word	0x20000150
 80015f0:	08004a58 	.word	0x08004a58
 80015f4:	08004a60 	.word	0x08004a60
 80015f8:	08004a64 	.word	0x08004a64
 80015fc:	08004a6c 	.word	0x08004a6c
 8001600:	08004a70 	.word	0x08004a70

08001604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b094      	sub	sp, #80	@ 0x50
 8001608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800160a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800160e:	2228      	movs	r2, #40	@ 0x28
 8001610:	2100      	movs	r1, #0
 8001612:	4618      	mov	r0, r3
 8001614:	f003 f945 	bl	80048a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001628:	1d3b      	adds	r3, r7, #4
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	609a      	str	r2, [r3, #8]
 8001632:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001634:	2301      	movs	r3, #1
 8001636:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001638:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800163c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800163e:	2300      	movs	r3, #0
 8001640:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001642:	2301      	movs	r3, #1
 8001644:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001646:	2302      	movs	r3, #2
 8001648:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800164a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800164e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001650:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001654:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001656:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800165a:	4618      	mov	r0, r3
 800165c:	f001 fbb2 	bl	8002dc4 <HAL_RCC_OscConfig>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001666:	f000 f971 	bl	800194c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800166a:	230f      	movs	r3, #15
 800166c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800166e:	2302      	movs	r3, #2
 8001670:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001676:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800167a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800167c:	2300      	movs	r3, #0
 800167e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	2102      	movs	r1, #2
 8001686:	4618      	mov	r0, r3
 8001688:	f001 fe1e 	bl	80032c8 <HAL_RCC_ClockConfig>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001692:	f000 f95b 	bl	800194c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001696:	2302      	movs	r3, #2
 8001698:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800169a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800169e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016a0:	1d3b      	adds	r3, r7, #4
 80016a2:	4618      	mov	r0, r3
 80016a4:	f001 ff6c 	bl	8003580 <HAL_RCCEx_PeriphCLKConfig>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80016ae:	f000 f94d 	bl	800194c <Error_Handler>
  }
}
 80016b2:	bf00      	nop
 80016b4:	3750      	adds	r7, #80	@ 0x50
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
	...

080016bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016c2:	1d3b      	adds	r3, r7, #4
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80016cc:	4b18      	ldr	r3, [pc, #96]	@ (8001730 <MX_ADC1_Init+0x74>)
 80016ce:	4a19      	ldr	r2, [pc, #100]	@ (8001734 <MX_ADC1_Init+0x78>)
 80016d0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80016d2:	4b17      	ldr	r3, [pc, #92]	@ (8001730 <MX_ADC1_Init+0x74>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016d8:	4b15      	ldr	r3, [pc, #84]	@ (8001730 <MX_ADC1_Init+0x74>)
 80016da:	2200      	movs	r2, #0
 80016dc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016de:	4b14      	ldr	r3, [pc, #80]	@ (8001730 <MX_ADC1_Init+0x74>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016e4:	4b12      	ldr	r3, [pc, #72]	@ (8001730 <MX_ADC1_Init+0x74>)
 80016e6:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80016ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016ec:	4b10      	ldr	r3, [pc, #64]	@ (8001730 <MX_ADC1_Init+0x74>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80016f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001730 <MX_ADC1_Init+0x74>)
 80016f4:	2201      	movs	r2, #1
 80016f6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016f8:	480d      	ldr	r0, [pc, #52]	@ (8001730 <MX_ADC1_Init+0x74>)
 80016fa:	f000 fb01 	bl	8001d00 <HAL_ADC_Init>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001704:	f000 f922 	bl	800194c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001708:	2300      	movs	r3, #0
 800170a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800170c:	2301      	movs	r3, #1
 800170e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001710:	2300      	movs	r3, #0
 8001712:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	4619      	mov	r1, r3
 8001718:	4805      	ldr	r0, [pc, #20]	@ (8001730 <MX_ADC1_Init+0x74>)
 800171a:	f000 fcaf 	bl	800207c <HAL_ADC_ConfigChannel>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001724:	f000 f912 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001728:	bf00      	nop
 800172a:	3710      	adds	r7, #16
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20000088 	.word	0x20000088
 8001734:	40012400 	.word	0x40012400

08001738 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b096      	sub	sp, #88	@ 0x58
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800173e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800174c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001756:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	605a      	str	r2, [r3, #4]
 8001760:	609a      	str	r2, [r3, #8]
 8001762:	60da      	str	r2, [r3, #12]
 8001764:	611a      	str	r2, [r3, #16]
 8001766:	615a      	str	r2, [r3, #20]
 8001768:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800176a:	1d3b      	adds	r3, r7, #4
 800176c:	2220      	movs	r2, #32
 800176e:	2100      	movs	r1, #0
 8001770:	4618      	mov	r0, r3
 8001772:	f003 f896 	bl	80048a2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001776:	4b3e      	ldr	r3, [pc, #248]	@ (8001870 <MX_TIM1_Init+0x138>)
 8001778:	4a3e      	ldr	r2, [pc, #248]	@ (8001874 <MX_TIM1_Init+0x13c>)
 800177a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800177c:	4b3c      	ldr	r3, [pc, #240]	@ (8001870 <MX_TIM1_Init+0x138>)
 800177e:	2200      	movs	r2, #0
 8001780:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001782:	4b3b      	ldr	r3, [pc, #236]	@ (8001870 <MX_TIM1_Init+0x138>)
 8001784:	2200      	movs	r2, #0
 8001786:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 8001788:	4b39      	ldr	r3, [pc, #228]	@ (8001870 <MX_TIM1_Init+0x138>)
 800178a:	2259      	movs	r2, #89	@ 0x59
 800178c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800178e:	4b38      	ldr	r3, [pc, #224]	@ (8001870 <MX_TIM1_Init+0x138>)
 8001790:	2200      	movs	r2, #0
 8001792:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001794:	4b36      	ldr	r3, [pc, #216]	@ (8001870 <MX_TIM1_Init+0x138>)
 8001796:	2200      	movs	r2, #0
 8001798:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800179a:	4b35      	ldr	r3, [pc, #212]	@ (8001870 <MX_TIM1_Init+0x138>)
 800179c:	2200      	movs	r2, #0
 800179e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017a0:	4833      	ldr	r0, [pc, #204]	@ (8001870 <MX_TIM1_Init+0x138>)
 80017a2:	f001 ffa3 	bl	80036ec <HAL_TIM_Base_Init>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80017ac:	f000 f8ce 	bl	800194c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017b6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80017ba:	4619      	mov	r1, r3
 80017bc:	482c      	ldr	r0, [pc, #176]	@ (8001870 <MX_TIM1_Init+0x138>)
 80017be:	f002 fb67 	bl	8003e90 <HAL_TIM_ConfigClockSource>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80017c8:	f000 f8c0 	bl	800194c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017cc:	4828      	ldr	r0, [pc, #160]	@ (8001870 <MX_TIM1_Init+0x138>)
 80017ce:	f001 ffdc 	bl	800378a <HAL_TIM_PWM_Init>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80017d8:	f000 f8b8 	bl	800194c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017dc:	2300      	movs	r3, #0
 80017de:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017e4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80017e8:	4619      	mov	r1, r3
 80017ea:	4821      	ldr	r0, [pc, #132]	@ (8001870 <MX_TIM1_Init+0x138>)
 80017ec:	f002 ffaa 	bl	8004744 <HAL_TIMEx_MasterConfigSynchronization>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80017f6:	f000 f8a9 	bl	800194c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017fa:	2360      	movs	r3, #96	@ 0x60
 80017fc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80017fe:	2300      	movs	r3, #0
 8001800:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001802:	2300      	movs	r3, #0
 8001804:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001806:	2300      	movs	r3, #0
 8001808:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800180a:	2300      	movs	r3, #0
 800180c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800180e:	2300      	movs	r3, #0
 8001810:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001812:	2300      	movs	r3, #0
 8001814:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001816:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800181a:	2200      	movs	r2, #0
 800181c:	4619      	mov	r1, r3
 800181e:	4814      	ldr	r0, [pc, #80]	@ (8001870 <MX_TIM1_Init+0x138>)
 8001820:	f002 fa74 	bl	8003d0c <HAL_TIM_PWM_ConfigChannel>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800182a:	f000 f88f 	bl	800194c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800182e:	2300      	movs	r3, #0
 8001830:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001832:	2300      	movs	r3, #0
 8001834:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001836:	2300      	movs	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800183a:	2300      	movs	r3, #0
 800183c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800183e:	2300      	movs	r3, #0
 8001840:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001842:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001846:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001848:	2300      	movs	r3, #0
 800184a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800184c:	1d3b      	adds	r3, r7, #4
 800184e:	4619      	mov	r1, r3
 8001850:	4807      	ldr	r0, [pc, #28]	@ (8001870 <MX_TIM1_Init+0x138>)
 8001852:	f002 ffd5 	bl	8004800 <HAL_TIMEx_ConfigBreakDeadTime>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800185c:	f000 f876 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001860:	4803      	ldr	r0, [pc, #12]	@ (8001870 <MX_TIM1_Init+0x138>)
 8001862:	f000 f931 	bl	8001ac8 <HAL_TIM_MspPostInit>

}
 8001866:	bf00      	nop
 8001868:	3758      	adds	r7, #88	@ 0x58
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	200000b8 	.word	0x200000b8
 8001874:	40012c00 	.word	0x40012c00

08001878 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800187e:	4b0c      	ldr	r3, [pc, #48]	@ (80018b0 <MX_DMA_Init+0x38>)
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	4a0b      	ldr	r2, [pc, #44]	@ (80018b0 <MX_DMA_Init+0x38>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	6153      	str	r3, [r2, #20]
 800188a:	4b09      	ldr	r3, [pc, #36]	@ (80018b0 <MX_DMA_Init+0x38>)
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	607b      	str	r3, [r7, #4]
 8001894:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001896:	2200      	movs	r2, #0
 8001898:	2100      	movs	r1, #0
 800189a:	200c      	movs	r0, #12
 800189c:	f000 fe59 	bl	8002552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80018a0:	200c      	movs	r0, #12
 80018a2:	f000 fe72 	bl	800258a <HAL_NVIC_EnableIRQ>

}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40021000 	.word	0x40021000

080018b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b088      	sub	sp, #32
 80018b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ba:	f107 0310 	add.w	r3, r7, #16
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	609a      	str	r2, [r3, #8]
 80018c6:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001944 <MX_GPIO_Init+0x90>)
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	4a1d      	ldr	r2, [pc, #116]	@ (8001944 <MX_GPIO_Init+0x90>)
 80018ce:	f043 0310 	orr.w	r3, r3, #16
 80018d2:	6193      	str	r3, [r2, #24]
 80018d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001944 <MX_GPIO_Init+0x90>)
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	f003 0310 	and.w	r3, r3, #16
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018e0:	4b18      	ldr	r3, [pc, #96]	@ (8001944 <MX_GPIO_Init+0x90>)
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	4a17      	ldr	r2, [pc, #92]	@ (8001944 <MX_GPIO_Init+0x90>)
 80018e6:	f043 0320 	orr.w	r3, r3, #32
 80018ea:	6193      	str	r3, [r2, #24]
 80018ec:	4b15      	ldr	r3, [pc, #84]	@ (8001944 <MX_GPIO_Init+0x90>)
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	f003 0320 	and.w	r3, r3, #32
 80018f4:	60bb      	str	r3, [r7, #8]
 80018f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f8:	4b12      	ldr	r3, [pc, #72]	@ (8001944 <MX_GPIO_Init+0x90>)
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	4a11      	ldr	r2, [pc, #68]	@ (8001944 <MX_GPIO_Init+0x90>)
 80018fe:	f043 0304 	orr.w	r3, r3, #4
 8001902:	6193      	str	r3, [r2, #24]
 8001904:	4b0f      	ldr	r3, [pc, #60]	@ (8001944 <MX_GPIO_Init+0x90>)
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	f003 0304 	and.w	r3, r3, #4
 800190c:	607b      	str	r3, [r7, #4]
 800190e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001910:	2200      	movs	r2, #0
 8001912:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001916:	480c      	ldr	r0, [pc, #48]	@ (8001948 <MX_GPIO_Init+0x94>)
 8001918:	f001 fa3c 	bl	8002d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800191c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001920:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001922:	2301      	movs	r3, #1
 8001924:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192a:	2302      	movs	r3, #2
 800192c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800192e:	f107 0310 	add.w	r3, r7, #16
 8001932:	4619      	mov	r1, r3
 8001934:	4804      	ldr	r0, [pc, #16]	@ (8001948 <MX_GPIO_Init+0x94>)
 8001936:	f001 f8a9 	bl	8002a8c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800193a:	bf00      	nop
 800193c:	3720      	adds	r7, #32
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40021000 	.word	0x40021000
 8001948:	40011000 	.word	0x40011000

0800194c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001950:	b672      	cpsid	i
}
 8001952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001954:	bf00      	nop
 8001956:	e7fd      	b.n	8001954 <Error_Handler+0x8>

08001958 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800195e:	4b15      	ldr	r3, [pc, #84]	@ (80019b4 <HAL_MspInit+0x5c>)
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	4a14      	ldr	r2, [pc, #80]	@ (80019b4 <HAL_MspInit+0x5c>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	6193      	str	r3, [r2, #24]
 800196a:	4b12      	ldr	r3, [pc, #72]	@ (80019b4 <HAL_MspInit+0x5c>)
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	60bb      	str	r3, [r7, #8]
 8001974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001976:	4b0f      	ldr	r3, [pc, #60]	@ (80019b4 <HAL_MspInit+0x5c>)
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	4a0e      	ldr	r2, [pc, #56]	@ (80019b4 <HAL_MspInit+0x5c>)
 800197c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001980:	61d3      	str	r3, [r2, #28]
 8001982:	4b0c      	ldr	r3, [pc, #48]	@ (80019b4 <HAL_MspInit+0x5c>)
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800198a:	607b      	str	r3, [r7, #4]
 800198c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800198e:	4b0a      	ldr	r3, [pc, #40]	@ (80019b8 <HAL_MspInit+0x60>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	4a04      	ldr	r2, [pc, #16]	@ (80019b8 <HAL_MspInit+0x60>)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019aa:	bf00      	nop
 80019ac:	3714      	adds	r7, #20
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr
 80019b4:	40021000 	.word	0x40021000
 80019b8:	40010000 	.word	0x40010000

080019bc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b088      	sub	sp, #32
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c4:	f107 0310 	add.w	r3, r7, #16
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a14      	ldr	r2, [pc, #80]	@ (8001a28 <HAL_ADC_MspInit+0x6c>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d121      	bne.n	8001a20 <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019dc:	4b13      	ldr	r3, [pc, #76]	@ (8001a2c <HAL_ADC_MspInit+0x70>)
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	4a12      	ldr	r2, [pc, #72]	@ (8001a2c <HAL_ADC_MspInit+0x70>)
 80019e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019e6:	6193      	str	r3, [r2, #24]
 80019e8:	4b10      	ldr	r3, [pc, #64]	@ (8001a2c <HAL_ADC_MspInit+0x70>)
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f4:	4b0d      	ldr	r3, [pc, #52]	@ (8001a2c <HAL_ADC_MspInit+0x70>)
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	4a0c      	ldr	r2, [pc, #48]	@ (8001a2c <HAL_ADC_MspInit+0x70>)
 80019fa:	f043 0304 	orr.w	r3, r3, #4
 80019fe:	6193      	str	r3, [r2, #24]
 8001a00:	4b0a      	ldr	r3, [pc, #40]	@ (8001a2c <HAL_ADC_MspInit+0x70>)
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a10:	2303      	movs	r3, #3
 8001a12:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a14:	f107 0310 	add.w	r3, r7, #16
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4805      	ldr	r0, [pc, #20]	@ (8001a30 <HAL_ADC_MspInit+0x74>)
 8001a1c:	f001 f836 	bl	8002a8c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001a20:	bf00      	nop
 8001a22:	3720      	adds	r7, #32
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40012400 	.word	0x40012400
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	40010800 	.word	0x40010800

08001a34 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a1d      	ldr	r2, [pc, #116]	@ (8001ab8 <HAL_TIM_Base_MspInit+0x84>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d133      	bne.n	8001aae <HAL_TIM_Base_MspInit+0x7a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a46:	4b1d      	ldr	r3, [pc, #116]	@ (8001abc <HAL_TIM_Base_MspInit+0x88>)
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	4a1c      	ldr	r2, [pc, #112]	@ (8001abc <HAL_TIM_Base_MspInit+0x88>)
 8001a4c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a50:	6193      	str	r3, [r2, #24]
 8001a52:	4b1a      	ldr	r3, [pc, #104]	@ (8001abc <HAL_TIM_Base_MspInit+0x88>)
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8001a5e:	4b18      	ldr	r3, [pc, #96]	@ (8001ac0 <HAL_TIM_Base_MspInit+0x8c>)
 8001a60:	4a18      	ldr	r2, [pc, #96]	@ (8001ac4 <HAL_TIM_Base_MspInit+0x90>)
 8001a62:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a64:	4b16      	ldr	r3, [pc, #88]	@ (8001ac0 <HAL_TIM_Base_MspInit+0x8c>)
 8001a66:	2210      	movs	r2, #16
 8001a68:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a6a:	4b15      	ldr	r3, [pc, #84]	@ (8001ac0 <HAL_TIM_Base_MspInit+0x8c>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001a70:	4b13      	ldr	r3, [pc, #76]	@ (8001ac0 <HAL_TIM_Base_MspInit+0x8c>)
 8001a72:	2280      	movs	r2, #128	@ 0x80
 8001a74:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a76:	4b12      	ldr	r3, [pc, #72]	@ (8001ac0 <HAL_TIM_Base_MspInit+0x8c>)
 8001a78:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a7c:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a7e:	4b10      	ldr	r3, [pc, #64]	@ (8001ac0 <HAL_TIM_Base_MspInit+0x8c>)
 8001a80:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a84:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001a86:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac0 <HAL_TIM_Base_MspInit+0x8c>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac0 <HAL_TIM_Base_MspInit+0x8c>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001a92:	480b      	ldr	r0, [pc, #44]	@ (8001ac0 <HAL_TIM_Base_MspInit+0x8c>)
 8001a94:	f000 fd94 	bl	80025c0 <HAL_DMA_Init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8001a9e:	f7ff ff55 	bl	800194c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a06      	ldr	r2, [pc, #24]	@ (8001ac0 <HAL_TIM_Base_MspInit+0x8c>)
 8001aa6:	625a      	str	r2, [r3, #36]	@ 0x24
 8001aa8:	4a05      	ldr	r2, [pc, #20]	@ (8001ac0 <HAL_TIM_Base_MspInit+0x8c>)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001aae:	bf00      	nop
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40012c00 	.word	0x40012c00
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	20000100 	.word	0x20000100
 8001ac4:	4002001c 	.word	0x4002001c

08001ac8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b088      	sub	sp, #32
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad0:	f107 0310 	add.w	r3, r7, #16
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a10      	ldr	r2, [pc, #64]	@ (8001b24 <HAL_TIM_MspPostInit+0x5c>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d118      	bne.n	8001b1a <HAL_TIM_MspPostInit+0x52>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8001b28 <HAL_TIM_MspPostInit+0x60>)
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	4a0e      	ldr	r2, [pc, #56]	@ (8001b28 <HAL_TIM_MspPostInit+0x60>)
 8001aee:	f043 0304 	orr.w	r3, r3, #4
 8001af2:	6193      	str	r3, [r2, #24]
 8001af4:	4b0c      	ldr	r3, [pc, #48]	@ (8001b28 <HAL_TIM_MspPostInit+0x60>)
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b06:	2302      	movs	r3, #2
 8001b08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0e:	f107 0310 	add.w	r3, r7, #16
 8001b12:	4619      	mov	r1, r3
 8001b14:	4805      	ldr	r0, [pc, #20]	@ (8001b2c <HAL_TIM_MspPostInit+0x64>)
 8001b16:	f000 ffb9 	bl	8002a8c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b1a:	bf00      	nop
 8001b1c:	3720      	adds	r7, #32
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40012c00 	.word	0x40012c00
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	40010800 	.word	0x40010800

08001b30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b34:	bf00      	nop
 8001b36:	e7fd      	b.n	8001b34 <NMI_Handler+0x4>

08001b38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b3c:	bf00      	nop
 8001b3e:	e7fd      	b.n	8001b3c <HardFault_Handler+0x4>

08001b40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b44:	bf00      	nop
 8001b46:	e7fd      	b.n	8001b44 <MemManage_Handler+0x4>

08001b48 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b4c:	bf00      	nop
 8001b4e:	e7fd      	b.n	8001b4c <BusFault_Handler+0x4>

08001b50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b54:	bf00      	nop
 8001b56:	e7fd      	b.n	8001b54 <UsageFault_Handler+0x4>

08001b58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr

08001b64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bc80      	pop	{r7}
 8001b6e:	4770      	bx	lr

08001b70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr

08001b7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b80:	f000 f87e 	bl	8001c80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b84:	bf00      	nop
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001b8c:	4802      	ldr	r0, [pc, #8]	@ (8001b98 <DMA1_Channel2_IRQHandler+0x10>)
 8001b8e:	f000 fe49 	bl	8002824 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20000100 	.word	0x20000100

08001b9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr

08001ba8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ba8:	f7ff fff8 	bl	8001b9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bac:	480b      	ldr	r0, [pc, #44]	@ (8001bdc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001bae:	490c      	ldr	r1, [pc, #48]	@ (8001be0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001bb0:	4a0c      	ldr	r2, [pc, #48]	@ (8001be4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001bb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bb4:	e002      	b.n	8001bbc <LoopCopyDataInit>

08001bb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bba:	3304      	adds	r3, #4

08001bbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bc0:	d3f9      	bcc.n	8001bb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bc2:	4a09      	ldr	r2, [pc, #36]	@ (8001be8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001bc4:	4c09      	ldr	r4, [pc, #36]	@ (8001bec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc8:	e001      	b.n	8001bce <LoopFillZerobss>

08001bca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bcc:	3204      	adds	r2, #4

08001bce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bd0:	d3fb      	bcc.n	8001bca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bd2:	f002 fe6f 	bl	80048b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bd6:	f7ff fc33 	bl	8001440 <main>
  bx lr
 8001bda:	4770      	bx	lr
  ldr r0, =_sdata
 8001bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001be0:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 8001be4:	08004aa4 	.word	0x08004aa4
  ldr r2, =_sbss
 8001be8:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 8001bec:	20000ee0 	.word	0x20000ee0

08001bf0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bf0:	e7fe      	b.n	8001bf0 <ADC1_2_IRQHandler>
	...

08001bf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bf8:	4b08      	ldr	r3, [pc, #32]	@ (8001c1c <HAL_Init+0x28>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a07      	ldr	r2, [pc, #28]	@ (8001c1c <HAL_Init+0x28>)
 8001bfe:	f043 0310 	orr.w	r3, r3, #16
 8001c02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c04:	2003      	movs	r0, #3
 8001c06:	f000 fc99 	bl	800253c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c0a:	200f      	movs	r0, #15
 8001c0c:	f000 f808 	bl	8001c20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c10:	f7ff fea2 	bl	8001958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40022000 	.word	0x40022000

08001c20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c28:	4b12      	ldr	r3, [pc, #72]	@ (8001c74 <HAL_InitTick+0x54>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	4b12      	ldr	r3, [pc, #72]	@ (8001c78 <HAL_InitTick+0x58>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	4619      	mov	r1, r3
 8001c32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f000 fcb1 	bl	80025a6 <HAL_SYSTICK_Config>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e00e      	b.n	8001c6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b0f      	cmp	r3, #15
 8001c52:	d80a      	bhi.n	8001c6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c54:	2200      	movs	r2, #0
 8001c56:	6879      	ldr	r1, [r7, #4]
 8001c58:	f04f 30ff 	mov.w	r0, #4294967295
 8001c5c:	f000 fc79 	bl	8002552 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c60:	4a06      	ldr	r2, [pc, #24]	@ (8001c7c <HAL_InitTick+0x5c>)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
 8001c68:	e000      	b.n	8001c6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20000038 	.word	0x20000038
 8001c78:	20000040 	.word	0x20000040
 8001c7c:	2000003c 	.word	0x2000003c

08001c80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c84:	4b05      	ldr	r3, [pc, #20]	@ (8001c9c <HAL_IncTick+0x1c>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4b05      	ldr	r3, [pc, #20]	@ (8001ca0 <HAL_IncTick+0x20>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4413      	add	r3, r2
 8001c90:	4a03      	ldr	r2, [pc, #12]	@ (8001ca0 <HAL_IncTick+0x20>)
 8001c92:	6013      	str	r3, [r2, #0]
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr
 8001c9c:	20000040 	.word	0x20000040
 8001ca0:	20000edc 	.word	0x20000edc

08001ca4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ca8:	4b02      	ldr	r3, [pc, #8]	@ (8001cb4 <HAL_GetTick+0x10>)
 8001caa:	681b      	ldr	r3, [r3, #0]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr
 8001cb4:	20000edc 	.word	0x20000edc

08001cb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cc0:	f7ff fff0 	bl	8001ca4 <HAL_GetTick>
 8001cc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd0:	d005      	beq.n	8001cde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8001cfc <HAL_Delay+0x44>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	4413      	add	r3, r2
 8001cdc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cde:	bf00      	nop
 8001ce0:	f7ff ffe0 	bl	8001ca4 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d8f7      	bhi.n	8001ce0 <HAL_Delay+0x28>
  {
  }
}
 8001cf0:	bf00      	nop
 8001cf2:	bf00      	nop
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000040 	.word	0x20000040

08001d00 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001d10:	2300      	movs	r3, #0
 8001d12:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001d14:	2300      	movs	r3, #0
 8001d16:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e0be      	b.n	8001ea0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d109      	bne.n	8001d44 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7ff fe3c 	bl	80019bc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 faeb 	bl	8002320 <ADC_ConversionStop_Disable>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d52:	f003 0310 	and.w	r3, r3, #16
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f040 8099 	bne.w	8001e8e <HAL_ADC_Init+0x18e>
 8001d5c:	7dfb      	ldrb	r3, [r7, #23]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f040 8095 	bne.w	8001e8e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d68:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001d6c:	f023 0302 	bic.w	r3, r3, #2
 8001d70:	f043 0202 	orr.w	r2, r3, #2
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d80:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	7b1b      	ldrb	r3, [r3, #12]
 8001d86:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d88:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d8a:	68ba      	ldr	r2, [r7, #8]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d98:	d003      	beq.n	8001da2 <HAL_ADC_Init+0xa2>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d102      	bne.n	8001da8 <HAL_ADC_Init+0xa8>
 8001da2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001da6:	e000      	b.n	8001daa <HAL_ADC_Init+0xaa>
 8001da8:	2300      	movs	r3, #0
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	7d1b      	ldrb	r3, [r3, #20]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d119      	bne.n	8001dec <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	7b1b      	ldrb	r3, [r3, #12]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d109      	bne.n	8001dd4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	035a      	lsls	r2, r3, #13
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001dd0:	613b      	str	r3, [r7, #16]
 8001dd2:	e00b      	b.n	8001dec <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd8:	f043 0220 	orr.w	r2, r3, #32
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001de4:	f043 0201 	orr.w	r2, r3, #1
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689a      	ldr	r2, [r3, #8]
 8001e06:	4b28      	ldr	r3, [pc, #160]	@ (8001ea8 <HAL_ADC_Init+0x1a8>)
 8001e08:	4013      	ands	r3, r2
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	6812      	ldr	r2, [r2, #0]
 8001e0e:	68b9      	ldr	r1, [r7, #8]
 8001e10:	430b      	orrs	r3, r1
 8001e12:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e1c:	d003      	beq.n	8001e26 <HAL_ADC_Init+0x126>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d104      	bne.n	8001e30 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	051b      	lsls	r3, r3, #20
 8001e2e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e36:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	430a      	orrs	r2, r1
 8001e42:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	689a      	ldr	r2, [r3, #8]
 8001e4a:	4b18      	ldr	r3, [pc, #96]	@ (8001eac <HAL_ADC_Init+0x1ac>)
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	68ba      	ldr	r2, [r7, #8]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d10b      	bne.n	8001e6c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e5e:	f023 0303 	bic.w	r3, r3, #3
 8001e62:	f043 0201 	orr.w	r2, r3, #1
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e6a:	e018      	b.n	8001e9e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e70:	f023 0312 	bic.w	r3, r3, #18
 8001e74:	f043 0210 	orr.w	r2, r3, #16
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e80:	f043 0201 	orr.w	r2, r3, #1
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e8c:	e007      	b.n	8001e9e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e92:	f043 0210 	orr.w	r2, r3, #16
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3718      	adds	r7, #24
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	ffe1f7fd 	.word	0xffe1f7fd
 8001eac:	ff1f0efe 	.word	0xff1f0efe

08001eb0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d101      	bne.n	8001eca <HAL_ADC_Start+0x1a>
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	e098      	b.n	8001ffc <HAL_ADC_Start+0x14c>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f9ca 	bl	800226c <ADC_Enable>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f040 8087 	bne.w	8001ff2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ee8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001eec:	f023 0301 	bic.w	r3, r3, #1
 8001ef0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a41      	ldr	r2, [pc, #260]	@ (8002004 <HAL_ADC_Start+0x154>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d105      	bne.n	8001f0e <HAL_ADC_Start+0x5e>
 8001f02:	4b41      	ldr	r3, [pc, #260]	@ (8002008 <HAL_ADC_Start+0x158>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d115      	bne.n	8001f3a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f12:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d026      	beq.n	8001f76 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f2c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f30:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f38:	e01d      	b.n	8001f76 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f3e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a2f      	ldr	r2, [pc, #188]	@ (8002008 <HAL_ADC_Start+0x158>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d004      	beq.n	8001f5a <HAL_ADC_Start+0xaa>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a2b      	ldr	r2, [pc, #172]	@ (8002004 <HAL_ADC_Start+0x154>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d10d      	bne.n	8001f76 <HAL_ADC_Start+0xc6>
 8001f5a:	4b2b      	ldr	r3, [pc, #172]	@ (8002008 <HAL_ADC_Start+0x158>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d007      	beq.n	8001f76 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f6a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f6e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d006      	beq.n	8001f90 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f86:	f023 0206 	bic.w	r2, r3, #6
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001f8e:	e002      	b.n	8001f96 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f06f 0202 	mvn.w	r2, #2
 8001fa6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001fb2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001fb6:	d113      	bne.n	8001fe0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001fbc:	4a11      	ldr	r2, [pc, #68]	@ (8002004 <HAL_ADC_Start+0x154>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d105      	bne.n	8001fce <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001fc2:	4b11      	ldr	r3, [pc, #68]	@ (8002008 <HAL_ADC_Start+0x158>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d108      	bne.n	8001fe0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001fdc:	609a      	str	r2, [r3, #8]
 8001fde:	e00c      	b.n	8001ffa <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689a      	ldr	r2, [r3, #8]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	e003      	b.n	8001ffa <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3710      	adds	r7, #16
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40012800 	.word	0x40012800
 8002008:	40012400 	.word	0x40012400

0800200c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002014:	2300      	movs	r3, #0
 8002016:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800201e:	2b01      	cmp	r3, #1
 8002020:	d101      	bne.n	8002026 <HAL_ADC_Stop+0x1a>
 8002022:	2302      	movs	r3, #2
 8002024:	e01a      	b.n	800205c <HAL_ADC_Stop+0x50>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f976 	bl	8002320 <ADC_ConversionStop_Disable>
 8002034:	4603      	mov	r3, r0
 8002036:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002038:	7bfb      	ldrb	r3, [r7, #15]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d109      	bne.n	8002052 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002042:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002046:	f023 0301 	bic.w	r3, r3, #1
 800204a:	f043 0201 	orr.w	r2, r3, #1
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800205a:	7bfb      	ldrb	r3, [r7, #15]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002072:	4618      	mov	r0, r3
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr

0800207c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002086:	2300      	movs	r3, #0
 8002088:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800208a:	2300      	movs	r3, #0
 800208c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002094:	2b01      	cmp	r3, #1
 8002096:	d101      	bne.n	800209c <HAL_ADC_ConfigChannel+0x20>
 8002098:	2302      	movs	r3, #2
 800209a:	e0dc      	b.n	8002256 <HAL_ADC_ConfigChannel+0x1da>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	2b06      	cmp	r3, #6
 80020aa:	d81c      	bhi.n	80020e6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685a      	ldr	r2, [r3, #4]
 80020b6:	4613      	mov	r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	4413      	add	r3, r2
 80020bc:	3b05      	subs	r3, #5
 80020be:	221f      	movs	r2, #31
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	4019      	ands	r1, r3
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	6818      	ldr	r0, [r3, #0]
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	4613      	mov	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	4413      	add	r3, r2
 80020d6:	3b05      	subs	r3, #5
 80020d8:	fa00 f203 	lsl.w	r2, r0, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	430a      	orrs	r2, r1
 80020e2:	635a      	str	r2, [r3, #52]	@ 0x34
 80020e4:	e03c      	b.n	8002160 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b0c      	cmp	r3, #12
 80020ec:	d81c      	bhi.n	8002128 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	4613      	mov	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	3b23      	subs	r3, #35	@ 0x23
 8002100:	221f      	movs	r2, #31
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	43db      	mvns	r3, r3
 8002108:	4019      	ands	r1, r3
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	6818      	ldr	r0, [r3, #0]
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	4613      	mov	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4413      	add	r3, r2
 8002118:	3b23      	subs	r3, #35	@ 0x23
 800211a:	fa00 f203 	lsl.w	r2, r0, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	631a      	str	r2, [r3, #48]	@ 0x30
 8002126:	e01b      	b.n	8002160 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	4613      	mov	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
 8002138:	3b41      	subs	r3, #65	@ 0x41
 800213a:	221f      	movs	r2, #31
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	4019      	ands	r1, r3
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	6818      	ldr	r0, [r3, #0]
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	4613      	mov	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	3b41      	subs	r3, #65	@ 0x41
 8002154:	fa00 f203 	lsl.w	r2, r0, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	430a      	orrs	r2, r1
 800215e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2b09      	cmp	r3, #9
 8002166:	d91c      	bls.n	80021a2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68d9      	ldr	r1, [r3, #12]
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	4613      	mov	r3, r2
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	4413      	add	r3, r2
 8002178:	3b1e      	subs	r3, #30
 800217a:	2207      	movs	r2, #7
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	43db      	mvns	r3, r3
 8002182:	4019      	ands	r1, r3
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	6898      	ldr	r0, [r3, #8]
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	4613      	mov	r3, r2
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	4413      	add	r3, r2
 8002192:	3b1e      	subs	r3, #30
 8002194:	fa00 f203 	lsl.w	r2, r0, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	430a      	orrs	r2, r1
 800219e:	60da      	str	r2, [r3, #12]
 80021a0:	e019      	b.n	80021d6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	6919      	ldr	r1, [r3, #16]
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	4613      	mov	r3, r2
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	4413      	add	r3, r2
 80021b2:	2207      	movs	r2, #7
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	4019      	ands	r1, r3
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	6898      	ldr	r0, [r3, #8]
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	4613      	mov	r3, r2
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	4413      	add	r3, r2
 80021ca:	fa00 f203 	lsl.w	r2, r0, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	430a      	orrs	r2, r1
 80021d4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2b10      	cmp	r3, #16
 80021dc:	d003      	beq.n	80021e6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80021e2:	2b11      	cmp	r3, #17
 80021e4:	d132      	bne.n	800224c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a1d      	ldr	r2, [pc, #116]	@ (8002260 <HAL_ADC_ConfigChannel+0x1e4>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d125      	bne.n	800223c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d126      	bne.n	800224c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800220c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2b10      	cmp	r3, #16
 8002214:	d11a      	bne.n	800224c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002216:	4b13      	ldr	r3, [pc, #76]	@ (8002264 <HAL_ADC_ConfigChannel+0x1e8>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a13      	ldr	r2, [pc, #76]	@ (8002268 <HAL_ADC_ConfigChannel+0x1ec>)
 800221c:	fba2 2303 	umull	r2, r3, r2, r3
 8002220:	0c9a      	lsrs	r2, r3, #18
 8002222:	4613      	mov	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800222c:	e002      	b.n	8002234 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	3b01      	subs	r3, #1
 8002232:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1f9      	bne.n	800222e <HAL_ADC_ConfigChannel+0x1b2>
 800223a:	e007      	b.n	800224c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002240:	f043 0220 	orr.w	r2, r3, #32
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002254:	7bfb      	ldrb	r3, [r7, #15]
}
 8002256:	4618      	mov	r0, r3
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	bc80      	pop	{r7}
 800225e:	4770      	bx	lr
 8002260:	40012400 	.word	0x40012400
 8002264:	20000038 	.word	0x20000038
 8002268:	431bde83 	.word	0x431bde83

0800226c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002274:	2300      	movs	r3, #0
 8002276:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002278:	2300      	movs	r3, #0
 800227a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b01      	cmp	r3, #1
 8002288:	d040      	beq.n	800230c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f042 0201 	orr.w	r2, r2, #1
 8002298:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800229a:	4b1f      	ldr	r3, [pc, #124]	@ (8002318 <ADC_Enable+0xac>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a1f      	ldr	r2, [pc, #124]	@ (800231c <ADC_Enable+0xb0>)
 80022a0:	fba2 2303 	umull	r2, r3, r2, r3
 80022a4:	0c9b      	lsrs	r3, r3, #18
 80022a6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80022a8:	e002      	b.n	80022b0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	3b01      	subs	r3, #1
 80022ae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f9      	bne.n	80022aa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022b6:	f7ff fcf5 	bl	8001ca4 <HAL_GetTick>
 80022ba:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80022bc:	e01f      	b.n	80022fe <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80022be:	f7ff fcf1 	bl	8001ca4 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d918      	bls.n	80022fe <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d011      	beq.n	80022fe <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022de:	f043 0210 	orr.w	r2, r3, #16
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ea:	f043 0201 	orr.w	r2, r3, #1
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e007      	b.n	800230e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	2b01      	cmp	r3, #1
 800230a:	d1d8      	bne.n	80022be <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20000038 	.word	0x20000038
 800231c:	431bde83 	.word	0x431bde83

08002320 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002328:	2300      	movs	r3, #0
 800232a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b01      	cmp	r3, #1
 8002338:	d12e      	bne.n	8002398 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 0201 	bic.w	r2, r2, #1
 8002348:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800234a:	f7ff fcab 	bl	8001ca4 <HAL_GetTick>
 800234e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002350:	e01b      	b.n	800238a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002352:	f7ff fca7 	bl	8001ca4 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d914      	bls.n	800238a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b01      	cmp	r3, #1
 800236c:	d10d      	bne.n	800238a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002372:	f043 0210 	orr.w	r2, r3, #16
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800237e:	f043 0201 	orr.w	r2, r3, #1
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e007      	b.n	800239a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b01      	cmp	r3, #1
 8002396:	d0dc      	beq.n	8002352 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
	...

080023a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023b4:	4b0c      	ldr	r3, [pc, #48]	@ (80023e8 <__NVIC_SetPriorityGrouping+0x44>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023c0:	4013      	ands	r3, r2
 80023c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023d6:	4a04      	ldr	r2, [pc, #16]	@ (80023e8 <__NVIC_SetPriorityGrouping+0x44>)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	60d3      	str	r3, [r2, #12]
}
 80023dc:	bf00      	nop
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bc80      	pop	{r7}
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023f0:	4b04      	ldr	r3, [pc, #16]	@ (8002404 <__NVIC_GetPriorityGrouping+0x18>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	0a1b      	lsrs	r3, r3, #8
 80023f6:	f003 0307 	and.w	r3, r3, #7
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bc80      	pop	{r7}
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	e000ed00 	.word	0xe000ed00

08002408 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	4603      	mov	r3, r0
 8002410:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002416:	2b00      	cmp	r3, #0
 8002418:	db0b      	blt.n	8002432 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800241a:	79fb      	ldrb	r3, [r7, #7]
 800241c:	f003 021f 	and.w	r2, r3, #31
 8002420:	4906      	ldr	r1, [pc, #24]	@ (800243c <__NVIC_EnableIRQ+0x34>)
 8002422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002426:	095b      	lsrs	r3, r3, #5
 8002428:	2001      	movs	r0, #1
 800242a:	fa00 f202 	lsl.w	r2, r0, r2
 800242e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002432:	bf00      	nop
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	bc80      	pop	{r7}
 800243a:	4770      	bx	lr
 800243c:	e000e100 	.word	0xe000e100

08002440 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	6039      	str	r1, [r7, #0]
 800244a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800244c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002450:	2b00      	cmp	r3, #0
 8002452:	db0a      	blt.n	800246a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	b2da      	uxtb	r2, r3
 8002458:	490c      	ldr	r1, [pc, #48]	@ (800248c <__NVIC_SetPriority+0x4c>)
 800245a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245e:	0112      	lsls	r2, r2, #4
 8002460:	b2d2      	uxtb	r2, r2
 8002462:	440b      	add	r3, r1
 8002464:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002468:	e00a      	b.n	8002480 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	b2da      	uxtb	r2, r3
 800246e:	4908      	ldr	r1, [pc, #32]	@ (8002490 <__NVIC_SetPriority+0x50>)
 8002470:	79fb      	ldrb	r3, [r7, #7]
 8002472:	f003 030f 	and.w	r3, r3, #15
 8002476:	3b04      	subs	r3, #4
 8002478:	0112      	lsls	r2, r2, #4
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	440b      	add	r3, r1
 800247e:	761a      	strb	r2, [r3, #24]
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	bc80      	pop	{r7}
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	e000e100 	.word	0xe000e100
 8002490:	e000ed00 	.word	0xe000ed00

08002494 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002494:	b480      	push	{r7}
 8002496:	b089      	sub	sp, #36	@ 0x24
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	f1c3 0307 	rsb	r3, r3, #7
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	bf28      	it	cs
 80024b2:	2304      	movcs	r3, #4
 80024b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	3304      	adds	r3, #4
 80024ba:	2b06      	cmp	r3, #6
 80024bc:	d902      	bls.n	80024c4 <NVIC_EncodePriority+0x30>
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	3b03      	subs	r3, #3
 80024c2:	e000      	b.n	80024c6 <NVIC_EncodePriority+0x32>
 80024c4:	2300      	movs	r3, #0
 80024c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c8:	f04f 32ff 	mov.w	r2, #4294967295
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	43da      	mvns	r2, r3
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	401a      	ands	r2, r3
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024dc:	f04f 31ff 	mov.w	r1, #4294967295
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	fa01 f303 	lsl.w	r3, r1, r3
 80024e6:	43d9      	mvns	r1, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024ec:	4313      	orrs	r3, r2
         );
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3724      	adds	r7, #36	@ 0x24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc80      	pop	{r7}
 80024f6:	4770      	bx	lr

080024f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3b01      	subs	r3, #1
 8002504:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002508:	d301      	bcc.n	800250e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800250a:	2301      	movs	r3, #1
 800250c:	e00f      	b.n	800252e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800250e:	4a0a      	ldr	r2, [pc, #40]	@ (8002538 <SysTick_Config+0x40>)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3b01      	subs	r3, #1
 8002514:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002516:	210f      	movs	r1, #15
 8002518:	f04f 30ff 	mov.w	r0, #4294967295
 800251c:	f7ff ff90 	bl	8002440 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002520:	4b05      	ldr	r3, [pc, #20]	@ (8002538 <SysTick_Config+0x40>)
 8002522:	2200      	movs	r2, #0
 8002524:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002526:	4b04      	ldr	r3, [pc, #16]	@ (8002538 <SysTick_Config+0x40>)
 8002528:	2207      	movs	r2, #7
 800252a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	e000e010 	.word	0xe000e010

0800253c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7ff ff2d 	bl	80023a4 <__NVIC_SetPriorityGrouping>
}
 800254a:	bf00      	nop
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002552:	b580      	push	{r7, lr}
 8002554:	b086      	sub	sp, #24
 8002556:	af00      	add	r7, sp, #0
 8002558:	4603      	mov	r3, r0
 800255a:	60b9      	str	r1, [r7, #8]
 800255c:	607a      	str	r2, [r7, #4]
 800255e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002560:	2300      	movs	r3, #0
 8002562:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002564:	f7ff ff42 	bl	80023ec <__NVIC_GetPriorityGrouping>
 8002568:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	68b9      	ldr	r1, [r7, #8]
 800256e:	6978      	ldr	r0, [r7, #20]
 8002570:	f7ff ff90 	bl	8002494 <NVIC_EncodePriority>
 8002574:	4602      	mov	r2, r0
 8002576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800257a:	4611      	mov	r1, r2
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff ff5f 	bl	8002440 <__NVIC_SetPriority>
}
 8002582:	bf00      	nop
 8002584:	3718      	adds	r7, #24
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b082      	sub	sp, #8
 800258e:	af00      	add	r7, sp, #0
 8002590:	4603      	mov	r3, r0
 8002592:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff ff35 	bl	8002408 <__NVIC_EnableIRQ>
}
 800259e:	bf00      	nop
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b082      	sub	sp, #8
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7ff ffa2 	bl	80024f8 <SysTick_Config>
 80025b4:	4603      	mov	r3, r0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
	...

080025c0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e043      	b.n	800265e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	461a      	mov	r2, r3
 80025dc:	4b22      	ldr	r3, [pc, #136]	@ (8002668 <HAL_DMA_Init+0xa8>)
 80025de:	4413      	add	r3, r2
 80025e0:	4a22      	ldr	r2, [pc, #136]	@ (800266c <HAL_DMA_Init+0xac>)
 80025e2:	fba2 2303 	umull	r2, r3, r2, r3
 80025e6:	091b      	lsrs	r3, r3, #4
 80025e8:	009a      	lsls	r2, r3, #2
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a1f      	ldr	r2, [pc, #124]	@ (8002670 <HAL_DMA_Init+0xb0>)
 80025f2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2202      	movs	r2, #2
 80025f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800260a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800260e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002618:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002624:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002630:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	4313      	orrs	r3, r2
 800263c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3714      	adds	r7, #20
 8002662:	46bd      	mov	sp, r7
 8002664:	bc80      	pop	{r7}
 8002666:	4770      	bx	lr
 8002668:	bffdfff8 	.word	0xbffdfff8
 800266c:	cccccccd 	.word	0xcccccccd
 8002670:	40020000 	.word	0x40020000

08002674 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
 8002680:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002682:	2300      	movs	r3, #0
 8002684:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f893 3020 	ldrb.w	r3, [r3, #32]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d101      	bne.n	8002694 <HAL_DMA_Start_IT+0x20>
 8002690:	2302      	movs	r3, #2
 8002692:	e04b      	b.n	800272c <HAL_DMA_Start_IT+0xb8>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d13a      	bne.n	800271e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2202      	movs	r2, #2
 80026ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 0201 	bic.w	r2, r2, #1
 80026c4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	68b9      	ldr	r1, [r7, #8]
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f000 f9af 	bl	8002a30 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d008      	beq.n	80026ec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f042 020e 	orr.w	r2, r2, #14
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	e00f      	b.n	800270c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0204 	bic.w	r2, r2, #4
 80026fa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f042 020a 	orr.w	r2, r2, #10
 800270a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f042 0201 	orr.w	r2, r2, #1
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	e005      	b.n	800272a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002726:	2302      	movs	r3, #2
 8002728:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800272a:	7dfb      	ldrb	r3, [r7, #23]
}
 800272c:	4618      	mov	r0, r3
 800272e:	3718      	adds	r7, #24
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800273c:	2300      	movs	r3, #0
 800273e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002746:	b2db      	uxtb	r3, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d005      	beq.n	8002758 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2204      	movs	r2, #4
 8002750:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	73fb      	strb	r3, [r7, #15]
 8002756:	e051      	b.n	80027fc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 020e 	bic.w	r2, r2, #14
 8002766:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f022 0201 	bic.w	r2, r2, #1
 8002776:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a22      	ldr	r2, [pc, #136]	@ (8002808 <HAL_DMA_Abort_IT+0xd4>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d029      	beq.n	80027d6 <HAL_DMA_Abort_IT+0xa2>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a21      	ldr	r2, [pc, #132]	@ (800280c <HAL_DMA_Abort_IT+0xd8>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d022      	beq.n	80027d2 <HAL_DMA_Abort_IT+0x9e>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a1f      	ldr	r2, [pc, #124]	@ (8002810 <HAL_DMA_Abort_IT+0xdc>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d01a      	beq.n	80027cc <HAL_DMA_Abort_IT+0x98>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a1e      	ldr	r2, [pc, #120]	@ (8002814 <HAL_DMA_Abort_IT+0xe0>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d012      	beq.n	80027c6 <HAL_DMA_Abort_IT+0x92>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a1c      	ldr	r2, [pc, #112]	@ (8002818 <HAL_DMA_Abort_IT+0xe4>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d00a      	beq.n	80027c0 <HAL_DMA_Abort_IT+0x8c>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a1b      	ldr	r2, [pc, #108]	@ (800281c <HAL_DMA_Abort_IT+0xe8>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d102      	bne.n	80027ba <HAL_DMA_Abort_IT+0x86>
 80027b4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80027b8:	e00e      	b.n	80027d8 <HAL_DMA_Abort_IT+0xa4>
 80027ba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80027be:	e00b      	b.n	80027d8 <HAL_DMA_Abort_IT+0xa4>
 80027c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80027c4:	e008      	b.n	80027d8 <HAL_DMA_Abort_IT+0xa4>
 80027c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027ca:	e005      	b.n	80027d8 <HAL_DMA_Abort_IT+0xa4>
 80027cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027d0:	e002      	b.n	80027d8 <HAL_DMA_Abort_IT+0xa4>
 80027d2:	2310      	movs	r3, #16
 80027d4:	e000      	b.n	80027d8 <HAL_DMA_Abort_IT+0xa4>
 80027d6:	2301      	movs	r3, #1
 80027d8:	4a11      	ldr	r2, [pc, #68]	@ (8002820 <HAL_DMA_Abort_IT+0xec>)
 80027da:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d003      	beq.n	80027fc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	4798      	blx	r3
    } 
  }
  return status;
 80027fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40020008 	.word	0x40020008
 800280c:	4002001c 	.word	0x4002001c
 8002810:	40020030 	.word	0x40020030
 8002814:	40020044 	.word	0x40020044
 8002818:	40020058 	.word	0x40020058
 800281c:	4002006c 	.word	0x4002006c
 8002820:	40020000 	.word	0x40020000

08002824 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002840:	2204      	movs	r2, #4
 8002842:	409a      	lsls	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	4013      	ands	r3, r2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d04f      	beq.n	80028ec <HAL_DMA_IRQHandler+0xc8>
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	f003 0304 	and.w	r3, r3, #4
 8002852:	2b00      	cmp	r3, #0
 8002854:	d04a      	beq.n	80028ec <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0320 	and.w	r3, r3, #32
 8002860:	2b00      	cmp	r3, #0
 8002862:	d107      	bne.n	8002874 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 0204 	bic.w	r2, r2, #4
 8002872:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a66      	ldr	r2, [pc, #408]	@ (8002a14 <HAL_DMA_IRQHandler+0x1f0>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d029      	beq.n	80028d2 <HAL_DMA_IRQHandler+0xae>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a65      	ldr	r2, [pc, #404]	@ (8002a18 <HAL_DMA_IRQHandler+0x1f4>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d022      	beq.n	80028ce <HAL_DMA_IRQHandler+0xaa>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a63      	ldr	r2, [pc, #396]	@ (8002a1c <HAL_DMA_IRQHandler+0x1f8>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d01a      	beq.n	80028c8 <HAL_DMA_IRQHandler+0xa4>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a62      	ldr	r2, [pc, #392]	@ (8002a20 <HAL_DMA_IRQHandler+0x1fc>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d012      	beq.n	80028c2 <HAL_DMA_IRQHandler+0x9e>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a60      	ldr	r2, [pc, #384]	@ (8002a24 <HAL_DMA_IRQHandler+0x200>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d00a      	beq.n	80028bc <HAL_DMA_IRQHandler+0x98>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a5f      	ldr	r2, [pc, #380]	@ (8002a28 <HAL_DMA_IRQHandler+0x204>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d102      	bne.n	80028b6 <HAL_DMA_IRQHandler+0x92>
 80028b0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80028b4:	e00e      	b.n	80028d4 <HAL_DMA_IRQHandler+0xb0>
 80028b6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80028ba:	e00b      	b.n	80028d4 <HAL_DMA_IRQHandler+0xb0>
 80028bc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80028c0:	e008      	b.n	80028d4 <HAL_DMA_IRQHandler+0xb0>
 80028c2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80028c6:	e005      	b.n	80028d4 <HAL_DMA_IRQHandler+0xb0>
 80028c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80028cc:	e002      	b.n	80028d4 <HAL_DMA_IRQHandler+0xb0>
 80028ce:	2340      	movs	r3, #64	@ 0x40
 80028d0:	e000      	b.n	80028d4 <HAL_DMA_IRQHandler+0xb0>
 80028d2:	2304      	movs	r3, #4
 80028d4:	4a55      	ldr	r2, [pc, #340]	@ (8002a2c <HAL_DMA_IRQHandler+0x208>)
 80028d6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f000 8094 	beq.w	8002a0a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80028ea:	e08e      	b.n	8002a0a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f0:	2202      	movs	r2, #2
 80028f2:	409a      	lsls	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	4013      	ands	r3, r2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d056      	beq.n	80029aa <HAL_DMA_IRQHandler+0x186>
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d051      	beq.n	80029aa <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0320 	and.w	r3, r3, #32
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10b      	bne.n	800292c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f022 020a 	bic.w	r2, r2, #10
 8002922:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a38      	ldr	r2, [pc, #224]	@ (8002a14 <HAL_DMA_IRQHandler+0x1f0>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d029      	beq.n	800298a <HAL_DMA_IRQHandler+0x166>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a37      	ldr	r2, [pc, #220]	@ (8002a18 <HAL_DMA_IRQHandler+0x1f4>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d022      	beq.n	8002986 <HAL_DMA_IRQHandler+0x162>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a35      	ldr	r2, [pc, #212]	@ (8002a1c <HAL_DMA_IRQHandler+0x1f8>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d01a      	beq.n	8002980 <HAL_DMA_IRQHandler+0x15c>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a34      	ldr	r2, [pc, #208]	@ (8002a20 <HAL_DMA_IRQHandler+0x1fc>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d012      	beq.n	800297a <HAL_DMA_IRQHandler+0x156>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a32      	ldr	r2, [pc, #200]	@ (8002a24 <HAL_DMA_IRQHandler+0x200>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d00a      	beq.n	8002974 <HAL_DMA_IRQHandler+0x150>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a31      	ldr	r2, [pc, #196]	@ (8002a28 <HAL_DMA_IRQHandler+0x204>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d102      	bne.n	800296e <HAL_DMA_IRQHandler+0x14a>
 8002968:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800296c:	e00e      	b.n	800298c <HAL_DMA_IRQHandler+0x168>
 800296e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002972:	e00b      	b.n	800298c <HAL_DMA_IRQHandler+0x168>
 8002974:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002978:	e008      	b.n	800298c <HAL_DMA_IRQHandler+0x168>
 800297a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800297e:	e005      	b.n	800298c <HAL_DMA_IRQHandler+0x168>
 8002980:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002984:	e002      	b.n	800298c <HAL_DMA_IRQHandler+0x168>
 8002986:	2320      	movs	r3, #32
 8002988:	e000      	b.n	800298c <HAL_DMA_IRQHandler+0x168>
 800298a:	2302      	movs	r3, #2
 800298c:	4a27      	ldr	r2, [pc, #156]	@ (8002a2c <HAL_DMA_IRQHandler+0x208>)
 800298e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800299c:	2b00      	cmp	r3, #0
 800299e:	d034      	beq.n	8002a0a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80029a8:	e02f      	b.n	8002a0a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ae:	2208      	movs	r2, #8
 80029b0:	409a      	lsls	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	4013      	ands	r3, r2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d028      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x1e8>
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	f003 0308 	and.w	r3, r3, #8
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d023      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f022 020e 	bic.w	r2, r2, #14
 80029d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029dc:	2101      	movs	r1, #1
 80029de:	fa01 f202 	lsl.w	r2, r1, r2
 80029e2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d004      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	4798      	blx	r3
    }
  }
  return;
 8002a0a:	bf00      	nop
 8002a0c:	bf00      	nop
}
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40020008 	.word	0x40020008
 8002a18:	4002001c 	.word	0x4002001c
 8002a1c:	40020030 	.word	0x40020030
 8002a20:	40020044 	.word	0x40020044
 8002a24:	40020058 	.word	0x40020058
 8002a28:	4002006c 	.word	0x4002006c
 8002a2c:	40020000 	.word	0x40020000

08002a30 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
 8002a3c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a46:	2101      	movs	r1, #1
 8002a48:	fa01 f202 	lsl.w	r2, r1, r2
 8002a4c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b10      	cmp	r3, #16
 8002a5c:	d108      	bne.n	8002a70 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68ba      	ldr	r2, [r7, #8]
 8002a6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a6e:	e007      	b.n	8002a80 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68ba      	ldr	r2, [r7, #8]
 8002a76:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	60da      	str	r2, [r3, #12]
}
 8002a80:	bf00      	nop
 8002a82:	3714      	adds	r7, #20
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bc80      	pop	{r7}
 8002a88:	4770      	bx	lr
	...

08002a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b08b      	sub	sp, #44	@ 0x2c
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a96:	2300      	movs	r3, #0
 8002a98:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a9e:	e169      	b.n	8002d74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	69fa      	ldr	r2, [r7, #28]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	f040 8158 	bne.w	8002d6e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	4a9a      	ldr	r2, [pc, #616]	@ (8002d2c <HAL_GPIO_Init+0x2a0>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d05e      	beq.n	8002b86 <HAL_GPIO_Init+0xfa>
 8002ac8:	4a98      	ldr	r2, [pc, #608]	@ (8002d2c <HAL_GPIO_Init+0x2a0>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d875      	bhi.n	8002bba <HAL_GPIO_Init+0x12e>
 8002ace:	4a98      	ldr	r2, [pc, #608]	@ (8002d30 <HAL_GPIO_Init+0x2a4>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d058      	beq.n	8002b86 <HAL_GPIO_Init+0xfa>
 8002ad4:	4a96      	ldr	r2, [pc, #600]	@ (8002d30 <HAL_GPIO_Init+0x2a4>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d86f      	bhi.n	8002bba <HAL_GPIO_Init+0x12e>
 8002ada:	4a96      	ldr	r2, [pc, #600]	@ (8002d34 <HAL_GPIO_Init+0x2a8>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d052      	beq.n	8002b86 <HAL_GPIO_Init+0xfa>
 8002ae0:	4a94      	ldr	r2, [pc, #592]	@ (8002d34 <HAL_GPIO_Init+0x2a8>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d869      	bhi.n	8002bba <HAL_GPIO_Init+0x12e>
 8002ae6:	4a94      	ldr	r2, [pc, #592]	@ (8002d38 <HAL_GPIO_Init+0x2ac>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d04c      	beq.n	8002b86 <HAL_GPIO_Init+0xfa>
 8002aec:	4a92      	ldr	r2, [pc, #584]	@ (8002d38 <HAL_GPIO_Init+0x2ac>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d863      	bhi.n	8002bba <HAL_GPIO_Init+0x12e>
 8002af2:	4a92      	ldr	r2, [pc, #584]	@ (8002d3c <HAL_GPIO_Init+0x2b0>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d046      	beq.n	8002b86 <HAL_GPIO_Init+0xfa>
 8002af8:	4a90      	ldr	r2, [pc, #576]	@ (8002d3c <HAL_GPIO_Init+0x2b0>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d85d      	bhi.n	8002bba <HAL_GPIO_Init+0x12e>
 8002afe:	2b12      	cmp	r3, #18
 8002b00:	d82a      	bhi.n	8002b58 <HAL_GPIO_Init+0xcc>
 8002b02:	2b12      	cmp	r3, #18
 8002b04:	d859      	bhi.n	8002bba <HAL_GPIO_Init+0x12e>
 8002b06:	a201      	add	r2, pc, #4	@ (adr r2, 8002b0c <HAL_GPIO_Init+0x80>)
 8002b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b0c:	08002b87 	.word	0x08002b87
 8002b10:	08002b61 	.word	0x08002b61
 8002b14:	08002b73 	.word	0x08002b73
 8002b18:	08002bb5 	.word	0x08002bb5
 8002b1c:	08002bbb 	.word	0x08002bbb
 8002b20:	08002bbb 	.word	0x08002bbb
 8002b24:	08002bbb 	.word	0x08002bbb
 8002b28:	08002bbb 	.word	0x08002bbb
 8002b2c:	08002bbb 	.word	0x08002bbb
 8002b30:	08002bbb 	.word	0x08002bbb
 8002b34:	08002bbb 	.word	0x08002bbb
 8002b38:	08002bbb 	.word	0x08002bbb
 8002b3c:	08002bbb 	.word	0x08002bbb
 8002b40:	08002bbb 	.word	0x08002bbb
 8002b44:	08002bbb 	.word	0x08002bbb
 8002b48:	08002bbb 	.word	0x08002bbb
 8002b4c:	08002bbb 	.word	0x08002bbb
 8002b50:	08002b69 	.word	0x08002b69
 8002b54:	08002b7d 	.word	0x08002b7d
 8002b58:	4a79      	ldr	r2, [pc, #484]	@ (8002d40 <HAL_GPIO_Init+0x2b4>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d013      	beq.n	8002b86 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b5e:	e02c      	b.n	8002bba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	623b      	str	r3, [r7, #32]
          break;
 8002b66:	e029      	b.n	8002bbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	3304      	adds	r3, #4
 8002b6e:	623b      	str	r3, [r7, #32]
          break;
 8002b70:	e024      	b.n	8002bbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	3308      	adds	r3, #8
 8002b78:	623b      	str	r3, [r7, #32]
          break;
 8002b7a:	e01f      	b.n	8002bbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	330c      	adds	r3, #12
 8002b82:	623b      	str	r3, [r7, #32]
          break;
 8002b84:	e01a      	b.n	8002bbc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d102      	bne.n	8002b94 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b8e:	2304      	movs	r3, #4
 8002b90:	623b      	str	r3, [r7, #32]
          break;
 8002b92:	e013      	b.n	8002bbc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d105      	bne.n	8002ba8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b9c:	2308      	movs	r3, #8
 8002b9e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	69fa      	ldr	r2, [r7, #28]
 8002ba4:	611a      	str	r2, [r3, #16]
          break;
 8002ba6:	e009      	b.n	8002bbc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ba8:	2308      	movs	r3, #8
 8002baa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	69fa      	ldr	r2, [r7, #28]
 8002bb0:	615a      	str	r2, [r3, #20]
          break;
 8002bb2:	e003      	b.n	8002bbc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	623b      	str	r3, [r7, #32]
          break;
 8002bb8:	e000      	b.n	8002bbc <HAL_GPIO_Init+0x130>
          break;
 8002bba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	2bff      	cmp	r3, #255	@ 0xff
 8002bc0:	d801      	bhi.n	8002bc6 <HAL_GPIO_Init+0x13a>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	e001      	b.n	8002bca <HAL_GPIO_Init+0x13e>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	3304      	adds	r3, #4
 8002bca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	2bff      	cmp	r3, #255	@ 0xff
 8002bd0:	d802      	bhi.n	8002bd8 <HAL_GPIO_Init+0x14c>
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	e002      	b.n	8002bde <HAL_GPIO_Init+0x152>
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bda:	3b08      	subs	r3, #8
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	210f      	movs	r1, #15
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bec:	43db      	mvns	r3, r3
 8002bee:	401a      	ands	r2, r3
 8002bf0:	6a39      	ldr	r1, [r7, #32]
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf8:	431a      	orrs	r2, r3
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f000 80b1 	beq.w	8002d6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c0c:	4b4d      	ldr	r3, [pc, #308]	@ (8002d44 <HAL_GPIO_Init+0x2b8>)
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	4a4c      	ldr	r2, [pc, #304]	@ (8002d44 <HAL_GPIO_Init+0x2b8>)
 8002c12:	f043 0301 	orr.w	r3, r3, #1
 8002c16:	6193      	str	r3, [r2, #24]
 8002c18:	4b4a      	ldr	r3, [pc, #296]	@ (8002d44 <HAL_GPIO_Init+0x2b8>)
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	60bb      	str	r3, [r7, #8]
 8002c22:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c24:	4a48      	ldr	r2, [pc, #288]	@ (8002d48 <HAL_GPIO_Init+0x2bc>)
 8002c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c28:	089b      	lsrs	r3, r3, #2
 8002c2a:	3302      	adds	r3, #2
 8002c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c30:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c34:	f003 0303 	and.w	r3, r3, #3
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	220f      	movs	r2, #15
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	43db      	mvns	r3, r3
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	4013      	ands	r3, r2
 8002c46:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a40      	ldr	r2, [pc, #256]	@ (8002d4c <HAL_GPIO_Init+0x2c0>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d013      	beq.n	8002c78 <HAL_GPIO_Init+0x1ec>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a3f      	ldr	r2, [pc, #252]	@ (8002d50 <HAL_GPIO_Init+0x2c4>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d00d      	beq.n	8002c74 <HAL_GPIO_Init+0x1e8>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a3e      	ldr	r2, [pc, #248]	@ (8002d54 <HAL_GPIO_Init+0x2c8>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d007      	beq.n	8002c70 <HAL_GPIO_Init+0x1e4>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a3d      	ldr	r2, [pc, #244]	@ (8002d58 <HAL_GPIO_Init+0x2cc>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d101      	bne.n	8002c6c <HAL_GPIO_Init+0x1e0>
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e006      	b.n	8002c7a <HAL_GPIO_Init+0x1ee>
 8002c6c:	2304      	movs	r3, #4
 8002c6e:	e004      	b.n	8002c7a <HAL_GPIO_Init+0x1ee>
 8002c70:	2302      	movs	r3, #2
 8002c72:	e002      	b.n	8002c7a <HAL_GPIO_Init+0x1ee>
 8002c74:	2301      	movs	r3, #1
 8002c76:	e000      	b.n	8002c7a <HAL_GPIO_Init+0x1ee>
 8002c78:	2300      	movs	r3, #0
 8002c7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c7c:	f002 0203 	and.w	r2, r2, #3
 8002c80:	0092      	lsls	r2, r2, #2
 8002c82:	4093      	lsls	r3, r2
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c8a:	492f      	ldr	r1, [pc, #188]	@ (8002d48 <HAL_GPIO_Init+0x2bc>)
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8e:	089b      	lsrs	r3, r3, #2
 8002c90:	3302      	adds	r3, #2
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d006      	beq.n	8002cb2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ca4:	4b2d      	ldr	r3, [pc, #180]	@ (8002d5c <HAL_GPIO_Init+0x2d0>)
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	492c      	ldr	r1, [pc, #176]	@ (8002d5c <HAL_GPIO_Init+0x2d0>)
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	608b      	str	r3, [r1, #8]
 8002cb0:	e006      	b.n	8002cc0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002cb2:	4b2a      	ldr	r3, [pc, #168]	@ (8002d5c <HAL_GPIO_Init+0x2d0>)
 8002cb4:	689a      	ldr	r2, [r3, #8]
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	4928      	ldr	r1, [pc, #160]	@ (8002d5c <HAL_GPIO_Init+0x2d0>)
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d006      	beq.n	8002cda <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ccc:	4b23      	ldr	r3, [pc, #140]	@ (8002d5c <HAL_GPIO_Init+0x2d0>)
 8002cce:	68da      	ldr	r2, [r3, #12]
 8002cd0:	4922      	ldr	r1, [pc, #136]	@ (8002d5c <HAL_GPIO_Init+0x2d0>)
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	60cb      	str	r3, [r1, #12]
 8002cd8:	e006      	b.n	8002ce8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002cda:	4b20      	ldr	r3, [pc, #128]	@ (8002d5c <HAL_GPIO_Init+0x2d0>)
 8002cdc:	68da      	ldr	r2, [r3, #12]
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	491e      	ldr	r1, [pc, #120]	@ (8002d5c <HAL_GPIO_Init+0x2d0>)
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d006      	beq.n	8002d02 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002cf4:	4b19      	ldr	r3, [pc, #100]	@ (8002d5c <HAL_GPIO_Init+0x2d0>)
 8002cf6:	685a      	ldr	r2, [r3, #4]
 8002cf8:	4918      	ldr	r1, [pc, #96]	@ (8002d5c <HAL_GPIO_Init+0x2d0>)
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	604b      	str	r3, [r1, #4]
 8002d00:	e006      	b.n	8002d10 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d02:	4b16      	ldr	r3, [pc, #88]	@ (8002d5c <HAL_GPIO_Init+0x2d0>)
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	4914      	ldr	r1, [pc, #80]	@ (8002d5c <HAL_GPIO_Init+0x2d0>)
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d021      	beq.n	8002d60 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002d1c:	4b0f      	ldr	r3, [pc, #60]	@ (8002d5c <HAL_GPIO_Init+0x2d0>)
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	490e      	ldr	r1, [pc, #56]	@ (8002d5c <HAL_GPIO_Init+0x2d0>)
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	600b      	str	r3, [r1, #0]
 8002d28:	e021      	b.n	8002d6e <HAL_GPIO_Init+0x2e2>
 8002d2a:	bf00      	nop
 8002d2c:	10320000 	.word	0x10320000
 8002d30:	10310000 	.word	0x10310000
 8002d34:	10220000 	.word	0x10220000
 8002d38:	10210000 	.word	0x10210000
 8002d3c:	10120000 	.word	0x10120000
 8002d40:	10110000 	.word	0x10110000
 8002d44:	40021000 	.word	0x40021000
 8002d48:	40010000 	.word	0x40010000
 8002d4c:	40010800 	.word	0x40010800
 8002d50:	40010c00 	.word	0x40010c00
 8002d54:	40011000 	.word	0x40011000
 8002d58:	40011400 	.word	0x40011400
 8002d5c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d60:	4b0b      	ldr	r3, [pc, #44]	@ (8002d90 <HAL_GPIO_Init+0x304>)
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	43db      	mvns	r3, r3
 8002d68:	4909      	ldr	r1, [pc, #36]	@ (8002d90 <HAL_GPIO_Init+0x304>)
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d70:	3301      	adds	r3, #1
 8002d72:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f47f ae8e 	bne.w	8002aa0 <HAL_GPIO_Init+0x14>
  }
}
 8002d84:	bf00      	nop
 8002d86:	bf00      	nop
 8002d88:	372c      	adds	r7, #44	@ 0x2c
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr
 8002d90:	40010400 	.word	0x40010400

08002d94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	807b      	strh	r3, [r7, #2]
 8002da0:	4613      	mov	r3, r2
 8002da2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002da4:	787b      	ldrb	r3, [r7, #1]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002daa:	887a      	ldrh	r2, [r7, #2]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002db0:	e003      	b.n	8002dba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002db2:	887b      	ldrh	r3, [r7, #2]
 8002db4:	041a      	lsls	r2, r3, #16
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	611a      	str	r2, [r3, #16]
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bc80      	pop	{r7}
 8002dc2:	4770      	bx	lr

08002dc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e272      	b.n	80032bc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 8087 	beq.w	8002ef2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002de4:	4b92      	ldr	r3, [pc, #584]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f003 030c 	and.w	r3, r3, #12
 8002dec:	2b04      	cmp	r3, #4
 8002dee:	d00c      	beq.n	8002e0a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002df0:	4b8f      	ldr	r3, [pc, #572]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f003 030c 	and.w	r3, r3, #12
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d112      	bne.n	8002e22 <HAL_RCC_OscConfig+0x5e>
 8002dfc:	4b8c      	ldr	r3, [pc, #560]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e08:	d10b      	bne.n	8002e22 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e0a:	4b89      	ldr	r3, [pc, #548]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d06c      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x12c>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d168      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e24c      	b.n	80032bc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e2a:	d106      	bne.n	8002e3a <HAL_RCC_OscConfig+0x76>
 8002e2c:	4b80      	ldr	r3, [pc, #512]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a7f      	ldr	r2, [pc, #508]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e36:	6013      	str	r3, [r2, #0]
 8002e38:	e02e      	b.n	8002e98 <HAL_RCC_OscConfig+0xd4>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10c      	bne.n	8002e5c <HAL_RCC_OscConfig+0x98>
 8002e42:	4b7b      	ldr	r3, [pc, #492]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a7a      	ldr	r2, [pc, #488]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e4c:	6013      	str	r3, [r2, #0]
 8002e4e:	4b78      	ldr	r3, [pc, #480]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a77      	ldr	r2, [pc, #476]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e54:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e58:	6013      	str	r3, [r2, #0]
 8002e5a:	e01d      	b.n	8002e98 <HAL_RCC_OscConfig+0xd4>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e64:	d10c      	bne.n	8002e80 <HAL_RCC_OscConfig+0xbc>
 8002e66:	4b72      	ldr	r3, [pc, #456]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a71      	ldr	r2, [pc, #452]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e70:	6013      	str	r3, [r2, #0]
 8002e72:	4b6f      	ldr	r3, [pc, #444]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a6e      	ldr	r2, [pc, #440]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	e00b      	b.n	8002e98 <HAL_RCC_OscConfig+0xd4>
 8002e80:	4b6b      	ldr	r3, [pc, #428]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a6a      	ldr	r2, [pc, #424]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e8a:	6013      	str	r3, [r2, #0]
 8002e8c:	4b68      	ldr	r3, [pc, #416]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a67      	ldr	r2, [pc, #412]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e96:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d013      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea0:	f7fe ff00 	bl	8001ca4 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ea8:	f7fe fefc 	bl	8001ca4 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b64      	cmp	r3, #100	@ 0x64
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e200      	b.n	80032bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eba:	4b5d      	ldr	r3, [pc, #372]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0f0      	beq.n	8002ea8 <HAL_RCC_OscConfig+0xe4>
 8002ec6:	e014      	b.n	8002ef2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec8:	f7fe feec 	bl	8001ca4 <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ed0:	f7fe fee8 	bl	8001ca4 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b64      	cmp	r3, #100	@ 0x64
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e1ec      	b.n	80032bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ee2:	4b53      	ldr	r3, [pc, #332]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1f0      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x10c>
 8002eee:	e000      	b.n	8002ef2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d063      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002efe:	4b4c      	ldr	r3, [pc, #304]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f003 030c 	and.w	r3, r3, #12
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00b      	beq.n	8002f22 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f0a:	4b49      	ldr	r3, [pc, #292]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f003 030c 	and.w	r3, r3, #12
 8002f12:	2b08      	cmp	r3, #8
 8002f14:	d11c      	bne.n	8002f50 <HAL_RCC_OscConfig+0x18c>
 8002f16:	4b46      	ldr	r3, [pc, #280]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d116      	bne.n	8002f50 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f22:	4b43      	ldr	r3, [pc, #268]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d005      	beq.n	8002f3a <HAL_RCC_OscConfig+0x176>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d001      	beq.n	8002f3a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e1c0      	b.n	80032bc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f3a:	4b3d      	ldr	r3, [pc, #244]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	4939      	ldr	r1, [pc, #228]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f4e:	e03a      	b.n	8002fc6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d020      	beq.n	8002f9a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f58:	4b36      	ldr	r3, [pc, #216]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5e:	f7fe fea1 	bl	8001ca4 <HAL_GetTick>
 8002f62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f64:	e008      	b.n	8002f78 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f66:	f7fe fe9d 	bl	8001ca4 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e1a1      	b.n	80032bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f78:	4b2d      	ldr	r3, [pc, #180]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d0f0      	beq.n	8002f66 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f84:	4b2a      	ldr	r3, [pc, #168]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	4927      	ldr	r1, [pc, #156]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	600b      	str	r3, [r1, #0]
 8002f98:	e015      	b.n	8002fc6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f9a:	4b26      	ldr	r3, [pc, #152]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa0:	f7fe fe80 	bl	8001ca4 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fa8:	f7fe fe7c 	bl	8001ca4 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e180      	b.n	80032bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fba:	4b1d      	ldr	r3, [pc, #116]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f0      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0308 	and.w	r3, r3, #8
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d03a      	beq.n	8003048 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d019      	beq.n	800300e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fda:	4b17      	ldr	r3, [pc, #92]	@ (8003038 <HAL_RCC_OscConfig+0x274>)
 8002fdc:	2201      	movs	r2, #1
 8002fde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fe0:	f7fe fe60 	bl	8001ca4 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fe8:	f7fe fe5c 	bl	8001ca4 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e160      	b.n	80032bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0f0      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003006:	2001      	movs	r0, #1
 8003008:	f000 fa9c 	bl	8003544 <RCC_Delay>
 800300c:	e01c      	b.n	8003048 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800300e:	4b0a      	ldr	r3, [pc, #40]	@ (8003038 <HAL_RCC_OscConfig+0x274>)
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003014:	f7fe fe46 	bl	8001ca4 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800301a:	e00f      	b.n	800303c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800301c:	f7fe fe42 	bl	8001ca4 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d908      	bls.n	800303c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e146      	b.n	80032bc <HAL_RCC_OscConfig+0x4f8>
 800302e:	bf00      	nop
 8003030:	40021000 	.word	0x40021000
 8003034:	42420000 	.word	0x42420000
 8003038:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800303c:	4b92      	ldr	r3, [pc, #584]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 800303e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1e9      	bne.n	800301c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	2b00      	cmp	r3, #0
 8003052:	f000 80a6 	beq.w	80031a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003056:	2300      	movs	r3, #0
 8003058:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800305a:	4b8b      	ldr	r3, [pc, #556]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10d      	bne.n	8003082 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003066:	4b88      	ldr	r3, [pc, #544]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	4a87      	ldr	r2, [pc, #540]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 800306c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003070:	61d3      	str	r3, [r2, #28]
 8003072:	4b85      	ldr	r3, [pc, #532]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800307a:	60bb      	str	r3, [r7, #8]
 800307c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800307e:	2301      	movs	r3, #1
 8003080:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003082:	4b82      	ldr	r3, [pc, #520]	@ (800328c <HAL_RCC_OscConfig+0x4c8>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800308a:	2b00      	cmp	r3, #0
 800308c:	d118      	bne.n	80030c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800308e:	4b7f      	ldr	r3, [pc, #508]	@ (800328c <HAL_RCC_OscConfig+0x4c8>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a7e      	ldr	r2, [pc, #504]	@ (800328c <HAL_RCC_OscConfig+0x4c8>)
 8003094:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003098:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800309a:	f7fe fe03 	bl	8001ca4 <HAL_GetTick>
 800309e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a0:	e008      	b.n	80030b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030a2:	f7fe fdff 	bl	8001ca4 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b64      	cmp	r3, #100	@ 0x64
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e103      	b.n	80032bc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b4:	4b75      	ldr	r3, [pc, #468]	@ (800328c <HAL_RCC_OscConfig+0x4c8>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d0f0      	beq.n	80030a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d106      	bne.n	80030d6 <HAL_RCC_OscConfig+0x312>
 80030c8:	4b6f      	ldr	r3, [pc, #444]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	4a6e      	ldr	r2, [pc, #440]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 80030ce:	f043 0301 	orr.w	r3, r3, #1
 80030d2:	6213      	str	r3, [r2, #32]
 80030d4:	e02d      	b.n	8003132 <HAL_RCC_OscConfig+0x36e>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10c      	bne.n	80030f8 <HAL_RCC_OscConfig+0x334>
 80030de:	4b6a      	ldr	r3, [pc, #424]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	4a69      	ldr	r2, [pc, #420]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 80030e4:	f023 0301 	bic.w	r3, r3, #1
 80030e8:	6213      	str	r3, [r2, #32]
 80030ea:	4b67      	ldr	r3, [pc, #412]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	4a66      	ldr	r2, [pc, #408]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 80030f0:	f023 0304 	bic.w	r3, r3, #4
 80030f4:	6213      	str	r3, [r2, #32]
 80030f6:	e01c      	b.n	8003132 <HAL_RCC_OscConfig+0x36e>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	2b05      	cmp	r3, #5
 80030fe:	d10c      	bne.n	800311a <HAL_RCC_OscConfig+0x356>
 8003100:	4b61      	ldr	r3, [pc, #388]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 8003102:	6a1b      	ldr	r3, [r3, #32]
 8003104:	4a60      	ldr	r2, [pc, #384]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 8003106:	f043 0304 	orr.w	r3, r3, #4
 800310a:	6213      	str	r3, [r2, #32]
 800310c:	4b5e      	ldr	r3, [pc, #376]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	4a5d      	ldr	r2, [pc, #372]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 8003112:	f043 0301 	orr.w	r3, r3, #1
 8003116:	6213      	str	r3, [r2, #32]
 8003118:	e00b      	b.n	8003132 <HAL_RCC_OscConfig+0x36e>
 800311a:	4b5b      	ldr	r3, [pc, #364]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	4a5a      	ldr	r2, [pc, #360]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 8003120:	f023 0301 	bic.w	r3, r3, #1
 8003124:	6213      	str	r3, [r2, #32]
 8003126:	4b58      	ldr	r3, [pc, #352]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	4a57      	ldr	r2, [pc, #348]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 800312c:	f023 0304 	bic.w	r3, r3, #4
 8003130:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d015      	beq.n	8003166 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800313a:	f7fe fdb3 	bl	8001ca4 <HAL_GetTick>
 800313e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003140:	e00a      	b.n	8003158 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003142:	f7fe fdaf 	bl	8001ca4 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003150:	4293      	cmp	r3, r2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e0b1      	b.n	80032bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003158:	4b4b      	ldr	r3, [pc, #300]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0ee      	beq.n	8003142 <HAL_RCC_OscConfig+0x37e>
 8003164:	e014      	b.n	8003190 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003166:	f7fe fd9d 	bl	8001ca4 <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800316c:	e00a      	b.n	8003184 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800316e:	f7fe fd99 	bl	8001ca4 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	f241 3288 	movw	r2, #5000	@ 0x1388
 800317c:	4293      	cmp	r3, r2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e09b      	b.n	80032bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003184:	4b40      	ldr	r3, [pc, #256]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 8003186:	6a1b      	ldr	r3, [r3, #32]
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1ee      	bne.n	800316e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003190:	7dfb      	ldrb	r3, [r7, #23]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d105      	bne.n	80031a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003196:	4b3c      	ldr	r3, [pc, #240]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	4a3b      	ldr	r2, [pc, #236]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 800319c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 8087 	beq.w	80032ba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031ac:	4b36      	ldr	r3, [pc, #216]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f003 030c 	and.w	r3, r3, #12
 80031b4:	2b08      	cmp	r3, #8
 80031b6:	d061      	beq.n	800327c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	69db      	ldr	r3, [r3, #28]
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d146      	bne.n	800324e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031c0:	4b33      	ldr	r3, [pc, #204]	@ (8003290 <HAL_RCC_OscConfig+0x4cc>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c6:	f7fe fd6d 	bl	8001ca4 <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031cc:	e008      	b.n	80031e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ce:	f7fe fd69 	bl	8001ca4 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e06d      	b.n	80032bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031e0:	4b29      	ldr	r3, [pc, #164]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1f0      	bne.n	80031ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031f4:	d108      	bne.n	8003208 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80031f6:	4b24      	ldr	r3, [pc, #144]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	4921      	ldr	r1, [pc, #132]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 8003204:	4313      	orrs	r3, r2
 8003206:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003208:	4b1f      	ldr	r3, [pc, #124]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a19      	ldr	r1, [r3, #32]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003218:	430b      	orrs	r3, r1
 800321a:	491b      	ldr	r1, [pc, #108]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 800321c:	4313      	orrs	r3, r2
 800321e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003220:	4b1b      	ldr	r3, [pc, #108]	@ (8003290 <HAL_RCC_OscConfig+0x4cc>)
 8003222:	2201      	movs	r2, #1
 8003224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003226:	f7fe fd3d 	bl	8001ca4 <HAL_GetTick>
 800322a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800322c:	e008      	b.n	8003240 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800322e:	f7fe fd39 	bl	8001ca4 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d901      	bls.n	8003240 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e03d      	b.n	80032bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003240:	4b11      	ldr	r3, [pc, #68]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d0f0      	beq.n	800322e <HAL_RCC_OscConfig+0x46a>
 800324c:	e035      	b.n	80032ba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800324e:	4b10      	ldr	r3, [pc, #64]	@ (8003290 <HAL_RCC_OscConfig+0x4cc>)
 8003250:	2200      	movs	r2, #0
 8003252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003254:	f7fe fd26 	bl	8001ca4 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800325c:	f7fe fd22 	bl	8001ca4 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e026      	b.n	80032bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800326e:	4b06      	ldr	r3, [pc, #24]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1f0      	bne.n	800325c <HAL_RCC_OscConfig+0x498>
 800327a:	e01e      	b.n	80032ba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	2b01      	cmp	r3, #1
 8003282:	d107      	bne.n	8003294 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e019      	b.n	80032bc <HAL_RCC_OscConfig+0x4f8>
 8003288:	40021000 	.word	0x40021000
 800328c:	40007000 	.word	0x40007000
 8003290:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003294:	4b0b      	ldr	r3, [pc, #44]	@ (80032c4 <HAL_RCC_OscConfig+0x500>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d106      	bne.n	80032b6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d001      	beq.n	80032ba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e000      	b.n	80032bc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3718      	adds	r7, #24
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	40021000 	.word	0x40021000

080032c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d101      	bne.n	80032dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e0d0      	b.n	800347e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032dc:	4b6a      	ldr	r3, [pc, #424]	@ (8003488 <HAL_RCC_ClockConfig+0x1c0>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0307 	and.w	r3, r3, #7
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d910      	bls.n	800330c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ea:	4b67      	ldr	r3, [pc, #412]	@ (8003488 <HAL_RCC_ClockConfig+0x1c0>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f023 0207 	bic.w	r2, r3, #7
 80032f2:	4965      	ldr	r1, [pc, #404]	@ (8003488 <HAL_RCC_ClockConfig+0x1c0>)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032fa:	4b63      	ldr	r3, [pc, #396]	@ (8003488 <HAL_RCC_ClockConfig+0x1c0>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0307 	and.w	r3, r3, #7
 8003302:	683a      	ldr	r2, [r7, #0]
 8003304:	429a      	cmp	r2, r3
 8003306:	d001      	beq.n	800330c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e0b8      	b.n	800347e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d020      	beq.n	800335a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	2b00      	cmp	r3, #0
 8003322:	d005      	beq.n	8003330 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003324:	4b59      	ldr	r3, [pc, #356]	@ (800348c <HAL_RCC_ClockConfig+0x1c4>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	4a58      	ldr	r2, [pc, #352]	@ (800348c <HAL_RCC_ClockConfig+0x1c4>)
 800332a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800332e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0308 	and.w	r3, r3, #8
 8003338:	2b00      	cmp	r3, #0
 800333a:	d005      	beq.n	8003348 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800333c:	4b53      	ldr	r3, [pc, #332]	@ (800348c <HAL_RCC_ClockConfig+0x1c4>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	4a52      	ldr	r2, [pc, #328]	@ (800348c <HAL_RCC_ClockConfig+0x1c4>)
 8003342:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003346:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003348:	4b50      	ldr	r3, [pc, #320]	@ (800348c <HAL_RCC_ClockConfig+0x1c4>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	494d      	ldr	r1, [pc, #308]	@ (800348c <HAL_RCC_ClockConfig+0x1c4>)
 8003356:	4313      	orrs	r3, r2
 8003358:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b00      	cmp	r3, #0
 8003364:	d040      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d107      	bne.n	800337e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800336e:	4b47      	ldr	r3, [pc, #284]	@ (800348c <HAL_RCC_ClockConfig+0x1c4>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d115      	bne.n	80033a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e07f      	b.n	800347e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2b02      	cmp	r3, #2
 8003384:	d107      	bne.n	8003396 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003386:	4b41      	ldr	r3, [pc, #260]	@ (800348c <HAL_RCC_ClockConfig+0x1c4>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d109      	bne.n	80033a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e073      	b.n	800347e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003396:	4b3d      	ldr	r3, [pc, #244]	@ (800348c <HAL_RCC_ClockConfig+0x1c4>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e06b      	b.n	800347e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033a6:	4b39      	ldr	r3, [pc, #228]	@ (800348c <HAL_RCC_ClockConfig+0x1c4>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f023 0203 	bic.w	r2, r3, #3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	4936      	ldr	r1, [pc, #216]	@ (800348c <HAL_RCC_ClockConfig+0x1c4>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033b8:	f7fe fc74 	bl	8001ca4 <HAL_GetTick>
 80033bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033be:	e00a      	b.n	80033d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c0:	f7fe fc70 	bl	8001ca4 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e053      	b.n	800347e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033d6:	4b2d      	ldr	r3, [pc, #180]	@ (800348c <HAL_RCC_ClockConfig+0x1c4>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f003 020c 	and.w	r2, r3, #12
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d1eb      	bne.n	80033c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033e8:	4b27      	ldr	r3, [pc, #156]	@ (8003488 <HAL_RCC_ClockConfig+0x1c0>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d210      	bcs.n	8003418 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033f6:	4b24      	ldr	r3, [pc, #144]	@ (8003488 <HAL_RCC_ClockConfig+0x1c0>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f023 0207 	bic.w	r2, r3, #7
 80033fe:	4922      	ldr	r1, [pc, #136]	@ (8003488 <HAL_RCC_ClockConfig+0x1c0>)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	4313      	orrs	r3, r2
 8003404:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003406:	4b20      	ldr	r3, [pc, #128]	@ (8003488 <HAL_RCC_ClockConfig+0x1c0>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0307 	and.w	r3, r3, #7
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	429a      	cmp	r2, r3
 8003412:	d001      	beq.n	8003418 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e032      	b.n	800347e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	2b00      	cmp	r3, #0
 8003422:	d008      	beq.n	8003436 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003424:	4b19      	ldr	r3, [pc, #100]	@ (800348c <HAL_RCC_ClockConfig+0x1c4>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	4916      	ldr	r1, [pc, #88]	@ (800348c <HAL_RCC_ClockConfig+0x1c4>)
 8003432:	4313      	orrs	r3, r2
 8003434:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0308 	and.w	r3, r3, #8
 800343e:	2b00      	cmp	r3, #0
 8003440:	d009      	beq.n	8003456 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003442:	4b12      	ldr	r3, [pc, #72]	@ (800348c <HAL_RCC_ClockConfig+0x1c4>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	490e      	ldr	r1, [pc, #56]	@ (800348c <HAL_RCC_ClockConfig+0x1c4>)
 8003452:	4313      	orrs	r3, r2
 8003454:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003456:	f000 f821 	bl	800349c <HAL_RCC_GetSysClockFreq>
 800345a:	4602      	mov	r2, r0
 800345c:	4b0b      	ldr	r3, [pc, #44]	@ (800348c <HAL_RCC_ClockConfig+0x1c4>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	091b      	lsrs	r3, r3, #4
 8003462:	f003 030f 	and.w	r3, r3, #15
 8003466:	490a      	ldr	r1, [pc, #40]	@ (8003490 <HAL_RCC_ClockConfig+0x1c8>)
 8003468:	5ccb      	ldrb	r3, [r1, r3]
 800346a:	fa22 f303 	lsr.w	r3, r2, r3
 800346e:	4a09      	ldr	r2, [pc, #36]	@ (8003494 <HAL_RCC_ClockConfig+0x1cc>)
 8003470:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003472:	4b09      	ldr	r3, [pc, #36]	@ (8003498 <HAL_RCC_ClockConfig+0x1d0>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f7fe fbd2 	bl	8001c20 <HAL_InitTick>

  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	40022000 	.word	0x40022000
 800348c:	40021000 	.word	0x40021000
 8003490:	08004a78 	.word	0x08004a78
 8003494:	20000038 	.word	0x20000038
 8003498:	2000003c 	.word	0x2000003c

0800349c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800349c:	b480      	push	{r7}
 800349e:	b087      	sub	sp, #28
 80034a0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034a2:	2300      	movs	r3, #0
 80034a4:	60fb      	str	r3, [r7, #12]
 80034a6:	2300      	movs	r3, #0
 80034a8:	60bb      	str	r3, [r7, #8]
 80034aa:	2300      	movs	r3, #0
 80034ac:	617b      	str	r3, [r7, #20]
 80034ae:	2300      	movs	r3, #0
 80034b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80034b6:	4b1e      	ldr	r3, [pc, #120]	@ (8003530 <HAL_RCC_GetSysClockFreq+0x94>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f003 030c 	and.w	r3, r3, #12
 80034c2:	2b04      	cmp	r3, #4
 80034c4:	d002      	beq.n	80034cc <HAL_RCC_GetSysClockFreq+0x30>
 80034c6:	2b08      	cmp	r3, #8
 80034c8:	d003      	beq.n	80034d2 <HAL_RCC_GetSysClockFreq+0x36>
 80034ca:	e027      	b.n	800351c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034cc:	4b19      	ldr	r3, [pc, #100]	@ (8003534 <HAL_RCC_GetSysClockFreq+0x98>)
 80034ce:	613b      	str	r3, [r7, #16]
      break;
 80034d0:	e027      	b.n	8003522 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	0c9b      	lsrs	r3, r3, #18
 80034d6:	f003 030f 	and.w	r3, r3, #15
 80034da:	4a17      	ldr	r2, [pc, #92]	@ (8003538 <HAL_RCC_GetSysClockFreq+0x9c>)
 80034dc:	5cd3      	ldrb	r3, [r2, r3]
 80034de:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d010      	beq.n	800350c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80034ea:	4b11      	ldr	r3, [pc, #68]	@ (8003530 <HAL_RCC_GetSysClockFreq+0x94>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	0c5b      	lsrs	r3, r3, #17
 80034f0:	f003 0301 	and.w	r3, r3, #1
 80034f4:	4a11      	ldr	r2, [pc, #68]	@ (800353c <HAL_RCC_GetSysClockFreq+0xa0>)
 80034f6:	5cd3      	ldrb	r3, [r2, r3]
 80034f8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a0d      	ldr	r2, [pc, #52]	@ (8003534 <HAL_RCC_GetSysClockFreq+0x98>)
 80034fe:	fb03 f202 	mul.w	r2, r3, r2
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	fbb2 f3f3 	udiv	r3, r2, r3
 8003508:	617b      	str	r3, [r7, #20]
 800350a:	e004      	b.n	8003516 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a0c      	ldr	r2, [pc, #48]	@ (8003540 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003510:	fb02 f303 	mul.w	r3, r2, r3
 8003514:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	613b      	str	r3, [r7, #16]
      break;
 800351a:	e002      	b.n	8003522 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800351c:	4b05      	ldr	r3, [pc, #20]	@ (8003534 <HAL_RCC_GetSysClockFreq+0x98>)
 800351e:	613b      	str	r3, [r7, #16]
      break;
 8003520:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003522:	693b      	ldr	r3, [r7, #16]
}
 8003524:	4618      	mov	r0, r3
 8003526:	371c      	adds	r7, #28
 8003528:	46bd      	mov	sp, r7
 800352a:	bc80      	pop	{r7}
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	40021000 	.word	0x40021000
 8003534:	007a1200 	.word	0x007a1200
 8003538:	08004a88 	.word	0x08004a88
 800353c:	08004a98 	.word	0x08004a98
 8003540:	003d0900 	.word	0x003d0900

08003544 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800354c:	4b0a      	ldr	r3, [pc, #40]	@ (8003578 <RCC_Delay+0x34>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a0a      	ldr	r2, [pc, #40]	@ (800357c <RCC_Delay+0x38>)
 8003552:	fba2 2303 	umull	r2, r3, r2, r3
 8003556:	0a5b      	lsrs	r3, r3, #9
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	fb02 f303 	mul.w	r3, r2, r3
 800355e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003560:	bf00      	nop
  }
  while (Delay --);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	1e5a      	subs	r2, r3, #1
 8003566:	60fa      	str	r2, [r7, #12]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1f9      	bne.n	8003560 <RCC_Delay+0x1c>
}
 800356c:	bf00      	nop
 800356e:	bf00      	nop
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	bc80      	pop	{r7}
 8003576:	4770      	bx	lr
 8003578:	20000038 	.word	0x20000038
 800357c:	10624dd3 	.word	0x10624dd3

08003580 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003588:	2300      	movs	r3, #0
 800358a:	613b      	str	r3, [r7, #16]
 800358c:	2300      	movs	r3, #0
 800358e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b00      	cmp	r3, #0
 800359a:	d07d      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800359c:	2300      	movs	r3, #0
 800359e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035a0:	4b4f      	ldr	r3, [pc, #316]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035a2:	69db      	ldr	r3, [r3, #28]
 80035a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d10d      	bne.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ac:	4b4c      	ldr	r3, [pc, #304]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ae:	69db      	ldr	r3, [r3, #28]
 80035b0:	4a4b      	ldr	r2, [pc, #300]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035b6:	61d3      	str	r3, [r2, #28]
 80035b8:	4b49      	ldr	r3, [pc, #292]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ba:	69db      	ldr	r3, [r3, #28]
 80035bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035c0:	60bb      	str	r3, [r7, #8]
 80035c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035c4:	2301      	movs	r3, #1
 80035c6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c8:	4b46      	ldr	r3, [pc, #280]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d118      	bne.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035d4:	4b43      	ldr	r3, [pc, #268]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a42      	ldr	r2, [pc, #264]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035e0:	f7fe fb60 	bl	8001ca4 <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e6:	e008      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035e8:	f7fe fb5c 	bl	8001ca4 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b64      	cmp	r3, #100	@ 0x64
 80035f4:	d901      	bls.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e06d      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035fa:	4b3a      	ldr	r3, [pc, #232]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003602:	2b00      	cmp	r3, #0
 8003604:	d0f0      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003606:	4b36      	ldr	r3, [pc, #216]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003608:	6a1b      	ldr	r3, [r3, #32]
 800360a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800360e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d02e      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	429a      	cmp	r2, r3
 8003622:	d027      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003624:	4b2e      	ldr	r3, [pc, #184]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800362c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800362e:	4b2e      	ldr	r3, [pc, #184]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003630:	2201      	movs	r2, #1
 8003632:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003634:	4b2c      	ldr	r3, [pc, #176]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003636:	2200      	movs	r2, #0
 8003638:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800363a:	4a29      	ldr	r2, [pc, #164]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d014      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800364a:	f7fe fb2b 	bl	8001ca4 <HAL_GetTick>
 800364e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003650:	e00a      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003652:	f7fe fb27 	bl	8001ca4 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003660:	4293      	cmp	r3, r2
 8003662:	d901      	bls.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e036      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003668:	4b1d      	ldr	r3, [pc, #116]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0ee      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003674:	4b1a      	ldr	r3, [pc, #104]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	4917      	ldr	r1, [pc, #92]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003682:	4313      	orrs	r3, r2
 8003684:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003686:	7dfb      	ldrb	r3, [r7, #23]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d105      	bne.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800368c:	4b14      	ldr	r3, [pc, #80]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800368e:	69db      	ldr	r3, [r3, #28]
 8003690:	4a13      	ldr	r2, [pc, #76]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003692:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003696:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d008      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036a4:	4b0e      	ldr	r3, [pc, #56]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	490b      	ldr	r1, [pc, #44]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0310 	and.w	r3, r3, #16
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d008      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036c2:	4b07      	ldr	r3, [pc, #28]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	4904      	ldr	r1, [pc, #16]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3718      	adds	r7, #24
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	40021000 	.word	0x40021000
 80036e4:	40007000 	.word	0x40007000
 80036e8:	42420440 	.word	0x42420440

080036ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e041      	b.n	8003782 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d106      	bne.n	8003718 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7fe f98e 	bl	8001a34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2202      	movs	r2, #2
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3304      	adds	r3, #4
 8003728:	4619      	mov	r1, r3
 800372a:	4610      	mov	r0, r2
 800372c:	f000 fd5a 	bl	80041e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b082      	sub	sp, #8
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e041      	b.n	8003820 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d106      	bne.n	80037b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 f839 	bl	8003828 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2202      	movs	r2, #2
 80037ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	3304      	adds	r3, #4
 80037c6:	4619      	mov	r1, r3
 80037c8:	4610      	mov	r0, r2
 80037ca:	f000 fd0b 	bl	80041e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	bc80      	pop	{r7}
 8003838:	4770      	bx	lr
	...

0800383c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
 8003848:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800384a:	2300      	movs	r3, #0
 800384c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d109      	bne.n	8003868 <HAL_TIM_PWM_Start_DMA+0x2c>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b02      	cmp	r3, #2
 800385e:	bf0c      	ite	eq
 8003860:	2301      	moveq	r3, #1
 8003862:	2300      	movne	r3, #0
 8003864:	b2db      	uxtb	r3, r3
 8003866:	e022      	b.n	80038ae <HAL_TIM_PWM_Start_DMA+0x72>
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	2b04      	cmp	r3, #4
 800386c:	d109      	bne.n	8003882 <HAL_TIM_PWM_Start_DMA+0x46>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b02      	cmp	r3, #2
 8003878:	bf0c      	ite	eq
 800387a:	2301      	moveq	r3, #1
 800387c:	2300      	movne	r3, #0
 800387e:	b2db      	uxtb	r3, r3
 8003880:	e015      	b.n	80038ae <HAL_TIM_PWM_Start_DMA+0x72>
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	2b08      	cmp	r3, #8
 8003886:	d109      	bne.n	800389c <HAL_TIM_PWM_Start_DMA+0x60>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b02      	cmp	r3, #2
 8003892:	bf0c      	ite	eq
 8003894:	2301      	moveq	r3, #1
 8003896:	2300      	movne	r3, #0
 8003898:	b2db      	uxtb	r3, r3
 800389a:	e008      	b.n	80038ae <HAL_TIM_PWM_Start_DMA+0x72>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	bf0c      	ite	eq
 80038a8:	2301      	moveq	r3, #1
 80038aa:	2300      	movne	r3, #0
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80038b2:	2302      	movs	r3, #2
 80038b4:	e153      	b.n	8003b5e <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d109      	bne.n	80038d0 <HAL_TIM_PWM_Start_DMA+0x94>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	bf0c      	ite	eq
 80038c8:	2301      	moveq	r3, #1
 80038ca:	2300      	movne	r3, #0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	e022      	b.n	8003916 <HAL_TIM_PWM_Start_DMA+0xda>
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	d109      	bne.n	80038ea <HAL_TIM_PWM_Start_DMA+0xae>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b01      	cmp	r3, #1
 80038e0:	bf0c      	ite	eq
 80038e2:	2301      	moveq	r3, #1
 80038e4:	2300      	movne	r3, #0
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	e015      	b.n	8003916 <HAL_TIM_PWM_Start_DMA+0xda>
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	2b08      	cmp	r3, #8
 80038ee:	d109      	bne.n	8003904 <HAL_TIM_PWM_Start_DMA+0xc8>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	bf0c      	ite	eq
 80038fc:	2301      	moveq	r3, #1
 80038fe:	2300      	movne	r3, #0
 8003900:	b2db      	uxtb	r3, r3
 8003902:	e008      	b.n	8003916 <HAL_TIM_PWM_Start_DMA+0xda>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b01      	cmp	r3, #1
 800390e:	bf0c      	ite	eq
 8003910:	2301      	moveq	r3, #1
 8003912:	2300      	movne	r3, #0
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d024      	beq.n	8003964 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d002      	beq.n	8003926 <HAL_TIM_PWM_Start_DMA+0xea>
 8003920:	887b      	ldrh	r3, [r7, #2]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e119      	b.n	8003b5e <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d104      	bne.n	800393a <HAL_TIM_PWM_Start_DMA+0xfe>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2202      	movs	r2, #2
 8003934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003938:	e016      	b.n	8003968 <HAL_TIM_PWM_Start_DMA+0x12c>
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	2b04      	cmp	r3, #4
 800393e:	d104      	bne.n	800394a <HAL_TIM_PWM_Start_DMA+0x10e>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2202      	movs	r2, #2
 8003944:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003948:	e00e      	b.n	8003968 <HAL_TIM_PWM_Start_DMA+0x12c>
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	2b08      	cmp	r3, #8
 800394e:	d104      	bne.n	800395a <HAL_TIM_PWM_Start_DMA+0x11e>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2202      	movs	r2, #2
 8003954:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003958:	e006      	b.n	8003968 <HAL_TIM_PWM_Start_DMA+0x12c>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2202      	movs	r2, #2
 800395e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003962:	e001      	b.n	8003968 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e0fa      	b.n	8003b5e <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	2b0c      	cmp	r3, #12
 800396c:	f200 80ae 	bhi.w	8003acc <HAL_TIM_PWM_Start_DMA+0x290>
 8003970:	a201      	add	r2, pc, #4	@ (adr r2, 8003978 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8003972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003976:	bf00      	nop
 8003978:	080039ad 	.word	0x080039ad
 800397c:	08003acd 	.word	0x08003acd
 8003980:	08003acd 	.word	0x08003acd
 8003984:	08003acd 	.word	0x08003acd
 8003988:	080039f5 	.word	0x080039f5
 800398c:	08003acd 	.word	0x08003acd
 8003990:	08003acd 	.word	0x08003acd
 8003994:	08003acd 	.word	0x08003acd
 8003998:	08003a3d 	.word	0x08003a3d
 800399c:	08003acd 	.word	0x08003acd
 80039a0:	08003acd 	.word	0x08003acd
 80039a4:	08003acd 	.word	0x08003acd
 80039a8:	08003a85 	.word	0x08003a85
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b0:	4a6d      	ldr	r2, [pc, #436]	@ (8003b68 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80039b2:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b8:	4a6c      	ldr	r2, [pc, #432]	@ (8003b6c <HAL_TIM_PWM_Start_DMA+0x330>)
 80039ba:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c0:	4a6b      	ldr	r2, [pc, #428]	@ (8003b70 <HAL_TIM_PWM_Start_DMA+0x334>)
 80039c2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80039c8:	6879      	ldr	r1, [r7, #4]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	3334      	adds	r3, #52	@ 0x34
 80039d0:	461a      	mov	r2, r3
 80039d2:	887b      	ldrh	r3, [r7, #2]
 80039d4:	f7fe fe4e 	bl	8002674 <HAL_DMA_Start_IT>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e0bd      	b.n	8003b5e <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68da      	ldr	r2, [r3, #12]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039f0:	60da      	str	r2, [r3, #12]
      break;
 80039f2:	e06e      	b.n	8003ad2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039f8:	4a5b      	ldr	r2, [pc, #364]	@ (8003b68 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80039fa:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a00:	4a5a      	ldr	r2, [pc, #360]	@ (8003b6c <HAL_TIM_PWM_Start_DMA+0x330>)
 8003a02:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a08:	4a59      	ldr	r2, [pc, #356]	@ (8003b70 <HAL_TIM_PWM_Start_DMA+0x334>)
 8003a0a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003a10:	6879      	ldr	r1, [r7, #4]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	3338      	adds	r3, #56	@ 0x38
 8003a18:	461a      	mov	r2, r3
 8003a1a:	887b      	ldrh	r3, [r7, #2]
 8003a1c:	f7fe fe2a 	bl	8002674 <HAL_DMA_Start_IT>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e099      	b.n	8003b5e <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68da      	ldr	r2, [r3, #12]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a38:	60da      	str	r2, [r3, #12]
      break;
 8003a3a:	e04a      	b.n	8003ad2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a40:	4a49      	ldr	r2, [pc, #292]	@ (8003b68 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003a42:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a48:	4a48      	ldr	r2, [pc, #288]	@ (8003b6c <HAL_TIM_PWM_Start_DMA+0x330>)
 8003a4a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a50:	4a47      	ldr	r2, [pc, #284]	@ (8003b70 <HAL_TIM_PWM_Start_DMA+0x334>)
 8003a52:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8003a58:	6879      	ldr	r1, [r7, #4]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	333c      	adds	r3, #60	@ 0x3c
 8003a60:	461a      	mov	r2, r3
 8003a62:	887b      	ldrh	r3, [r7, #2]
 8003a64:	f7fe fe06 	bl	8002674 <HAL_DMA_Start_IT>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e075      	b.n	8003b5e <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68da      	ldr	r2, [r3, #12]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a80:	60da      	str	r2, [r3, #12]
      break;
 8003a82:	e026      	b.n	8003ad2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a88:	4a37      	ldr	r2, [pc, #220]	@ (8003b68 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003a8a:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a90:	4a36      	ldr	r2, [pc, #216]	@ (8003b6c <HAL_TIM_PWM_Start_DMA+0x330>)
 8003a92:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a98:	4a35      	ldr	r2, [pc, #212]	@ (8003b70 <HAL_TIM_PWM_Start_DMA+0x334>)
 8003a9a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003aa0:	6879      	ldr	r1, [r7, #4]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	3340      	adds	r3, #64	@ 0x40
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	887b      	ldrh	r3, [r7, #2]
 8003aac:	f7fe fde2 	bl	8002674 <HAL_DMA_Start_IT>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e051      	b.n	8003b5e <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68da      	ldr	r2, [r3, #12]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003ac8:	60da      	str	r2, [r3, #12]
      break;
 8003aca:	e002      	b.n	8003ad2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	75fb      	strb	r3, [r7, #23]
      break;
 8003ad0:	bf00      	nop
  }

  if (status == HAL_OK)
 8003ad2:	7dfb      	ldrb	r3, [r7, #23]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d141      	bne.n	8003b5c <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2201      	movs	r2, #1
 8003ade:	68b9      	ldr	r1, [r7, #8]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f000 fe0b 	bl	80046fc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a22      	ldr	r2, [pc, #136]	@ (8003b74 <HAL_TIM_PWM_Start_DMA+0x338>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d107      	bne.n	8003b00 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003afe:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a1b      	ldr	r2, [pc, #108]	@ (8003b74 <HAL_TIM_PWM_Start_DMA+0x338>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d00e      	beq.n	8003b28 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b12:	d009      	beq.n	8003b28 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a17      	ldr	r2, [pc, #92]	@ (8003b78 <HAL_TIM_PWM_Start_DMA+0x33c>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d004      	beq.n	8003b28 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a16      	ldr	r2, [pc, #88]	@ (8003b7c <HAL_TIM_PWM_Start_DMA+0x340>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d111      	bne.n	8003b4c <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f003 0307 	and.w	r3, r3, #7
 8003b32:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	2b06      	cmp	r3, #6
 8003b38:	d010      	beq.n	8003b5c <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f042 0201 	orr.w	r2, r2, #1
 8003b48:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b4a:	e007      	b.n	8003b5c <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f042 0201 	orr.w	r2, r2, #1
 8003b5a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003b5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3718      	adds	r7, #24
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	080040d5 	.word	0x080040d5
 8003b6c:	0800417d 	.word	0x0800417d
 8003b70:	08004043 	.word	0x08004043
 8003b74:	40012c00 	.word	0x40012c00
 8003b78:	40000400 	.word	0x40000400
 8003b7c:	40000800 	.word	0x40000800

08003b80 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	2b0c      	cmp	r3, #12
 8003b92:	d855      	bhi.n	8003c40 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8003b94:	a201      	add	r2, pc, #4	@ (adr r2, 8003b9c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8003b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b9a:	bf00      	nop
 8003b9c:	08003bd1 	.word	0x08003bd1
 8003ba0:	08003c41 	.word	0x08003c41
 8003ba4:	08003c41 	.word	0x08003c41
 8003ba8:	08003c41 	.word	0x08003c41
 8003bac:	08003bed 	.word	0x08003bed
 8003bb0:	08003c41 	.word	0x08003c41
 8003bb4:	08003c41 	.word	0x08003c41
 8003bb8:	08003c41 	.word	0x08003c41
 8003bbc:	08003c09 	.word	0x08003c09
 8003bc0:	08003c41 	.word	0x08003c41
 8003bc4:	08003c41 	.word	0x08003c41
 8003bc8:	08003c41 	.word	0x08003c41
 8003bcc:	08003c25 	.word	0x08003c25
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68da      	ldr	r2, [r3, #12]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003bde:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7fe fda5 	bl	8002734 <HAL_DMA_Abort_IT>
      break;
 8003bea:	e02c      	b.n	8003c46 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68da      	ldr	r2, [r3, #12]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bfa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7fe fd97 	bl	8002734 <HAL_DMA_Abort_IT>
      break;
 8003c06:	e01e      	b.n	8003c46 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68da      	ldr	r2, [r3, #12]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c16:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7fe fd89 	bl	8002734 <HAL_DMA_Abort_IT>
      break;
 8003c22:	e010      	b.n	8003c46 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68da      	ldr	r2, [r3, #12]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003c32:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7fe fd7b 	bl	8002734 <HAL_DMA_Abort_IT>
      break;
 8003c3e:	e002      	b.n	8003c46 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	73fb      	strb	r3, [r7, #15]
      break;
 8003c44:	bf00      	nop
  }

  if (status == HAL_OK)
 8003c46:	7bfb      	ldrb	r3, [r7, #15]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d157      	bne.n	8003cfc <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2200      	movs	r2, #0
 8003c52:	6839      	ldr	r1, [r7, #0]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f000 fd51 	bl	80046fc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a2a      	ldr	r2, [pc, #168]	@ (8003d08 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d117      	bne.n	8003c94 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6a1a      	ldr	r2, [r3, #32]
 8003c6a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003c6e:	4013      	ands	r3, r2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10f      	bne.n	8003c94 <HAL_TIM_PWM_Stop_DMA+0x114>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6a1a      	ldr	r2, [r3, #32]
 8003c7a:	f240 4344 	movw	r3, #1092	@ 0x444
 8003c7e:	4013      	ands	r3, r2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d107      	bne.n	8003c94 <HAL_TIM_PWM_Stop_DMA+0x114>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c92:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6a1a      	ldr	r2, [r3, #32]
 8003c9a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d10f      	bne.n	8003cc4 <HAL_TIM_PWM_Stop_DMA+0x144>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6a1a      	ldr	r2, [r3, #32]
 8003caa:	f240 4344 	movw	r3, #1092	@ 0x444
 8003cae:	4013      	ands	r3, r2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d107      	bne.n	8003cc4 <HAL_TIM_PWM_Stop_DMA+0x144>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 0201 	bic.w	r2, r2, #1
 8003cc2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d104      	bne.n	8003cd4 <HAL_TIM_PWM_Stop_DMA+0x154>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003cd2:	e013      	b.n	8003cfc <HAL_TIM_PWM_Stop_DMA+0x17c>
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	2b04      	cmp	r3, #4
 8003cd8:	d104      	bne.n	8003ce4 <HAL_TIM_PWM_Stop_DMA+0x164>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ce2:	e00b      	b.n	8003cfc <HAL_TIM_PWM_Stop_DMA+0x17c>
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	2b08      	cmp	r3, #8
 8003ce8:	d104      	bne.n	8003cf4 <HAL_TIM_PWM_Stop_DMA+0x174>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003cf2:	e003      	b.n	8003cfc <HAL_TIM_PWM_Stop_DMA+0x17c>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8003cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	40012c00 	.word	0x40012c00

08003d0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d101      	bne.n	8003d2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d26:	2302      	movs	r3, #2
 8003d28:	e0ae      	b.n	8003e88 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2b0c      	cmp	r3, #12
 8003d36:	f200 809f 	bhi.w	8003e78 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003d3a:	a201      	add	r2, pc, #4	@ (adr r2, 8003d40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d40:	08003d75 	.word	0x08003d75
 8003d44:	08003e79 	.word	0x08003e79
 8003d48:	08003e79 	.word	0x08003e79
 8003d4c:	08003e79 	.word	0x08003e79
 8003d50:	08003db5 	.word	0x08003db5
 8003d54:	08003e79 	.word	0x08003e79
 8003d58:	08003e79 	.word	0x08003e79
 8003d5c:	08003e79 	.word	0x08003e79
 8003d60:	08003df7 	.word	0x08003df7
 8003d64:	08003e79 	.word	0x08003e79
 8003d68:	08003e79 	.word	0x08003e79
 8003d6c:	08003e79 	.word	0x08003e79
 8003d70:	08003e37 	.word	0x08003e37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68b9      	ldr	r1, [r7, #8]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f000 faa0 	bl	80042c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	699a      	ldr	r2, [r3, #24]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f042 0208 	orr.w	r2, r2, #8
 8003d8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	699a      	ldr	r2, [r3, #24]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0204 	bic.w	r2, r2, #4
 8003d9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	6999      	ldr	r1, [r3, #24]
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	691a      	ldr	r2, [r3, #16]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	430a      	orrs	r2, r1
 8003db0:	619a      	str	r2, [r3, #24]
      break;
 8003db2:	e064      	b.n	8003e7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68b9      	ldr	r1, [r7, #8]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f000 fae6 	bl	800438c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	699a      	ldr	r2, [r3, #24]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	699a      	ldr	r2, [r3, #24]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6999      	ldr	r1, [r3, #24]
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	021a      	lsls	r2, r3, #8
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	430a      	orrs	r2, r1
 8003df2:	619a      	str	r2, [r3, #24]
      break;
 8003df4:	e043      	b.n	8003e7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68b9      	ldr	r1, [r7, #8]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 fb2f 	bl	8004460 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	69da      	ldr	r2, [r3, #28]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f042 0208 	orr.w	r2, r2, #8
 8003e10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	69da      	ldr	r2, [r3, #28]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 0204 	bic.w	r2, r2, #4
 8003e20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	69d9      	ldr	r1, [r3, #28]
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	691a      	ldr	r2, [r3, #16]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	430a      	orrs	r2, r1
 8003e32:	61da      	str	r2, [r3, #28]
      break;
 8003e34:	e023      	b.n	8003e7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68b9      	ldr	r1, [r7, #8]
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 fb79 	bl	8004534 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	69da      	ldr	r2, [r3, #28]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	69da      	ldr	r2, [r3, #28]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	69d9      	ldr	r1, [r3, #28]
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	021a      	lsls	r2, r3, #8
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	430a      	orrs	r2, r1
 8003e74:	61da      	str	r2, [r3, #28]
      break;
 8003e76:	e002      	b.n	8003e7e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e7c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3718      	adds	r7, #24
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d101      	bne.n	8003eac <HAL_TIM_ConfigClockSource+0x1c>
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	e0b4      	b.n	8004016 <HAL_TIM_ConfigClockSource+0x186>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003eca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ed2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ee4:	d03e      	beq.n	8003f64 <HAL_TIM_ConfigClockSource+0xd4>
 8003ee6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003eea:	f200 8087 	bhi.w	8003ffc <HAL_TIM_ConfigClockSource+0x16c>
 8003eee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ef2:	f000 8086 	beq.w	8004002 <HAL_TIM_ConfigClockSource+0x172>
 8003ef6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003efa:	d87f      	bhi.n	8003ffc <HAL_TIM_ConfigClockSource+0x16c>
 8003efc:	2b70      	cmp	r3, #112	@ 0x70
 8003efe:	d01a      	beq.n	8003f36 <HAL_TIM_ConfigClockSource+0xa6>
 8003f00:	2b70      	cmp	r3, #112	@ 0x70
 8003f02:	d87b      	bhi.n	8003ffc <HAL_TIM_ConfigClockSource+0x16c>
 8003f04:	2b60      	cmp	r3, #96	@ 0x60
 8003f06:	d050      	beq.n	8003faa <HAL_TIM_ConfigClockSource+0x11a>
 8003f08:	2b60      	cmp	r3, #96	@ 0x60
 8003f0a:	d877      	bhi.n	8003ffc <HAL_TIM_ConfigClockSource+0x16c>
 8003f0c:	2b50      	cmp	r3, #80	@ 0x50
 8003f0e:	d03c      	beq.n	8003f8a <HAL_TIM_ConfigClockSource+0xfa>
 8003f10:	2b50      	cmp	r3, #80	@ 0x50
 8003f12:	d873      	bhi.n	8003ffc <HAL_TIM_ConfigClockSource+0x16c>
 8003f14:	2b40      	cmp	r3, #64	@ 0x40
 8003f16:	d058      	beq.n	8003fca <HAL_TIM_ConfigClockSource+0x13a>
 8003f18:	2b40      	cmp	r3, #64	@ 0x40
 8003f1a:	d86f      	bhi.n	8003ffc <HAL_TIM_ConfigClockSource+0x16c>
 8003f1c:	2b30      	cmp	r3, #48	@ 0x30
 8003f1e:	d064      	beq.n	8003fea <HAL_TIM_ConfigClockSource+0x15a>
 8003f20:	2b30      	cmp	r3, #48	@ 0x30
 8003f22:	d86b      	bhi.n	8003ffc <HAL_TIM_ConfigClockSource+0x16c>
 8003f24:	2b20      	cmp	r3, #32
 8003f26:	d060      	beq.n	8003fea <HAL_TIM_ConfigClockSource+0x15a>
 8003f28:	2b20      	cmp	r3, #32
 8003f2a:	d867      	bhi.n	8003ffc <HAL_TIM_ConfigClockSource+0x16c>
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d05c      	beq.n	8003fea <HAL_TIM_ConfigClockSource+0x15a>
 8003f30:	2b10      	cmp	r3, #16
 8003f32:	d05a      	beq.n	8003fea <HAL_TIM_ConfigClockSource+0x15a>
 8003f34:	e062      	b.n	8003ffc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f46:	f000 fbba 	bl	80046be <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003f58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	609a      	str	r2, [r3, #8]
      break;
 8003f62:	e04f      	b.n	8004004 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f74:	f000 fba3 	bl	80046be <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689a      	ldr	r2, [r3, #8]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f86:	609a      	str	r2, [r3, #8]
      break;
 8003f88:	e03c      	b.n	8004004 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f96:	461a      	mov	r2, r3
 8003f98:	f000 fb1a 	bl	80045d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2150      	movs	r1, #80	@ 0x50
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 fb71 	bl	800468a <TIM_ITRx_SetConfig>
      break;
 8003fa8:	e02c      	b.n	8004004 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	f000 fb38 	bl	800462c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2160      	movs	r1, #96	@ 0x60
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 fb61 	bl	800468a <TIM_ITRx_SetConfig>
      break;
 8003fc8:	e01c      	b.n	8004004 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	f000 fafa 	bl	80045d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2140      	movs	r1, #64	@ 0x40
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 fb51 	bl	800468a <TIM_ITRx_SetConfig>
      break;
 8003fe8:	e00c      	b.n	8004004 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	4610      	mov	r0, r2
 8003ff6:	f000 fb48 	bl	800468a <TIM_ITRx_SetConfig>
      break;
 8003ffa:	e003      	b.n	8004004 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	73fb      	strb	r3, [r7, #15]
      break;
 8004000:	e000      	b.n	8004004 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004002:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004014:	7bfb      	ldrb	r3, [r7, #15]
}
 8004016:	4618      	mov	r0, r3
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800401e:	b480      	push	{r7}
 8004020:	b083      	sub	sp, #12
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004026:	bf00      	nop
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	bc80      	pop	{r7}
 800402e:	4770      	bx	lr

08004030 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	bc80      	pop	{r7}
 8004040:	4770      	bx	lr

08004042 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004042:	b580      	push	{r7, lr}
 8004044:	b084      	sub	sp, #16
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	429a      	cmp	r2, r3
 8004058:	d107      	bne.n	800406a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2201      	movs	r2, #1
 800405e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004068:	e02a      	b.n	80040c0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	429a      	cmp	r2, r3
 8004072:	d107      	bne.n	8004084 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2202      	movs	r2, #2
 8004078:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004082:	e01d      	b.n	80040c0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	429a      	cmp	r2, r3
 800408c:	d107      	bne.n	800409e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2204      	movs	r2, #4
 8004092:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800409c:	e010      	b.n	80040c0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d107      	bne.n	80040b8 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2208      	movs	r2, #8
 80040ac:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80040b6:	e003      	b.n	80040c0 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f7ff ffb5 	bl	8004030 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	771a      	strb	r2, [r3, #28]
}
 80040cc:	bf00      	nop
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d10b      	bne.n	8004104 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2201      	movs	r2, #1
 80040f0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d136      	bne.n	8004168 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004102:	e031      	b.n	8004168 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	429a      	cmp	r2, r3
 800410c:	d10b      	bne.n	8004126 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2202      	movs	r2, #2
 8004112:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d125      	bne.n	8004168 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004124:	e020      	b.n	8004168 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	429a      	cmp	r2, r3
 800412e:	d10b      	bne.n	8004148 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2204      	movs	r2, #4
 8004134:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d114      	bne.n	8004168 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004146:	e00f      	b.n	8004168 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	429a      	cmp	r2, r3
 8004150:	d10a      	bne.n	8004168 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2208      	movs	r2, #8
 8004156:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d103      	bne.n	8004168 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004168:	68f8      	ldr	r0, [r7, #12]
 800416a:	f7fc fd47 	bl	8000bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	771a      	strb	r2, [r3, #28]
}
 8004174:	bf00      	nop
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004188:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	429a      	cmp	r2, r3
 8004192:	d103      	bne.n	800419c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2201      	movs	r2, #1
 8004198:	771a      	strb	r2, [r3, #28]
 800419a:	e019      	b.n	80041d0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d103      	bne.n	80041ae <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2202      	movs	r2, #2
 80041aa:	771a      	strb	r2, [r3, #28]
 80041ac:	e010      	b.n	80041d0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d103      	bne.n	80041c0 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2204      	movs	r2, #4
 80041bc:	771a      	strb	r2, [r3, #28]
 80041be:	e007      	b.n	80041d0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d102      	bne.n	80041d0 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2208      	movs	r2, #8
 80041ce:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f7ff ff24 	bl	800401e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	771a      	strb	r2, [r3, #28]
}
 80041dc:	bf00      	nop
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a2f      	ldr	r2, [pc, #188]	@ (80042b4 <TIM_Base_SetConfig+0xd0>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d00b      	beq.n	8004214 <TIM_Base_SetConfig+0x30>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004202:	d007      	beq.n	8004214 <TIM_Base_SetConfig+0x30>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a2c      	ldr	r2, [pc, #176]	@ (80042b8 <TIM_Base_SetConfig+0xd4>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d003      	beq.n	8004214 <TIM_Base_SetConfig+0x30>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a2b      	ldr	r2, [pc, #172]	@ (80042bc <TIM_Base_SetConfig+0xd8>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d108      	bne.n	8004226 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800421a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	4313      	orrs	r3, r2
 8004224:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a22      	ldr	r2, [pc, #136]	@ (80042b4 <TIM_Base_SetConfig+0xd0>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d00b      	beq.n	8004246 <TIM_Base_SetConfig+0x62>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004234:	d007      	beq.n	8004246 <TIM_Base_SetConfig+0x62>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a1f      	ldr	r2, [pc, #124]	@ (80042b8 <TIM_Base_SetConfig+0xd4>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d003      	beq.n	8004246 <TIM_Base_SetConfig+0x62>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a1e      	ldr	r2, [pc, #120]	@ (80042bc <TIM_Base_SetConfig+0xd8>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d108      	bne.n	8004258 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800424c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	4313      	orrs	r3, r2
 8004256:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	4313      	orrs	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a0d      	ldr	r2, [pc, #52]	@ (80042b4 <TIM_Base_SetConfig+0xd0>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d103      	bne.n	800428c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	691a      	ldr	r2, [r3, #16]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b00      	cmp	r3, #0
 800429c:	d005      	beq.n	80042aa <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	f023 0201 	bic.w	r2, r3, #1
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	611a      	str	r2, [r3, #16]
  }
}
 80042aa:	bf00      	nop
 80042ac:	3714      	adds	r7, #20
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bc80      	pop	{r7}
 80042b2:	4770      	bx	lr
 80042b4:	40012c00 	.word	0x40012c00
 80042b8:	40000400 	.word	0x40000400
 80042bc:	40000800 	.word	0x40000800

080042c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b087      	sub	sp, #28
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a1b      	ldr	r3, [r3, #32]
 80042d4:	f023 0201 	bic.w	r2, r3, #1
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f023 0303 	bic.w	r3, r3, #3
 80042f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	4313      	orrs	r3, r2
 8004300:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f023 0302 	bic.w	r3, r3, #2
 8004308:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	4313      	orrs	r3, r2
 8004312:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a1c      	ldr	r2, [pc, #112]	@ (8004388 <TIM_OC1_SetConfig+0xc8>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d10c      	bne.n	8004336 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	f023 0308 	bic.w	r3, r3, #8
 8004322:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	4313      	orrs	r3, r2
 800432c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	f023 0304 	bic.w	r3, r3, #4
 8004334:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a13      	ldr	r2, [pc, #76]	@ (8004388 <TIM_OC1_SetConfig+0xc8>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d111      	bne.n	8004362 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004344:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800434c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	4313      	orrs	r3, r2
 8004356:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	4313      	orrs	r3, r2
 8004360:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	697a      	ldr	r2, [r7, #20]
 800437a:	621a      	str	r2, [r3, #32]
}
 800437c:	bf00      	nop
 800437e:	371c      	adds	r7, #28
 8004380:	46bd      	mov	sp, r7
 8004382:	bc80      	pop	{r7}
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	40012c00 	.word	0x40012c00

0800438c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800438c:	b480      	push	{r7}
 800438e:	b087      	sub	sp, #28
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a1b      	ldr	r3, [r3, #32]
 80043a0:	f023 0210 	bic.w	r2, r3, #16
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	021b      	lsls	r3, r3, #8
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	f023 0320 	bic.w	r3, r3, #32
 80043d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	011b      	lsls	r3, r3, #4
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a1d      	ldr	r2, [pc, #116]	@ (800445c <TIM_OC2_SetConfig+0xd0>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d10d      	bne.n	8004408 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	011b      	lsls	r3, r3, #4
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004406:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a14      	ldr	r2, [pc, #80]	@ (800445c <TIM_OC2_SetConfig+0xd0>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d113      	bne.n	8004438 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004416:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800441e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	695b      	ldr	r3, [r3, #20]
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	4313      	orrs	r3, r2
 800442a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	4313      	orrs	r3, r2
 8004436:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	621a      	str	r2, [r3, #32]
}
 8004452:	bf00      	nop
 8004454:	371c      	adds	r7, #28
 8004456:	46bd      	mov	sp, r7
 8004458:	bc80      	pop	{r7}
 800445a:	4770      	bx	lr
 800445c:	40012c00 	.word	0x40012c00

08004460 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004460:	b480      	push	{r7}
 8004462:	b087      	sub	sp, #28
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a1b      	ldr	r3, [r3, #32]
 8004474:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800448e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f023 0303 	bic.w	r3, r3, #3
 8004496:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	4313      	orrs	r3, r2
 80044a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80044a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	021b      	lsls	r3, r3, #8
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a1d      	ldr	r2, [pc, #116]	@ (8004530 <TIM_OC3_SetConfig+0xd0>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d10d      	bne.n	80044da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80044c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	021b      	lsls	r3, r3, #8
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80044d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a14      	ldr	r2, [pc, #80]	@ (8004530 <TIM_OC3_SetConfig+0xd0>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d113      	bne.n	800450a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80044e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80044f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	011b      	lsls	r3, r3, #4
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	011b      	lsls	r3, r3, #4
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	4313      	orrs	r3, r2
 8004508:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	621a      	str	r2, [r3, #32]
}
 8004524:	bf00      	nop
 8004526:	371c      	adds	r7, #28
 8004528:	46bd      	mov	sp, r7
 800452a:	bc80      	pop	{r7}
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	40012c00 	.word	0x40012c00

08004534 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004534:	b480      	push	{r7}
 8004536:	b087      	sub	sp, #28
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	69db      	ldr	r3, [r3, #28]
 800455a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800456a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	021b      	lsls	r3, r3, #8
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	4313      	orrs	r3, r2
 8004576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800457e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	031b      	lsls	r3, r3, #12
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	4313      	orrs	r3, r2
 800458a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a0f      	ldr	r2, [pc, #60]	@ (80045cc <TIM_OC4_SetConfig+0x98>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d109      	bne.n	80045a8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800459a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	019b      	lsls	r3, r3, #6
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	685a      	ldr	r2, [r3, #4]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	621a      	str	r2, [r3, #32]
}
 80045c2:	bf00      	nop
 80045c4:	371c      	adds	r7, #28
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bc80      	pop	{r7}
 80045ca:	4770      	bx	lr
 80045cc:	40012c00 	.word	0x40012c00

080045d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b087      	sub	sp, #28
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	f023 0201 	bic.w	r2, r3, #1
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	011b      	lsls	r3, r3, #4
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	4313      	orrs	r3, r2
 8004604:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	f023 030a 	bic.w	r3, r3, #10
 800460c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	4313      	orrs	r3, r2
 8004614:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	697a      	ldr	r2, [r7, #20]
 8004620:	621a      	str	r2, [r3, #32]
}
 8004622:	bf00      	nop
 8004624:	371c      	adds	r7, #28
 8004626:	46bd      	mov	sp, r7
 8004628:	bc80      	pop	{r7}
 800462a:	4770      	bx	lr

0800462c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800462c:	b480      	push	{r7}
 800462e:	b087      	sub	sp, #28
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	f023 0210 	bic.w	r2, r3, #16
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004656:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	031b      	lsls	r3, r3, #12
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	4313      	orrs	r3, r2
 8004660:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004668:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	011b      	lsls	r3, r3, #4
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	4313      	orrs	r3, r2
 8004672:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	693a      	ldr	r2, [r7, #16]
 8004678:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	697a      	ldr	r2, [r7, #20]
 800467e:	621a      	str	r2, [r3, #32]
}
 8004680:	bf00      	nop
 8004682:	371c      	adds	r7, #28
 8004684:	46bd      	mov	sp, r7
 8004686:	bc80      	pop	{r7}
 8004688:	4770      	bx	lr

0800468a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800468a:	b480      	push	{r7}
 800468c:	b085      	sub	sp, #20
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
 8004692:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	f043 0307 	orr.w	r3, r3, #7
 80046ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	609a      	str	r2, [r3, #8]
}
 80046b4:	bf00      	nop
 80046b6:	3714      	adds	r7, #20
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bc80      	pop	{r7}
 80046bc:	4770      	bx	lr

080046be <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046be:	b480      	push	{r7}
 80046c0:	b087      	sub	sp, #28
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	60f8      	str	r0, [r7, #12]
 80046c6:	60b9      	str	r1, [r7, #8]
 80046c8:	607a      	str	r2, [r7, #4]
 80046ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80046d8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	021a      	lsls	r2, r3, #8
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	431a      	orrs	r2, r3
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	609a      	str	r2, [r3, #8]
}
 80046f2:	bf00      	nop
 80046f4:	371c      	adds	r7, #28
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bc80      	pop	{r7}
 80046fa:	4770      	bx	lr

080046fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b087      	sub	sp, #28
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	f003 031f 	and.w	r3, r3, #31
 800470e:	2201      	movs	r2, #1
 8004710:	fa02 f303 	lsl.w	r3, r2, r3
 8004714:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6a1a      	ldr	r2, [r3, #32]
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	43db      	mvns	r3, r3
 800471e:	401a      	ands	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6a1a      	ldr	r2, [r3, #32]
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	f003 031f 	and.w	r3, r3, #31
 800472e:	6879      	ldr	r1, [r7, #4]
 8004730:	fa01 f303 	lsl.w	r3, r1, r3
 8004734:	431a      	orrs	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	621a      	str	r2, [r3, #32]
}
 800473a:	bf00      	nop
 800473c:	371c      	adds	r7, #28
 800473e:	46bd      	mov	sp, r7
 8004740:	bc80      	pop	{r7}
 8004742:	4770      	bx	lr

08004744 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004754:	2b01      	cmp	r3, #1
 8004756:	d101      	bne.n	800475c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004758:	2302      	movs	r3, #2
 800475a:	e046      	b.n	80047ea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2202      	movs	r2, #2
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004782:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	4313      	orrs	r3, r2
 800478c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a16      	ldr	r2, [pc, #88]	@ (80047f4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d00e      	beq.n	80047be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047a8:	d009      	beq.n	80047be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a12      	ldr	r2, [pc, #72]	@ (80047f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d004      	beq.n	80047be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a10      	ldr	r2, [pc, #64]	@ (80047fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d10c      	bne.n	80047d8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3714      	adds	r7, #20
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bc80      	pop	{r7}
 80047f2:	4770      	bx	lr
 80047f4:	40012c00 	.word	0x40012c00
 80047f8:	40000400 	.word	0x40000400
 80047fc:	40000800 	.word	0x40000800

08004800 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800480a:	2300      	movs	r3, #0
 800480c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004814:	2b01      	cmp	r3, #1
 8004816:	d101      	bne.n	800481c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004818:	2302      	movs	r3, #2
 800481a:	e03d      	b.n	8004898 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	4313      	orrs	r3, r2
 8004830:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	4313      	orrs	r3, r2
 800483e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	4313      	orrs	r3, r2
 800484c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4313      	orrs	r3, r2
 800485a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	4313      	orrs	r3, r2
 8004868:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	4313      	orrs	r3, r2
 8004876:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	69db      	ldr	r3, [r3, #28]
 8004882:	4313      	orrs	r3, r2
 8004884:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3714      	adds	r7, #20
 800489c:	46bd      	mov	sp, r7
 800489e:	bc80      	pop	{r7}
 80048a0:	4770      	bx	lr

080048a2 <memset>:
 80048a2:	4603      	mov	r3, r0
 80048a4:	4402      	add	r2, r0
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d100      	bne.n	80048ac <memset+0xa>
 80048aa:	4770      	bx	lr
 80048ac:	f803 1b01 	strb.w	r1, [r3], #1
 80048b0:	e7f9      	b.n	80048a6 <memset+0x4>
	...

080048b4 <__libc_init_array>:
 80048b4:	b570      	push	{r4, r5, r6, lr}
 80048b6:	2600      	movs	r6, #0
 80048b8:	4d0c      	ldr	r5, [pc, #48]	@ (80048ec <__libc_init_array+0x38>)
 80048ba:	4c0d      	ldr	r4, [pc, #52]	@ (80048f0 <__libc_init_array+0x3c>)
 80048bc:	1b64      	subs	r4, r4, r5
 80048be:	10a4      	asrs	r4, r4, #2
 80048c0:	42a6      	cmp	r6, r4
 80048c2:	d109      	bne.n	80048d8 <__libc_init_array+0x24>
 80048c4:	f000 f81a 	bl	80048fc <_init>
 80048c8:	2600      	movs	r6, #0
 80048ca:	4d0a      	ldr	r5, [pc, #40]	@ (80048f4 <__libc_init_array+0x40>)
 80048cc:	4c0a      	ldr	r4, [pc, #40]	@ (80048f8 <__libc_init_array+0x44>)
 80048ce:	1b64      	subs	r4, r4, r5
 80048d0:	10a4      	asrs	r4, r4, #2
 80048d2:	42a6      	cmp	r6, r4
 80048d4:	d105      	bne.n	80048e2 <__libc_init_array+0x2e>
 80048d6:	bd70      	pop	{r4, r5, r6, pc}
 80048d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80048dc:	4798      	blx	r3
 80048de:	3601      	adds	r6, #1
 80048e0:	e7ee      	b.n	80048c0 <__libc_init_array+0xc>
 80048e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80048e6:	4798      	blx	r3
 80048e8:	3601      	adds	r6, #1
 80048ea:	e7f2      	b.n	80048d2 <__libc_init_array+0x1e>
 80048ec:	08004a9c 	.word	0x08004a9c
 80048f0:	08004a9c 	.word	0x08004a9c
 80048f4:	08004a9c 	.word	0x08004a9c
 80048f8:	08004aa0 	.word	0x08004aa0

080048fc <_init>:
 80048fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048fe:	bf00      	nop
 8004900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004902:	bc08      	pop	{r3}
 8004904:	469e      	mov	lr, r3
 8004906:	4770      	bx	lr

08004908 <_fini>:
 8004908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800490a:	bf00      	nop
 800490c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800490e:	bc08      	pop	{r3}
 8004910:	469e      	mov	lr, r3
 8004912:	4770      	bx	lr
