
led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005704  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  08005810  08005810  00006810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a68  08005a68  00007064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005a68  08005a68  00007064  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005a68  08005a68  00007064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a68  08005a68  00006a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a6c  08005a6c  00006a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08005a70  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013a4  20000064  08005ad4  00007064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001408  08005ad4  00007408  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac3c  00000000  00000000  0000708d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f54  00000000  00000000  00011cc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  00013c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000096c  00000000  00000000  00014858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001878a  00000000  00000000  000151c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dfc0  00000000  00000000  0002d94e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e3a4  00000000  00000000  0003b90e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c9cb2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003838  00000000  00000000  000c9cf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000cd530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	080057f8 	.word	0x080057f8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	080057f8 	.word	0x080057f8

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2uiz>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	d20e      	bcs.n	800062a <__aeabi_f2uiz+0x22>
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000610:	d30b      	bcc.n	800062a <__aeabi_f2uiz+0x22>
 8000612:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d409      	bmi.n	8000630 <__aeabi_f2uiz+0x28>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000624:	fa23 f002 	lsr.w	r0, r3, r2
 8000628:	4770      	bx	lr
 800062a:	f04f 0000 	mov.w	r0, #0
 800062e:	4770      	bx	lr
 8000630:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000634:	d101      	bne.n	800063a <__aeabi_f2uiz+0x32>
 8000636:	0242      	lsls	r2, r0, #9
 8000638:	d102      	bne.n	8000640 <__aeabi_f2uiz+0x38>
 800063a:	f04f 30ff 	mov.w	r0, #4294967295
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <LCD_Parallel_Init>:
#include "lcd_parallel.h"
#include <string.h>
#include <stdio.h>

void LCD_Parallel_Init(void) {
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
    // Initialize GPIO pins
    LCD_Parallel_GPIO_Init();
 800064c:	f000 f840 	bl	80006d0 <LCD_Parallel_GPIO_Init>
    
    // Wait for LCD to power up completely
    HAL_Delay(100);
 8000650:	2064      	movs	r0, #100	@ 0x64
 8000652:	f001 fc3d 	bl	8001ed0 <HAL_Delay>
    
    // Set RS = 0 (command mode)
    HAL_GPIO_WritePin(LCD_RS_PORT, LCD_RS_PIN, GPIO_PIN_RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	2101      	movs	r1, #1
 800065a:	481c      	ldr	r0, [pc, #112]	@ (80006cc <LCD_Parallel_Init+0x84>)
 800065c:	f002 fdac 	bl	80031b8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_E_PORT, LCD_E_PIN, GPIO_PIN_RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	2102      	movs	r1, #2
 8000664:	4819      	ldr	r0, [pc, #100]	@ (80006cc <LCD_Parallel_Init+0x84>)
 8000666:	f002 fda7 	bl	80031b8 <HAL_GPIO_WritePin>
    
    // Initialize LCD in 4-bit mode according to datasheet timing
    // First: Send 0x3 three times to establish 8-bit communication
    LCD_Parallel_Write4Bits(0x03);
 800066a:	2003      	movs	r0, #3
 800066c:	f000 f90a 	bl	8000884 <LCD_Parallel_Write4Bits>
    HAL_Delay(10);  // Wait > 4.1ms
 8000670:	200a      	movs	r0, #10
 8000672:	f001 fc2d 	bl	8001ed0 <HAL_Delay>
    
    LCD_Parallel_Write4Bits(0x03);
 8000676:	2003      	movs	r0, #3
 8000678:	f000 f904 	bl	8000884 <LCD_Parallel_Write4Bits>
    HAL_Delay(5);   // Wait > 100us
 800067c:	2005      	movs	r0, #5
 800067e:	f001 fc27 	bl	8001ed0 <HAL_Delay>
    
    LCD_Parallel_Write4Bits(0x03);
 8000682:	2003      	movs	r0, #3
 8000684:	f000 f8fe 	bl	8000884 <LCD_Parallel_Write4Bits>
    HAL_Delay(5);   // Wait > 100us
 8000688:	2005      	movs	r0, #5
 800068a:	f001 fc21 	bl	8001ed0 <HAL_Delay>
    
    // Switch to 4-bit mode
    LCD_Parallel_Write4Bits(0x02);
 800068e:	2002      	movs	r0, #2
 8000690:	f000 f8f8 	bl	8000884 <LCD_Parallel_Write4Bits>
    HAL_Delay(5);
 8000694:	2005      	movs	r0, #5
 8000696:	f001 fc1b 	bl	8001ed0 <HAL_Delay>
    
    // Function set: 4-bit, 2 line, 5x8 dots
    LCD_Parallel_SendCommand(LCD_FUNCTION_SET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
 800069a:	2028      	movs	r0, #40	@ 0x28
 800069c:	f000 f8af 	bl	80007fe <LCD_Parallel_SendCommand>
    HAL_Delay(5);
 80006a0:	2005      	movs	r0, #5
 80006a2:	f001 fc15 	bl	8001ed0 <HAL_Delay>
    
    // Display control: display on, cursor off, blink off
    LCD_Parallel_SendCommand(LCD_DISPLAY_CONTROL | LCD_DISPLAY_ON | LCD_CURSOR_OFF | LCD_BLINK_OFF);
 80006a6:	200c      	movs	r0, #12
 80006a8:	f000 f8a9 	bl	80007fe <LCD_Parallel_SendCommand>
    HAL_Delay(5);
 80006ac:	2005      	movs	r0, #5
 80006ae:	f001 fc0f 	bl	8001ed0 <HAL_Delay>
    
    // Clear display
    LCD_Parallel_Clear();
 80006b2:	f000 f85b 	bl	800076c <LCD_Parallel_Clear>
    HAL_Delay(5);
 80006b6:	2005      	movs	r0, #5
 80006b8:	f001 fc0a 	bl	8001ed0 <HAL_Delay>
    
    // Entry mode: left to right, no shift
    LCD_Parallel_SendCommand(LCD_ENTRY_MODE_SET | LCD_ENTRY_LEFT | LCD_ENTRY_SHIFT_DECREMENT);
 80006bc:	2006      	movs	r0, #6
 80006be:	f000 f89e 	bl	80007fe <LCD_Parallel_SendCommand>
    HAL_Delay(5);
 80006c2:	2005      	movs	r0, #5
 80006c4:	f001 fc04 	bl	8001ed0 <HAL_Delay>
}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40010c00 	.word	0x40010c00

080006d0 <LCD_Parallel_GPIO_Init>:

void LCD_Parallel_GPIO_Init(void) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	f107 0308 	add.w	r3, r7, #8
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
    
    // Enable GPIOB clock
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e4:	4b1f      	ldr	r3, [pc, #124]	@ (8000764 <LCD_Parallel_GPIO_Init+0x94>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	4a1e      	ldr	r2, [pc, #120]	@ (8000764 <LCD_Parallel_GPIO_Init+0x94>)
 80006ea:	f043 0308 	orr.w	r3, r3, #8
 80006ee:	6193      	str	r3, [r2, #24]
 80006f0:	4b1c      	ldr	r3, [pc, #112]	@ (8000764 <LCD_Parallel_GPIO_Init+0x94>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	f003 0308 	and.w	r3, r3, #8
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]
    
    // Configure RS pin (PB0)
    GPIO_InitStruct.Pin = LCD_RS_PIN;
 80006fc:	2301      	movs	r3, #1
 80006fe:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000700:	2301      	movs	r3, #1
 8000702:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	2300      	movs	r3, #0
 8000706:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000708:	2302      	movs	r3, #2
 800070a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LCD_RS_PORT, &GPIO_InitStruct);
 800070c:	f107 0308 	add.w	r3, r7, #8
 8000710:	4619      	mov	r1, r3
 8000712:	4815      	ldr	r0, [pc, #84]	@ (8000768 <LCD_Parallel_GPIO_Init+0x98>)
 8000714:	f002 fbcc 	bl	8002eb0 <HAL_GPIO_Init>
    
    // Configure E pin (PB1)
    GPIO_InitStruct.Pin = LCD_E_PIN;
 8000718:	2302      	movs	r3, #2
 800071a:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(LCD_E_PORT, &GPIO_InitStruct);
 800071c:	f107 0308 	add.w	r3, r7, #8
 8000720:	4619      	mov	r1, r3
 8000722:	4811      	ldr	r0, [pc, #68]	@ (8000768 <LCD_Parallel_GPIO_Init+0x98>)
 8000724:	f002 fbc4 	bl	8002eb0 <HAL_GPIO_Init>
    
    // Configure Data pins (PB12, PB13, PB14, PB15)
    GPIO_InitStruct.Pin = LCD_D4_PIN | LCD_D5_PIN | LCD_D6_PIN | LCD_D7_PIN;
 8000728:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800072c:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(LCD_D4_PORT, &GPIO_InitStruct);
 800072e:	f107 0308 	add.w	r3, r7, #8
 8000732:	4619      	mov	r1, r3
 8000734:	480c      	ldr	r0, [pc, #48]	@ (8000768 <LCD_Parallel_GPIO_Init+0x98>)
 8000736:	f002 fbbb 	bl	8002eb0 <HAL_GPIO_Init>
    
    // Initialize all pins to LOW
    HAL_GPIO_WritePin(LCD_RS_PORT, LCD_RS_PIN, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	2101      	movs	r1, #1
 800073e:	480a      	ldr	r0, [pc, #40]	@ (8000768 <LCD_Parallel_GPIO_Init+0x98>)
 8000740:	f002 fd3a 	bl	80031b8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_E_PORT, LCD_E_PIN, GPIO_PIN_RESET);
 8000744:	2200      	movs	r2, #0
 8000746:	2102      	movs	r1, #2
 8000748:	4807      	ldr	r0, [pc, #28]	@ (8000768 <LCD_Parallel_GPIO_Init+0x98>)
 800074a:	f002 fd35 	bl	80031b8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D4_PORT, LCD_D4_PIN | LCD_D5_PIN | LCD_D6_PIN | LCD_D7_PIN, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000754:	4804      	ldr	r0, [pc, #16]	@ (8000768 <LCD_Parallel_GPIO_Init+0x98>)
 8000756:	f002 fd2f 	bl	80031b8 <HAL_GPIO_WritePin>
}
 800075a:	bf00      	nop
 800075c:	3718      	adds	r7, #24
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40021000 	.word	0x40021000
 8000768:	40010c00 	.word	0x40010c00

0800076c <LCD_Parallel_Clear>:

void LCD_Parallel_Clear(void) {
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
    LCD_Parallel_SendCommand(LCD_CLEAR_DISPLAY);
 8000770:	2001      	movs	r0, #1
 8000772:	f000 f844 	bl	80007fe <LCD_Parallel_SendCommand>
    HAL_Delay(2);
 8000776:	2002      	movs	r0, #2
 8000778:	f001 fbaa 	bl	8001ed0 <HAL_Delay>
}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}

08000780 <LCD_Parallel_SetCursor>:

void LCD_Parallel_SetCursor(uint8_t row, uint8_t col) {
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	460a      	mov	r2, r1
 800078a:	71fb      	strb	r3, [r7, #7]
 800078c:	4613      	mov	r3, r2
 800078e:	71bb      	strb	r3, [r7, #6]
    uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 8000790:	4b0f      	ldr	r3, [pc, #60]	@ (80007d0 <LCD_Parallel_SetCursor+0x50>)
 8000792:	60fb      	str	r3, [r7, #12]
    if (row >= LCD_ROWS) {
 8000794:	79fb      	ldrb	r3, [r7, #7]
 8000796:	2b01      	cmp	r3, #1
 8000798:	d901      	bls.n	800079e <LCD_Parallel_SetCursor+0x1e>
        row = LCD_ROWS - 1;
 800079a:	2301      	movs	r3, #1
 800079c:	71fb      	strb	r3, [r7, #7]
    }
    if (col >= LCD_COLS) {
 800079e:	79bb      	ldrb	r3, [r7, #6]
 80007a0:	2b0f      	cmp	r3, #15
 80007a2:	d901      	bls.n	80007a8 <LCD_Parallel_SetCursor+0x28>
        col = LCD_COLS - 1;
 80007a4:	230f      	movs	r3, #15
 80007a6:	71bb      	strb	r3, [r7, #6]
    }
    LCD_Parallel_SendCommand(LCD_SET_DDRAM_ADDR | (col + row_offsets[row]));
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	3310      	adds	r3, #16
 80007ac:	443b      	add	r3, r7
 80007ae:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 80007b2:	79bb      	ldrb	r3, [r7, #6]
 80007b4:	4413      	add	r3, r2
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	b25b      	sxtb	r3, r3
 80007ba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80007be:	b25b      	sxtb	r3, r3
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 f81b 	bl	80007fe <LCD_Parallel_SendCommand>
}
 80007c8:	bf00      	nop
 80007ca:	3710      	adds	r7, #16
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	54144000 	.word	0x54144000

080007d4 <LCD_Parallel_Print>:

void LCD_Parallel_Print(char *str) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
    while (*str) {
 80007dc:	e006      	b.n	80007ec <LCD_Parallel_Print+0x18>
        LCD_Parallel_SendData(*str++);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	1c5a      	adds	r2, r3, #1
 80007e2:	607a      	str	r2, [r7, #4]
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 f817 	bl	800081a <LCD_Parallel_SendData>
    while (*str) {
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d1f4      	bne.n	80007de <LCD_Parallel_Print+0xa>
    }
}
 80007f4:	bf00      	nop
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <LCD_Parallel_SendCommand>:

void LCD_Parallel_WriteCustomChar(uint8_t location) {
    LCD_Parallel_SendData(location);
}

void LCD_Parallel_SendCommand(uint8_t cmd) {
 80007fe:	b580      	push	{r7, lr}
 8000800:	b082      	sub	sp, #8
 8000802:	af00      	add	r7, sp, #0
 8000804:	4603      	mov	r3, r0
 8000806:	71fb      	strb	r3, [r7, #7]
    LCD_Parallel_Send(cmd, 0);
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	2100      	movs	r1, #0
 800080c:	4618      	mov	r0, r3
 800080e:	f000 f813 	bl	8000838 <LCD_Parallel_Send>
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <LCD_Parallel_SendData>:

void LCD_Parallel_SendData(uint8_t data) {
 800081a:	b580      	push	{r7, lr}
 800081c:	b082      	sub	sp, #8
 800081e:	af00      	add	r7, sp, #0
 8000820:	4603      	mov	r3, r0
 8000822:	71fb      	strb	r3, [r7, #7]
    LCD_Parallel_Send(data, 1);
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	2101      	movs	r1, #1
 8000828:	4618      	mov	r0, r3
 800082a:	f000 f805 	bl	8000838 <LCD_Parallel_Send>
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <LCD_Parallel_Send>:

void LCD_Parallel_Send(uint8_t data, uint8_t rs) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	460a      	mov	r2, r1
 8000842:	71fb      	strb	r3, [r7, #7]
 8000844:	4613      	mov	r3, r2
 8000846:	71bb      	strb	r3, [r7, #6]
    // Set RS pin (0 = command, 1 = data)
    HAL_GPIO_WritePin(LCD_RS_PORT, LCD_RS_PIN, rs ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000848:	79bb      	ldrb	r3, [r7, #6]
 800084a:	2b00      	cmp	r3, #0
 800084c:	bf14      	ite	ne
 800084e:	2301      	movne	r3, #1
 8000850:	2300      	moveq	r3, #0
 8000852:	b2db      	uxtb	r3, r3
 8000854:	461a      	mov	r2, r3
 8000856:	2101      	movs	r1, #1
 8000858:	4809      	ldr	r0, [pc, #36]	@ (8000880 <LCD_Parallel_Send+0x48>)
 800085a:	f002 fcad 	bl	80031b8 <HAL_GPIO_WritePin>
    
    // Send upper 4 bits
    LCD_Parallel_Write4Bits(data >> 4);
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	091b      	lsrs	r3, r3, #4
 8000862:	b2db      	uxtb	r3, r3
 8000864:	4618      	mov	r0, r3
 8000866:	f000 f80d 	bl	8000884 <LCD_Parallel_Write4Bits>
    
    // Send lower 4 bits
    LCD_Parallel_Write4Bits(data & 0x0F);
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	f003 030f 	and.w	r3, r3, #15
 8000870:	b2db      	uxtb	r3, r3
 8000872:	4618      	mov	r0, r3
 8000874:	f000 f806 	bl	8000884 <LCD_Parallel_Write4Bits>
}
 8000878:	bf00      	nop
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40010c00 	.word	0x40010c00

08000884 <LCD_Parallel_Write4Bits>:

void LCD_Parallel_Write4Bits(uint8_t data) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
    // Set data on D4-D7 pins (PB12-PB15)
    HAL_GPIO_WritePin(LCD_D4_PORT, LCD_D4_PIN, (data & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	f003 0301 	and.w	r3, r3, #1
 8000894:	b2db      	uxtb	r3, r3
 8000896:	461a      	mov	r2, r3
 8000898:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800089c:	4816      	ldr	r0, [pc, #88]	@ (80008f8 <LCD_Parallel_Write4Bits+0x74>)
 800089e:	f002 fc8b 	bl	80031b8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_PORT, LCD_D5_PIN, (data & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	105b      	asrs	r3, r3, #1
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	f003 0301 	and.w	r3, r3, #1
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	461a      	mov	r2, r3
 80008b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008b4:	4810      	ldr	r0, [pc, #64]	@ (80008f8 <LCD_Parallel_Write4Bits+0x74>)
 80008b6:	f002 fc7f 	bl	80031b8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_PORT, LCD_D6_PIN, (data & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	109b      	asrs	r3, r3, #2
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	f003 0301 	and.w	r3, r3, #1
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	461a      	mov	r2, r3
 80008c8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008cc:	480a      	ldr	r0, [pc, #40]	@ (80008f8 <LCD_Parallel_Write4Bits+0x74>)
 80008ce:	f002 fc73 	bl	80031b8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_PORT, LCD_D7_PIN, (data & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	10db      	asrs	r3, r3, #3
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	f003 0301 	and.w	r3, r3, #1
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	461a      	mov	r2, r3
 80008e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008e4:	4804      	ldr	r0, [pc, #16]	@ (80008f8 <LCD_Parallel_Write4Bits+0x74>)
 80008e6:	f002 fc67 	bl	80031b8 <HAL_GPIO_WritePin>
    
    // Pulse Enable pin
    LCD_Parallel_EnablePulse();
 80008ea:	f000 f807 	bl	80008fc <LCD_Parallel_EnablePulse>
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40010c00 	.word	0x40010c00

080008fc <LCD_Parallel_EnablePulse>:

void LCD_Parallel_EnablePulse(void) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LCD_E_PORT, LCD_E_PIN, GPIO_PIN_SET);
 8000902:	2201      	movs	r2, #1
 8000904:	2102      	movs	r1, #2
 8000906:	4810      	ldr	r0, [pc, #64]	@ (8000948 <LCD_Parallel_EnablePulse+0x4c>)
 8000908:	f002 fc56 	bl	80031b8 <HAL_GPIO_WritePin>
    
    // Enable pulse width (minimum 450ns, loop delay)
    for(volatile int i = 0; i < 50; i++);
 800090c:	2300      	movs	r3, #0
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	e002      	b.n	8000918 <LCD_Parallel_EnablePulse+0x1c>
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	3301      	adds	r3, #1
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2b31      	cmp	r3, #49	@ 0x31
 800091c:	ddf9      	ble.n	8000912 <LCD_Parallel_EnablePulse+0x16>
    
    HAL_GPIO_WritePin(LCD_E_PORT, LCD_E_PIN, GPIO_PIN_RESET);
 800091e:	2200      	movs	r2, #0
 8000920:	2102      	movs	r1, #2
 8000922:	4809      	ldr	r0, [pc, #36]	@ (8000948 <LCD_Parallel_EnablePulse+0x4c>)
 8000924:	f002 fc48 	bl	80031b8 <HAL_GPIO_WritePin>
    
    // Commands need > 37us to settle  
    for(volatile int i = 0; i < 1000; i++);
 8000928:	2300      	movs	r3, #0
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	e002      	b.n	8000934 <LCD_Parallel_EnablePulse+0x38>
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	3301      	adds	r3, #1
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800093a:	dbf8      	blt.n	800092e <LCD_Parallel_EnablePulse+0x32>
}
 800093c:	bf00      	nop
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40010c00 	.word	0x40010c00

0800094c <fft_bit_reverse>:
    }
    return x;
}

// Bit-reverse for 128-point FFT
void fft_bit_reverse(void) {
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
    for(uint8_t i = 0; i < FFT_SIZE; i++) {
 8000952:	2300      	movs	r3, #0
 8000954:	71fb      	strb	r3, [r7, #7]
 8000956:	e02e      	b.n	80009b6 <fft_bit_reverse+0x6a>
        uint8_t j = bit_reverse_7[i];
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	4a1c      	ldr	r2, [pc, #112]	@ (80009cc <fft_bit_reverse+0x80>)
 800095c:	5cd3      	ldrb	r3, [r2, r3]
 800095e:	71bb      	strb	r3, [r7, #6]
        if(i < j) {
 8000960:	79fa      	ldrb	r2, [r7, #7]
 8000962:	79bb      	ldrb	r3, [r7, #6]
 8000964:	429a      	cmp	r2, r3
 8000966:	d223      	bcs.n	80009b0 <fft_bit_reverse+0x64>
            // Swap real parts
            int16_t temp = fft_real[i];
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	4a19      	ldr	r2, [pc, #100]	@ (80009d0 <fft_bit_reverse+0x84>)
 800096c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000970:	80bb      	strh	r3, [r7, #4]
            fft_real[i] = fft_real[j];
 8000972:	79ba      	ldrb	r2, [r7, #6]
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	4916      	ldr	r1, [pc, #88]	@ (80009d0 <fft_bit_reverse+0x84>)
 8000978:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 800097c:	4a14      	ldr	r2, [pc, #80]	@ (80009d0 <fft_bit_reverse+0x84>)
 800097e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            fft_real[j] = temp;
 8000982:	79bb      	ldrb	r3, [r7, #6]
 8000984:	4912      	ldr	r1, [pc, #72]	@ (80009d0 <fft_bit_reverse+0x84>)
 8000986:	88ba      	ldrh	r2, [r7, #4]
 8000988:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            
            // Swap imaginary parts
            temp = fft_imag[i];
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	4a11      	ldr	r2, [pc, #68]	@ (80009d4 <fft_bit_reverse+0x88>)
 8000990:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000994:	80bb      	strh	r3, [r7, #4]
            fft_imag[i] = fft_imag[j];
 8000996:	79ba      	ldrb	r2, [r7, #6]
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	490e      	ldr	r1, [pc, #56]	@ (80009d4 <fft_bit_reverse+0x88>)
 800099c:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80009a0:	4a0c      	ldr	r2, [pc, #48]	@ (80009d4 <fft_bit_reverse+0x88>)
 80009a2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            fft_imag[j] = temp;
 80009a6:	79bb      	ldrb	r3, [r7, #6]
 80009a8:	490a      	ldr	r1, [pc, #40]	@ (80009d4 <fft_bit_reverse+0x88>)
 80009aa:	88ba      	ldrh	r2, [r7, #4]
 80009ac:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for(uint8_t i = 0; i < FFT_SIZE; i++) {
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	3301      	adds	r3, #1
 80009b4:	71fb      	strb	r3, [r7, #7]
 80009b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	dacc      	bge.n	8000958 <fft_bit_reverse+0xc>
        }
    }
}
 80009be:	bf00      	nop
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bc80      	pop	{r7}
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	080058f4 	.word	0x080058f4
 80009d0:	2000023c 	.word	0x2000023c
 80009d4:	2000033c 	.word	0x2000033c

080009d8 <get_twiddle>:

// Get twiddle factors from extended lookup table
void get_twiddle(uint8_t angle_idx, int16_t* cos_val, int16_t* sin_val) {
 80009d8:	b480      	push	{r7}
 80009da:	b085      	sub	sp, #20
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
 80009e4:	73fb      	strb	r3, [r7, #15]
    *cos_val = cos_table[angle_idx & 31];
 80009e6:	7bfb      	ldrb	r3, [r7, #15]
 80009e8:	f003 031f 	and.w	r3, r3, #31
 80009ec:	4a08      	ldr	r2, [pc, #32]	@ (8000a10 <get_twiddle+0x38>)
 80009ee:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	801a      	strh	r2, [r3, #0]
    *sin_val = sin_table[angle_idx & 31];
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
 80009f8:	f003 031f 	and.w	r3, r3, #31
 80009fc:	4a05      	ldr	r2, [pc, #20]	@ (8000a14 <get_twiddle+0x3c>)
 80009fe:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	801a      	strh	r2, [r3, #0]
}
 8000a06:	bf00      	nop
 8000a08:	3714      	adds	r7, #20
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr
 8000a10:	080059b4 	.word	0x080059b4
 8000a14:	08005974 	.word	0x08005974

08000a18 <fft_butterfly>:

// FFT butterfly operation
void fft_butterfly(uint8_t stage, uint8_t step) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b088      	sub	sp, #32
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	460a      	mov	r2, r1
 8000a22:	71fb      	strb	r3, [r7, #7]
 8000a24:	4613      	mov	r3, r2
 8000a26:	71bb      	strb	r3, [r7, #6]
    uint8_t half_step = step >> 1;
 8000a28:	79bb      	ldrb	r3, [r7, #6]
 8000a2a:	085b      	lsrs	r3, r3, #1
 8000a2c:	777b      	strb	r3, [r7, #29]
    
    for(uint8_t i = 0; i < FFT_SIZE; i += step) {
 8000a2e:	2300      	movs	r3, #0
 8000a30:	77fb      	strb	r3, [r7, #31]
 8000a32:	e07f      	b.n	8000b34 <fft_butterfly+0x11c>
        for(uint8_t j = 0; j < half_step; j++) {
 8000a34:	2300      	movs	r3, #0
 8000a36:	77bb      	strb	r3, [r7, #30]
 8000a38:	e074      	b.n	8000b24 <fft_butterfly+0x10c>
            uint8_t idx1 = i + j;
 8000a3a:	7ffa      	ldrb	r2, [r7, #31]
 8000a3c:	7fbb      	ldrb	r3, [r7, #30]
 8000a3e:	4413      	add	r3, r2
 8000a40:	773b      	strb	r3, [r7, #28]
            uint8_t idx2 = idx1 + half_step;
 8000a42:	7f3a      	ldrb	r2, [r7, #28]
 8000a44:	7f7b      	ldrb	r3, [r7, #29]
 8000a46:	4413      	add	r3, r2
 8000a48:	76fb      	strb	r3, [r7, #27]
            
            // Calculate twiddle factor index
            uint8_t angle_idx = (j << (FFT_SIZE_LOG2 - stage - 1)) & 31;
 8000a4a:	7fba      	ldrb	r2, [r7, #30]
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	f1c3 0306 	rsb	r3, r3, #6
 8000a52:	fa02 f303 	lsl.w	r3, r2, r3
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	f003 031f 	and.w	r3, r3, #31
 8000a5c:	76bb      	strb	r3, [r7, #26]
            int16_t cos_val, sin_val;
            get_twiddle(angle_idx, &cos_val, &sin_val);
 8000a5e:	f107 0208 	add.w	r2, r7, #8
 8000a62:	f107 010a 	add.w	r1, r7, #10
 8000a66:	7ebb      	ldrb	r3, [r7, #26]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff ffb5 	bl	80009d8 <get_twiddle>
            
            // Complex multiplication with Q15 arithmetic
            int32_t temp_real = ((int32_t)fft_real[idx2] * cos_val + 
 8000a6e:	7efb      	ldrb	r3, [r7, #27]
 8000a70:	4a35      	ldr	r2, [pc, #212]	@ (8000b48 <fft_butterfly+0x130>)
 8000a72:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000a76:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000a7a:	fb03 f202 	mul.w	r2, r3, r2
                                (int32_t)fft_imag[idx2] * sin_val) >> 15;
 8000a7e:	7efb      	ldrb	r3, [r7, #27]
 8000a80:	4932      	ldr	r1, [pc, #200]	@ (8000b4c <fft_butterfly+0x134>)
 8000a82:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8000a86:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8000a8a:	fb01 f303 	mul.w	r3, r1, r3
            int32_t temp_real = ((int32_t)fft_real[idx2] * cos_val + 
 8000a8e:	4413      	add	r3, r2
 8000a90:	13db      	asrs	r3, r3, #15
 8000a92:	617b      	str	r3, [r7, #20]
            int32_t temp_imag = ((int32_t)fft_imag[idx2] * cos_val - 
 8000a94:	7efb      	ldrb	r3, [r7, #27]
 8000a96:	4a2d      	ldr	r2, [pc, #180]	@ (8000b4c <fft_butterfly+0x134>)
 8000a98:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000a9c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000aa0:	fb03 f202 	mul.w	r2, r3, r2
                                (int32_t)fft_real[idx2] * sin_val) >> 15;
 8000aa4:	7efb      	ldrb	r3, [r7, #27]
 8000aa6:	4928      	ldr	r1, [pc, #160]	@ (8000b48 <fft_butterfly+0x130>)
 8000aa8:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8000aac:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8000ab0:	fb01 f303 	mul.w	r3, r1, r3
            int32_t temp_imag = ((int32_t)fft_imag[idx2] * cos_val - 
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	13db      	asrs	r3, r3, #15
 8000ab8:	613b      	str	r3, [r7, #16]
            
            // Butterfly operation
            int16_t real1 = fft_real[idx1];
 8000aba:	7f3b      	ldrb	r3, [r7, #28]
 8000abc:	4a22      	ldr	r2, [pc, #136]	@ (8000b48 <fft_butterfly+0x130>)
 8000abe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ac2:	81fb      	strh	r3, [r7, #14]
            int16_t imag1 = fft_imag[idx1];
 8000ac4:	7f3b      	ldrb	r3, [r7, #28]
 8000ac6:	4a21      	ldr	r2, [pc, #132]	@ (8000b4c <fft_butterfly+0x134>)
 8000ac8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000acc:	81bb      	strh	r3, [r7, #12]
            
            fft_real[idx1] = real1 + (int16_t)temp_real;
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	b29a      	uxth	r2, r3
 8000ad2:	89fb      	ldrh	r3, [r7, #14]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	b29a      	uxth	r2, r3
 8000ad8:	7f3b      	ldrb	r3, [r7, #28]
 8000ada:	b211      	sxth	r1, r2
 8000adc:	4a1a      	ldr	r2, [pc, #104]	@ (8000b48 <fft_butterfly+0x130>)
 8000ade:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            fft_imag[idx1] = imag1 + (int16_t)temp_imag;
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	b29a      	uxth	r2, r3
 8000ae6:	89bb      	ldrh	r3, [r7, #12]
 8000ae8:	4413      	add	r3, r2
 8000aea:	b29a      	uxth	r2, r3
 8000aec:	7f3b      	ldrb	r3, [r7, #28]
 8000aee:	b211      	sxth	r1, r2
 8000af0:	4a16      	ldr	r2, [pc, #88]	@ (8000b4c <fft_butterfly+0x134>)
 8000af2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            fft_real[idx2] = real1 - (int16_t)temp_real;
 8000af6:	89fa      	ldrh	r2, [r7, #14]
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	1ad3      	subs	r3, r2, r3
 8000afe:	b29a      	uxth	r2, r3
 8000b00:	7efb      	ldrb	r3, [r7, #27]
 8000b02:	b211      	sxth	r1, r2
 8000b04:	4a10      	ldr	r2, [pc, #64]	@ (8000b48 <fft_butterfly+0x130>)
 8000b06:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            fft_imag[idx2] = imag1 - (int16_t)temp_imag;
 8000b0a:	89ba      	ldrh	r2, [r7, #12]
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	b29a      	uxth	r2, r3
 8000b14:	7efb      	ldrb	r3, [r7, #27]
 8000b16:	b211      	sxth	r1, r2
 8000b18:	4a0c      	ldr	r2, [pc, #48]	@ (8000b4c <fft_butterfly+0x134>)
 8000b1a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for(uint8_t j = 0; j < half_step; j++) {
 8000b1e:	7fbb      	ldrb	r3, [r7, #30]
 8000b20:	3301      	adds	r3, #1
 8000b22:	77bb      	strb	r3, [r7, #30]
 8000b24:	7fba      	ldrb	r2, [r7, #30]
 8000b26:	7f7b      	ldrb	r3, [r7, #29]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d386      	bcc.n	8000a3a <fft_butterfly+0x22>
    for(uint8_t i = 0; i < FFT_SIZE; i += step) {
 8000b2c:	7ffa      	ldrb	r2, [r7, #31]
 8000b2e:	79bb      	ldrb	r3, [r7, #6]
 8000b30:	4413      	add	r3, r2
 8000b32:	77fb      	strb	r3, [r7, #31]
 8000b34:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	f6bf af7b 	bge.w	8000a34 <fft_butterfly+0x1c>
        }
    }
}
 8000b3e:	bf00      	nop
 8000b40:	bf00      	nop
 8000b42:	3720      	adds	r7, #32
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	2000023c 	.word	0x2000023c
 8000b4c:	2000033c 	.word	0x2000033c

08000b50 <perform_fft>:

// Main FFT computation
void perform_fft(void) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
    // Bit-reverse input
    fft_bit_reverse();
 8000b56:	f7ff fef9 	bl	800094c <fft_bit_reverse>
    
    // Perform FFT stages
    for(uint8_t stage = 0; stage < FFT_SIZE_LOG2; stage++) {
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	71fb      	strb	r3, [r7, #7]
 8000b5e:	e00e      	b.n	8000b7e <perform_fft+0x2e>
        uint8_t step = 1 << (stage + 1);
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	3301      	adds	r3, #1
 8000b64:	2201      	movs	r2, #1
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	71bb      	strb	r3, [r7, #6]
        fft_butterfly(stage, step);
 8000b6c:	79ba      	ldrb	r2, [r7, #6]
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	4611      	mov	r1, r2
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff ff50 	bl	8000a18 <fft_butterfly>
    for(uint8_t stage = 0; stage < FFT_SIZE_LOG2; stage++) {
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	71fb      	strb	r3, [r7, #7]
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	2b06      	cmp	r3, #6
 8000b82:	d9ed      	bls.n	8000b60 <perform_fft+0x10>
    }
}
 8000b84:	bf00      	nop
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <calculate_magnitude>:

// Calculate magnitude using optimized method
void calculate_magnitude(void) {
 8000b90:	b480      	push	{r7}
 8000b92:	b089      	sub	sp, #36	@ 0x24
 8000b94:	af00      	add	r7, sp, #0
    max_magnitude = 0;
 8000b96:	4b25      	ldr	r3, [pc, #148]	@ (8000c2c <calculate_magnitude+0x9c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	801a      	strh	r2, [r3, #0]
    
    for(uint8_t i = 1; i < FFT_SIZE/2; i++) { // Skip DC component
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	77fb      	strb	r3, [r7, #31]
 8000ba0:	e03b      	b.n	8000c1a <calculate_magnitude+0x8a>
        int32_t real = fft_real[i];
 8000ba2:	7ffb      	ldrb	r3, [r7, #31]
 8000ba4:	4a22      	ldr	r2, [pc, #136]	@ (8000c30 <calculate_magnitude+0xa0>)
 8000ba6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000baa:	61bb      	str	r3, [r7, #24]
        int32_t imag = fft_imag[i];
 8000bac:	7ffb      	ldrb	r3, [r7, #31]
 8000bae:	4a21      	ldr	r2, [pc, #132]	@ (8000c34 <calculate_magnitude+0xa4>)
 8000bb0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000bb4:	617b      	str	r3, [r7, #20]
        
        // Fast magnitude approximation
        int32_t abs_real = (real < 0) ? -real : real;
 8000bb6:	69bb      	ldr	r3, [r7, #24]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	bfb8      	it	lt
 8000bbc:	425b      	neglt	r3, r3
 8000bbe:	613b      	str	r3, [r7, #16]
        int32_t abs_imag = (imag < 0) ? -imag : imag;
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	bfb8      	it	lt
 8000bc6:	425b      	neglt	r3, r3
 8000bc8:	60fb      	str	r3, [r7, #12]
        
        // |z| ≈ max(|a|,|b|) + 0.5*min(|a|,|b|)
        int32_t max_val = (abs_real > abs_imag) ? abs_real : abs_imag;
 8000bca:	68fa      	ldr	r2, [r7, #12]
 8000bcc:	693b      	ldr	r3, [r7, #16]
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	bfb8      	it	lt
 8000bd2:	4613      	movlt	r3, r2
 8000bd4:	60bb      	str	r3, [r7, #8]
        int32_t min_val = (abs_real < abs_imag) ? abs_real : abs_imag;
 8000bd6:	68fa      	ldr	r2, [r7, #12]
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	bfa8      	it	ge
 8000bde:	4613      	movge	r3, r2
 8000be0:	607b      	str	r3, [r7, #4]
        
        magnitude[i] = (uint16_t)(max_val + (min_val >> 1));
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	b299      	uxth	r1, r3
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	105b      	asrs	r3, r3, #1
 8000bea:	b29a      	uxth	r2, r3
 8000bec:	7ffb      	ldrb	r3, [r7, #31]
 8000bee:	440a      	add	r2, r1
 8000bf0:	b291      	uxth	r1, r2
 8000bf2:	4a11      	ldr	r2, [pc, #68]	@ (8000c38 <calculate_magnitude+0xa8>)
 8000bf4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        
        if(magnitude[i] > max_magnitude) {
 8000bf8:	7ffb      	ldrb	r3, [r7, #31]
 8000bfa:	4a0f      	ldr	r2, [pc, #60]	@ (8000c38 <calculate_magnitude+0xa8>)
 8000bfc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000c00:	4b0a      	ldr	r3, [pc, #40]	@ (8000c2c <calculate_magnitude+0x9c>)
 8000c02:	881b      	ldrh	r3, [r3, #0]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d905      	bls.n	8000c14 <calculate_magnitude+0x84>
            max_magnitude = magnitude[i];
 8000c08:	7ffb      	ldrb	r3, [r7, #31]
 8000c0a:	4a0b      	ldr	r2, [pc, #44]	@ (8000c38 <calculate_magnitude+0xa8>)
 8000c0c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000c10:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <calculate_magnitude+0x9c>)
 8000c12:	801a      	strh	r2, [r3, #0]
    for(uint8_t i = 1; i < FFT_SIZE/2; i++) { // Skip DC component
 8000c14:	7ffb      	ldrb	r3, [r7, #31]
 8000c16:	3301      	adds	r3, #1
 8000c18:	77fb      	strb	r3, [r7, #31]
 8000c1a:	7ffb      	ldrb	r3, [r7, #31]
 8000c1c:	2b3f      	cmp	r3, #63	@ 0x3f
 8000c1e:	d9c0      	bls.n	8000ba2 <calculate_magnitude+0x12>
        }
    }
}
 8000c20:	bf00      	nop
 8000c22:	bf00      	nop
 8000c24:	3724      	adds	r7, #36	@ 0x24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr
 8000c2c:	20000522 	.word	0x20000522
 8000c30:	2000023c 	.word	0x2000023c
 8000c34:	2000033c 	.word	0x2000033c
 8000c38:	2000043c 	.word	0x2000043c

08000c3c <apply_agc>:

// Apply automatic gain control
void apply_agc(void) {
 8000c3c:	b590      	push	{r4, r7, lr}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
    if(max_magnitude > 0) {
 8000c42:	4b45      	ldr	r3, [pc, #276]	@ (8000d58 <apply_agc+0x11c>)
 8000c44:	881b      	ldrh	r3, [r3, #0]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	f000 8082 	beq.w	8000d50 <apply_agc+0x114>
        // Target amplitude (Q15)
        uint16_t target = 16384; // 50% of max
 8000c4c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000c50:	80bb      	strh	r3, [r7, #4]
        
        // Calculate new gain factor
        if(max_magnitude > target) {
 8000c52:	4b41      	ldr	r3, [pc, #260]	@ (8000d58 <apply_agc+0x11c>)
 8000c54:	881b      	ldrh	r3, [r3, #0]
 8000c56:	88ba      	ldrh	r2, [r7, #4]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d22e      	bcs.n	8000cba <apply_agc+0x7e>
            gain_factor = (gain_factor * AGC_FACTOR * target) / max_magnitude / AGC_FACTOR;
 8000c5c:	4b3f      	ldr	r3, [pc, #252]	@ (8000d5c <apply_agc+0x120>)
 8000c5e:	881b      	ldrh	r3, [r3, #0]
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff fb2d 	bl	80002c0 <__aeabi_i2f>
 8000c66:	4603      	mov	r3, r0
 8000c68:	493d      	ldr	r1, [pc, #244]	@ (8000d60 <apply_agc+0x124>)
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff fb7c 	bl	8000368 <__aeabi_fmul>
 8000c70:	4603      	mov	r3, r0
 8000c72:	461c      	mov	r4, r3
 8000c74:	88bb      	ldrh	r3, [r7, #4]
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff fb22 	bl	80002c0 <__aeabi_i2f>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4620      	mov	r0, r4
 8000c82:	f7ff fb71 	bl	8000368 <__aeabi_fmul>
 8000c86:	4603      	mov	r3, r0
 8000c88:	461c      	mov	r4, r3
 8000c8a:	4b33      	ldr	r3, [pc, #204]	@ (8000d58 <apply_agc+0x11c>)
 8000c8c:	881b      	ldrh	r3, [r3, #0]
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff fb16 	bl	80002c0 <__aeabi_i2f>
 8000c94:	4603      	mov	r3, r0
 8000c96:	4619      	mov	r1, r3
 8000c98:	4620      	mov	r0, r4
 8000c9a:	f7ff fc19 	bl	80004d0 <__aeabi_fdiv>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	492f      	ldr	r1, [pc, #188]	@ (8000d60 <apply_agc+0x124>)
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff fc14 	bl	80004d0 <__aeabi_fdiv>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff fcac 	bl	8000608 <__aeabi_f2uiz>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	b29a      	uxth	r2, r3
 8000cb4:	4b29      	ldr	r3, [pc, #164]	@ (8000d5c <apply_agc+0x120>)
 8000cb6:	801a      	strh	r2, [r3, #0]
 8000cb8:	e013      	b.n	8000ce2 <apply_agc+0xa6>
        } else if(max_magnitude < target/2) {
 8000cba:	88bb      	ldrh	r3, [r7, #4]
 8000cbc:	085b      	lsrs	r3, r3, #1
 8000cbe:	b29a      	uxth	r2, r3
 8000cc0:	4b25      	ldr	r3, [pc, #148]	@ (8000d58 <apply_agc+0x11c>)
 8000cc2:	881b      	ldrh	r3, [r3, #0]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d90c      	bls.n	8000ce2 <apply_agc+0xa6>
            gain_factor = (gain_factor * target) / max_magnitude;
 8000cc8:	4b24      	ldr	r3, [pc, #144]	@ (8000d5c <apply_agc+0x120>)
 8000cca:	881b      	ldrh	r3, [r3, #0]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	88bb      	ldrh	r3, [r7, #4]
 8000cd0:	fb02 f303 	mul.w	r3, r2, r3
 8000cd4:	4a20      	ldr	r2, [pc, #128]	@ (8000d58 <apply_agc+0x11c>)
 8000cd6:	8812      	ldrh	r2, [r2, #0]
 8000cd8:	fb93 f3f2 	sdiv	r3, r3, r2
 8000cdc:	b29a      	uxth	r2, r3
 8000cde:	4b1f      	ldr	r3, [pc, #124]	@ (8000d5c <apply_agc+0x120>)
 8000ce0:	801a      	strh	r2, [r3, #0]
        }
        
        // Limit gain factor
        if(gain_factor > 2048) gain_factor = 2048; // Max 8x gain
 8000ce2:	4b1e      	ldr	r3, [pc, #120]	@ (8000d5c <apply_agc+0x120>)
 8000ce4:	881b      	ldrh	r3, [r3, #0]
 8000ce6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000cea:	d903      	bls.n	8000cf4 <apply_agc+0xb8>
 8000cec:	4b1b      	ldr	r3, [pc, #108]	@ (8000d5c <apply_agc+0x120>)
 8000cee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000cf2:	801a      	strh	r2, [r3, #0]
        if(gain_factor < 64) gain_factor = 64;     // Min 0.25x gain
 8000cf4:	4b19      	ldr	r3, [pc, #100]	@ (8000d5c <apply_agc+0x120>)
 8000cf6:	881b      	ldrh	r3, [r3, #0]
 8000cf8:	2b3f      	cmp	r3, #63	@ 0x3f
 8000cfa:	d802      	bhi.n	8000d02 <apply_agc+0xc6>
 8000cfc:	4b17      	ldr	r3, [pc, #92]	@ (8000d5c <apply_agc+0x120>)
 8000cfe:	2240      	movs	r2, #64	@ 0x40
 8000d00:	801a      	strh	r2, [r3, #0]
        
        // Apply gain to magnitude array
        for(uint8_t i = 1; i < FFT_SIZE/2; i++) {
 8000d02:	2301      	movs	r3, #1
 8000d04:	71fb      	strb	r3, [r7, #7]
 8000d06:	e020      	b.n	8000d4a <apply_agc+0x10e>
            uint32_t temp = (uint32_t)magnitude[i] * gain_factor;
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	4a16      	ldr	r2, [pc, #88]	@ (8000d64 <apply_agc+0x128>)
 8000d0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d10:	461a      	mov	r2, r3
 8000d12:	4b12      	ldr	r3, [pc, #72]	@ (8000d5c <apply_agc+0x120>)
 8000d14:	881b      	ldrh	r3, [r3, #0]
 8000d16:	fb02 f303 	mul.w	r3, r2, r3
 8000d1a:	603b      	str	r3, [r7, #0]
            magnitude[i] = (temp >> 8); // Q8.8 to Q16
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	0a1a      	lsrs	r2, r3, #8
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	b291      	uxth	r1, r2
 8000d24:	4a0f      	ldr	r2, [pc, #60]	@ (8000d64 <apply_agc+0x128>)
 8000d26:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            if(magnitude[i] > 32767) magnitude[i] = 32767;
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d64 <apply_agc+0x128>)
 8000d2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d32:	b21b      	sxth	r3, r3
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	da05      	bge.n	8000d44 <apply_agc+0x108>
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d64 <apply_agc+0x128>)
 8000d3c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8000d40:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for(uint8_t i = 1; i < FFT_SIZE/2; i++) {
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	3301      	adds	r3, #1
 8000d48:	71fb      	strb	r3, [r7, #7]
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d4e:	d9db      	bls.n	8000d08 <apply_agc+0xcc>
        }
    }
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd90      	pop	{r4, r7, pc}
 8000d58:	20000522 	.word	0x20000522
 8000d5c:	20000000 	.word	0x20000000
 8000d60:	3f666666 	.word	0x3f666666
 8000d64:	2000043c 	.word	0x2000043c

08000d68 <process_frequency_bands>:

// Process frequency bands optimized for 200Hz-4000Hz
void process_frequency_bands(void) {
 8000d68:	b5b0      	push	{r4, r5, r7, lr}
 8000d6a:	b08c      	sub	sp, #48	@ 0x30
 8000d6c:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();
 8000d6e:	f001 f8a5 	bl	8001ebc <HAL_GetTick>
 8000d72:	61b8      	str	r0, [r7, #24]
    
    // Define frequency band ranges for 200Hz-4000Hz (logarithmic distribution)
    const uint8_t band_ranges[FREQ_BANDS][2] = {
 8000d74:	4b74      	ldr	r3, [pc, #464]	@ (8000f48 <process_frequency_bands+0x1e0>)
 8000d76:	1d3c      	adds	r4, r7, #4
 8000d78:	461d      	mov	r5, r3
 8000d7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d7e:	682b      	ldr	r3, [r5, #0]
 8000d80:	6023      	str	r3, [r4, #0]
        {32, 40},  // 2500-3125Hz   (Treble)
        {40, 48},  // 3125-3750Hz   (High Treble)
        {48, 51}   // 3750-4000Hz   (Air)
    };
    
    for(uint8_t band = 0; band < FREQ_BANDS; band++) {
 8000d82:	2300      	movs	r3, #0
 8000d84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000d88:	e0d4      	b.n	8000f34 <process_frequency_bands+0x1cc>
        uint32_t band_sum = 0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
        uint8_t bin_count = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        
        // Sum magnitudes in frequency band
        for(uint8_t bin = band_ranges[band][0]; bin <= band_ranges[band][1]; bin++) {
 8000d94:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	3330      	adds	r3, #48	@ 0x30
 8000d9c:	443b      	add	r3, r7
 8000d9e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8000da2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000da6:	e02b      	b.n	8000e00 <process_frequency_bands+0x98>
            if(bin < FFT_SIZE/2) {
 8000da8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000dac:	2b3f      	cmp	r3, #63	@ 0x3f
 8000dae:	d822      	bhi.n	8000df6 <process_frequency_bands+0x8e>
                // Apply frequency weighting for better visualization
                uint16_t weighted_mag = magnitude[bin];
 8000db0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000db4:	4a65      	ldr	r2, [pc, #404]	@ (8000f4c <process_frequency_bands+0x1e4>)
 8000db6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dba:	84bb      	strh	r3, [r7, #36]	@ 0x24
                
                // Boost mid frequencies (1-3kHz) slightly
                if(bin >= 13 && bin <= 38) { // ~1000-3000Hz
 8000dbc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000dc0:	2b0c      	cmp	r3, #12
 8000dc2:	d90f      	bls.n	8000de4 <process_frequency_bands+0x7c>
 8000dc4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000dc8:	2b26      	cmp	r3, #38	@ 0x26
 8000dca:	d80b      	bhi.n	8000de4 <process_frequency_bands+0x7c>
                    weighted_mag = (weighted_mag * 120) / 100;
 8000dcc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000dce:	4613      	mov	r3, r2
 8000dd0:	011b      	lsls	r3, r3, #4
 8000dd2:	1a9b      	subs	r3, r3, r2
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	4a5e      	ldr	r2, [pc, #376]	@ (8000f50 <process_frequency_bands+0x1e8>)
 8000dd8:	fb82 1203 	smull	r1, r2, r2, r3
 8000ddc:	1152      	asrs	r2, r2, #5
 8000dde:	17db      	asrs	r3, r3, #31
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	84bb      	strh	r3, [r7, #36]	@ 0x24
                }
                
                band_sum += weighted_mag;
 8000de4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000de6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000de8:	4413      	add	r3, r2
 8000dea:	62bb      	str	r3, [r7, #40]	@ 0x28
                bin_count++;
 8000dec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000df0:	3301      	adds	r3, #1
 8000df2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        for(uint8_t bin = band_ranges[band][0]; bin <= band_ranges[band][1]; bin++) {
 8000df6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000e00:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	3330      	adds	r3, #48	@ 0x30
 8000e08:	443b      	add	r3, r7
 8000e0a:	f813 3c2b 	ldrb.w	r3, [r3, #-43]
 8000e0e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d9c8      	bls.n	8000da8 <process_frequency_bands+0x40>
            }
        }
        
        // Average and normalize
        uint16_t avg_magnitude = bin_count > 0 ? band_sum / bin_count : 0;
 8000e16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d006      	beq.n	8000e2c <process_frequency_bands+0xc4>
 8000e1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000e22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	e000      	b.n	8000e2e <process_frequency_bands+0xc6>
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	847b      	strh	r3, [r7, #34]	@ 0x22
        
        // Apply noise floor
        if(avg_magnitude < NOISE_FLOOR) {
 8000e30:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000e32:	2b18      	cmp	r3, #24
 8000e34:	d801      	bhi.n	8000e3a <process_frequency_bands+0xd2>
            avg_magnitude = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	847b      	strh	r3, [r7, #34]	@ 0x22
        }
        
        // Logarithmic scaling for better dynamic range
        if(avg_magnitude > 0) {
 8000e3a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d016      	beq.n	8000e6e <process_frequency_bands+0x106>
            // Simple log approximation: log2(x) ≈ MSB position
            uint16_t log_mag = 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	843b      	strh	r3, [r7, #32]
            uint16_t temp = avg_magnitude;
 8000e44:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000e46:	83fb      	strh	r3, [r7, #30]
            while(temp >>= 1) {
 8000e48:	e002      	b.n	8000e50 <process_frequency_bands+0xe8>
                log_mag++;
 8000e4a:	8c3b      	ldrh	r3, [r7, #32]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	843b      	strh	r3, [r7, #32]
            while(temp >>= 1) {
 8000e50:	8bfb      	ldrh	r3, [r7, #30]
 8000e52:	085b      	lsrs	r3, r3, #1
 8000e54:	83fb      	strh	r3, [r7, #30]
 8000e56:	8bfb      	ldrh	r3, [r7, #30]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d1f6      	bne.n	8000e4a <process_frequency_bands+0xe2>
            }
            avg_magnitude = (log_mag * avg_magnitude) / 16;
 8000e5c:	8c3b      	ldrh	r3, [r7, #32]
 8000e5e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8000e60:	fb02 f303 	mul.w	r3, r2, r3
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	da00      	bge.n	8000e6a <process_frequency_bands+0x102>
 8000e68:	330f      	adds	r3, #15
 8000e6a:	111b      	asrs	r3, r3, #4
 8000e6c:	847b      	strh	r3, [r7, #34]	@ 0x22
        }
        
        // Enhanced smoothing with previous values
        freq_bands[band] = (uint16_t)(SMOOTHING_FACTOR * avg_magnitude + 
 8000e6e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fa25 	bl	80002c0 <__aeabi_i2f>
 8000e76:	4603      	mov	r3, r0
 8000e78:	f897 402f 	ldrb.w	r4, [r7, #47]	@ 0x2f
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fbc3 	bl	8000608 <__aeabi_f2uiz>
 8000e82:	4603      	mov	r3, r0
 8000e84:	b29a      	uxth	r2, r3
 8000e86:	4b33      	ldr	r3, [pc, #204]	@ (8000f54 <process_frequency_bands+0x1ec>)
 8000e88:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
                          (1.0f - SMOOTHING_FACTOR) * prev_bands[band]);
        
        // Peak hold with faster decay
        if(freq_bands[band] > peak_bands[band]) {
 8000e8c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e90:	4a30      	ldr	r2, [pc, #192]	@ (8000f54 <process_frequency_bands+0x1ec>)
 8000e92:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000e96:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e9a:	492f      	ldr	r1, [pc, #188]	@ (8000f58 <process_frequency_bands+0x1f0>)
 8000e9c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d910      	bls.n	8000ec6 <process_frequency_bands+0x15e>
            peak_bands[band] = freq_bands[band];
 8000ea4:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000ea8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000eac:	4929      	ldr	r1, [pc, #164]	@ (8000f54 <process_frequency_bands+0x1ec>)
 8000eae:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000eb2:	4a29      	ldr	r2, [pc, #164]	@ (8000f58 <process_frequency_bands+0x1f0>)
 8000eb4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            peak_time[band] = current_time;
 8000eb8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ebc:	4927      	ldr	r1, [pc, #156]	@ (8000f5c <process_frequency_bands+0x1f4>)
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000ec4:	e027      	b.n	8000f16 <process_frequency_bands+0x1ae>
        } else if(current_time - peak_time[band] > PEAK_HOLD_TIME) {
 8000ec6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000eca:	4a24      	ldr	r2, [pc, #144]	@ (8000f5c <process_frequency_bands+0x1f4>)
 8000ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000ed8:	d91d      	bls.n	8000f16 <process_frequency_bands+0x1ae>
            // Exponential decay for smoother peak fall
            if(peak_bands[band] > 0) {
 8000eda:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ede:	4a1e      	ldr	r2, [pc, #120]	@ (8000f58 <process_frequency_bands+0x1f0>)
 8000ee0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d016      	beq.n	8000f16 <process_frequency_bands+0x1ae>
                peak_bands[band] = (peak_bands[band] * 95) / 100;
 8000ee8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000eec:	4a1a      	ldr	r2, [pc, #104]	@ (8000f58 <process_frequency_bands+0x1f0>)
 8000eee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	4413      	add	r3, r2
 8000efa:	015b      	lsls	r3, r3, #5
 8000efc:	1a9b      	subs	r3, r3, r2
 8000efe:	4a14      	ldr	r2, [pc, #80]	@ (8000f50 <process_frequency_bands+0x1e8>)
 8000f00:	fb82 1203 	smull	r1, r2, r2, r3
 8000f04:	1152      	asrs	r2, r2, #5
 8000f06:	17db      	asrs	r3, r3, #31
 8000f08:	1ad2      	subs	r2, r2, r3
 8000f0a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f0e:	b291      	uxth	r1, r2
 8000f10:	4a11      	ldr	r2, [pc, #68]	@ (8000f58 <process_frequency_bands+0x1f0>)
 8000f12:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            }
        }
        
        prev_bands[band] = freq_bands[band];
 8000f16:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000f1a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f1e:	490d      	ldr	r1, [pc, #52]	@ (8000f54 <process_frequency_bands+0x1ec>)
 8000f20:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000f24:	4a0e      	ldr	r2, [pc, #56]	@ (8000f60 <process_frequency_bands+0x1f8>)
 8000f26:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint8_t band = 0; band < FREQ_BANDS; band++) {
 8000f2a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f2e:	3301      	adds	r3, #1
 8000f30:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000f34:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f38:	2b09      	cmp	r3, #9
 8000f3a:	f67f af26 	bls.w	8000d8a <process_frequency_bands+0x22>
    }
}
 8000f3e:	bf00      	nop
 8000f40:	bf00      	nop
 8000f42:	3730      	adds	r7, #48	@ 0x30
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bdb0      	pop	{r4, r5, r7, pc}
 8000f48:	08005810 	.word	0x08005810
 8000f4c:	2000043c 	.word	0x2000043c
 8000f50:	51eb851f 	.word	0x51eb851f
 8000f54:	200004bc 	.word	0x200004bc
 8000f58:	200004e4 	.word	0x200004e4
 8000f5c:	200004f8 	.word	0x200004f8
 8000f60:	200004d0 	.word	0x200004d0

08000f64 <get_band_color>:

// Enhanced color mapping for 200Hz-4000Hz spectrum
void get_band_color(uint8_t band, uint8_t intensity, uint8_t* r, uint8_t* g, uint8_t* b) {
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60ba      	str	r2, [r7, #8]
 8000f6c:	607b      	str	r3, [r7, #4]
 8000f6e:	4603      	mov	r3, r0
 8000f70:	73fb      	strb	r3, [r7, #15]
 8000f72:	460b      	mov	r3, r1
 8000f74:	73bb      	strb	r3, [r7, #14]
    // Enhanced color mapping for audio spectrum
    switch(band) {
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	2b09      	cmp	r3, #9
 8000f7a:	f200 80a8 	bhi.w	80010ce <get_band_color+0x16a>
 8000f7e:	a201      	add	r2, pc, #4	@ (adr r2, 8000f84 <get_band_color+0x20>)
 8000f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f84:	08000fad 	.word	0x08000fad
 8000f88:	08000fc5 	.word	0x08000fc5
 8000f8c:	08000fdd 	.word	0x08000fdd
 8000f90:	08000ff5 	.word	0x08000ff5
 8000f94:	08001019 	.word	0x08001019
 8000f98:	08001037 	.word	0x08001037
 8000f9c:	08001055 	.word	0x08001055
 8000fa0:	08001077 	.word	0x08001077
 8000fa4:	08001099 	.word	0x08001099
 8000fa8:	080010b7 	.word	0x080010b7
        case 0: // 200-390Hz - Deep Purple (Sub Bass)
            *r = intensity / 2;
 8000fac:	7bbb      	ldrb	r3, [r7, #14]
 8000fae:	085b      	lsrs	r3, r3, #1
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	701a      	strb	r2, [r3, #0]
            *g = 0;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]
            *b = intensity;
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	7bba      	ldrb	r2, [r7, #14]
 8000fc0:	701a      	strb	r2, [r3, #0]
            break;
 8000fc2:	e084      	b.n	80010ce <get_band_color+0x16a>
            
        case 1: // 390-547Hz - Blue (Bass)
            *r = 0;
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	701a      	strb	r2, [r3, #0]
            *g = intensity / 4;
 8000fca:	7bbb      	ldrb	r3, [r7, #14]
 8000fcc:	089b      	lsrs	r3, r3, #2
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	701a      	strb	r2, [r3, #0]
            *b = intensity;
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	7bba      	ldrb	r2, [r7, #14]
 8000fd8:	701a      	strb	r2, [r3, #0]
            break;
 8000fda:	e078      	b.n	80010ce <get_band_color+0x16a>
            
        case 2: // 547-781Hz - Cyan (Low Mid)
            *r = 0;
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	701a      	strb	r2, [r3, #0]
            *g = intensity / 2;
 8000fe2:	7bbb      	ldrb	r3, [r7, #14]
 8000fe4:	085b      	lsrs	r3, r3, #1
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	701a      	strb	r2, [r3, #0]
            *b = intensity;
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	7bba      	ldrb	r2, [r7, #14]
 8000ff0:	701a      	strb	r2, [r3, #0]
            break;
 8000ff2:	e06c      	b.n	80010ce <get_band_color+0x16a>
            
        case 3: // 781-1094Hz - Light Blue
            *r = 0;
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	701a      	strb	r2, [r3, #0]
            *g = (intensity * 3) / 4;
 8000ffa:	7bba      	ldrb	r2, [r7, #14]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	4413      	add	r3, r2
 8001002:	2b00      	cmp	r3, #0
 8001004:	da00      	bge.n	8001008 <get_band_color+0xa4>
 8001006:	3303      	adds	r3, #3
 8001008:	109b      	asrs	r3, r3, #2
 800100a:	b2da      	uxtb	r2, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	701a      	strb	r2, [r3, #0]
            *b = intensity;
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	7bba      	ldrb	r2, [r7, #14]
 8001014:	701a      	strb	r2, [r3, #0]
            break;
 8001016:	e05a      	b.n	80010ce <get_band_color+0x16a>
            
        case 4: // 1094-1484Hz - Green (Mid)
            *r = 0;
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	2200      	movs	r2, #0
 800101c:	701a      	strb	r2, [r3, #0]
            *g = intensity;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	7bba      	ldrb	r2, [r7, #14]
 8001022:	701a      	strb	r2, [r3, #0]
            *b = intensity / 3;
 8001024:	7bbb      	ldrb	r3, [r7, #14]
 8001026:	4a2c      	ldr	r2, [pc, #176]	@ (80010d8 <get_band_color+0x174>)
 8001028:	fba2 2303 	umull	r2, r3, r2, r3
 800102c:	085b      	lsrs	r3, r3, #1
 800102e:	b2da      	uxtb	r2, r3
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	701a      	strb	r2, [r3, #0]
            break;
 8001034:	e04b      	b.n	80010ce <get_band_color+0x16a>
            
        case 5: // 1484-1953Hz - Yellow Green
            *r = intensity / 3;
 8001036:	7bbb      	ldrb	r3, [r7, #14]
 8001038:	4a27      	ldr	r2, [pc, #156]	@ (80010d8 <get_band_color+0x174>)
 800103a:	fba2 2303 	umull	r2, r3, r2, r3
 800103e:	085b      	lsrs	r3, r3, #1
 8001040:	b2da      	uxtb	r2, r3
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	701a      	strb	r2, [r3, #0]
            *g = intensity;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	7bba      	ldrb	r2, [r7, #14]
 800104a:	701a      	strb	r2, [r3, #0]
            *b = 0;
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	2200      	movs	r2, #0
 8001050:	701a      	strb	r2, [r3, #0]
            break;
 8001052:	e03c      	b.n	80010ce <get_band_color+0x16a>
            
        case 6: // 1953-2500Hz - Yellow (Presence)
            *r = (intensity * 2) / 3;
 8001054:	7bbb      	ldrb	r3, [r7, #14]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	4a20      	ldr	r2, [pc, #128]	@ (80010dc <get_band_color+0x178>)
 800105a:	fb82 1203 	smull	r1, r2, r2, r3
 800105e:	17db      	asrs	r3, r3, #31
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	b2da      	uxtb	r2, r3
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	701a      	strb	r2, [r3, #0]
            *g = intensity;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	7bba      	ldrb	r2, [r7, #14]
 800106c:	701a      	strb	r2, [r3, #0]
            *b = 0;
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	2200      	movs	r2, #0
 8001072:	701a      	strb	r2, [r3, #0]
            break;
 8001074:	e02b      	b.n	80010ce <get_band_color+0x16a>
            
        case 7: // 2500-3125Hz - Orange
            *r = intensity;
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	7bba      	ldrb	r2, [r7, #14]
 800107a:	701a      	strb	r2, [r3, #0]
            *g = (intensity * 2) / 3;
 800107c:	7bbb      	ldrb	r3, [r7, #14]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	4a16      	ldr	r2, [pc, #88]	@ (80010dc <get_band_color+0x178>)
 8001082:	fb82 1203 	smull	r1, r2, r2, r3
 8001086:	17db      	asrs	r3, r3, #31
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	b2da      	uxtb	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	701a      	strb	r2, [r3, #0]
            *b = 0;
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	2200      	movs	r2, #0
 8001094:	701a      	strb	r2, [r3, #0]
            break;
 8001096:	e01a      	b.n	80010ce <get_band_color+0x16a>
            
        case 8: // 3125-3750Hz - Red Orange
            *r = intensity;
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	7bba      	ldrb	r2, [r7, #14]
 800109c:	701a      	strb	r2, [r3, #0]
            *g = intensity / 3;
 800109e:	7bbb      	ldrb	r3, [r7, #14]
 80010a0:	4a0d      	ldr	r2, [pc, #52]	@ (80010d8 <get_band_color+0x174>)
 80010a2:	fba2 2303 	umull	r2, r3, r2, r3
 80010a6:	085b      	lsrs	r3, r3, #1
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	701a      	strb	r2, [r3, #0]
            *b = 0;
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	2200      	movs	r2, #0
 80010b2:	701a      	strb	r2, [r3, #0]
            break;
 80010b4:	e00b      	b.n	80010ce <get_band_color+0x16a>
            
        case 9: // 3750-4000Hz - Red (High)
            *r = intensity;
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	7bba      	ldrb	r2, [r7, #14]
 80010ba:	701a      	strb	r2, [r3, #0]
            *g = 0;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2200      	movs	r2, #0
 80010c0:	701a      	strb	r2, [r3, #0]
            *b = intensity / 4;
 80010c2:	7bbb      	ldrb	r3, [r7, #14]
 80010c4:	089b      	lsrs	r3, r3, #2
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	701a      	strb	r2, [r3, #0]
            break;
 80010cc:	bf00      	nop
    }
}
 80010ce:	bf00      	nop
 80010d0:	3714      	adds	r7, #20
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr
 80010d8:	aaaaaaab 	.word	0xaaaaaaab
 80010dc:	55555556 	.word	0x55555556

080010e0 <sample_audio>:

// Sample audio data with optimized timing for 10kHz
void sample_audio(void) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
    static uint32_t last_sample = 0;
    uint32_t current_time = HAL_GetTick();
 80010e6:	f000 fee9 	bl	8001ebc <HAL_GetTick>
 80010ea:	6078      	str	r0, [r7, #4]
    
    // Sample at ~10kHz (every 0.1ms = 100μs)
    // Using HAL_GetTick() provides 1ms resolution, so we sample as fast as possible
    if(current_time != last_sample || (HAL_GetTick() == last_sample)) {
 80010ec:	4b27      	ldr	r3, [pc, #156]	@ (800118c <sample_audio+0xac>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d106      	bne.n	8001104 <sample_audio+0x24>
 80010f6:	f000 fee1 	bl	8001ebc <HAL_GetTick>
 80010fa:	4602      	mov	r2, r0
 80010fc:	4b23      	ldr	r3, [pc, #140]	@ (800118c <sample_audio+0xac>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	429a      	cmp	r2, r3
 8001102:	d13e      	bne.n	8001182 <sample_audio+0xa2>
        HAL_ADC_Start(&hadc1);
 8001104:	4822      	ldr	r0, [pc, #136]	@ (8001190 <sample_audio+0xb0>)
 8001106:	f000 ffdf 	bl	80020c8 <HAL_ADC_Start>
        if(HAL_ADC_PollForConversion(&hadc1, 1) == HAL_OK) {
 800110a:	2101      	movs	r1, #1
 800110c:	4820      	ldr	r0, [pc, #128]	@ (8001190 <sample_audio+0xb0>)
 800110e:	f001 f8b5 	bl	800227c <HAL_ADC_PollForConversion>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d131      	bne.n	800117c <sample_audio+0x9c>
            uint16_t adc_val = HAL_ADC_GetValue(&hadc1);
 8001118:	481d      	ldr	r0, [pc, #116]	@ (8001190 <sample_audio+0xb0>)
 800111a:	f001 f9b5 	bl	8002488 <HAL_ADC_GetValue>
 800111e:	4603      	mov	r3, r0
 8001120:	807b      	strh	r3, [r7, #2]
            HAL_ADC_Stop(&hadc1);
 8001122:	481b      	ldr	r0, [pc, #108]	@ (8001190 <sample_audio+0xb0>)
 8001124:	f001 f87e 	bl	8002224 <HAL_ADC_Stop>
            
            // Convert to signed and apply pre-emphasis for high frequencies
            int16_t sample = (int16_t)(adc_val - 2048);
 8001128:	887b      	ldrh	r3, [r7, #2]
 800112a:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800112e:	b29b      	uxth	r3, r3
 8001130:	803b      	strh	r3, [r7, #0]
            
            // Simple high-pass filter to remove DC and enhance mid-high frequencies
            static int16_t prev_sample = 0;
            sample = sample - (prev_sample >> 4); // Mild high-pass
 8001132:	883a      	ldrh	r2, [r7, #0]
 8001134:	4b17      	ldr	r3, [pc, #92]	@ (8001194 <sample_audio+0xb4>)
 8001136:	f9b3 3000 	ldrsh.w	r3, [r3]
 800113a:	111b      	asrs	r3, r3, #4
 800113c:	b21b      	sxth	r3, r3
 800113e:	b29b      	uxth	r3, r3
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	b29b      	uxth	r3, r3
 8001144:	803b      	strh	r3, [r7, #0]
            prev_sample = sample;
 8001146:	4a13      	ldr	r2, [pc, #76]	@ (8001194 <sample_audio+0xb4>)
 8001148:	883b      	ldrh	r3, [r7, #0]
 800114a:	8013      	strh	r3, [r2, #0]
            
            adc_buffer[sample_index] = sample;
 800114c:	4b12      	ldr	r3, [pc, #72]	@ (8001198 <sample_audio+0xb8>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	4619      	mov	r1, r3
 8001152:	4a12      	ldr	r2, [pc, #72]	@ (800119c <sample_audio+0xbc>)
 8001154:	883b      	ldrh	r3, [r7, #0]
 8001156:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            sample_index++;
 800115a:	4b0f      	ldr	r3, [pc, #60]	@ (8001198 <sample_audio+0xb8>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	3301      	adds	r3, #1
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4b0d      	ldr	r3, [pc, #52]	@ (8001198 <sample_audio+0xb8>)
 8001164:	701a      	strb	r2, [r3, #0]
            
            // When buffer is full, trigger FFT processing
            if(sample_index >= FFT_SIZE) {
 8001166:	4b0c      	ldr	r3, [pc, #48]	@ (8001198 <sample_audio+0xb8>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	b25b      	sxtb	r3, r3
 800116c:	2b00      	cmp	r3, #0
 800116e:	da05      	bge.n	800117c <sample_audio+0x9c>
                sample_index = 0;
 8001170:	4b09      	ldr	r3, [pc, #36]	@ (8001198 <sample_audio+0xb8>)
 8001172:	2200      	movs	r2, #0
 8001174:	701a      	strb	r2, [r3, #0]
                fft_ready = 1;
 8001176:	4b0a      	ldr	r3, [pc, #40]	@ (80011a0 <sample_audio+0xc0>)
 8001178:	2201      	movs	r2, #1
 800117a:	701a      	strb	r2, [r3, #0]
            }
        }
        last_sample = current_time;
 800117c:	4a03      	ldr	r2, [pc, #12]	@ (800118c <sample_audio+0xac>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6013      	str	r3, [r2, #0]
    }
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	200012ac 	.word	0x200012ac
 8001190:	20000080 	.word	0x20000080
 8001194:	200012b0 	.word	0x200012b0
 8001198:	20000520 	.word	0x20000520
 800119c:	2000013c 	.word	0x2000013c
 80011a0:	20000521 	.word	0x20000521

080011a4 <display_spectrum>:

// Enhanced spectrum display with better scaling
void display_spectrum(void) {
 80011a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011a6:	b087      	sub	sp, #28
 80011a8:	af02      	add	r7, sp, #8
    // Clear all LEDs
    for(uint8_t i = 0; i < MAX_LED; i++) {
 80011aa:	2300      	movs	r3, #0
 80011ac:	73fb      	strb	r3, [r7, #15]
 80011ae:	e008      	b.n	80011c2 <display_spectrum+0x1e>
        Set_LED(i, 0, 0, 0);
 80011b0:	7bf8      	ldrb	r0, [r7, #15]
 80011b2:	2300      	movs	r3, #0
 80011b4:	2200      	movs	r2, #0
 80011b6:	2100      	movs	r1, #0
 80011b8:	f000 f8b0 	bl	800131c <Set_LED>
    for(uint8_t i = 0; i < MAX_LED; i++) {
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	3301      	adds	r3, #1
 80011c0:	73fb      	strb	r3, [r7, #15]
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
 80011c4:	2b3b      	cmp	r3, #59	@ 0x3b
 80011c6:	d9f3      	bls.n	80011b0 <display_spectrum+0xc>
    }
    
    // Display each frequency band
    for(uint8_t band = 0; band < FREQ_BANDS; band++) {
 80011c8:	2300      	movs	r3, #0
 80011ca:	73bb      	strb	r3, [r7, #14]
 80011cc:	e08d      	b.n	80012ea <display_spectrum+0x146>
        // Enhanced scaling for better visualization
        uint16_t scaled = freq_bands[band] >> 4; // Divide by 16 for scaling
 80011ce:	7bbb      	ldrb	r3, [r7, #14]
 80011d0:	4a4d      	ldr	r2, [pc, #308]	@ (8001308 <display_spectrum+0x164>)
 80011d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011d6:	091b      	lsrs	r3, r3, #4
 80011d8:	81bb      	strh	r3, [r7, #12]
        if(scaled > 255) scaled = 255;
 80011da:	89bb      	ldrh	r3, [r7, #12]
 80011dc:	2bff      	cmp	r3, #255	@ 0xff
 80011de:	d901      	bls.n	80011e4 <display_spectrum+0x40>
 80011e0:	23ff      	movs	r3, #255	@ 0xff
 80011e2:	81bb      	strh	r3, [r7, #12]
        
        uint8_t intensity = (uint8_t)scaled;
 80011e4:	89bb      	ldrh	r3, [r7, #12]
 80011e6:	71fb      	strb	r3, [r7, #7]
        
        if(intensity > 10) { // Lower threshold for more sensitivity
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	2b0a      	cmp	r3, #10
 80011ec:	d97a      	bls.n	80012e4 <display_spectrum+0x140>
            // Calculate number of LEDs to light in this column (0-3)
            uint8_t num_leds = (intensity * MATRIX_ROWS) / 255;
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	4a46      	ldr	r2, [pc, #280]	@ (800130c <display_spectrum+0x168>)
 80011f2:	fb82 1203 	smull	r1, r2, r2, r3
 80011f6:	1152      	asrs	r2, r2, #5
 80011f8:	17db      	asrs	r3, r3, #31
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	72fb      	strb	r3, [r7, #11]
            if(num_leds > MATRIX_ROWS) num_leds = MATRIX_ROWS;
 80011fe:	7afb      	ldrb	r3, [r7, #11]
 8001200:	2b03      	cmp	r3, #3
 8001202:	d901      	bls.n	8001208 <display_spectrum+0x64>
 8001204:	2303      	movs	r3, #3
 8001206:	72fb      	strb	r3, [r7, #11]
            
            // Get color for this band
            uint8_t r, g, b;
            get_band_color(band, intensity, &r, &g, &b);
 8001208:	1cbc      	adds	r4, r7, #2
 800120a:	1cfa      	adds	r2, r7, #3
 800120c:	79f9      	ldrb	r1, [r7, #7]
 800120e:	7bb8      	ldrb	r0, [r7, #14]
 8001210:	1c7b      	adds	r3, r7, #1
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	4623      	mov	r3, r4
 8001216:	f7ff fea5 	bl	8000f64 <get_band_color>
            
            // Light LEDs from bottom up with gradient effect
            for(uint8_t led = 0; led < num_leds; led++) {
 800121a:	2300      	movs	r3, #0
 800121c:	72bb      	strb	r3, [r7, #10]
 800121e:	e039      	b.n	8001294 <display_spectrum+0xf0>
                uint8_t row = MATRIX_ROWS - 1 - led;
 8001220:	7abb      	ldrb	r3, [r7, #10]
 8001222:	f1c3 0302 	rsb	r3, r3, #2
 8001226:	717b      	strb	r3, [r7, #5]
                
                // Apply brightness gradient (bottom brighter than top)
                uint8_t gradient = 255 - (led * 60); // Reduce brightness by 60 for each level
 8001228:	7abb      	ldrb	r3, [r7, #10]
 800122a:	461a      	mov	r2, r3
 800122c:	011b      	lsls	r3, r3, #4
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	b2db      	uxtb	r3, r3
 8001234:	3b01      	subs	r3, #1
 8001236:	713b      	strb	r3, [r7, #4]
                
                Set_LED_Matrix(row, band, 
 8001238:	7978      	ldrb	r0, [r7, #5]
 800123a:	7bb9      	ldrb	r1, [r7, #14]
                              (r * gradient) / 255,
 800123c:	78fb      	ldrb	r3, [r7, #3]
 800123e:	461a      	mov	r2, r3
 8001240:	793b      	ldrb	r3, [r7, #4]
 8001242:	fb02 f303 	mul.w	r3, r2, r3
                Set_LED_Matrix(row, band, 
 8001246:	4a32      	ldr	r2, [pc, #200]	@ (8001310 <display_spectrum+0x16c>)
 8001248:	fb82 4203 	smull	r4, r2, r2, r3
 800124c:	441a      	add	r2, r3
 800124e:	11d2      	asrs	r2, r2, #7
 8001250:	17db      	asrs	r3, r3, #31
 8001252:	1ad4      	subs	r4, r2, r3
                              (g * gradient) / 255,
 8001254:	78bb      	ldrb	r3, [r7, #2]
 8001256:	461a      	mov	r2, r3
 8001258:	793b      	ldrb	r3, [r7, #4]
 800125a:	fb02 f303 	mul.w	r3, r2, r3
                Set_LED_Matrix(row, band, 
 800125e:	4a2c      	ldr	r2, [pc, #176]	@ (8001310 <display_spectrum+0x16c>)
 8001260:	fb82 5203 	smull	r5, r2, r2, r3
 8001264:	441a      	add	r2, r3
 8001266:	11d2      	asrs	r2, r2, #7
 8001268:	17db      	asrs	r3, r3, #31
 800126a:	1ad5      	subs	r5, r2, r3
                              (b * gradient) / 255);
 800126c:	787b      	ldrb	r3, [r7, #1]
 800126e:	461a      	mov	r2, r3
 8001270:	793b      	ldrb	r3, [r7, #4]
 8001272:	fb02 f303 	mul.w	r3, r2, r3
                Set_LED_Matrix(row, band, 
 8001276:	4a26      	ldr	r2, [pc, #152]	@ (8001310 <display_spectrum+0x16c>)
 8001278:	fb82 6203 	smull	r6, r2, r2, r3
 800127c:	441a      	add	r2, r3
 800127e:	11d2      	asrs	r2, r2, #7
 8001280:	17db      	asrs	r3, r3, #31
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	9300      	str	r3, [sp, #0]
 8001286:	462b      	mov	r3, r5
 8001288:	4622      	mov	r2, r4
 800128a:	f000 f879 	bl	8001380 <Set_LED_Matrix>
            for(uint8_t led = 0; led < num_leds; led++) {
 800128e:	7abb      	ldrb	r3, [r7, #10]
 8001290:	3301      	adds	r3, #1
 8001292:	72bb      	strb	r3, [r7, #10]
 8001294:	7aba      	ldrb	r2, [r7, #10]
 8001296:	7afb      	ldrb	r3, [r7, #11]
 8001298:	429a      	cmp	r2, r3
 800129a:	d3c1      	bcc.n	8001220 <display_spectrum+0x7c>
            }
            
            // Show peak with white color
            uint16_t peak_scaled = peak_bands[band] >> 4;
 800129c:	7bbb      	ldrb	r3, [r7, #14]
 800129e:	4a1d      	ldr	r2, [pc, #116]	@ (8001314 <display_spectrum+0x170>)
 80012a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012a4:	091b      	lsrs	r3, r3, #4
 80012a6:	813b      	strh	r3, [r7, #8]
            if(peak_scaled > 255) peak_scaled = 255;
 80012a8:	893b      	ldrh	r3, [r7, #8]
 80012aa:	2bff      	cmp	r3, #255	@ 0xff
 80012ac:	d901      	bls.n	80012b2 <display_spectrum+0x10e>
 80012ae:	23ff      	movs	r3, #255	@ 0xff
 80012b0:	813b      	strh	r3, [r7, #8]
            uint8_t peak_leds = (peak_scaled * MATRIX_ROWS) / 255;
 80012b2:	893b      	ldrh	r3, [r7, #8]
 80012b4:	4a15      	ldr	r2, [pc, #84]	@ (800130c <display_spectrum+0x168>)
 80012b6:	fb82 1203 	smull	r1, r2, r2, r3
 80012ba:	1152      	asrs	r2, r2, #5
 80012bc:	17db      	asrs	r3, r3, #31
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	71bb      	strb	r3, [r7, #6]
            
            if(peak_leds < MATRIX_ROWS && peak_leds > num_leds) {
 80012c2:	79bb      	ldrb	r3, [r7, #6]
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d80d      	bhi.n	80012e4 <display_spectrum+0x140>
 80012c8:	79ba      	ldrb	r2, [r7, #6]
 80012ca:	7afb      	ldrb	r3, [r7, #11]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d909      	bls.n	80012e4 <display_spectrum+0x140>
                Set_LED_Matrix(MATRIX_ROWS - 1 - peak_leds, band, 255, 255, 255);
 80012d0:	79bb      	ldrb	r3, [r7, #6]
 80012d2:	f1c3 0002 	rsb	r0, r3, #2
 80012d6:	7bb9      	ldrb	r1, [r7, #14]
 80012d8:	23ff      	movs	r3, #255	@ 0xff
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	23ff      	movs	r3, #255	@ 0xff
 80012de:	22ff      	movs	r2, #255	@ 0xff
 80012e0:	f000 f84e 	bl	8001380 <Set_LED_Matrix>
    for(uint8_t band = 0; band < FREQ_BANDS; band++) {
 80012e4:	7bbb      	ldrb	r3, [r7, #14]
 80012e6:	3301      	adds	r3, #1
 80012e8:	73bb      	strb	r3, [r7, #14]
 80012ea:	7bbb      	ldrb	r3, [r7, #14]
 80012ec:	2b09      	cmp	r3, #9
 80012ee:	f67f af6e 	bls.w	80011ce <display_spectrum+0x2a>
            }
        }
    }
    
    Set_Brightness(current_brightness);
 80012f2:	4b09      	ldr	r3, [pc, #36]	@ (8001318 <display_spectrum+0x174>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 f876 	bl	80013e8 <Set_Brightness>
    WS2812_Send();
 80012fc:	f000 f8c2 	bl	8001484 <WS2812_Send>
}
 8001300:	bf00      	nop
 8001302:	3714      	adds	r7, #20
 8001304:	46bd      	mov	sp, r7
 8001306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001308:	200004bc 	.word	0x200004bc
 800130c:	60606061 	.word	0x60606061
 8001310:	80808081 	.word	0x80808081
 8001314:	200004e4 	.word	0x200004e4
 8001318:	20000004 	.word	0x20000004

0800131c <Set_LED>:

void Set_LED(int LEDnum, int Red, int Green, int Blue) {
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
 8001328:	603b      	str	r3, [r7, #0]
    if(LEDnum >= 0 && LEDnum < MAX_LED) {
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	2b00      	cmp	r3, #0
 800132e:	db20      	blt.n	8001372 <Set_LED+0x56>
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2b3b      	cmp	r3, #59	@ 0x3b
 8001334:	dc1d      	bgt.n	8001372 <Set_LED+0x56>
        LED_Data[LEDnum][0] = LEDnum;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	b2d9      	uxtb	r1, r3
 800133a:	4a10      	ldr	r2, [pc, #64]	@ (800137c <Set_LED+0x60>)
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
        LED_Data[LEDnum][1] = Green;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	b2d9      	uxtb	r1, r3
 8001346:	4a0d      	ldr	r2, [pc, #52]	@ (800137c <Set_LED+0x60>)
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	4413      	add	r3, r2
 800134e:	460a      	mov	r2, r1
 8001350:	705a      	strb	r2, [r3, #1]
        LED_Data[LEDnum][2] = Red;
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	b2d9      	uxtb	r1, r3
 8001356:	4a09      	ldr	r2, [pc, #36]	@ (800137c <Set_LED+0x60>)
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4413      	add	r3, r2
 800135e:	460a      	mov	r2, r1
 8001360:	709a      	strb	r2, [r3, #2]
        LED_Data[LEDnum][3] = Blue;
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	b2d9      	uxtb	r1, r3
 8001366:	4a05      	ldr	r2, [pc, #20]	@ (800137c <Set_LED+0x60>)
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	4413      	add	r3, r2
 800136e:	460a      	mov	r2, r1
 8001370:	70da      	strb	r2, [r3, #3]
    }
}
 8001372:	bf00      	nop
 8001374:	3714      	adds	r7, #20
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr
 800137c:	20000524 	.word	0x20000524

08001380 <Set_LED_Matrix>:

void Set_LED_Matrix(int row, int col, int Red, int Green, int Blue) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b0a2      	sub	sp, #136	@ 0x88
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
 800138c:	603b      	str	r3, [r7, #0]
    if(row >= 0 && row < 3 && col >= 0 && col < 10) {
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2b00      	cmp	r3, #0
 8001392:	db22      	blt.n	80013da <Set_LED_Matrix+0x5a>
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2b02      	cmp	r3, #2
 8001398:	dc1f      	bgt.n	80013da <Set_LED_Matrix+0x5a>
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	2b00      	cmp	r3, #0
 800139e:	db1c      	blt.n	80013da <Set_LED_Matrix+0x5a>
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	2b09      	cmp	r3, #9
 80013a4:	dc19      	bgt.n	80013da <Set_LED_Matrix+0x5a>
        const int LED_Matrix[3][10] = {
 80013a6:	4a0f      	ldr	r2, [pc, #60]	@ (80013e4 <Set_LED_Matrix+0x64>)
 80013a8:	f107 0310 	add.w	r3, r7, #16
 80013ac:	4611      	mov	r1, r2
 80013ae:	2278      	movs	r2, #120	@ 0x78
 80013b0:	4618      	mov	r0, r3
 80013b2:	f003 fdc7 	bl	8004f44 <memcpy>
            {40, 39, 38, 37, 36, 35, 34, 33, 32, 31},
            {16, 17, 18, 19, 20, 21, 22, 23, 24, 25},
            {11, 10,  9,  8,  7,  6,  5,  4,  3,  2},
        };
        Set_LED(LED_Matrix[row][col], Red, Green, Blue);
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	4613      	mov	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4413      	add	r3, r2
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	68ba      	ldr	r2, [r7, #8]
 80013c2:	4413      	add	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	3388      	adds	r3, #136	@ 0x88
 80013c8:	443b      	add	r3, r7
 80013ca:	f853 0c78 	ldr.w	r0, [r3, #-120]
 80013ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80013d2:	683a      	ldr	r2, [r7, #0]
 80013d4:	6879      	ldr	r1, [r7, #4]
 80013d6:	f7ff ffa1 	bl	800131c <Set_LED>
    }
}
 80013da:	bf00      	nop
 80013dc:	3788      	adds	r7, #136	@ 0x88
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	08005824 	.word	0x08005824

080013e8 <Set_Brightness>:
        Set_LED(16+col_num, Red, Green, Blue); //mid, from left
        Set_LED(11-col_num, Red, Green, Blue); //bot, from right
    }
}

void Set_Brightness(int brightness) {
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
    #if USE_BRIGHTNESS
    if (brightness > 100) brightness = 100;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2b64      	cmp	r3, #100	@ 0x64
 80013f4:	dd01      	ble.n	80013fa <Set_Brightness+0x12>
 80013f6:	2364      	movs	r3, #100	@ 0x64
 80013f8:	607b      	str	r3, [r7, #4]
    if (brightness < 0) brightness = 0;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	da01      	bge.n	8001404 <Set_Brightness+0x1c>
 8001400:	2300      	movs	r3, #0
 8001402:	607b      	str	r3, [r7, #4]

    for (int i = 0; i < MAX_LED; i++) {
 8001404:	2300      	movs	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	e02d      	b.n	8001466 <Set_Brightness+0x7e>
        LED_Mod[i][0] = LED_Data[i][0];
 800140a:	4a1b      	ldr	r2, [pc, #108]	@ (8001478 <Set_Brightness+0x90>)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8001412:	4a1a      	ldr	r2, [pc, #104]	@ (800147c <Set_Brightness+0x94>)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
        for (int j = 1; j < 4; j++) {
 800141a:	2301      	movs	r3, #1
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	e01c      	b.n	800145a <Set_Brightness+0x72>
            LED_Mod[i][j] = (LED_Data[i][j] * brightness) / 100;
 8001420:	4a15      	ldr	r2, [pc, #84]	@ (8001478 <Set_Brightness+0x90>)
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	441a      	add	r2, r3
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	4413      	add	r3, r2
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	461a      	mov	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	fb02 f303 	mul.w	r3, r2, r3
 8001436:	4a12      	ldr	r2, [pc, #72]	@ (8001480 <Set_Brightness+0x98>)
 8001438:	fb82 1203 	smull	r1, r2, r2, r3
 800143c:	1152      	asrs	r2, r2, #5
 800143e:	17db      	asrs	r3, r3, #31
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	b2d9      	uxtb	r1, r3
 8001444:	4a0d      	ldr	r2, [pc, #52]	@ (800147c <Set_Brightness+0x94>)
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	441a      	add	r2, r3
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	4413      	add	r3, r2
 8001450:	460a      	mov	r2, r1
 8001452:	701a      	strb	r2, [r3, #0]
        for (int j = 1; j < 4; j++) {
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	3301      	adds	r3, #1
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	2b03      	cmp	r3, #3
 800145e:	dddf      	ble.n	8001420 <Set_Brightness+0x38>
    for (int i = 0; i < MAX_LED; i++) {
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	3301      	adds	r3, #1
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2b3b      	cmp	r3, #59	@ 0x3b
 800146a:	ddce      	ble.n	800140a <Set_Brightness+0x22>
        }
    }
    #endif
}
 800146c:	bf00      	nop
 800146e:	bf00      	nop
 8001470:	3714      	adds	r7, #20
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr
 8001478:	20000524 	.word	0x20000524
 800147c:	20000614 	.word	0x20000614
 8001480:	51eb851f 	.word	0x51eb851f

08001484 <WS2812_Send>:

void WS2812_Send(void) {
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
    uint32_t indx = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
    uint32_t color;

    for (int i = 0; i < MAX_LED; i++) {
 800148e:	2300      	movs	r3, #0
 8001490:	613b      	str	r3, [r7, #16]
 8001492:	e031      	b.n	80014f8 <WS2812_Send+0x74>
        color = ((LED_Mod[i][1] << 16) | (LED_Mod[i][2] << 8) | (LED_Mod[i][3]));
 8001494:	4a34      	ldr	r2, [pc, #208]	@ (8001568 <WS2812_Send+0xe4>)
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	4413      	add	r3, r2
 800149c:	785b      	ldrb	r3, [r3, #1]
 800149e:	041a      	lsls	r2, r3, #16
 80014a0:	4931      	ldr	r1, [pc, #196]	@ (8001568 <WS2812_Send+0xe4>)
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	440b      	add	r3, r1
 80014a8:	789b      	ldrb	r3, [r3, #2]
 80014aa:	021b      	lsls	r3, r3, #8
 80014ac:	431a      	orrs	r2, r3
 80014ae:	492e      	ldr	r1, [pc, #184]	@ (8001568 <WS2812_Send+0xe4>)
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	440b      	add	r3, r1
 80014b6:	78db      	ldrb	r3, [r3, #3]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	603b      	str	r3, [r7, #0]

        for (int j = 23; j >= 0; j--) {
 80014bc:	2317      	movs	r3, #23
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	e014      	b.n	80014ec <WS2812_Send+0x68>
            pwmData[indx++] = (color & (1 << j)) ? 60 : 30;
 80014c2:	2201      	movs	r2, #1
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	461a      	mov	r2, r3
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	4013      	ands	r3, r2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <WS2812_Send+0x54>
 80014d4:	213c      	movs	r1, #60	@ 0x3c
 80014d6:	e000      	b.n	80014da <WS2812_Send+0x56>
 80014d8:	211e      	movs	r1, #30
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	1c5a      	adds	r2, r3, #1
 80014de:	617a      	str	r2, [r7, #20]
 80014e0:	4a22      	ldr	r2, [pc, #136]	@ (800156c <WS2812_Send+0xe8>)
 80014e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (int j = 23; j >= 0; j--) {
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	3b01      	subs	r3, #1
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	dae7      	bge.n	80014c2 <WS2812_Send+0x3e>
    for (int i = 0; i < MAX_LED; i++) {
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	3301      	adds	r3, #1
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	2b3b      	cmp	r3, #59	@ 0x3b
 80014fc:	ddca      	ble.n	8001494 <WS2812_Send+0x10>
        }
    }

    for (int i = 0; i < 50; i++) {
 80014fe:	2300      	movs	r3, #0
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	e009      	b.n	8001518 <WS2812_Send+0x94>
        pwmData[indx++] = 0;
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	1c5a      	adds	r2, r3, #1
 8001508:	617a      	str	r2, [r7, #20]
 800150a:	4a18      	ldr	r2, [pc, #96]	@ (800156c <WS2812_Send+0xe8>)
 800150c:	2100      	movs	r1, #0
 800150e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < 50; i++) {
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	3301      	adds	r3, #1
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	2b31      	cmp	r3, #49	@ 0x31
 800151c:	ddf2      	ble.n	8001504 <WS2812_Send+0x80>
    }

    datasentflag = 0;
 800151e:	4b14      	ldr	r3, [pc, #80]	@ (8001570 <WS2812_Send+0xec>)
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	b29b      	uxth	r3, r3
 8001528:	4a10      	ldr	r2, [pc, #64]	@ (800156c <WS2812_Send+0xe8>)
 800152a:	2100      	movs	r1, #0
 800152c:	4811      	ldr	r0, [pc, #68]	@ (8001574 <WS2812_Send+0xf0>)
 800152e:	f002 fc6b 	bl	8003e08 <HAL_TIM_PWM_Start_DMA>

    uint32_t timeout = 100000;
 8001532:	4b11      	ldr	r3, [pc, #68]	@ (8001578 <WS2812_Send+0xf4>)
 8001534:	607b      	str	r3, [r7, #4]
    while(!datasentflag && timeout--);
 8001536:	bf00      	nop
 8001538:	4b0d      	ldr	r3, [pc, #52]	@ (8001570 <WS2812_Send+0xec>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d104      	bne.n	800154a <WS2812_Send+0xc6>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	1e5a      	subs	r2, r3, #1
 8001544:	607a      	str	r2, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1f6      	bne.n	8001538 <WS2812_Send+0xb4>

    if(!timeout) {
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d106      	bne.n	800155e <WS2812_Send+0xda>
        HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8001550:	2100      	movs	r1, #0
 8001552:	4808      	ldr	r0, [pc, #32]	@ (8001574 <WS2812_Send+0xf0>)
 8001554:	f002 fdfa 	bl	800414c <HAL_TIM_PWM_Stop_DMA>
        datasentflag = 1;
 8001558:	4b05      	ldr	r3, [pc, #20]	@ (8001570 <WS2812_Send+0xec>)
 800155a:	2201      	movs	r2, #1
 800155c:	601a      	str	r2, [r3, #0]
    }
}
 800155e:	bf00      	nop
 8001560:	3718      	adds	r7, #24
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000614 	.word	0x20000614
 800156c:	20000704 	.word	0x20000704
 8001570:	200012a8 	.word	0x200012a8
 8001574:	200000b0 	.word	0x200000b0
 8001578:	000186a0 	.word	0x000186a0

0800157c <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1) {
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a05      	ldr	r2, [pc, #20]	@ (80015a0 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d102      	bne.n	8001594 <HAL_TIM_PWM_PulseFinishedCallback+0x18>
        datasentflag = 1;
 800158e:	4b05      	ldr	r3, [pc, #20]	@ (80015a4 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8001590:	2201      	movs	r2, #1
 8001592:	601a      	str	r2, [r3, #0]
    }
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	bc80      	pop	{r7}
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	40012c00 	.word	0x40012c00
 80015a4:	200012a8 	.word	0x200012a8

080015a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b088      	sub	sp, #32
 80015ac:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  HAL_Init();
 80015ae:	f000 fc2d 	bl	8001e0c <HAL_Init>
  SystemClock_Config();
 80015b2:	f000 f8fd 	bl	80017b0 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015b6:	f000 fa53 	bl	8001a60 <MX_GPIO_Init>
  MX_DMA_Init();
 80015ba:	f000 fa33 	bl	8001a24 <MX_DMA_Init>
  MX_TIM1_Init();
 80015be:	f000 f991 	bl	80018e4 <MX_TIM1_Init>
  MX_ADC1_Init();
 80015c2:	f000 f951 	bl	8001868 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  // Initialize LCD
  LCD_Parallel_Init();
 80015c6:	f7ff f83f 	bl	8000648 <LCD_Parallel_Init>
  LCD_Parallel_Clear();
 80015ca:	f7ff f8cf 	bl	800076c <LCD_Parallel_Clear>
  LCD_Parallel_Print("Audio 200-4000Hz");
 80015ce:	4867      	ldr	r0, [pc, #412]	@ (800176c <main+0x1c4>)
 80015d0:	f7ff f900 	bl	80007d4 <LCD_Parallel_Print>
  HAL_Delay(1000);
 80015d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015d8:	f000 fc7a 	bl	8001ed0 <HAL_Delay>

  // Initialize variables
  for(uint8_t i = 0; i < FREQ_BANDS; i++) {
 80015dc:	2300      	movs	r3, #0
 80015de:	75fb      	strb	r3, [r7, #23]
 80015e0:	e016      	b.n	8001610 <main+0x68>
      freq_bands[i] = 0;
 80015e2:	7dfb      	ldrb	r3, [r7, #23]
 80015e4:	4a62      	ldr	r2, [pc, #392]	@ (8001770 <main+0x1c8>)
 80015e6:	2100      	movs	r1, #0
 80015e8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      prev_bands[i] = 0;
 80015ec:	7dfb      	ldrb	r3, [r7, #23]
 80015ee:	4a61      	ldr	r2, [pc, #388]	@ (8001774 <main+0x1cc>)
 80015f0:	2100      	movs	r1, #0
 80015f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      peak_bands[i] = 0;
 80015f6:	7dfb      	ldrb	r3, [r7, #23]
 80015f8:	4a5f      	ldr	r2, [pc, #380]	@ (8001778 <main+0x1d0>)
 80015fa:	2100      	movs	r1, #0
 80015fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      peak_time[i] = 0;
 8001600:	7dfb      	ldrb	r3, [r7, #23]
 8001602:	4a5e      	ldr	r2, [pc, #376]	@ (800177c <main+0x1d4>)
 8001604:	2100      	movs	r1, #0
 8001606:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(uint8_t i = 0; i < FREQ_BANDS; i++) {
 800160a:	7dfb      	ldrb	r3, [r7, #23]
 800160c:	3301      	adds	r3, #1
 800160e:	75fb      	strb	r3, [r7, #23]
 8001610:	7dfb      	ldrb	r3, [r7, #23]
 8001612:	2b09      	cmp	r3, #9
 8001614:	d9e5      	bls.n	80015e2 <main+0x3a>
  }
  
  sample_index = 0;
 8001616:	4b5a      	ldr	r3, [pc, #360]	@ (8001780 <main+0x1d8>)
 8001618:	2200      	movs	r2, #0
 800161a:	701a      	strb	r2, [r3, #0]
  fft_ready = 0;
 800161c:	4b59      	ldr	r3, [pc, #356]	@ (8001784 <main+0x1dc>)
 800161e:	2200      	movs	r2, #0
 8001620:	701a      	strb	r2, [r3, #0]
  gain_factor = 256;
 8001622:	4b59      	ldr	r3, [pc, #356]	@ (8001788 <main+0x1e0>)
 8001624:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001628:	801a      	strh	r2, [r3, #0]

  // Clear LED strip
  for(uint8_t i = 0; i < MAX_LED; i++) {
 800162a:	2300      	movs	r3, #0
 800162c:	75bb      	strb	r3, [r7, #22]
 800162e:	e008      	b.n	8001642 <main+0x9a>
      Set_LED(i, 0, 0, 0);
 8001630:	7db8      	ldrb	r0, [r7, #22]
 8001632:	2300      	movs	r3, #0
 8001634:	2200      	movs	r2, #0
 8001636:	2100      	movs	r1, #0
 8001638:	f7ff fe70 	bl	800131c <Set_LED>
  for(uint8_t i = 0; i < MAX_LED; i++) {
 800163c:	7dbb      	ldrb	r3, [r7, #22]
 800163e:	3301      	adds	r3, #1
 8001640:	75bb      	strb	r3, [r7, #22]
 8001642:	7dbb      	ldrb	r3, [r7, #22]
 8001644:	2b3b      	cmp	r3, #59	@ 0x3b
 8001646:	d9f3      	bls.n	8001630 <main+0x88>
  }
  Set_Brightness(0);
 8001648:	2000      	movs	r0, #0
 800164a:	f7ff fecd 	bl	80013e8 <Set_Brightness>
  WS2812_Send();
 800164e:	f7ff ff19 	bl	8001484 <WS2812_Send>

  LCD_Parallel_Clear();
 8001652:	f7ff f88b 	bl	800076c <LCD_Parallel_Clear>
  LCD_Parallel_SetCursor(0, 0);
 8001656:	2100      	movs	r1, #0
 8001658:	2000      	movs	r0, #0
 800165a:	f7ff f891 	bl	8000780 <LCD_Parallel_SetCursor>
  LCD_Parallel_Print("Range:200-4000Hz");
 800165e:	484b      	ldr	r0, [pc, #300]	@ (800178c <main+0x1e4>)
 8001660:	f7ff f8b8 	bl	80007d4 <LCD_Parallel_Print>
  LCD_Parallel_SetCursor(1, 0);
 8001664:	2100      	movs	r1, #0
 8001666:	2001      	movs	r0, #1
 8001668:	f7ff f88a 	bl	8000780 <LCD_Parallel_SetCursor>
  LCD_Parallel_Print("Res:78Hz/bin");
 800166c:	4848      	ldr	r0, [pc, #288]	@ (8001790 <main+0x1e8>)
 800166e:	f7ff f8b1 	bl	80007d4 <LCD_Parallel_Print>
  HAL_Delay(1000);
 8001672:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001676:	f000 fc2b 	bl	8001ed0 <HAL_Delay>
  
  LCD_Parallel_Clear();
 800167a:	f7ff f877 	bl	800076c <LCD_Parallel_Clear>
  LCD_Parallel_Print("Ready!");
 800167e:	4845      	ldr	r0, [pc, #276]	@ (8001794 <main+0x1ec>)
 8001680:	f7ff f8a8 	bl	80007d4 <LCD_Parallel_Print>
  HAL_Delay(500);
 8001684:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001688:	f000 fc22 	bl	8001ed0 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // Sample audio continuously at high rate
    sample_audio();
 800168c:	f7ff fd28 	bl	80010e0 <sample_audio>
    
    // Process FFT when buffer is full
    if(fft_ready) {
 8001690:	4b3c      	ldr	r3, [pc, #240]	@ (8001784 <main+0x1dc>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d0f8      	beq.n	800168c <main+0xe4>
        fft_ready = 0;
 800169a:	4b3a      	ldr	r3, [pc, #232]	@ (8001784 <main+0x1dc>)
 800169c:	2200      	movs	r2, #0
 800169e:	701a      	strb	r2, [r3, #0]
        
        // Copy ADC data to FFT input and clear imaginary
        for(uint8_t i = 0; i < FFT_SIZE; i++) {
 80016a0:	2300      	movs	r3, #0
 80016a2:	757b      	strb	r3, [r7, #21]
 80016a4:	e00f      	b.n	80016c6 <main+0x11e>
            fft_real[i] = adc_buffer[i];
 80016a6:	7d7a      	ldrb	r2, [r7, #21]
 80016a8:	7d7b      	ldrb	r3, [r7, #21]
 80016aa:	493b      	ldr	r1, [pc, #236]	@ (8001798 <main+0x1f0>)
 80016ac:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80016b0:	4a3a      	ldr	r2, [pc, #232]	@ (800179c <main+0x1f4>)
 80016b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            fft_imag[i] = 0;
 80016b6:	7d7b      	ldrb	r3, [r7, #21]
 80016b8:	4a39      	ldr	r2, [pc, #228]	@ (80017a0 <main+0x1f8>)
 80016ba:	2100      	movs	r1, #0
 80016bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for(uint8_t i = 0; i < FFT_SIZE; i++) {
 80016c0:	7d7b      	ldrb	r3, [r7, #21]
 80016c2:	3301      	adds	r3, #1
 80016c4:	757b      	strb	r3, [r7, #21]
 80016c6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	daeb      	bge.n	80016a6 <main+0xfe>
        }
        
        // Perform FFT
        perform_fft();
 80016ce:	f7ff fa3f 	bl	8000b50 <perform_fft>
        
        // Calculate magnitude
        calculate_magnitude();
 80016d2:	f7ff fa5d 	bl	8000b90 <calculate_magnitude>
        
        // Apply AGC
        apply_agc();
 80016d6:	f7ff fab1 	bl	8000c3c <apply_agc>
        
        // Process frequency bands for 200Hz-4000Hz
        process_frequency_bands();
 80016da:	f7ff fb45 	bl	8000d68 <process_frequency_bands>
        
        // Display on LEDs
        display_spectrum();
 80016de:	f7ff fd61 	bl	80011a4 <display_spectrum>
        
        // Update LCD with frequency range info
        static uint32_t last_lcd = 0;
        if(HAL_GetTick() - last_lcd > 2000) {
 80016e2:	f000 fbeb 	bl	8001ebc <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	4b2e      	ldr	r3, [pc, #184]	@ (80017a4 <main+0x1fc>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80016f2:	d9cb      	bls.n	800168c <main+0xe4>
            LCD_Parallel_Clear();
 80016f4:	f7ff f83a 	bl	800076c <LCD_Parallel_Clear>
            LCD_Parallel_SetCursor(0, 0);
 80016f8:	2100      	movs	r1, #0
 80016fa:	2000      	movs	r0, #0
 80016fc:	f7ff f840 	bl	8000780 <LCD_Parallel_SetCursor>
            LCD_Parallel_Print("200-4000Hz");
 8001700:	4829      	ldr	r0, [pc, #164]	@ (80017a8 <main+0x200>)
 8001702:	f7ff f867 	bl	80007d4 <LCD_Parallel_Print>
            
            LCD_Parallel_SetCursor(1, 0);
 8001706:	2100      	movs	r1, #0
 8001708:	2001      	movs	r0, #1
 800170a:	f7ff f839 	bl	8000780 <LCD_Parallel_SetCursor>
            char debug_str[16];
            // Show gain and max frequency band activity
            uint8_t max_band = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	753b      	strb	r3, [r7, #20]
            for(uint8_t i = 1; i < FREQ_BANDS; i++) {
 8001712:	2301      	movs	r3, #1
 8001714:	74fb      	strb	r3, [r7, #19]
 8001716:	e00e      	b.n	8001736 <main+0x18e>
                if(freq_bands[i] > freq_bands[max_band]) {
 8001718:	7cfb      	ldrb	r3, [r7, #19]
 800171a:	4a15      	ldr	r2, [pc, #84]	@ (8001770 <main+0x1c8>)
 800171c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001720:	7d3b      	ldrb	r3, [r7, #20]
 8001722:	4913      	ldr	r1, [pc, #76]	@ (8001770 <main+0x1c8>)
 8001724:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001728:	429a      	cmp	r2, r3
 800172a:	d901      	bls.n	8001730 <main+0x188>
                    max_band = i;
 800172c:	7cfb      	ldrb	r3, [r7, #19]
 800172e:	753b      	strb	r3, [r7, #20]
            for(uint8_t i = 1; i < FREQ_BANDS; i++) {
 8001730:	7cfb      	ldrb	r3, [r7, #19]
 8001732:	3301      	adds	r3, #1
 8001734:	74fb      	strb	r3, [r7, #19]
 8001736:	7cfb      	ldrb	r3, [r7, #19]
 8001738:	2b09      	cmp	r3, #9
 800173a:	d9ed      	bls.n	8001718 <main+0x170>
                }
            }
            snprintf(debug_str, sizeof(debug_str), "G:%d B:%d", 
 800173c:	4b12      	ldr	r3, [pc, #72]	@ (8001788 <main+0x1e0>)
 800173e:	881b      	ldrh	r3, [r3, #0]
 8001740:	0a1b      	lsrs	r3, r3, #8
 8001742:	b29b      	uxth	r3, r3
 8001744:	461a      	mov	r2, r3
 8001746:	7d3b      	ldrb	r3, [r7, #20]
 8001748:	4638      	mov	r0, r7
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	4613      	mov	r3, r2
 800174e:	4a17      	ldr	r2, [pc, #92]	@ (80017ac <main+0x204>)
 8001750:	2110      	movs	r1, #16
 8001752:	f003 fb8d 	bl	8004e70 <sniprintf>
                    gain_factor >> 8, max_band);
            LCD_Parallel_Print(debug_str);
 8001756:	463b      	mov	r3, r7
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff f83b 	bl	80007d4 <LCD_Parallel_Print>
            
            last_lcd = HAL_GetTick();
 800175e:	f000 fbad 	bl	8001ebc <HAL_GetTick>
 8001762:	4603      	mov	r3, r0
 8001764:	4a0f      	ldr	r2, [pc, #60]	@ (80017a4 <main+0x1fc>)
 8001766:	6013      	str	r3, [r2, #0]
    sample_audio();
 8001768:	e790      	b.n	800168c <main+0xe4>
 800176a:	bf00      	nop
 800176c:	0800589c 	.word	0x0800589c
 8001770:	200004bc 	.word	0x200004bc
 8001774:	200004d0 	.word	0x200004d0
 8001778:	200004e4 	.word	0x200004e4
 800177c:	200004f8 	.word	0x200004f8
 8001780:	20000520 	.word	0x20000520
 8001784:	20000521 	.word	0x20000521
 8001788:	20000000 	.word	0x20000000
 800178c:	080058b0 	.word	0x080058b0
 8001790:	080058c4 	.word	0x080058c4
 8001794:	080058d4 	.word	0x080058d4
 8001798:	2000013c 	.word	0x2000013c
 800179c:	2000023c 	.word	0x2000023c
 80017a0:	2000033c 	.word	0x2000033c
 80017a4:	200012b4 	.word	0x200012b4
 80017a8:	080058dc 	.word	0x080058dc
 80017ac:	080058e8 	.word	0x080058e8

080017b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b094      	sub	sp, #80	@ 0x50
 80017b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017ba:	2228      	movs	r2, #40	@ 0x28
 80017bc:	2100      	movs	r1, #0
 80017be:	4618      	mov	r0, r3
 80017c0:	f003 fb8c 	bl	8004edc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017c4:	f107 0314 	add.w	r3, r7, #20
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	605a      	str	r2, [r3, #4]
 80017dc:	609a      	str	r2, [r3, #8]
 80017de:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017e0:	2301      	movs	r3, #1
 80017e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80017ea:	2300      	movs	r3, #0
 80017ec:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017ee:	2301      	movs	r3, #1
 80017f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017f2:	2302      	movs	r3, #2
 80017f4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80017fc:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001800:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001802:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001806:	4618      	mov	r0, r3
 8001808:	f001 fcee 	bl	80031e8 <HAL_RCC_OscConfig>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001812:	f000 f971 	bl	8001af8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001816:	230f      	movs	r3, #15
 8001818:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800181a:	2302      	movs	r3, #2
 800181c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800181e:	2300      	movs	r3, #0
 8001820:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001822:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001826:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001828:	2300      	movs	r3, #0
 800182a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	2102      	movs	r1, #2
 8001832:	4618      	mov	r0, r3
 8001834:	f001 ff5a 	bl	80036ec <HAL_RCC_ClockConfig>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800183e:	f000 f95b 	bl	8001af8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001842:	2302      	movs	r3, #2
 8001844:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001846:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800184a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800184c:	1d3b      	adds	r3, r7, #4
 800184e:	4618      	mov	r0, r3
 8001850:	f002 f8c6 	bl	80039e0 <HAL_RCCEx_PeriphCLKConfig>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800185a:	f000 f94d 	bl	8001af8 <Error_Handler>
  }
}
 800185e:	bf00      	nop
 8001860:	3750      	adds	r7, #80	@ 0x50
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
	...

08001868 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800186e:	1d3b      	adds	r3, r7, #4
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001878:	4b18      	ldr	r3, [pc, #96]	@ (80018dc <MX_ADC1_Init+0x74>)
 800187a:	4a19      	ldr	r2, [pc, #100]	@ (80018e0 <MX_ADC1_Init+0x78>)
 800187c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800187e:	4b17      	ldr	r3, [pc, #92]	@ (80018dc <MX_ADC1_Init+0x74>)
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001884:	4b15      	ldr	r3, [pc, #84]	@ (80018dc <MX_ADC1_Init+0x74>)
 8001886:	2200      	movs	r2, #0
 8001888:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800188a:	4b14      	ldr	r3, [pc, #80]	@ (80018dc <MX_ADC1_Init+0x74>)
 800188c:	2200      	movs	r2, #0
 800188e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001890:	4b12      	ldr	r3, [pc, #72]	@ (80018dc <MX_ADC1_Init+0x74>)
 8001892:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001896:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001898:	4b10      	ldr	r3, [pc, #64]	@ (80018dc <MX_ADC1_Init+0x74>)
 800189a:	2200      	movs	r2, #0
 800189c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800189e:	4b0f      	ldr	r3, [pc, #60]	@ (80018dc <MX_ADC1_Init+0x74>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018a4:	480d      	ldr	r0, [pc, #52]	@ (80018dc <MX_ADC1_Init+0x74>)
 80018a6:	f000 fb37 	bl	8001f18 <HAL_ADC_Init>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80018b0:	f000 f922 	bl	8001af8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018b8:	2301      	movs	r3, #1
 80018ba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80018bc:	2300      	movs	r3, #0
 80018be:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018c0:	1d3b      	adds	r3, r7, #4
 80018c2:	4619      	mov	r1, r3
 80018c4:	4805      	ldr	r0, [pc, #20]	@ (80018dc <MX_ADC1_Init+0x74>)
 80018c6:	f000 fdeb 	bl	80024a0 <HAL_ADC_ConfigChannel>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80018d0:	f000 f912 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018d4:	bf00      	nop
 80018d6:	3710      	adds	r7, #16
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20000080 	.word	0x20000080
 80018e0:	40012400 	.word	0x40012400

080018e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b096      	sub	sp, #88	@ 0x58
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ea:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001902:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]
 800190e:	60da      	str	r2, [r3, #12]
 8001910:	611a      	str	r2, [r3, #16]
 8001912:	615a      	str	r2, [r3, #20]
 8001914:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001916:	1d3b      	adds	r3, r7, #4
 8001918:	2220      	movs	r2, #32
 800191a:	2100      	movs	r1, #0
 800191c:	4618      	mov	r0, r3
 800191e:	f003 fadd 	bl	8004edc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001922:	4b3e      	ldr	r3, [pc, #248]	@ (8001a1c <MX_TIM1_Init+0x138>)
 8001924:	4a3e      	ldr	r2, [pc, #248]	@ (8001a20 <MX_TIM1_Init+0x13c>)
 8001926:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001928:	4b3c      	ldr	r3, [pc, #240]	@ (8001a1c <MX_TIM1_Init+0x138>)
 800192a:	2200      	movs	r2, #0
 800192c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800192e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a1c <MX_TIM1_Init+0x138>)
 8001930:	2200      	movs	r2, #0
 8001932:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 8001934:	4b39      	ldr	r3, [pc, #228]	@ (8001a1c <MX_TIM1_Init+0x138>)
 8001936:	2259      	movs	r2, #89	@ 0x59
 8001938:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800193a:	4b38      	ldr	r3, [pc, #224]	@ (8001a1c <MX_TIM1_Init+0x138>)
 800193c:	2200      	movs	r2, #0
 800193e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001940:	4b36      	ldr	r3, [pc, #216]	@ (8001a1c <MX_TIM1_Init+0x138>)
 8001942:	2200      	movs	r2, #0
 8001944:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001946:	4b35      	ldr	r3, [pc, #212]	@ (8001a1c <MX_TIM1_Init+0x138>)
 8001948:	2200      	movs	r2, #0
 800194a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800194c:	4833      	ldr	r0, [pc, #204]	@ (8001a1c <MX_TIM1_Init+0x138>)
 800194e:	f002 f9b3 	bl	8003cb8 <HAL_TIM_Base_Init>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001958:	f000 f8ce 	bl	8001af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800195c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001960:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001962:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001966:	4619      	mov	r1, r3
 8001968:	482c      	ldr	r0, [pc, #176]	@ (8001a1c <MX_TIM1_Init+0x138>)
 800196a:	f002 fd77 	bl	800445c <HAL_TIM_ConfigClockSource>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001974:	f000 f8c0 	bl	8001af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001978:	4828      	ldr	r0, [pc, #160]	@ (8001a1c <MX_TIM1_Init+0x138>)
 800197a:	f002 f9ec 	bl	8003d56 <HAL_TIM_PWM_Init>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001984:	f000 f8b8 	bl	8001af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001988:	2300      	movs	r3, #0
 800198a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800198c:	2300      	movs	r3, #0
 800198e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001990:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001994:	4619      	mov	r1, r3
 8001996:	4821      	ldr	r0, [pc, #132]	@ (8001a1c <MX_TIM1_Init+0x138>)
 8001998:	f003 f9ba 	bl	8004d10 <HAL_TIMEx_MasterConfigSynchronization>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80019a2:	f000 f8a9 	bl	8001af8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019a6:	2360      	movs	r3, #96	@ 0x60
 80019a8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80019aa:	2300      	movs	r3, #0
 80019ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019ae:	2300      	movs	r3, #0
 80019b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019b2:	2300      	movs	r3, #0
 80019b4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019b6:	2300      	movs	r3, #0
 80019b8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019ba:	2300      	movs	r3, #0
 80019bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019be:	2300      	movs	r3, #0
 80019c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019c6:	2200      	movs	r2, #0
 80019c8:	4619      	mov	r1, r3
 80019ca:	4814      	ldr	r0, [pc, #80]	@ (8001a1c <MX_TIM1_Init+0x138>)
 80019cc:	f002 fc84 	bl	80042d8 <HAL_TIM_PWM_ConfigChannel>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80019d6:	f000 f88f 	bl	8001af8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019da:	2300      	movs	r3, #0
 80019dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019de:	2300      	movs	r3, #0
 80019e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019e2:	2300      	movs	r3, #0
 80019e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019f4:	2300      	movs	r3, #0
 80019f6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019f8:	1d3b      	adds	r3, r7, #4
 80019fa:	4619      	mov	r1, r3
 80019fc:	4807      	ldr	r0, [pc, #28]	@ (8001a1c <MX_TIM1_Init+0x138>)
 80019fe:	f003 f9e5 	bl	8004dcc <HAL_TIMEx_ConfigBreakDeadTime>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001a08:	f000 f876 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a0c:	4803      	ldr	r0, [pc, #12]	@ (8001a1c <MX_TIM1_Init+0x138>)
 8001a0e:	f000 f931 	bl	8001c74 <HAL_TIM_MspPostInit>

}
 8001a12:	bf00      	nop
 8001a14:	3758      	adds	r7, #88	@ 0x58
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	200000b0 	.word	0x200000b0
 8001a20:	40012c00 	.word	0x40012c00

08001a24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a5c <MX_DMA_Init+0x38>)
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	4a0b      	ldr	r2, [pc, #44]	@ (8001a5c <MX_DMA_Init+0x38>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	6153      	str	r3, [r2, #20]
 8001a36:	4b09      	ldr	r3, [pc, #36]	@ (8001a5c <MX_DMA_Init+0x38>)
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	607b      	str	r3, [r7, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001a42:	2200      	movs	r2, #0
 8001a44:	2100      	movs	r1, #0
 8001a46:	200c      	movs	r0, #12
 8001a48:	f000 ff95 	bl	8002976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001a4c:	200c      	movs	r0, #12
 8001a4e:	f000 ffae 	bl	80029ae <HAL_NVIC_EnableIRQ>

}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40021000 	.word	0x40021000

08001a60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b088      	sub	sp, #32
 8001a64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a66:	f107 0310 	add.w	r3, r7, #16
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	605a      	str	r2, [r3, #4]
 8001a70:	609a      	str	r2, [r3, #8]
 8001a72:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a74:	4b1e      	ldr	r3, [pc, #120]	@ (8001af0 <MX_GPIO_Init+0x90>)
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	4a1d      	ldr	r2, [pc, #116]	@ (8001af0 <MX_GPIO_Init+0x90>)
 8001a7a:	f043 0310 	orr.w	r3, r3, #16
 8001a7e:	6193      	str	r3, [r2, #24]
 8001a80:	4b1b      	ldr	r3, [pc, #108]	@ (8001af0 <MX_GPIO_Init+0x90>)
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	f003 0310 	and.w	r3, r3, #16
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a8c:	4b18      	ldr	r3, [pc, #96]	@ (8001af0 <MX_GPIO_Init+0x90>)
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	4a17      	ldr	r2, [pc, #92]	@ (8001af0 <MX_GPIO_Init+0x90>)
 8001a92:	f043 0320 	orr.w	r3, r3, #32
 8001a96:	6193      	str	r3, [r2, #24]
 8001a98:	4b15      	ldr	r3, [pc, #84]	@ (8001af0 <MX_GPIO_Init+0x90>)
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	f003 0320 	and.w	r3, r3, #32
 8001aa0:	60bb      	str	r3, [r7, #8]
 8001aa2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa4:	4b12      	ldr	r3, [pc, #72]	@ (8001af0 <MX_GPIO_Init+0x90>)
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	4a11      	ldr	r2, [pc, #68]	@ (8001af0 <MX_GPIO_Init+0x90>)
 8001aaa:	f043 0304 	orr.w	r3, r3, #4
 8001aae:	6193      	str	r3, [r2, #24]
 8001ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8001af0 <MX_GPIO_Init+0x90>)
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	607b      	str	r3, [r7, #4]
 8001aba:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001abc:	2200      	movs	r2, #0
 8001abe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ac2:	480c      	ldr	r0, [pc, #48]	@ (8001af4 <MX_GPIO_Init+0x94>)
 8001ac4:	f001 fb78 	bl	80031b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001ac8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001acc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ada:	f107 0310 	add.w	r3, r7, #16
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4804      	ldr	r0, [pc, #16]	@ (8001af4 <MX_GPIO_Init+0x94>)
 8001ae2:	f001 f9e5 	bl	8002eb0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001ae6:	bf00      	nop
 8001ae8:	3720      	adds	r7, #32
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40021000 	.word	0x40021000
 8001af4:	40011000 	.word	0x40011000

08001af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001afc:	b672      	cpsid	i
}
 8001afe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b00:	bf00      	nop
 8001b02:	e7fd      	b.n	8001b00 <Error_Handler+0x8>

08001b04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b0a:	4b15      	ldr	r3, [pc, #84]	@ (8001b60 <HAL_MspInit+0x5c>)
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	4a14      	ldr	r2, [pc, #80]	@ (8001b60 <HAL_MspInit+0x5c>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	6193      	str	r3, [r2, #24]
 8001b16:	4b12      	ldr	r3, [pc, #72]	@ (8001b60 <HAL_MspInit+0x5c>)
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	60bb      	str	r3, [r7, #8]
 8001b20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b22:	4b0f      	ldr	r3, [pc, #60]	@ (8001b60 <HAL_MspInit+0x5c>)
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	4a0e      	ldr	r2, [pc, #56]	@ (8001b60 <HAL_MspInit+0x5c>)
 8001b28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b2c:	61d3      	str	r3, [r2, #28]
 8001b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b60 <HAL_MspInit+0x5c>)
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b36:	607b      	str	r3, [r7, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b64 <HAL_MspInit+0x60>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	4a04      	ldr	r2, [pc, #16]	@ (8001b64 <HAL_MspInit+0x60>)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b56:	bf00      	nop
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr
 8001b60:	40021000 	.word	0x40021000
 8001b64:	40010000 	.word	0x40010000

08001b68 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b088      	sub	sp, #32
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b70:	f107 0310 	add.w	r3, r7, #16
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a14      	ldr	r2, [pc, #80]	@ (8001bd4 <HAL_ADC_MspInit+0x6c>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d121      	bne.n	8001bcc <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b88:	4b13      	ldr	r3, [pc, #76]	@ (8001bd8 <HAL_ADC_MspInit+0x70>)
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	4a12      	ldr	r2, [pc, #72]	@ (8001bd8 <HAL_ADC_MspInit+0x70>)
 8001b8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b92:	6193      	str	r3, [r2, #24]
 8001b94:	4b10      	ldr	r3, [pc, #64]	@ (8001bd8 <HAL_ADC_MspInit+0x70>)
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba0:	4b0d      	ldr	r3, [pc, #52]	@ (8001bd8 <HAL_ADC_MspInit+0x70>)
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	4a0c      	ldr	r2, [pc, #48]	@ (8001bd8 <HAL_ADC_MspInit+0x70>)
 8001ba6:	f043 0304 	orr.w	r3, r3, #4
 8001baa:	6193      	str	r3, [r2, #24]
 8001bac:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd8 <HAL_ADC_MspInit+0x70>)
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	f003 0304 	and.w	r3, r3, #4
 8001bb4:	60bb      	str	r3, [r7, #8]
 8001bb6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc0:	f107 0310 	add.w	r3, r7, #16
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4805      	ldr	r0, [pc, #20]	@ (8001bdc <HAL_ADC_MspInit+0x74>)
 8001bc8:	f001 f972 	bl	8002eb0 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001bcc:	bf00      	nop
 8001bce:	3720      	adds	r7, #32
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40012400 	.word	0x40012400
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	40010800 	.word	0x40010800

08001be0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a1d      	ldr	r2, [pc, #116]	@ (8001c64 <HAL_TIM_Base_MspInit+0x84>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d133      	bne.n	8001c5a <HAL_TIM_Base_MspInit+0x7a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bf2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c68 <HAL_TIM_Base_MspInit+0x88>)
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	4a1c      	ldr	r2, [pc, #112]	@ (8001c68 <HAL_TIM_Base_MspInit+0x88>)
 8001bf8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001bfc:	6193      	str	r3, [r2, #24]
 8001bfe:	4b1a      	ldr	r3, [pc, #104]	@ (8001c68 <HAL_TIM_Base_MspInit+0x88>)
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8001c0a:	4b18      	ldr	r3, [pc, #96]	@ (8001c6c <HAL_TIM_Base_MspInit+0x8c>)
 8001c0c:	4a18      	ldr	r2, [pc, #96]	@ (8001c70 <HAL_TIM_Base_MspInit+0x90>)
 8001c0e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c10:	4b16      	ldr	r3, [pc, #88]	@ (8001c6c <HAL_TIM_Base_MspInit+0x8c>)
 8001c12:	2210      	movs	r2, #16
 8001c14:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c16:	4b15      	ldr	r3, [pc, #84]	@ (8001c6c <HAL_TIM_Base_MspInit+0x8c>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001c1c:	4b13      	ldr	r3, [pc, #76]	@ (8001c6c <HAL_TIM_Base_MspInit+0x8c>)
 8001c1e:	2280      	movs	r2, #128	@ 0x80
 8001c20:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c22:	4b12      	ldr	r3, [pc, #72]	@ (8001c6c <HAL_TIM_Base_MspInit+0x8c>)
 8001c24:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c28:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c2a:	4b10      	ldr	r3, [pc, #64]	@ (8001c6c <HAL_TIM_Base_MspInit+0x8c>)
 8001c2c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c30:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001c32:	4b0e      	ldr	r3, [pc, #56]	@ (8001c6c <HAL_TIM_Base_MspInit+0x8c>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001c38:	4b0c      	ldr	r3, [pc, #48]	@ (8001c6c <HAL_TIM_Base_MspInit+0x8c>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001c3e:	480b      	ldr	r0, [pc, #44]	@ (8001c6c <HAL_TIM_Base_MspInit+0x8c>)
 8001c40:	f000 fed0 	bl	80029e4 <HAL_DMA_Init>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8001c4a:	f7ff ff55 	bl	8001af8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a06      	ldr	r2, [pc, #24]	@ (8001c6c <HAL_TIM_Base_MspInit+0x8c>)
 8001c52:	625a      	str	r2, [r3, #36]	@ 0x24
 8001c54:	4a05      	ldr	r2, [pc, #20]	@ (8001c6c <HAL_TIM_Base_MspInit+0x8c>)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001c5a:	bf00      	nop
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40012c00 	.word	0x40012c00
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	200000f8 	.word	0x200000f8
 8001c70:	4002001c 	.word	0x4002001c

08001c74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b088      	sub	sp, #32
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7c:	f107 0310 	add.w	r3, r7, #16
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a10      	ldr	r2, [pc, #64]	@ (8001cd0 <HAL_TIM_MspPostInit+0x5c>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d118      	bne.n	8001cc6 <HAL_TIM_MspPostInit+0x52>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c94:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd4 <HAL_TIM_MspPostInit+0x60>)
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	4a0e      	ldr	r2, [pc, #56]	@ (8001cd4 <HAL_TIM_MspPostInit+0x60>)
 8001c9a:	f043 0304 	orr.w	r3, r3, #4
 8001c9e:	6193      	str	r3, [r2, #24]
 8001ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd4 <HAL_TIM_MspPostInit+0x60>)
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001cac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cb0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cba:	f107 0310 	add.w	r3, r7, #16
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4805      	ldr	r0, [pc, #20]	@ (8001cd8 <HAL_TIM_MspPostInit+0x64>)
 8001cc2:	f001 f8f5 	bl	8002eb0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001cc6:	bf00      	nop
 8001cc8:	3720      	adds	r7, #32
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40012c00 	.word	0x40012c00
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	40010800 	.word	0x40010800

08001cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ce0:	bf00      	nop
 8001ce2:	e7fd      	b.n	8001ce0 <NMI_Handler+0x4>

08001ce4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ce8:	bf00      	nop
 8001cea:	e7fd      	b.n	8001ce8 <HardFault_Handler+0x4>

08001cec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cf0:	bf00      	nop
 8001cf2:	e7fd      	b.n	8001cf0 <MemManage_Handler+0x4>

08001cf4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cf8:	bf00      	nop
 8001cfa:	e7fd      	b.n	8001cf8 <BusFault_Handler+0x4>

08001cfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d00:	bf00      	nop
 8001d02:	e7fd      	b.n	8001d00 <UsageFault_Handler+0x4>

08001d04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr

08001d10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr

08001d1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr

08001d28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d2c:	f000 f8b4 	bl	8001e98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d30:	bf00      	nop
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001d38:	4802      	ldr	r0, [pc, #8]	@ (8001d44 <DMA1_Channel2_IRQHandler+0x10>)
 8001d3a:	f000 ff85 	bl	8002c48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	200000f8 	.word	0x200000f8

08001d48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d50:	4a14      	ldr	r2, [pc, #80]	@ (8001da4 <_sbrk+0x5c>)
 8001d52:	4b15      	ldr	r3, [pc, #84]	@ (8001da8 <_sbrk+0x60>)
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d5c:	4b13      	ldr	r3, [pc, #76]	@ (8001dac <_sbrk+0x64>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d102      	bne.n	8001d6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d64:	4b11      	ldr	r3, [pc, #68]	@ (8001dac <_sbrk+0x64>)
 8001d66:	4a12      	ldr	r2, [pc, #72]	@ (8001db0 <_sbrk+0x68>)
 8001d68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d6a:	4b10      	ldr	r3, [pc, #64]	@ (8001dac <_sbrk+0x64>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4413      	add	r3, r2
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d207      	bcs.n	8001d88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d78:	f003 f8b8 	bl	8004eec <__errno>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	220c      	movs	r2, #12
 8001d80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d82:	f04f 33ff 	mov.w	r3, #4294967295
 8001d86:	e009      	b.n	8001d9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d88:	4b08      	ldr	r3, [pc, #32]	@ (8001dac <_sbrk+0x64>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d8e:	4b07      	ldr	r3, [pc, #28]	@ (8001dac <_sbrk+0x64>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4413      	add	r3, r2
 8001d96:	4a05      	ldr	r2, [pc, #20]	@ (8001dac <_sbrk+0x64>)
 8001d98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20005000 	.word	0x20005000
 8001da8:	00000400 	.word	0x00000400
 8001dac:	200012b8 	.word	0x200012b8
 8001db0:	20001408 	.word	0x20001408

08001db4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001db8:	bf00      	nop
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bc80      	pop	{r7}
 8001dbe:	4770      	bx	lr

08001dc0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001dc0:	f7ff fff8 	bl	8001db4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dc4:	480b      	ldr	r0, [pc, #44]	@ (8001df4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001dc6:	490c      	ldr	r1, [pc, #48]	@ (8001df8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001dc8:	4a0c      	ldr	r2, [pc, #48]	@ (8001dfc <LoopFillZerobss+0x16>)
  movs r3, #0
 8001dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dcc:	e002      	b.n	8001dd4 <LoopCopyDataInit>

08001dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dd2:	3304      	adds	r3, #4

08001dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dd8:	d3f9      	bcc.n	8001dce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dda:	4a09      	ldr	r2, [pc, #36]	@ (8001e00 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ddc:	4c09      	ldr	r4, [pc, #36]	@ (8001e04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001de0:	e001      	b.n	8001de6 <LoopFillZerobss>

08001de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001de4:	3204      	adds	r2, #4

08001de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001de8:	d3fb      	bcc.n	8001de2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dea:	f003 f885 	bl	8004ef8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001dee:	f7ff fbdb 	bl	80015a8 <main>
  bx lr
 8001df2:	4770      	bx	lr
  ldr r0, =_sdata
 8001df4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001df8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001dfc:	08005a70 	.word	0x08005a70
  ldr r2, =_sbss
 8001e00:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001e04:	20001408 	.word	0x20001408

08001e08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e08:	e7fe      	b.n	8001e08 <ADC1_2_IRQHandler>
	...

08001e0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e10:	4b08      	ldr	r3, [pc, #32]	@ (8001e34 <HAL_Init+0x28>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a07      	ldr	r2, [pc, #28]	@ (8001e34 <HAL_Init+0x28>)
 8001e16:	f043 0310 	orr.w	r3, r3, #16
 8001e1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e1c:	2003      	movs	r0, #3
 8001e1e:	f000 fd9f 	bl	8002960 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e22:	200f      	movs	r0, #15
 8001e24:	f000 f808 	bl	8001e38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e28:	f7ff fe6c 	bl	8001b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40022000 	.word	0x40022000

08001e38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e40:	4b12      	ldr	r3, [pc, #72]	@ (8001e8c <HAL_InitTick+0x54>)
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	4b12      	ldr	r3, [pc, #72]	@ (8001e90 <HAL_InitTick+0x58>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	4619      	mov	r1, r3
 8001e4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e56:	4618      	mov	r0, r3
 8001e58:	f000 fdb7 	bl	80029ca <HAL_SYSTICK_Config>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e00e      	b.n	8001e84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b0f      	cmp	r3, #15
 8001e6a:	d80a      	bhi.n	8001e82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	f04f 30ff 	mov.w	r0, #4294967295
 8001e74:	f000 fd7f 	bl	8002976 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e78:	4a06      	ldr	r2, [pc, #24]	@ (8001e94 <HAL_InitTick+0x5c>)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	e000      	b.n	8001e84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	20000008 	.word	0x20000008
 8001e90:	20000010 	.word	0x20000010
 8001e94:	2000000c 	.word	0x2000000c

08001e98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e9c:	4b05      	ldr	r3, [pc, #20]	@ (8001eb4 <HAL_IncTick+0x1c>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	4b05      	ldr	r3, [pc, #20]	@ (8001eb8 <HAL_IncTick+0x20>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	4a03      	ldr	r2, [pc, #12]	@ (8001eb8 <HAL_IncTick+0x20>)
 8001eaa:	6013      	str	r3, [r2, #0]
}
 8001eac:	bf00      	nop
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr
 8001eb4:	20000010 	.word	0x20000010
 8001eb8:	200012bc 	.word	0x200012bc

08001ebc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return uwTick;
 8001ec0:	4b02      	ldr	r3, [pc, #8]	@ (8001ecc <HAL_GetTick+0x10>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr
 8001ecc:	200012bc 	.word	0x200012bc

08001ed0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ed8:	f7ff fff0 	bl	8001ebc <HAL_GetTick>
 8001edc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee8:	d005      	beq.n	8001ef6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eea:	4b0a      	ldr	r3, [pc, #40]	@ (8001f14 <HAL_Delay+0x44>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ef6:	bf00      	nop
 8001ef8:	f7ff ffe0 	bl	8001ebc <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d8f7      	bhi.n	8001ef8 <HAL_Delay+0x28>
  {
  }
}
 8001f08:	bf00      	nop
 8001f0a:	bf00      	nop
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20000010 	.word	0x20000010

08001f18 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f20:	2300      	movs	r3, #0
 8001f22:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e0be      	b.n	80020b8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d109      	bne.n	8001f5c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7ff fe06 	bl	8001b68 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f000 fbf1 	bl	8002744 <ADC_ConversionStop_Disable>
 8001f62:	4603      	mov	r3, r0
 8001f64:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f6a:	f003 0310 	and.w	r3, r3, #16
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f040 8099 	bne.w	80020a6 <HAL_ADC_Init+0x18e>
 8001f74:	7dfb      	ldrb	r3, [r7, #23]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f040 8095 	bne.w	80020a6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f80:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001f84:	f023 0302 	bic.w	r3, r3, #2
 8001f88:	f043 0202 	orr.w	r2, r3, #2
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f98:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	7b1b      	ldrb	r3, [r3, #12]
 8001f9e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001fa0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fb0:	d003      	beq.n	8001fba <HAL_ADC_Init+0xa2>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d102      	bne.n	8001fc0 <HAL_ADC_Init+0xa8>
 8001fba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fbe:	e000      	b.n	8001fc2 <HAL_ADC_Init+0xaa>
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	7d1b      	ldrb	r3, [r3, #20]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d119      	bne.n	8002004 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	7b1b      	ldrb	r3, [r3, #12]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d109      	bne.n	8001fec <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	035a      	lsls	r2, r3, #13
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001fe8:	613b      	str	r3, [r7, #16]
 8001fea:	e00b      	b.n	8002004 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ff0:	f043 0220 	orr.w	r2, r3, #32
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ffc:	f043 0201 	orr.w	r2, r3, #1
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	430a      	orrs	r2, r1
 8002016:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	689a      	ldr	r2, [r3, #8]
 800201e:	4b28      	ldr	r3, [pc, #160]	@ (80020c0 <HAL_ADC_Init+0x1a8>)
 8002020:	4013      	ands	r3, r2
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	6812      	ldr	r2, [r2, #0]
 8002026:	68b9      	ldr	r1, [r7, #8]
 8002028:	430b      	orrs	r3, r1
 800202a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002034:	d003      	beq.n	800203e <HAL_ADC_Init+0x126>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d104      	bne.n	8002048 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	3b01      	subs	r3, #1
 8002044:	051b      	lsls	r3, r3, #20
 8002046:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800204e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	430a      	orrs	r2, r1
 800205a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	689a      	ldr	r2, [r3, #8]
 8002062:	4b18      	ldr	r3, [pc, #96]	@ (80020c4 <HAL_ADC_Init+0x1ac>)
 8002064:	4013      	ands	r3, r2
 8002066:	68ba      	ldr	r2, [r7, #8]
 8002068:	429a      	cmp	r2, r3
 800206a:	d10b      	bne.n	8002084 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002076:	f023 0303 	bic.w	r3, r3, #3
 800207a:	f043 0201 	orr.w	r2, r3, #1
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002082:	e018      	b.n	80020b6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002088:	f023 0312 	bic.w	r3, r3, #18
 800208c:	f043 0210 	orr.w	r2, r3, #16
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002098:	f043 0201 	orr.w	r2, r3, #1
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020a4:	e007      	b.n	80020b6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020aa:	f043 0210 	orr.w	r2, r3, #16
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80020b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3718      	adds	r7, #24
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	ffe1f7fd 	.word	0xffe1f7fd
 80020c4:	ff1f0efe 	.word	0xff1f0efe

080020c8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020d0:	2300      	movs	r3, #0
 80020d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d101      	bne.n	80020e2 <HAL_ADC_Start+0x1a>
 80020de:	2302      	movs	r3, #2
 80020e0:	e098      	b.n	8002214 <HAL_ADC_Start+0x14c>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 fad0 	bl	8002690 <ADC_Enable>
 80020f0:	4603      	mov	r3, r0
 80020f2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80020f4:	7bfb      	ldrb	r3, [r7, #15]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f040 8087 	bne.w	800220a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002100:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002104:	f023 0301 	bic.w	r3, r3, #1
 8002108:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a41      	ldr	r2, [pc, #260]	@ (800221c <HAL_ADC_Start+0x154>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d105      	bne.n	8002126 <HAL_ADC_Start+0x5e>
 800211a:	4b41      	ldr	r3, [pc, #260]	@ (8002220 <HAL_ADC_Start+0x158>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d115      	bne.n	8002152 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800212a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800213c:	2b00      	cmp	r3, #0
 800213e:	d026      	beq.n	800218e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002144:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002148:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002150:	e01d      	b.n	800218e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002156:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a2f      	ldr	r2, [pc, #188]	@ (8002220 <HAL_ADC_Start+0x158>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d004      	beq.n	8002172 <HAL_ADC_Start+0xaa>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a2b      	ldr	r2, [pc, #172]	@ (800221c <HAL_ADC_Start+0x154>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d10d      	bne.n	800218e <HAL_ADC_Start+0xc6>
 8002172:	4b2b      	ldr	r3, [pc, #172]	@ (8002220 <HAL_ADC_Start+0x158>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800217a:	2b00      	cmp	r3, #0
 800217c:	d007      	beq.n	800218e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002182:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002186:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002192:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d006      	beq.n	80021a8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800219e:	f023 0206 	bic.w	r2, r3, #6
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80021a6:	e002      	b.n	80021ae <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f06f 0202 	mvn.w	r2, #2
 80021be:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80021ca:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80021ce:	d113      	bne.n	80021f8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80021d4:	4a11      	ldr	r2, [pc, #68]	@ (800221c <HAL_ADC_Start+0x154>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d105      	bne.n	80021e6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80021da:	4b11      	ldr	r3, [pc, #68]	@ (8002220 <HAL_ADC_Start+0x158>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d108      	bne.n	80021f8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80021f4:	609a      	str	r2, [r3, #8]
 80021f6:	e00c      	b.n	8002212 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689a      	ldr	r2, [r3, #8]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002206:	609a      	str	r2, [r3, #8]
 8002208:	e003      	b.n	8002212 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002212:	7bfb      	ldrb	r3, [r7, #15]
}
 8002214:	4618      	mov	r0, r3
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40012800 	.word	0x40012800
 8002220:	40012400 	.word	0x40012400

08002224 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800222c:	2300      	movs	r3, #0
 800222e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002236:	2b01      	cmp	r3, #1
 8002238:	d101      	bne.n	800223e <HAL_ADC_Stop+0x1a>
 800223a:	2302      	movs	r3, #2
 800223c:	e01a      	b.n	8002274 <HAL_ADC_Stop+0x50>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 fa7c 	bl	8002744 <ADC_ConversionStop_Disable>
 800224c:	4603      	mov	r3, r0
 800224e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d109      	bne.n	800226a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800225a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800225e:	f023 0301 	bic.w	r3, r3, #1
 8002262:	f043 0201 	orr.w	r2, r3, #1
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002272:	7bfb      	ldrb	r3, [r7, #15]
}
 8002274:	4618      	mov	r0, r3
 8002276:	3710      	adds	r7, #16
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800227c:	b590      	push	{r4, r7, lr}
 800227e:	b087      	sub	sp, #28
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002286:	2300      	movs	r3, #0
 8002288:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800228a:	2300      	movs	r3, #0
 800228c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800228e:	2300      	movs	r3, #0
 8002290:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002292:	f7ff fe13 	bl	8001ebc <HAL_GetTick>
 8002296:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00b      	beq.n	80022be <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022aa:	f043 0220 	orr.w	r2, r3, #32
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e0d3      	b.n	8002466 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d131      	bne.n	8002330 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022d2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d12a      	bne.n	8002330 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80022da:	e021      	b.n	8002320 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e2:	d01d      	beq.n	8002320 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d007      	beq.n	80022fa <HAL_ADC_PollForConversion+0x7e>
 80022ea:	f7ff fde7 	bl	8001ebc <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d212      	bcs.n	8002320 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d10b      	bne.n	8002320 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800230c:	f043 0204 	orr.w	r2, r3, #4
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e0a2      	b.n	8002466 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d0d6      	beq.n	80022dc <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800232e:	e070      	b.n	8002412 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002330:	4b4f      	ldr	r3, [pc, #316]	@ (8002470 <HAL_ADC_PollForConversion+0x1f4>)
 8002332:	681c      	ldr	r4, [r3, #0]
 8002334:	2002      	movs	r0, #2
 8002336:	f001 fc09 	bl	8003b4c <HAL_RCCEx_GetPeriphCLKFreq>
 800233a:	4603      	mov	r3, r0
 800233c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6919      	ldr	r1, [r3, #16]
 8002346:	4b4b      	ldr	r3, [pc, #300]	@ (8002474 <HAL_ADC_PollForConversion+0x1f8>)
 8002348:	400b      	ands	r3, r1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d118      	bne.n	8002380 <HAL_ADC_PollForConversion+0x104>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68d9      	ldr	r1, [r3, #12]
 8002354:	4b48      	ldr	r3, [pc, #288]	@ (8002478 <HAL_ADC_PollForConversion+0x1fc>)
 8002356:	400b      	ands	r3, r1
 8002358:	2b00      	cmp	r3, #0
 800235a:	d111      	bne.n	8002380 <HAL_ADC_PollForConversion+0x104>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6919      	ldr	r1, [r3, #16]
 8002362:	4b46      	ldr	r3, [pc, #280]	@ (800247c <HAL_ADC_PollForConversion+0x200>)
 8002364:	400b      	ands	r3, r1
 8002366:	2b00      	cmp	r3, #0
 8002368:	d108      	bne.n	800237c <HAL_ADC_PollForConversion+0x100>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68d9      	ldr	r1, [r3, #12]
 8002370:	4b43      	ldr	r3, [pc, #268]	@ (8002480 <HAL_ADC_PollForConversion+0x204>)
 8002372:	400b      	ands	r3, r1
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_ADC_PollForConversion+0x100>
 8002378:	2314      	movs	r3, #20
 800237a:	e020      	b.n	80023be <HAL_ADC_PollForConversion+0x142>
 800237c:	2329      	movs	r3, #41	@ 0x29
 800237e:	e01e      	b.n	80023be <HAL_ADC_PollForConversion+0x142>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6919      	ldr	r1, [r3, #16]
 8002386:	4b3d      	ldr	r3, [pc, #244]	@ (800247c <HAL_ADC_PollForConversion+0x200>)
 8002388:	400b      	ands	r3, r1
 800238a:	2b00      	cmp	r3, #0
 800238c:	d106      	bne.n	800239c <HAL_ADC_PollForConversion+0x120>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68d9      	ldr	r1, [r3, #12]
 8002394:	4b3a      	ldr	r3, [pc, #232]	@ (8002480 <HAL_ADC_PollForConversion+0x204>)
 8002396:	400b      	ands	r3, r1
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00d      	beq.n	80023b8 <HAL_ADC_PollForConversion+0x13c>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6919      	ldr	r1, [r3, #16]
 80023a2:	4b38      	ldr	r3, [pc, #224]	@ (8002484 <HAL_ADC_PollForConversion+0x208>)
 80023a4:	400b      	ands	r3, r1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d108      	bne.n	80023bc <HAL_ADC_PollForConversion+0x140>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68d9      	ldr	r1, [r3, #12]
 80023b0:	4b34      	ldr	r3, [pc, #208]	@ (8002484 <HAL_ADC_PollForConversion+0x208>)
 80023b2:	400b      	ands	r3, r1
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_ADC_PollForConversion+0x140>
 80023b8:	2354      	movs	r3, #84	@ 0x54
 80023ba:	e000      	b.n	80023be <HAL_ADC_PollForConversion+0x142>
 80023bc:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80023be:	fb02 f303 	mul.w	r3, r2, r3
 80023c2:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80023c4:	e021      	b.n	800240a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023cc:	d01a      	beq.n	8002404 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d007      	beq.n	80023e4 <HAL_ADC_PollForConversion+0x168>
 80023d4:	f7ff fd72 	bl	8001ebc <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	683a      	ldr	r2, [r7, #0]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d20f      	bcs.n	8002404 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d90b      	bls.n	8002404 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f0:	f043 0204 	orr.w	r2, r3, #4
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e030      	b.n	8002466 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	3301      	adds	r3, #1
 8002408:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	429a      	cmp	r2, r3
 8002410:	d8d9      	bhi.n	80023c6 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f06f 0212 	mvn.w	r2, #18
 800241a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002420:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002432:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002436:	d115      	bne.n	8002464 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800243c:	2b00      	cmp	r3, #0
 800243e:	d111      	bne.n	8002464 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002444:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002450:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d105      	bne.n	8002464 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800245c:	f043 0201 	orr.w	r2, r3, #1
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	371c      	adds	r7, #28
 800246a:	46bd      	mov	sp, r7
 800246c:	bd90      	pop	{r4, r7, pc}
 800246e:	bf00      	nop
 8002470:	20000008 	.word	0x20000008
 8002474:	24924924 	.word	0x24924924
 8002478:	00924924 	.word	0x00924924
 800247c:	12492492 	.word	0x12492492
 8002480:	00492492 	.word	0x00492492
 8002484:	00249249 	.word	0x00249249

08002488 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002496:	4618      	mov	r0, r3
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr

080024a0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024aa:	2300      	movs	r3, #0
 80024ac:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d101      	bne.n	80024c0 <HAL_ADC_ConfigChannel+0x20>
 80024bc:	2302      	movs	r3, #2
 80024be:	e0dc      	b.n	800267a <HAL_ADC_ConfigChannel+0x1da>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	2b06      	cmp	r3, #6
 80024ce:	d81c      	bhi.n	800250a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	4613      	mov	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	4413      	add	r3, r2
 80024e0:	3b05      	subs	r3, #5
 80024e2:	221f      	movs	r2, #31
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	43db      	mvns	r3, r3
 80024ea:	4019      	ands	r1, r3
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	6818      	ldr	r0, [r3, #0]
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	4613      	mov	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4413      	add	r3, r2
 80024fa:	3b05      	subs	r3, #5
 80024fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	430a      	orrs	r2, r1
 8002506:	635a      	str	r2, [r3, #52]	@ 0x34
 8002508:	e03c      	b.n	8002584 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b0c      	cmp	r3, #12
 8002510:	d81c      	bhi.n	800254c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685a      	ldr	r2, [r3, #4]
 800251c:	4613      	mov	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4413      	add	r3, r2
 8002522:	3b23      	subs	r3, #35	@ 0x23
 8002524:	221f      	movs	r2, #31
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	43db      	mvns	r3, r3
 800252c:	4019      	ands	r1, r3
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	6818      	ldr	r0, [r3, #0]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	4613      	mov	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	3b23      	subs	r3, #35	@ 0x23
 800253e:	fa00 f203 	lsl.w	r2, r0, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	430a      	orrs	r2, r1
 8002548:	631a      	str	r2, [r3, #48]	@ 0x30
 800254a:	e01b      	b.n	8002584 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	4613      	mov	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4413      	add	r3, r2
 800255c:	3b41      	subs	r3, #65	@ 0x41
 800255e:	221f      	movs	r2, #31
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	43db      	mvns	r3, r3
 8002566:	4019      	ands	r1, r3
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	6818      	ldr	r0, [r3, #0]
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	4613      	mov	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4413      	add	r3, r2
 8002576:	3b41      	subs	r3, #65	@ 0x41
 8002578:	fa00 f203 	lsl.w	r2, r0, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	430a      	orrs	r2, r1
 8002582:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2b09      	cmp	r3, #9
 800258a:	d91c      	bls.n	80025c6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68d9      	ldr	r1, [r3, #12]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	4613      	mov	r3, r2
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	4413      	add	r3, r2
 800259c:	3b1e      	subs	r3, #30
 800259e:	2207      	movs	r2, #7
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	43db      	mvns	r3, r3
 80025a6:	4019      	ands	r1, r3
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	6898      	ldr	r0, [r3, #8]
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	4613      	mov	r3, r2
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	4413      	add	r3, r2
 80025b6:	3b1e      	subs	r3, #30
 80025b8:	fa00 f203 	lsl.w	r2, r0, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	60da      	str	r2, [r3, #12]
 80025c4:	e019      	b.n	80025fa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6919      	ldr	r1, [r3, #16]
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	4613      	mov	r3, r2
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	4413      	add	r3, r2
 80025d6:	2207      	movs	r2, #7
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	43db      	mvns	r3, r3
 80025de:	4019      	ands	r1, r3
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	6898      	ldr	r0, [r3, #8]
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	4613      	mov	r3, r2
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	4413      	add	r3, r2
 80025ee:	fa00 f203 	lsl.w	r2, r0, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	430a      	orrs	r2, r1
 80025f8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2b10      	cmp	r3, #16
 8002600:	d003      	beq.n	800260a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002606:	2b11      	cmp	r3, #17
 8002608:	d132      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a1d      	ldr	r2, [pc, #116]	@ (8002684 <HAL_ADC_ConfigChannel+0x1e4>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d125      	bne.n	8002660 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d126      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002630:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2b10      	cmp	r3, #16
 8002638:	d11a      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800263a:	4b13      	ldr	r3, [pc, #76]	@ (8002688 <HAL_ADC_ConfigChannel+0x1e8>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a13      	ldr	r2, [pc, #76]	@ (800268c <HAL_ADC_ConfigChannel+0x1ec>)
 8002640:	fba2 2303 	umull	r2, r3, r2, r3
 8002644:	0c9a      	lsrs	r2, r3, #18
 8002646:	4613      	mov	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	4413      	add	r3, r2
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002650:	e002      	b.n	8002658 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	3b01      	subs	r3, #1
 8002656:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1f9      	bne.n	8002652 <HAL_ADC_ConfigChannel+0x1b2>
 800265e:	e007      	b.n	8002670 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002664:	f043 0220 	orr.w	r2, r3, #32
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002678:	7bfb      	ldrb	r3, [r7, #15]
}
 800267a:	4618      	mov	r0, r3
 800267c:	3714      	adds	r7, #20
 800267e:	46bd      	mov	sp, r7
 8002680:	bc80      	pop	{r7}
 8002682:	4770      	bx	lr
 8002684:	40012400 	.word	0x40012400
 8002688:	20000008 	.word	0x20000008
 800268c:	431bde83 	.word	0x431bde83

08002690 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002698:	2300      	movs	r3, #0
 800269a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800269c:	2300      	movs	r3, #0
 800269e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d040      	beq.n	8002730 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f042 0201 	orr.w	r2, r2, #1
 80026bc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026be:	4b1f      	ldr	r3, [pc, #124]	@ (800273c <ADC_Enable+0xac>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a1f      	ldr	r2, [pc, #124]	@ (8002740 <ADC_Enable+0xb0>)
 80026c4:	fba2 2303 	umull	r2, r3, r2, r3
 80026c8:	0c9b      	lsrs	r3, r3, #18
 80026ca:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80026cc:	e002      	b.n	80026d4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	3b01      	subs	r3, #1
 80026d2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1f9      	bne.n	80026ce <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026da:	f7ff fbef 	bl	8001ebc <HAL_GetTick>
 80026de:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80026e0:	e01f      	b.n	8002722 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026e2:	f7ff fbeb 	bl	8001ebc <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d918      	bls.n	8002722 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d011      	beq.n	8002722 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002702:	f043 0210 	orr.w	r2, r3, #16
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800270e:	f043 0201 	orr.w	r2, r3, #1
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e007      	b.n	8002732 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b01      	cmp	r3, #1
 800272e:	d1d8      	bne.n	80026e2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	20000008 	.word	0x20000008
 8002740:	431bde83 	.word	0x431bde83

08002744 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800274c:	2300      	movs	r3, #0
 800274e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b01      	cmp	r3, #1
 800275c:	d12e      	bne.n	80027bc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 0201 	bic.w	r2, r2, #1
 800276c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800276e:	f7ff fba5 	bl	8001ebc <HAL_GetTick>
 8002772:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002774:	e01b      	b.n	80027ae <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002776:	f7ff fba1 	bl	8001ebc <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d914      	bls.n	80027ae <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b01      	cmp	r3, #1
 8002790:	d10d      	bne.n	80027ae <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002796:	f043 0210 	orr.w	r2, r3, #16
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027a2:	f043 0201 	orr.w	r2, r3, #1
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e007      	b.n	80027be <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d0dc      	beq.n	8002776 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
	...

080027c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027d8:	4b0c      	ldr	r3, [pc, #48]	@ (800280c <__NVIC_SetPriorityGrouping+0x44>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027de:	68ba      	ldr	r2, [r7, #8]
 80027e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027e4:	4013      	ands	r3, r2
 80027e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027fa:	4a04      	ldr	r2, [pc, #16]	@ (800280c <__NVIC_SetPriorityGrouping+0x44>)
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	60d3      	str	r3, [r2, #12]
}
 8002800:	bf00      	nop
 8002802:	3714      	adds	r7, #20
 8002804:	46bd      	mov	sp, r7
 8002806:	bc80      	pop	{r7}
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	e000ed00 	.word	0xe000ed00

08002810 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002814:	4b04      	ldr	r3, [pc, #16]	@ (8002828 <__NVIC_GetPriorityGrouping+0x18>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	0a1b      	lsrs	r3, r3, #8
 800281a:	f003 0307 	and.w	r3, r3, #7
}
 800281e:	4618      	mov	r0, r3
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	e000ed00 	.word	0xe000ed00

0800282c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283a:	2b00      	cmp	r3, #0
 800283c:	db0b      	blt.n	8002856 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800283e:	79fb      	ldrb	r3, [r7, #7]
 8002840:	f003 021f 	and.w	r2, r3, #31
 8002844:	4906      	ldr	r1, [pc, #24]	@ (8002860 <__NVIC_EnableIRQ+0x34>)
 8002846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284a:	095b      	lsrs	r3, r3, #5
 800284c:	2001      	movs	r0, #1
 800284e:	fa00 f202 	lsl.w	r2, r0, r2
 8002852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr
 8002860:	e000e100 	.word	0xe000e100

08002864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	4603      	mov	r3, r0
 800286c:	6039      	str	r1, [r7, #0]
 800286e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002874:	2b00      	cmp	r3, #0
 8002876:	db0a      	blt.n	800288e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	b2da      	uxtb	r2, r3
 800287c:	490c      	ldr	r1, [pc, #48]	@ (80028b0 <__NVIC_SetPriority+0x4c>)
 800287e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002882:	0112      	lsls	r2, r2, #4
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	440b      	add	r3, r1
 8002888:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800288c:	e00a      	b.n	80028a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	b2da      	uxtb	r2, r3
 8002892:	4908      	ldr	r1, [pc, #32]	@ (80028b4 <__NVIC_SetPriority+0x50>)
 8002894:	79fb      	ldrb	r3, [r7, #7]
 8002896:	f003 030f 	and.w	r3, r3, #15
 800289a:	3b04      	subs	r3, #4
 800289c:	0112      	lsls	r2, r2, #4
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	440b      	add	r3, r1
 80028a2:	761a      	strb	r2, [r3, #24]
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bc80      	pop	{r7}
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	e000e100 	.word	0xe000e100
 80028b4:	e000ed00 	.word	0xe000ed00

080028b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b089      	sub	sp, #36	@ 0x24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	f1c3 0307 	rsb	r3, r3, #7
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	bf28      	it	cs
 80028d6:	2304      	movcs	r3, #4
 80028d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	3304      	adds	r3, #4
 80028de:	2b06      	cmp	r3, #6
 80028e0:	d902      	bls.n	80028e8 <NVIC_EncodePriority+0x30>
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	3b03      	subs	r3, #3
 80028e6:	e000      	b.n	80028ea <NVIC_EncodePriority+0x32>
 80028e8:	2300      	movs	r3, #0
 80028ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028ec:	f04f 32ff 	mov.w	r2, #4294967295
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	43da      	mvns	r2, r3
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	401a      	ands	r2, r3
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002900:	f04f 31ff 	mov.w	r1, #4294967295
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	fa01 f303 	lsl.w	r3, r1, r3
 800290a:	43d9      	mvns	r1, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002910:	4313      	orrs	r3, r2
         );
}
 8002912:	4618      	mov	r0, r3
 8002914:	3724      	adds	r7, #36	@ 0x24
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr

0800291c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3b01      	subs	r3, #1
 8002928:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800292c:	d301      	bcc.n	8002932 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800292e:	2301      	movs	r3, #1
 8002930:	e00f      	b.n	8002952 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002932:	4a0a      	ldr	r2, [pc, #40]	@ (800295c <SysTick_Config+0x40>)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	3b01      	subs	r3, #1
 8002938:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800293a:	210f      	movs	r1, #15
 800293c:	f04f 30ff 	mov.w	r0, #4294967295
 8002940:	f7ff ff90 	bl	8002864 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002944:	4b05      	ldr	r3, [pc, #20]	@ (800295c <SysTick_Config+0x40>)
 8002946:	2200      	movs	r2, #0
 8002948:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800294a:	4b04      	ldr	r3, [pc, #16]	@ (800295c <SysTick_Config+0x40>)
 800294c:	2207      	movs	r2, #7
 800294e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	e000e010 	.word	0xe000e010

08002960 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f7ff ff2d 	bl	80027c8 <__NVIC_SetPriorityGrouping>
}
 800296e:	bf00      	nop
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002976:	b580      	push	{r7, lr}
 8002978:	b086      	sub	sp, #24
 800297a:	af00      	add	r7, sp, #0
 800297c:	4603      	mov	r3, r0
 800297e:	60b9      	str	r1, [r7, #8]
 8002980:	607a      	str	r2, [r7, #4]
 8002982:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002984:	2300      	movs	r3, #0
 8002986:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002988:	f7ff ff42 	bl	8002810 <__NVIC_GetPriorityGrouping>
 800298c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	68b9      	ldr	r1, [r7, #8]
 8002992:	6978      	ldr	r0, [r7, #20]
 8002994:	f7ff ff90 	bl	80028b8 <NVIC_EncodePriority>
 8002998:	4602      	mov	r2, r0
 800299a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800299e:	4611      	mov	r1, r2
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff ff5f 	bl	8002864 <__NVIC_SetPriority>
}
 80029a6:	bf00      	nop
 80029a8:	3718      	adds	r7, #24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b082      	sub	sp, #8
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	4603      	mov	r3, r0
 80029b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff ff35 	bl	800282c <__NVIC_EnableIRQ>
}
 80029c2:	bf00      	nop
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b082      	sub	sp, #8
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f7ff ffa2 	bl	800291c <SysTick_Config>
 80029d8:	4603      	mov	r3, r0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
	...

080029e4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029ec:	2300      	movs	r3, #0
 80029ee:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e043      	b.n	8002a82 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	461a      	mov	r2, r3
 8002a00:	4b22      	ldr	r3, [pc, #136]	@ (8002a8c <HAL_DMA_Init+0xa8>)
 8002a02:	4413      	add	r3, r2
 8002a04:	4a22      	ldr	r2, [pc, #136]	@ (8002a90 <HAL_DMA_Init+0xac>)
 8002a06:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0a:	091b      	lsrs	r3, r3, #4
 8002a0c:	009a      	lsls	r2, r3, #2
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a1f      	ldr	r2, [pc, #124]	@ (8002a94 <HAL_DMA_Init+0xb0>)
 8002a16:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002a2e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002a32:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002a3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr
 8002a8c:	bffdfff8 	.word	0xbffdfff8
 8002a90:	cccccccd 	.word	0xcccccccd
 8002a94:	40020000 	.word	0x40020000

08002a98 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
 8002aa4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d101      	bne.n	8002ab8 <HAL_DMA_Start_IT+0x20>
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	e04b      	b.n	8002b50 <HAL_DMA_Start_IT+0xb8>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d13a      	bne.n	8002b42 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2202      	movs	r2, #2
 8002ad0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f022 0201 	bic.w	r2, r2, #1
 8002ae8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	68b9      	ldr	r1, [r7, #8]
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f000 f9af 	bl	8002e54 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d008      	beq.n	8002b10 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f042 020e 	orr.w	r2, r2, #14
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	e00f      	b.n	8002b30 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f022 0204 	bic.w	r2, r2, #4
 8002b1e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f042 020a 	orr.w	r2, r2, #10
 8002b2e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f042 0201 	orr.w	r2, r2, #1
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	e005      	b.n	8002b4e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002b4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3718      	adds	r7, #24
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b60:	2300      	movs	r3, #0
 8002b62:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d005      	beq.n	8002b7c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2204      	movs	r2, #4
 8002b74:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	73fb      	strb	r3, [r7, #15]
 8002b7a:	e051      	b.n	8002c20 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 020e 	bic.w	r2, r2, #14
 8002b8a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 0201 	bic.w	r2, r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a22      	ldr	r2, [pc, #136]	@ (8002c2c <HAL_DMA_Abort_IT+0xd4>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d029      	beq.n	8002bfa <HAL_DMA_Abort_IT+0xa2>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a21      	ldr	r2, [pc, #132]	@ (8002c30 <HAL_DMA_Abort_IT+0xd8>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d022      	beq.n	8002bf6 <HAL_DMA_Abort_IT+0x9e>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a1f      	ldr	r2, [pc, #124]	@ (8002c34 <HAL_DMA_Abort_IT+0xdc>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d01a      	beq.n	8002bf0 <HAL_DMA_Abort_IT+0x98>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a1e      	ldr	r2, [pc, #120]	@ (8002c38 <HAL_DMA_Abort_IT+0xe0>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d012      	beq.n	8002bea <HAL_DMA_Abort_IT+0x92>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a1c      	ldr	r2, [pc, #112]	@ (8002c3c <HAL_DMA_Abort_IT+0xe4>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d00a      	beq.n	8002be4 <HAL_DMA_Abort_IT+0x8c>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a1b      	ldr	r2, [pc, #108]	@ (8002c40 <HAL_DMA_Abort_IT+0xe8>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d102      	bne.n	8002bde <HAL_DMA_Abort_IT+0x86>
 8002bd8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002bdc:	e00e      	b.n	8002bfc <HAL_DMA_Abort_IT+0xa4>
 8002bde:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002be2:	e00b      	b.n	8002bfc <HAL_DMA_Abort_IT+0xa4>
 8002be4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002be8:	e008      	b.n	8002bfc <HAL_DMA_Abort_IT+0xa4>
 8002bea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bee:	e005      	b.n	8002bfc <HAL_DMA_Abort_IT+0xa4>
 8002bf0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002bf4:	e002      	b.n	8002bfc <HAL_DMA_Abort_IT+0xa4>
 8002bf6:	2310      	movs	r3, #16
 8002bf8:	e000      	b.n	8002bfc <HAL_DMA_Abort_IT+0xa4>
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	4a11      	ldr	r2, [pc, #68]	@ (8002c44 <HAL_DMA_Abort_IT+0xec>)
 8002bfe:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	4798      	blx	r3
    } 
  }
  return status;
 8002c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40020008 	.word	0x40020008
 8002c30:	4002001c 	.word	0x4002001c
 8002c34:	40020030 	.word	0x40020030
 8002c38:	40020044 	.word	0x40020044
 8002c3c:	40020058 	.word	0x40020058
 8002c40:	4002006c 	.word	0x4002006c
 8002c44:	40020000 	.word	0x40020000

08002c48 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c64:	2204      	movs	r2, #4
 8002c66:	409a      	lsls	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d04f      	beq.n	8002d10 <HAL_DMA_IRQHandler+0xc8>
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	f003 0304 	and.w	r3, r3, #4
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d04a      	beq.n	8002d10 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0320 	and.w	r3, r3, #32
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d107      	bne.n	8002c98 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 0204 	bic.w	r2, r2, #4
 8002c96:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a66      	ldr	r2, [pc, #408]	@ (8002e38 <HAL_DMA_IRQHandler+0x1f0>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d029      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0xae>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a65      	ldr	r2, [pc, #404]	@ (8002e3c <HAL_DMA_IRQHandler+0x1f4>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d022      	beq.n	8002cf2 <HAL_DMA_IRQHandler+0xaa>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a63      	ldr	r2, [pc, #396]	@ (8002e40 <HAL_DMA_IRQHandler+0x1f8>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d01a      	beq.n	8002cec <HAL_DMA_IRQHandler+0xa4>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a62      	ldr	r2, [pc, #392]	@ (8002e44 <HAL_DMA_IRQHandler+0x1fc>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d012      	beq.n	8002ce6 <HAL_DMA_IRQHandler+0x9e>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a60      	ldr	r2, [pc, #384]	@ (8002e48 <HAL_DMA_IRQHandler+0x200>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d00a      	beq.n	8002ce0 <HAL_DMA_IRQHandler+0x98>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a5f      	ldr	r2, [pc, #380]	@ (8002e4c <HAL_DMA_IRQHandler+0x204>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d102      	bne.n	8002cda <HAL_DMA_IRQHandler+0x92>
 8002cd4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002cd8:	e00e      	b.n	8002cf8 <HAL_DMA_IRQHandler+0xb0>
 8002cda:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002cde:	e00b      	b.n	8002cf8 <HAL_DMA_IRQHandler+0xb0>
 8002ce0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002ce4:	e008      	b.n	8002cf8 <HAL_DMA_IRQHandler+0xb0>
 8002ce6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002cea:	e005      	b.n	8002cf8 <HAL_DMA_IRQHandler+0xb0>
 8002cec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002cf0:	e002      	b.n	8002cf8 <HAL_DMA_IRQHandler+0xb0>
 8002cf2:	2340      	movs	r3, #64	@ 0x40
 8002cf4:	e000      	b.n	8002cf8 <HAL_DMA_IRQHandler+0xb0>
 8002cf6:	2304      	movs	r3, #4
 8002cf8:	4a55      	ldr	r2, [pc, #340]	@ (8002e50 <HAL_DMA_IRQHandler+0x208>)
 8002cfa:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 8094 	beq.w	8002e2e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002d0e:	e08e      	b.n	8002e2e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d14:	2202      	movs	r2, #2
 8002d16:	409a      	lsls	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d056      	beq.n	8002dce <HAL_DMA_IRQHandler+0x186>
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d051      	beq.n	8002dce <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0320 	and.w	r3, r3, #32
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d10b      	bne.n	8002d50 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f022 020a 	bic.w	r2, r2, #10
 8002d46:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a38      	ldr	r2, [pc, #224]	@ (8002e38 <HAL_DMA_IRQHandler+0x1f0>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d029      	beq.n	8002dae <HAL_DMA_IRQHandler+0x166>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a37      	ldr	r2, [pc, #220]	@ (8002e3c <HAL_DMA_IRQHandler+0x1f4>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d022      	beq.n	8002daa <HAL_DMA_IRQHandler+0x162>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a35      	ldr	r2, [pc, #212]	@ (8002e40 <HAL_DMA_IRQHandler+0x1f8>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d01a      	beq.n	8002da4 <HAL_DMA_IRQHandler+0x15c>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a34      	ldr	r2, [pc, #208]	@ (8002e44 <HAL_DMA_IRQHandler+0x1fc>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d012      	beq.n	8002d9e <HAL_DMA_IRQHandler+0x156>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a32      	ldr	r2, [pc, #200]	@ (8002e48 <HAL_DMA_IRQHandler+0x200>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d00a      	beq.n	8002d98 <HAL_DMA_IRQHandler+0x150>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a31      	ldr	r2, [pc, #196]	@ (8002e4c <HAL_DMA_IRQHandler+0x204>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d102      	bne.n	8002d92 <HAL_DMA_IRQHandler+0x14a>
 8002d8c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002d90:	e00e      	b.n	8002db0 <HAL_DMA_IRQHandler+0x168>
 8002d92:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d96:	e00b      	b.n	8002db0 <HAL_DMA_IRQHandler+0x168>
 8002d98:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d9c:	e008      	b.n	8002db0 <HAL_DMA_IRQHandler+0x168>
 8002d9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002da2:	e005      	b.n	8002db0 <HAL_DMA_IRQHandler+0x168>
 8002da4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002da8:	e002      	b.n	8002db0 <HAL_DMA_IRQHandler+0x168>
 8002daa:	2320      	movs	r3, #32
 8002dac:	e000      	b.n	8002db0 <HAL_DMA_IRQHandler+0x168>
 8002dae:	2302      	movs	r3, #2
 8002db0:	4a27      	ldr	r2, [pc, #156]	@ (8002e50 <HAL_DMA_IRQHandler+0x208>)
 8002db2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d034      	beq.n	8002e2e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002dcc:	e02f      	b.n	8002e2e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd2:	2208      	movs	r2, #8
 8002dd4:	409a      	lsls	r2, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d028      	beq.n	8002e30 <HAL_DMA_IRQHandler+0x1e8>
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	f003 0308 	and.w	r3, r3, #8
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d023      	beq.n	8002e30 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 020e 	bic.w	r2, r2, #14
 8002df6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e00:	2101      	movs	r1, #1
 8002e02:	fa01 f202 	lsl.w	r2, r1, r2
 8002e06:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d004      	beq.n	8002e30 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	4798      	blx	r3
    }
  }
  return;
 8002e2e:	bf00      	nop
 8002e30:	bf00      	nop
}
 8002e32:	3710      	adds	r7, #16
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	40020008 	.word	0x40020008
 8002e3c:	4002001c 	.word	0x4002001c
 8002e40:	40020030 	.word	0x40020030
 8002e44:	40020044 	.word	0x40020044
 8002e48:	40020058 	.word	0x40020058
 8002e4c:	4002006c 	.word	0x4002006c
 8002e50:	40020000 	.word	0x40020000

08002e54 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
 8002e60:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e70:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	2b10      	cmp	r3, #16
 8002e80:	d108      	bne.n	8002e94 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e92:	e007      	b.n	8002ea4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68ba      	ldr	r2, [r7, #8]
 8002e9a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	60da      	str	r2, [r3, #12]
}
 8002ea4:	bf00      	nop
 8002ea6:	3714      	adds	r7, #20
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bc80      	pop	{r7}
 8002eac:	4770      	bx	lr
	...

08002eb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b08b      	sub	sp, #44	@ 0x2c
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ec2:	e169      	b.n	8003198 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	69fa      	ldr	r2, [r7, #28]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	f040 8158 	bne.w	8003192 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	4a9a      	ldr	r2, [pc, #616]	@ (8003150 <HAL_GPIO_Init+0x2a0>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d05e      	beq.n	8002faa <HAL_GPIO_Init+0xfa>
 8002eec:	4a98      	ldr	r2, [pc, #608]	@ (8003150 <HAL_GPIO_Init+0x2a0>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d875      	bhi.n	8002fde <HAL_GPIO_Init+0x12e>
 8002ef2:	4a98      	ldr	r2, [pc, #608]	@ (8003154 <HAL_GPIO_Init+0x2a4>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d058      	beq.n	8002faa <HAL_GPIO_Init+0xfa>
 8002ef8:	4a96      	ldr	r2, [pc, #600]	@ (8003154 <HAL_GPIO_Init+0x2a4>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d86f      	bhi.n	8002fde <HAL_GPIO_Init+0x12e>
 8002efe:	4a96      	ldr	r2, [pc, #600]	@ (8003158 <HAL_GPIO_Init+0x2a8>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d052      	beq.n	8002faa <HAL_GPIO_Init+0xfa>
 8002f04:	4a94      	ldr	r2, [pc, #592]	@ (8003158 <HAL_GPIO_Init+0x2a8>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d869      	bhi.n	8002fde <HAL_GPIO_Init+0x12e>
 8002f0a:	4a94      	ldr	r2, [pc, #592]	@ (800315c <HAL_GPIO_Init+0x2ac>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d04c      	beq.n	8002faa <HAL_GPIO_Init+0xfa>
 8002f10:	4a92      	ldr	r2, [pc, #584]	@ (800315c <HAL_GPIO_Init+0x2ac>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d863      	bhi.n	8002fde <HAL_GPIO_Init+0x12e>
 8002f16:	4a92      	ldr	r2, [pc, #584]	@ (8003160 <HAL_GPIO_Init+0x2b0>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d046      	beq.n	8002faa <HAL_GPIO_Init+0xfa>
 8002f1c:	4a90      	ldr	r2, [pc, #576]	@ (8003160 <HAL_GPIO_Init+0x2b0>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d85d      	bhi.n	8002fde <HAL_GPIO_Init+0x12e>
 8002f22:	2b12      	cmp	r3, #18
 8002f24:	d82a      	bhi.n	8002f7c <HAL_GPIO_Init+0xcc>
 8002f26:	2b12      	cmp	r3, #18
 8002f28:	d859      	bhi.n	8002fde <HAL_GPIO_Init+0x12e>
 8002f2a:	a201      	add	r2, pc, #4	@ (adr r2, 8002f30 <HAL_GPIO_Init+0x80>)
 8002f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f30:	08002fab 	.word	0x08002fab
 8002f34:	08002f85 	.word	0x08002f85
 8002f38:	08002f97 	.word	0x08002f97
 8002f3c:	08002fd9 	.word	0x08002fd9
 8002f40:	08002fdf 	.word	0x08002fdf
 8002f44:	08002fdf 	.word	0x08002fdf
 8002f48:	08002fdf 	.word	0x08002fdf
 8002f4c:	08002fdf 	.word	0x08002fdf
 8002f50:	08002fdf 	.word	0x08002fdf
 8002f54:	08002fdf 	.word	0x08002fdf
 8002f58:	08002fdf 	.word	0x08002fdf
 8002f5c:	08002fdf 	.word	0x08002fdf
 8002f60:	08002fdf 	.word	0x08002fdf
 8002f64:	08002fdf 	.word	0x08002fdf
 8002f68:	08002fdf 	.word	0x08002fdf
 8002f6c:	08002fdf 	.word	0x08002fdf
 8002f70:	08002fdf 	.word	0x08002fdf
 8002f74:	08002f8d 	.word	0x08002f8d
 8002f78:	08002fa1 	.word	0x08002fa1
 8002f7c:	4a79      	ldr	r2, [pc, #484]	@ (8003164 <HAL_GPIO_Init+0x2b4>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d013      	beq.n	8002faa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f82:	e02c      	b.n	8002fde <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	623b      	str	r3, [r7, #32]
          break;
 8002f8a:	e029      	b.n	8002fe0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	3304      	adds	r3, #4
 8002f92:	623b      	str	r3, [r7, #32]
          break;
 8002f94:	e024      	b.n	8002fe0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	3308      	adds	r3, #8
 8002f9c:	623b      	str	r3, [r7, #32]
          break;
 8002f9e:	e01f      	b.n	8002fe0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	330c      	adds	r3, #12
 8002fa6:	623b      	str	r3, [r7, #32]
          break;
 8002fa8:	e01a      	b.n	8002fe0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d102      	bne.n	8002fb8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002fb2:	2304      	movs	r3, #4
 8002fb4:	623b      	str	r3, [r7, #32]
          break;
 8002fb6:	e013      	b.n	8002fe0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d105      	bne.n	8002fcc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fc0:	2308      	movs	r3, #8
 8002fc2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	69fa      	ldr	r2, [r7, #28]
 8002fc8:	611a      	str	r2, [r3, #16]
          break;
 8002fca:	e009      	b.n	8002fe0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fcc:	2308      	movs	r3, #8
 8002fce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	69fa      	ldr	r2, [r7, #28]
 8002fd4:	615a      	str	r2, [r3, #20]
          break;
 8002fd6:	e003      	b.n	8002fe0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	623b      	str	r3, [r7, #32]
          break;
 8002fdc:	e000      	b.n	8002fe0 <HAL_GPIO_Init+0x130>
          break;
 8002fde:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	2bff      	cmp	r3, #255	@ 0xff
 8002fe4:	d801      	bhi.n	8002fea <HAL_GPIO_Init+0x13a>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	e001      	b.n	8002fee <HAL_GPIO_Init+0x13e>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	3304      	adds	r3, #4
 8002fee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	2bff      	cmp	r3, #255	@ 0xff
 8002ff4:	d802      	bhi.n	8002ffc <HAL_GPIO_Init+0x14c>
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	e002      	b.n	8003002 <HAL_GPIO_Init+0x152>
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffe:	3b08      	subs	r3, #8
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	210f      	movs	r1, #15
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	fa01 f303 	lsl.w	r3, r1, r3
 8003010:	43db      	mvns	r3, r3
 8003012:	401a      	ands	r2, r3
 8003014:	6a39      	ldr	r1, [r7, #32]
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	fa01 f303 	lsl.w	r3, r1, r3
 800301c:	431a      	orrs	r2, r3
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 80b1 	beq.w	8003192 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003030:	4b4d      	ldr	r3, [pc, #308]	@ (8003168 <HAL_GPIO_Init+0x2b8>)
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	4a4c      	ldr	r2, [pc, #304]	@ (8003168 <HAL_GPIO_Init+0x2b8>)
 8003036:	f043 0301 	orr.w	r3, r3, #1
 800303a:	6193      	str	r3, [r2, #24]
 800303c:	4b4a      	ldr	r3, [pc, #296]	@ (8003168 <HAL_GPIO_Init+0x2b8>)
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	60bb      	str	r3, [r7, #8]
 8003046:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003048:	4a48      	ldr	r2, [pc, #288]	@ (800316c <HAL_GPIO_Init+0x2bc>)
 800304a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304c:	089b      	lsrs	r3, r3, #2
 800304e:	3302      	adds	r3, #2
 8003050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003054:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003058:	f003 0303 	and.w	r3, r3, #3
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	220f      	movs	r2, #15
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	43db      	mvns	r3, r3
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	4013      	ands	r3, r2
 800306a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a40      	ldr	r2, [pc, #256]	@ (8003170 <HAL_GPIO_Init+0x2c0>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d013      	beq.n	800309c <HAL_GPIO_Init+0x1ec>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a3f      	ldr	r2, [pc, #252]	@ (8003174 <HAL_GPIO_Init+0x2c4>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d00d      	beq.n	8003098 <HAL_GPIO_Init+0x1e8>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a3e      	ldr	r2, [pc, #248]	@ (8003178 <HAL_GPIO_Init+0x2c8>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d007      	beq.n	8003094 <HAL_GPIO_Init+0x1e4>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a3d      	ldr	r2, [pc, #244]	@ (800317c <HAL_GPIO_Init+0x2cc>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d101      	bne.n	8003090 <HAL_GPIO_Init+0x1e0>
 800308c:	2303      	movs	r3, #3
 800308e:	e006      	b.n	800309e <HAL_GPIO_Init+0x1ee>
 8003090:	2304      	movs	r3, #4
 8003092:	e004      	b.n	800309e <HAL_GPIO_Init+0x1ee>
 8003094:	2302      	movs	r3, #2
 8003096:	e002      	b.n	800309e <HAL_GPIO_Init+0x1ee>
 8003098:	2301      	movs	r3, #1
 800309a:	e000      	b.n	800309e <HAL_GPIO_Init+0x1ee>
 800309c:	2300      	movs	r3, #0
 800309e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030a0:	f002 0203 	and.w	r2, r2, #3
 80030a4:	0092      	lsls	r2, r2, #2
 80030a6:	4093      	lsls	r3, r2
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80030ae:	492f      	ldr	r1, [pc, #188]	@ (800316c <HAL_GPIO_Init+0x2bc>)
 80030b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b2:	089b      	lsrs	r3, r3, #2
 80030b4:	3302      	adds	r3, #2
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d006      	beq.n	80030d6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80030c8:	4b2d      	ldr	r3, [pc, #180]	@ (8003180 <HAL_GPIO_Init+0x2d0>)
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	492c      	ldr	r1, [pc, #176]	@ (8003180 <HAL_GPIO_Init+0x2d0>)
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	608b      	str	r3, [r1, #8]
 80030d4:	e006      	b.n	80030e4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80030d6:	4b2a      	ldr	r3, [pc, #168]	@ (8003180 <HAL_GPIO_Init+0x2d0>)
 80030d8:	689a      	ldr	r2, [r3, #8]
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	43db      	mvns	r3, r3
 80030de:	4928      	ldr	r1, [pc, #160]	@ (8003180 <HAL_GPIO_Init+0x2d0>)
 80030e0:	4013      	ands	r3, r2
 80030e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d006      	beq.n	80030fe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80030f0:	4b23      	ldr	r3, [pc, #140]	@ (8003180 <HAL_GPIO_Init+0x2d0>)
 80030f2:	68da      	ldr	r2, [r3, #12]
 80030f4:	4922      	ldr	r1, [pc, #136]	@ (8003180 <HAL_GPIO_Init+0x2d0>)
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	60cb      	str	r3, [r1, #12]
 80030fc:	e006      	b.n	800310c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80030fe:	4b20      	ldr	r3, [pc, #128]	@ (8003180 <HAL_GPIO_Init+0x2d0>)
 8003100:	68da      	ldr	r2, [r3, #12]
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	43db      	mvns	r3, r3
 8003106:	491e      	ldr	r1, [pc, #120]	@ (8003180 <HAL_GPIO_Init+0x2d0>)
 8003108:	4013      	ands	r3, r2
 800310a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d006      	beq.n	8003126 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003118:	4b19      	ldr	r3, [pc, #100]	@ (8003180 <HAL_GPIO_Init+0x2d0>)
 800311a:	685a      	ldr	r2, [r3, #4]
 800311c:	4918      	ldr	r1, [pc, #96]	@ (8003180 <HAL_GPIO_Init+0x2d0>)
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	4313      	orrs	r3, r2
 8003122:	604b      	str	r3, [r1, #4]
 8003124:	e006      	b.n	8003134 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003126:	4b16      	ldr	r3, [pc, #88]	@ (8003180 <HAL_GPIO_Init+0x2d0>)
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	43db      	mvns	r3, r3
 800312e:	4914      	ldr	r1, [pc, #80]	@ (8003180 <HAL_GPIO_Init+0x2d0>)
 8003130:	4013      	ands	r3, r2
 8003132:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d021      	beq.n	8003184 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003140:	4b0f      	ldr	r3, [pc, #60]	@ (8003180 <HAL_GPIO_Init+0x2d0>)
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	490e      	ldr	r1, [pc, #56]	@ (8003180 <HAL_GPIO_Init+0x2d0>)
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	4313      	orrs	r3, r2
 800314a:	600b      	str	r3, [r1, #0]
 800314c:	e021      	b.n	8003192 <HAL_GPIO_Init+0x2e2>
 800314e:	bf00      	nop
 8003150:	10320000 	.word	0x10320000
 8003154:	10310000 	.word	0x10310000
 8003158:	10220000 	.word	0x10220000
 800315c:	10210000 	.word	0x10210000
 8003160:	10120000 	.word	0x10120000
 8003164:	10110000 	.word	0x10110000
 8003168:	40021000 	.word	0x40021000
 800316c:	40010000 	.word	0x40010000
 8003170:	40010800 	.word	0x40010800
 8003174:	40010c00 	.word	0x40010c00
 8003178:	40011000 	.word	0x40011000
 800317c:	40011400 	.word	0x40011400
 8003180:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003184:	4b0b      	ldr	r3, [pc, #44]	@ (80031b4 <HAL_GPIO_Init+0x304>)
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	43db      	mvns	r3, r3
 800318c:	4909      	ldr	r1, [pc, #36]	@ (80031b4 <HAL_GPIO_Init+0x304>)
 800318e:	4013      	ands	r3, r2
 8003190:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003194:	3301      	adds	r3, #1
 8003196:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800319e:	fa22 f303 	lsr.w	r3, r2, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f47f ae8e 	bne.w	8002ec4 <HAL_GPIO_Init+0x14>
  }
}
 80031a8:	bf00      	nop
 80031aa:	bf00      	nop
 80031ac:	372c      	adds	r7, #44	@ 0x2c
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bc80      	pop	{r7}
 80031b2:	4770      	bx	lr
 80031b4:	40010400 	.word	0x40010400

080031b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	460b      	mov	r3, r1
 80031c2:	807b      	strh	r3, [r7, #2]
 80031c4:	4613      	mov	r3, r2
 80031c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031c8:	787b      	ldrb	r3, [r7, #1]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d003      	beq.n	80031d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031ce:	887a      	ldrh	r2, [r7, #2]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80031d4:	e003      	b.n	80031de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80031d6:	887b      	ldrh	r3, [r7, #2]
 80031d8:	041a      	lsls	r2, r3, #16
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	611a      	str	r2, [r3, #16]
}
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bc80      	pop	{r7}
 80031e6:	4770      	bx	lr

080031e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e272      	b.n	80036e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 8087 	beq.w	8003316 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003208:	4b92      	ldr	r3, [pc, #584]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f003 030c 	and.w	r3, r3, #12
 8003210:	2b04      	cmp	r3, #4
 8003212:	d00c      	beq.n	800322e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003214:	4b8f      	ldr	r3, [pc, #572]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f003 030c 	and.w	r3, r3, #12
 800321c:	2b08      	cmp	r3, #8
 800321e:	d112      	bne.n	8003246 <HAL_RCC_OscConfig+0x5e>
 8003220:	4b8c      	ldr	r3, [pc, #560]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003228:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800322c:	d10b      	bne.n	8003246 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800322e:	4b89      	ldr	r3, [pc, #548]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d06c      	beq.n	8003314 <HAL_RCC_OscConfig+0x12c>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d168      	bne.n	8003314 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e24c      	b.n	80036e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800324e:	d106      	bne.n	800325e <HAL_RCC_OscConfig+0x76>
 8003250:	4b80      	ldr	r3, [pc, #512]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a7f      	ldr	r2, [pc, #508]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003256:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800325a:	6013      	str	r3, [r2, #0]
 800325c:	e02e      	b.n	80032bc <HAL_RCC_OscConfig+0xd4>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10c      	bne.n	8003280 <HAL_RCC_OscConfig+0x98>
 8003266:	4b7b      	ldr	r3, [pc, #492]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a7a      	ldr	r2, [pc, #488]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 800326c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003270:	6013      	str	r3, [r2, #0]
 8003272:	4b78      	ldr	r3, [pc, #480]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a77      	ldr	r2, [pc, #476]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003278:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800327c:	6013      	str	r3, [r2, #0]
 800327e:	e01d      	b.n	80032bc <HAL_RCC_OscConfig+0xd4>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003288:	d10c      	bne.n	80032a4 <HAL_RCC_OscConfig+0xbc>
 800328a:	4b72      	ldr	r3, [pc, #456]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a71      	ldr	r2, [pc, #452]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003290:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003294:	6013      	str	r3, [r2, #0]
 8003296:	4b6f      	ldr	r3, [pc, #444]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a6e      	ldr	r2, [pc, #440]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 800329c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032a0:	6013      	str	r3, [r2, #0]
 80032a2:	e00b      	b.n	80032bc <HAL_RCC_OscConfig+0xd4>
 80032a4:	4b6b      	ldr	r3, [pc, #428]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a6a      	ldr	r2, [pc, #424]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 80032aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032ae:	6013      	str	r3, [r2, #0]
 80032b0:	4b68      	ldr	r3, [pc, #416]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a67      	ldr	r2, [pc, #412]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 80032b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d013      	beq.n	80032ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c4:	f7fe fdfa 	bl	8001ebc <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032cc:	f7fe fdf6 	bl	8001ebc <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b64      	cmp	r3, #100	@ 0x64
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e200      	b.n	80036e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032de:	4b5d      	ldr	r3, [pc, #372]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d0f0      	beq.n	80032cc <HAL_RCC_OscConfig+0xe4>
 80032ea:	e014      	b.n	8003316 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ec:	f7fe fde6 	bl	8001ebc <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032f4:	f7fe fde2 	bl	8001ebc <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b64      	cmp	r3, #100	@ 0x64
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e1ec      	b.n	80036e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003306:	4b53      	ldr	r3, [pc, #332]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1f0      	bne.n	80032f4 <HAL_RCC_OscConfig+0x10c>
 8003312:	e000      	b.n	8003316 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003314:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d063      	beq.n	80033ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003322:	4b4c      	ldr	r3, [pc, #304]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f003 030c 	and.w	r3, r3, #12
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00b      	beq.n	8003346 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800332e:	4b49      	ldr	r3, [pc, #292]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f003 030c 	and.w	r3, r3, #12
 8003336:	2b08      	cmp	r3, #8
 8003338:	d11c      	bne.n	8003374 <HAL_RCC_OscConfig+0x18c>
 800333a:	4b46      	ldr	r3, [pc, #280]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d116      	bne.n	8003374 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003346:	4b43      	ldr	r3, [pc, #268]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d005      	beq.n	800335e <HAL_RCC_OscConfig+0x176>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d001      	beq.n	800335e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e1c0      	b.n	80036e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800335e:	4b3d      	ldr	r3, [pc, #244]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	4939      	ldr	r1, [pc, #228]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 800336e:	4313      	orrs	r3, r2
 8003370:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003372:	e03a      	b.n	80033ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d020      	beq.n	80033be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800337c:	4b36      	ldr	r3, [pc, #216]	@ (8003458 <HAL_RCC_OscConfig+0x270>)
 800337e:	2201      	movs	r2, #1
 8003380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003382:	f7fe fd9b 	bl	8001ebc <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003388:	e008      	b.n	800339c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800338a:	f7fe fd97 	bl	8001ebc <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e1a1      	b.n	80036e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800339c:	4b2d      	ldr	r3, [pc, #180]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0f0      	beq.n	800338a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a8:	4b2a      	ldr	r3, [pc, #168]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	4927      	ldr	r1, [pc, #156]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	600b      	str	r3, [r1, #0]
 80033bc:	e015      	b.n	80033ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033be:	4b26      	ldr	r3, [pc, #152]	@ (8003458 <HAL_RCC_OscConfig+0x270>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c4:	f7fe fd7a 	bl	8001ebc <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033cc:	f7fe fd76 	bl	8001ebc <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e180      	b.n	80036e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033de:	4b1d      	ldr	r3, [pc, #116]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1f0      	bne.n	80033cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d03a      	beq.n	800346c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d019      	beq.n	8003432 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033fe:	4b17      	ldr	r3, [pc, #92]	@ (800345c <HAL_RCC_OscConfig+0x274>)
 8003400:	2201      	movs	r2, #1
 8003402:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003404:	f7fe fd5a 	bl	8001ebc <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800340c:	f7fe fd56 	bl	8001ebc <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e160      	b.n	80036e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800341e:	4b0d      	ldr	r3, [pc, #52]	@ (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0f0      	beq.n	800340c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800342a:	2001      	movs	r0, #1
 800342c:	f000 faba 	bl	80039a4 <RCC_Delay>
 8003430:	e01c      	b.n	800346c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003432:	4b0a      	ldr	r3, [pc, #40]	@ (800345c <HAL_RCC_OscConfig+0x274>)
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003438:	f7fe fd40 	bl	8001ebc <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800343e:	e00f      	b.n	8003460 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003440:	f7fe fd3c 	bl	8001ebc <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d908      	bls.n	8003460 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e146      	b.n	80036e0 <HAL_RCC_OscConfig+0x4f8>
 8003452:	bf00      	nop
 8003454:	40021000 	.word	0x40021000
 8003458:	42420000 	.word	0x42420000
 800345c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003460:	4b92      	ldr	r3, [pc, #584]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 8003462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1e9      	bne.n	8003440 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 80a6 	beq.w	80035c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800347a:	2300      	movs	r3, #0
 800347c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800347e:	4b8b      	ldr	r3, [pc, #556]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10d      	bne.n	80034a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800348a:	4b88      	ldr	r3, [pc, #544]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	4a87      	ldr	r2, [pc, #540]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 8003490:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003494:	61d3      	str	r3, [r2, #28]
 8003496:	4b85      	ldr	r3, [pc, #532]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800349e:	60bb      	str	r3, [r7, #8]
 80034a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034a2:	2301      	movs	r3, #1
 80034a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a6:	4b82      	ldr	r3, [pc, #520]	@ (80036b0 <HAL_RCC_OscConfig+0x4c8>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d118      	bne.n	80034e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034b2:	4b7f      	ldr	r3, [pc, #508]	@ (80036b0 <HAL_RCC_OscConfig+0x4c8>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a7e      	ldr	r2, [pc, #504]	@ (80036b0 <HAL_RCC_OscConfig+0x4c8>)
 80034b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034be:	f7fe fcfd 	bl	8001ebc <HAL_GetTick>
 80034c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c4:	e008      	b.n	80034d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034c6:	f7fe fcf9 	bl	8001ebc <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b64      	cmp	r3, #100	@ 0x64
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e103      	b.n	80036e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d8:	4b75      	ldr	r3, [pc, #468]	@ (80036b0 <HAL_RCC_OscConfig+0x4c8>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d0f0      	beq.n	80034c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d106      	bne.n	80034fa <HAL_RCC_OscConfig+0x312>
 80034ec:	4b6f      	ldr	r3, [pc, #444]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 80034ee:	6a1b      	ldr	r3, [r3, #32]
 80034f0:	4a6e      	ldr	r2, [pc, #440]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 80034f2:	f043 0301 	orr.w	r3, r3, #1
 80034f6:	6213      	str	r3, [r2, #32]
 80034f8:	e02d      	b.n	8003556 <HAL_RCC_OscConfig+0x36e>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10c      	bne.n	800351c <HAL_RCC_OscConfig+0x334>
 8003502:	4b6a      	ldr	r3, [pc, #424]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	4a69      	ldr	r2, [pc, #420]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 8003508:	f023 0301 	bic.w	r3, r3, #1
 800350c:	6213      	str	r3, [r2, #32]
 800350e:	4b67      	ldr	r3, [pc, #412]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	4a66      	ldr	r2, [pc, #408]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 8003514:	f023 0304 	bic.w	r3, r3, #4
 8003518:	6213      	str	r3, [r2, #32]
 800351a:	e01c      	b.n	8003556 <HAL_RCC_OscConfig+0x36e>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	2b05      	cmp	r3, #5
 8003522:	d10c      	bne.n	800353e <HAL_RCC_OscConfig+0x356>
 8003524:	4b61      	ldr	r3, [pc, #388]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	4a60      	ldr	r2, [pc, #384]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 800352a:	f043 0304 	orr.w	r3, r3, #4
 800352e:	6213      	str	r3, [r2, #32]
 8003530:	4b5e      	ldr	r3, [pc, #376]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	4a5d      	ldr	r2, [pc, #372]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 8003536:	f043 0301 	orr.w	r3, r3, #1
 800353a:	6213      	str	r3, [r2, #32]
 800353c:	e00b      	b.n	8003556 <HAL_RCC_OscConfig+0x36e>
 800353e:	4b5b      	ldr	r3, [pc, #364]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	4a5a      	ldr	r2, [pc, #360]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 8003544:	f023 0301 	bic.w	r3, r3, #1
 8003548:	6213      	str	r3, [r2, #32]
 800354a:	4b58      	ldr	r3, [pc, #352]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	4a57      	ldr	r2, [pc, #348]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 8003550:	f023 0304 	bic.w	r3, r3, #4
 8003554:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d015      	beq.n	800358a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800355e:	f7fe fcad 	bl	8001ebc <HAL_GetTick>
 8003562:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003564:	e00a      	b.n	800357c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003566:	f7fe fca9 	bl	8001ebc <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003574:	4293      	cmp	r3, r2
 8003576:	d901      	bls.n	800357c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e0b1      	b.n	80036e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800357c:	4b4b      	ldr	r3, [pc, #300]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d0ee      	beq.n	8003566 <HAL_RCC_OscConfig+0x37e>
 8003588:	e014      	b.n	80035b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800358a:	f7fe fc97 	bl	8001ebc <HAL_GetTick>
 800358e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003590:	e00a      	b.n	80035a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003592:	f7fe fc93 	bl	8001ebc <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e09b      	b.n	80036e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035a8:	4b40      	ldr	r3, [pc, #256]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1ee      	bne.n	8003592 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035b4:	7dfb      	ldrb	r3, [r7, #23]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d105      	bne.n	80035c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035ba:	4b3c      	ldr	r3, [pc, #240]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	4a3b      	ldr	r2, [pc, #236]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 80035c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f000 8087 	beq.w	80036de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035d0:	4b36      	ldr	r3, [pc, #216]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f003 030c 	and.w	r3, r3, #12
 80035d8:	2b08      	cmp	r3, #8
 80035da:	d061      	beq.n	80036a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	69db      	ldr	r3, [r3, #28]
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d146      	bne.n	8003672 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035e4:	4b33      	ldr	r3, [pc, #204]	@ (80036b4 <HAL_RCC_OscConfig+0x4cc>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ea:	f7fe fc67 	bl	8001ebc <HAL_GetTick>
 80035ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035f0:	e008      	b.n	8003604 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f2:	f7fe fc63 	bl	8001ebc <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e06d      	b.n	80036e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003604:	4b29      	ldr	r3, [pc, #164]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1f0      	bne.n	80035f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003618:	d108      	bne.n	800362c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800361a:	4b24      	ldr	r3, [pc, #144]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	4921      	ldr	r1, [pc, #132]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 8003628:	4313      	orrs	r3, r2
 800362a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800362c:	4b1f      	ldr	r3, [pc, #124]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a19      	ldr	r1, [r3, #32]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363c:	430b      	orrs	r3, r1
 800363e:	491b      	ldr	r1, [pc, #108]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 8003640:	4313      	orrs	r3, r2
 8003642:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003644:	4b1b      	ldr	r3, [pc, #108]	@ (80036b4 <HAL_RCC_OscConfig+0x4cc>)
 8003646:	2201      	movs	r2, #1
 8003648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800364a:	f7fe fc37 	bl	8001ebc <HAL_GetTick>
 800364e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003650:	e008      	b.n	8003664 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003652:	f7fe fc33 	bl	8001ebc <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	2b02      	cmp	r3, #2
 800365e:	d901      	bls.n	8003664 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e03d      	b.n	80036e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003664:	4b11      	ldr	r3, [pc, #68]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d0f0      	beq.n	8003652 <HAL_RCC_OscConfig+0x46a>
 8003670:	e035      	b.n	80036de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003672:	4b10      	ldr	r3, [pc, #64]	@ (80036b4 <HAL_RCC_OscConfig+0x4cc>)
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003678:	f7fe fc20 	bl	8001ebc <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003680:	f7fe fc1c 	bl	8001ebc <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e026      	b.n	80036e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003692:	4b06      	ldr	r3, [pc, #24]	@ (80036ac <HAL_RCC_OscConfig+0x4c4>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1f0      	bne.n	8003680 <HAL_RCC_OscConfig+0x498>
 800369e:	e01e      	b.n	80036de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	69db      	ldr	r3, [r3, #28]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d107      	bne.n	80036b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e019      	b.n	80036e0 <HAL_RCC_OscConfig+0x4f8>
 80036ac:	40021000 	.word	0x40021000
 80036b0:	40007000 	.word	0x40007000
 80036b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036b8:	4b0b      	ldr	r3, [pc, #44]	@ (80036e8 <HAL_RCC_OscConfig+0x500>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d106      	bne.n	80036da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d001      	beq.n	80036de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e000      	b.n	80036e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3718      	adds	r7, #24
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	40021000 	.word	0x40021000

080036ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e0d0      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003700:	4b6a      	ldr	r3, [pc, #424]	@ (80038ac <HAL_RCC_ClockConfig+0x1c0>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0307 	and.w	r3, r3, #7
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	429a      	cmp	r2, r3
 800370c:	d910      	bls.n	8003730 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800370e:	4b67      	ldr	r3, [pc, #412]	@ (80038ac <HAL_RCC_ClockConfig+0x1c0>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f023 0207 	bic.w	r2, r3, #7
 8003716:	4965      	ldr	r1, [pc, #404]	@ (80038ac <HAL_RCC_ClockConfig+0x1c0>)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	4313      	orrs	r3, r2
 800371c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800371e:	4b63      	ldr	r3, [pc, #396]	@ (80038ac <HAL_RCC_ClockConfig+0x1c0>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	429a      	cmp	r2, r3
 800372a:	d001      	beq.n	8003730 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e0b8      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d020      	beq.n	800377e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b00      	cmp	r3, #0
 8003746:	d005      	beq.n	8003754 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003748:	4b59      	ldr	r3, [pc, #356]	@ (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	4a58      	ldr	r2, [pc, #352]	@ (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 800374e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003752:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0308 	and.w	r3, r3, #8
 800375c:	2b00      	cmp	r3, #0
 800375e:	d005      	beq.n	800376c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003760:	4b53      	ldr	r3, [pc, #332]	@ (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	4a52      	ldr	r2, [pc, #328]	@ (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003766:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800376a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800376c:	4b50      	ldr	r3, [pc, #320]	@ (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	494d      	ldr	r1, [pc, #308]	@ (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 800377a:	4313      	orrs	r3, r2
 800377c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	2b00      	cmp	r3, #0
 8003788:	d040      	beq.n	800380c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d107      	bne.n	80037a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003792:	4b47      	ldr	r3, [pc, #284]	@ (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d115      	bne.n	80037ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e07f      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d107      	bne.n	80037ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037aa:	4b41      	ldr	r3, [pc, #260]	@ (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d109      	bne.n	80037ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e073      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ba:	4b3d      	ldr	r3, [pc, #244]	@ (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e06b      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037ca:	4b39      	ldr	r3, [pc, #228]	@ (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f023 0203 	bic.w	r2, r3, #3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	4936      	ldr	r1, [pc, #216]	@ (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037dc:	f7fe fb6e 	bl	8001ebc <HAL_GetTick>
 80037e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e2:	e00a      	b.n	80037fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037e4:	f7fe fb6a 	bl	8001ebc <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e053      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037fa:	4b2d      	ldr	r3, [pc, #180]	@ (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f003 020c 	and.w	r2, r3, #12
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	429a      	cmp	r2, r3
 800380a:	d1eb      	bne.n	80037e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800380c:	4b27      	ldr	r3, [pc, #156]	@ (80038ac <HAL_RCC_ClockConfig+0x1c0>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	429a      	cmp	r2, r3
 8003818:	d210      	bcs.n	800383c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800381a:	4b24      	ldr	r3, [pc, #144]	@ (80038ac <HAL_RCC_ClockConfig+0x1c0>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f023 0207 	bic.w	r2, r3, #7
 8003822:	4922      	ldr	r1, [pc, #136]	@ (80038ac <HAL_RCC_ClockConfig+0x1c0>)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	4313      	orrs	r3, r2
 8003828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800382a:	4b20      	ldr	r3, [pc, #128]	@ (80038ac <HAL_RCC_ClockConfig+0x1c0>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0307 	and.w	r3, r3, #7
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	429a      	cmp	r2, r3
 8003836:	d001      	beq.n	800383c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e032      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0304 	and.w	r3, r3, #4
 8003844:	2b00      	cmp	r3, #0
 8003846:	d008      	beq.n	800385a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003848:	4b19      	ldr	r3, [pc, #100]	@ (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	4916      	ldr	r1, [pc, #88]	@ (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003856:	4313      	orrs	r3, r2
 8003858:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0308 	and.w	r3, r3, #8
 8003862:	2b00      	cmp	r3, #0
 8003864:	d009      	beq.n	800387a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003866:	4b12      	ldr	r3, [pc, #72]	@ (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	490e      	ldr	r1, [pc, #56]	@ (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003876:	4313      	orrs	r3, r2
 8003878:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800387a:	f000 f821 	bl	80038c0 <HAL_RCC_GetSysClockFreq>
 800387e:	4602      	mov	r2, r0
 8003880:	4b0b      	ldr	r3, [pc, #44]	@ (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	091b      	lsrs	r3, r3, #4
 8003886:	f003 030f 	and.w	r3, r3, #15
 800388a:	490a      	ldr	r1, [pc, #40]	@ (80038b4 <HAL_RCC_ClockConfig+0x1c8>)
 800388c:	5ccb      	ldrb	r3, [r1, r3]
 800388e:	fa22 f303 	lsr.w	r3, r2, r3
 8003892:	4a09      	ldr	r2, [pc, #36]	@ (80038b8 <HAL_RCC_ClockConfig+0x1cc>)
 8003894:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003896:	4b09      	ldr	r3, [pc, #36]	@ (80038bc <HAL_RCC_ClockConfig+0x1d0>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4618      	mov	r0, r3
 800389c:	f7fe facc 	bl	8001e38 <HAL_InitTick>

  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	40022000 	.word	0x40022000
 80038b0:	40021000 	.word	0x40021000
 80038b4:	080059f4 	.word	0x080059f4
 80038b8:	20000008 	.word	0x20000008
 80038bc:	2000000c 	.word	0x2000000c

080038c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b087      	sub	sp, #28
 80038c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038c6:	2300      	movs	r3, #0
 80038c8:	60fb      	str	r3, [r7, #12]
 80038ca:	2300      	movs	r3, #0
 80038cc:	60bb      	str	r3, [r7, #8]
 80038ce:	2300      	movs	r3, #0
 80038d0:	617b      	str	r3, [r7, #20]
 80038d2:	2300      	movs	r3, #0
 80038d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80038d6:	2300      	movs	r3, #0
 80038d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80038da:	4b1e      	ldr	r3, [pc, #120]	@ (8003954 <HAL_RCC_GetSysClockFreq+0x94>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f003 030c 	and.w	r3, r3, #12
 80038e6:	2b04      	cmp	r3, #4
 80038e8:	d002      	beq.n	80038f0 <HAL_RCC_GetSysClockFreq+0x30>
 80038ea:	2b08      	cmp	r3, #8
 80038ec:	d003      	beq.n	80038f6 <HAL_RCC_GetSysClockFreq+0x36>
 80038ee:	e027      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038f0:	4b19      	ldr	r3, [pc, #100]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x98>)
 80038f2:	613b      	str	r3, [r7, #16]
      break;
 80038f4:	e027      	b.n	8003946 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	0c9b      	lsrs	r3, r3, #18
 80038fa:	f003 030f 	and.w	r3, r3, #15
 80038fe:	4a17      	ldr	r2, [pc, #92]	@ (800395c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003900:	5cd3      	ldrb	r3, [r2, r3]
 8003902:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d010      	beq.n	8003930 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800390e:	4b11      	ldr	r3, [pc, #68]	@ (8003954 <HAL_RCC_GetSysClockFreq+0x94>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	0c5b      	lsrs	r3, r3, #17
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	4a11      	ldr	r2, [pc, #68]	@ (8003960 <HAL_RCC_GetSysClockFreq+0xa0>)
 800391a:	5cd3      	ldrb	r3, [r2, r3]
 800391c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a0d      	ldr	r2, [pc, #52]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x98>)
 8003922:	fb03 f202 	mul.w	r2, r3, r2
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	fbb2 f3f3 	udiv	r3, r2, r3
 800392c:	617b      	str	r3, [r7, #20]
 800392e:	e004      	b.n	800393a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a0c      	ldr	r2, [pc, #48]	@ (8003964 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003934:	fb02 f303 	mul.w	r3, r2, r3
 8003938:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	613b      	str	r3, [r7, #16]
      break;
 800393e:	e002      	b.n	8003946 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003940:	4b05      	ldr	r3, [pc, #20]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x98>)
 8003942:	613b      	str	r3, [r7, #16]
      break;
 8003944:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003946:	693b      	ldr	r3, [r7, #16]
}
 8003948:	4618      	mov	r0, r3
 800394a:	371c      	adds	r7, #28
 800394c:	46bd      	mov	sp, r7
 800394e:	bc80      	pop	{r7}
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	40021000 	.word	0x40021000
 8003958:	007a1200 	.word	0x007a1200
 800395c:	08005a0c 	.word	0x08005a0c
 8003960:	08005a1c 	.word	0x08005a1c
 8003964:	003d0900 	.word	0x003d0900

08003968 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003968:	b480      	push	{r7}
 800396a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800396c:	4b02      	ldr	r3, [pc, #8]	@ (8003978 <HAL_RCC_GetHCLKFreq+0x10>)
 800396e:	681b      	ldr	r3, [r3, #0]
}
 8003970:	4618      	mov	r0, r3
 8003972:	46bd      	mov	sp, r7
 8003974:	bc80      	pop	{r7}
 8003976:	4770      	bx	lr
 8003978:	20000008 	.word	0x20000008

0800397c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003980:	f7ff fff2 	bl	8003968 <HAL_RCC_GetHCLKFreq>
 8003984:	4602      	mov	r2, r0
 8003986:	4b05      	ldr	r3, [pc, #20]	@ (800399c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	0adb      	lsrs	r3, r3, #11
 800398c:	f003 0307 	and.w	r3, r3, #7
 8003990:	4903      	ldr	r1, [pc, #12]	@ (80039a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003992:	5ccb      	ldrb	r3, [r1, r3]
 8003994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003998:	4618      	mov	r0, r3
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40021000 	.word	0x40021000
 80039a0:	08005a04 	.word	0x08005a04

080039a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80039ac:	4b0a      	ldr	r3, [pc, #40]	@ (80039d8 <RCC_Delay+0x34>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a0a      	ldr	r2, [pc, #40]	@ (80039dc <RCC_Delay+0x38>)
 80039b2:	fba2 2303 	umull	r2, r3, r2, r3
 80039b6:	0a5b      	lsrs	r3, r3, #9
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	fb02 f303 	mul.w	r3, r2, r3
 80039be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80039c0:	bf00      	nop
  }
  while (Delay --);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	1e5a      	subs	r2, r3, #1
 80039c6:	60fa      	str	r2, [r7, #12]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1f9      	bne.n	80039c0 <RCC_Delay+0x1c>
}
 80039cc:	bf00      	nop
 80039ce:	bf00      	nop
 80039d0:	3714      	adds	r7, #20
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bc80      	pop	{r7}
 80039d6:	4770      	bx	lr
 80039d8:	20000008 	.word	0x20000008
 80039dc:	10624dd3 	.word	0x10624dd3

080039e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	613b      	str	r3, [r7, #16]
 80039ec:	2300      	movs	r3, #0
 80039ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d07d      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80039fc:	2300      	movs	r3, #0
 80039fe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a00:	4b4f      	ldr	r3, [pc, #316]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a02:	69db      	ldr	r3, [r3, #28]
 8003a04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10d      	bne.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a0c:	4b4c      	ldr	r3, [pc, #304]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a0e:	69db      	ldr	r3, [r3, #28]
 8003a10:	4a4b      	ldr	r2, [pc, #300]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a16:	61d3      	str	r3, [r2, #28]
 8003a18:	4b49      	ldr	r3, [pc, #292]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a20:	60bb      	str	r3, [r7, #8]
 8003a22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a24:	2301      	movs	r3, #1
 8003a26:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a28:	4b46      	ldr	r3, [pc, #280]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d118      	bne.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a34:	4b43      	ldr	r3, [pc, #268]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a42      	ldr	r2, [pc, #264]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a40:	f7fe fa3c 	bl	8001ebc <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a46:	e008      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a48:	f7fe fa38 	bl	8001ebc <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b64      	cmp	r3, #100	@ 0x64
 8003a54:	d901      	bls.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e06d      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a5a:	4b3a      	ldr	r3, [pc, #232]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d0f0      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a66:	4b36      	ldr	r3, [pc, #216]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a6e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d02e      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d027      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a84:	4b2e      	ldr	r3, [pc, #184]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a86:	6a1b      	ldr	r3, [r3, #32]
 8003a88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a8c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a8e:	4b2e      	ldr	r3, [pc, #184]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a90:	2201      	movs	r2, #1
 8003a92:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a94:	4b2c      	ldr	r3, [pc, #176]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a9a:	4a29      	ldr	r2, [pc, #164]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d014      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aaa:	f7fe fa07 	bl	8001ebc <HAL_GetTick>
 8003aae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab0:	e00a      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ab2:	f7fe fa03 	bl	8001ebc <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d901      	bls.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e036      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ac8:	4b1d      	ldr	r3, [pc, #116]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d0ee      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ad4:	4b1a      	ldr	r3, [pc, #104]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	4917      	ldr	r1, [pc, #92]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ae6:	7dfb      	ldrb	r3, [r7, #23]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d105      	bne.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aec:	4b14      	ldr	r3, [pc, #80]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	4a13      	ldr	r2, [pc, #76]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003af2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003af6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d008      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b04:	4b0e      	ldr	r3, [pc, #56]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	490b      	ldr	r1, [pc, #44]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0310 	and.w	r3, r3, #16
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d008      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b22:	4b07      	ldr	r3, [pc, #28]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	4904      	ldr	r1, [pc, #16]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3718      	adds	r7, #24
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	40021000 	.word	0x40021000
 8003b44:	40007000 	.word	0x40007000
 8003b48:	42420440 	.word	0x42420440

08003b4c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b088      	sub	sp, #32
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003b54:	2300      	movs	r3, #0
 8003b56:	617b      	str	r3, [r7, #20]
 8003b58:	2300      	movs	r3, #0
 8003b5a:	61fb      	str	r3, [r7, #28]
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003b60:	2300      	movs	r3, #0
 8003b62:	60fb      	str	r3, [r7, #12]
 8003b64:	2300      	movs	r3, #0
 8003b66:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b10      	cmp	r3, #16
 8003b6c:	d00a      	beq.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b10      	cmp	r3, #16
 8003b72:	f200 808a 	bhi.w	8003c8a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d045      	beq.n	8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d075      	beq.n	8003c6e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003b82:	e082      	b.n	8003c8a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003b84:	4b46      	ldr	r3, [pc, #280]	@ (8003ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003b8a:	4b45      	ldr	r3, [pc, #276]	@ (8003ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d07b      	beq.n	8003c8e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	0c9b      	lsrs	r3, r3, #18
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	4a41      	ldr	r2, [pc, #260]	@ (8003ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003ba0:	5cd3      	ldrb	r3, [r2, r3]
 8003ba2:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d015      	beq.n	8003bda <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bae:	4b3c      	ldr	r3, [pc, #240]	@ (8003ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	0c5b      	lsrs	r3, r3, #17
 8003bb4:	f003 0301 	and.w	r3, r3, #1
 8003bb8:	4a3b      	ldr	r2, [pc, #236]	@ (8003ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003bba:	5cd3      	ldrb	r3, [r2, r3]
 8003bbc:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00d      	beq.n	8003be4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003bc8:	4a38      	ldr	r2, [pc, #224]	@ (8003cac <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	fb02 f303 	mul.w	r3, r2, r3
 8003bd6:	61fb      	str	r3, [r7, #28]
 8003bd8:	e004      	b.n	8003be4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	4a34      	ldr	r2, [pc, #208]	@ (8003cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003bde:	fb02 f303 	mul.w	r3, r2, r3
 8003be2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003be4:	4b2e      	ldr	r3, [pc, #184]	@ (8003ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bf0:	d102      	bne.n	8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	61bb      	str	r3, [r7, #24]
      break;
 8003bf6:	e04a      	b.n	8003c8e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	4a2d      	ldr	r2, [pc, #180]	@ (8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003c02:	085b      	lsrs	r3, r3, #1
 8003c04:	61bb      	str	r3, [r7, #24]
      break;
 8003c06:	e042      	b.n	8003c8e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003c08:	4b25      	ldr	r3, [pc, #148]	@ (8003ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c18:	d108      	bne.n	8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d003      	beq.n	8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003c24:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c28:	61bb      	str	r3, [r7, #24]
 8003c2a:	e01f      	b.n	8003c6c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c36:	d109      	bne.n	8003c4c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003c38:	4b19      	ldr	r3, [pc, #100]	@ (8003ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d003      	beq.n	8003c4c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003c44:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003c48:	61bb      	str	r3, [r7, #24]
 8003c4a:	e00f      	b.n	8003c6c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c56:	d11c      	bne.n	8003c92 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003c58:	4b11      	ldr	r3, [pc, #68]	@ (8003ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d016      	beq.n	8003c92 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003c64:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003c68:	61bb      	str	r3, [r7, #24]
      break;
 8003c6a:	e012      	b.n	8003c92 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003c6c:	e011      	b.n	8003c92 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003c6e:	f7ff fe85 	bl	800397c <HAL_RCC_GetPCLK2Freq>
 8003c72:	4602      	mov	r2, r0
 8003c74:	4b0a      	ldr	r3, [pc, #40]	@ (8003ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	0b9b      	lsrs	r3, r3, #14
 8003c7a:	f003 0303 	and.w	r3, r3, #3
 8003c7e:	3301      	adds	r3, #1
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c86:	61bb      	str	r3, [r7, #24]
      break;
 8003c88:	e004      	b.n	8003c94 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003c8a:	bf00      	nop
 8003c8c:	e002      	b.n	8003c94 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003c8e:	bf00      	nop
 8003c90:	e000      	b.n	8003c94 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003c92:	bf00      	nop
    }
  }
  return (frequency);
 8003c94:	69bb      	ldr	r3, [r7, #24]
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3720      	adds	r7, #32
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	40021000 	.word	0x40021000
 8003ca4:	08005a20 	.word	0x08005a20
 8003ca8:	08005a30 	.word	0x08005a30
 8003cac:	007a1200 	.word	0x007a1200
 8003cb0:	003d0900 	.word	0x003d0900
 8003cb4:	aaaaaaab 	.word	0xaaaaaaab

08003cb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e041      	b.n	8003d4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d106      	bne.n	8003ce4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f7fd ff7e 	bl	8001be0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	3304      	adds	r3, #4
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	4610      	mov	r0, r2
 8003cf8:	f000 fd5a 	bl	80047b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b082      	sub	sp, #8
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d101      	bne.n	8003d68 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e041      	b.n	8003dec <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d106      	bne.n	8003d82 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 f839 	bl	8003df4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2202      	movs	r2, #2
 8003d86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	3304      	adds	r3, #4
 8003d92:	4619      	mov	r1, r3
 8003d94:	4610      	mov	r0, r2
 8003d96:	f000 fd0b 	bl	80047b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3708      	adds	r7, #8
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bc80      	pop	{r7}
 8003e04:	4770      	bx	lr
	...

08003e08 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
 8003e14:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003e16:	2300      	movs	r3, #0
 8003e18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d109      	bne.n	8003e34 <HAL_TIM_PWM_Start_DMA+0x2c>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	bf0c      	ite	eq
 8003e2c:	2301      	moveq	r3, #1
 8003e2e:	2300      	movne	r3, #0
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	e022      	b.n	8003e7a <HAL_TIM_PWM_Start_DMA+0x72>
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	d109      	bne.n	8003e4e <HAL_TIM_PWM_Start_DMA+0x46>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	bf0c      	ite	eq
 8003e46:	2301      	moveq	r3, #1
 8003e48:	2300      	movne	r3, #0
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	e015      	b.n	8003e7a <HAL_TIM_PWM_Start_DMA+0x72>
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	2b08      	cmp	r3, #8
 8003e52:	d109      	bne.n	8003e68 <HAL_TIM_PWM_Start_DMA+0x60>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	bf0c      	ite	eq
 8003e60:	2301      	moveq	r3, #1
 8003e62:	2300      	movne	r3, #0
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	e008      	b.n	8003e7a <HAL_TIM_PWM_Start_DMA+0x72>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	bf0c      	ite	eq
 8003e74:	2301      	moveq	r3, #1
 8003e76:	2300      	movne	r3, #0
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8003e7e:	2302      	movs	r3, #2
 8003e80:	e153      	b.n	800412a <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d109      	bne.n	8003e9c <HAL_TIM_PWM_Start_DMA+0x94>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	bf0c      	ite	eq
 8003e94:	2301      	moveq	r3, #1
 8003e96:	2300      	movne	r3, #0
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	e022      	b.n	8003ee2 <HAL_TIM_PWM_Start_DMA+0xda>
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	2b04      	cmp	r3, #4
 8003ea0:	d109      	bne.n	8003eb6 <HAL_TIM_PWM_Start_DMA+0xae>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	bf0c      	ite	eq
 8003eae:	2301      	moveq	r3, #1
 8003eb0:	2300      	movne	r3, #0
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	e015      	b.n	8003ee2 <HAL_TIM_PWM_Start_DMA+0xda>
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	2b08      	cmp	r3, #8
 8003eba:	d109      	bne.n	8003ed0 <HAL_TIM_PWM_Start_DMA+0xc8>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	bf0c      	ite	eq
 8003ec8:	2301      	moveq	r3, #1
 8003eca:	2300      	movne	r3, #0
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	e008      	b.n	8003ee2 <HAL_TIM_PWM_Start_DMA+0xda>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	bf0c      	ite	eq
 8003edc:	2301      	moveq	r3, #1
 8003ede:	2300      	movne	r3, #0
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d024      	beq.n	8003f30 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d002      	beq.n	8003ef2 <HAL_TIM_PWM_Start_DMA+0xea>
 8003eec:	887b      	ldrh	r3, [r7, #2]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e119      	b.n	800412a <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d104      	bne.n	8003f06 <HAL_TIM_PWM_Start_DMA+0xfe>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2202      	movs	r2, #2
 8003f00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f04:	e016      	b.n	8003f34 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	2b04      	cmp	r3, #4
 8003f0a:	d104      	bne.n	8003f16 <HAL_TIM_PWM_Start_DMA+0x10e>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2202      	movs	r2, #2
 8003f10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f14:	e00e      	b.n	8003f34 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	2b08      	cmp	r3, #8
 8003f1a:	d104      	bne.n	8003f26 <HAL_TIM_PWM_Start_DMA+0x11e>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2202      	movs	r2, #2
 8003f20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f24:	e006      	b.n	8003f34 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2202      	movs	r2, #2
 8003f2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003f2e:	e001      	b.n	8003f34 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e0fa      	b.n	800412a <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	2b0c      	cmp	r3, #12
 8003f38:	f200 80ae 	bhi.w	8004098 <HAL_TIM_PWM_Start_DMA+0x290>
 8003f3c:	a201      	add	r2, pc, #4	@ (adr r2, 8003f44 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8003f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f42:	bf00      	nop
 8003f44:	08003f79 	.word	0x08003f79
 8003f48:	08004099 	.word	0x08004099
 8003f4c:	08004099 	.word	0x08004099
 8003f50:	08004099 	.word	0x08004099
 8003f54:	08003fc1 	.word	0x08003fc1
 8003f58:	08004099 	.word	0x08004099
 8003f5c:	08004099 	.word	0x08004099
 8003f60:	08004099 	.word	0x08004099
 8003f64:	08004009 	.word	0x08004009
 8003f68:	08004099 	.word	0x08004099
 8003f6c:	08004099 	.word	0x08004099
 8003f70:	08004099 	.word	0x08004099
 8003f74:	08004051 	.word	0x08004051
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7c:	4a6d      	ldr	r2, [pc, #436]	@ (8004134 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003f7e:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f84:	4a6c      	ldr	r2, [pc, #432]	@ (8004138 <HAL_TIM_PWM_Start_DMA+0x330>)
 8003f86:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8c:	4a6b      	ldr	r2, [pc, #428]	@ (800413c <HAL_TIM_PWM_Start_DMA+0x334>)
 8003f8e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003f94:	6879      	ldr	r1, [r7, #4]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	3334      	adds	r3, #52	@ 0x34
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	887b      	ldrh	r3, [r7, #2]
 8003fa0:	f7fe fd7a 	bl	8002a98 <HAL_DMA_Start_IT>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e0bd      	b.n	800412a <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68da      	ldr	r2, [r3, #12]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fbc:	60da      	str	r2, [r3, #12]
      break;
 8003fbe:	e06e      	b.n	800409e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc4:	4a5b      	ldr	r2, [pc, #364]	@ (8004134 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003fc6:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fcc:	4a5a      	ldr	r2, [pc, #360]	@ (8004138 <HAL_TIM_PWM_Start_DMA+0x330>)
 8003fce:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd4:	4a59      	ldr	r2, [pc, #356]	@ (800413c <HAL_TIM_PWM_Start_DMA+0x334>)
 8003fd6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003fdc:	6879      	ldr	r1, [r7, #4]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	3338      	adds	r3, #56	@ 0x38
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	887b      	ldrh	r3, [r7, #2]
 8003fe8:	f7fe fd56 	bl	8002a98 <HAL_DMA_Start_IT>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e099      	b.n	800412a <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68da      	ldr	r2, [r3, #12]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004004:	60da      	str	r2, [r3, #12]
      break;
 8004006:	e04a      	b.n	800409e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800400c:	4a49      	ldr	r2, [pc, #292]	@ (8004134 <HAL_TIM_PWM_Start_DMA+0x32c>)
 800400e:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004014:	4a48      	ldr	r2, [pc, #288]	@ (8004138 <HAL_TIM_PWM_Start_DMA+0x330>)
 8004016:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800401c:	4a47      	ldr	r2, [pc, #284]	@ (800413c <HAL_TIM_PWM_Start_DMA+0x334>)
 800401e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8004024:	6879      	ldr	r1, [r7, #4]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	333c      	adds	r3, #60	@ 0x3c
 800402c:	461a      	mov	r2, r3
 800402e:	887b      	ldrh	r3, [r7, #2]
 8004030:	f7fe fd32 	bl	8002a98 <HAL_DMA_Start_IT>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e075      	b.n	800412a <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68da      	ldr	r2, [r3, #12]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800404c:	60da      	str	r2, [r3, #12]
      break;
 800404e:	e026      	b.n	800409e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004054:	4a37      	ldr	r2, [pc, #220]	@ (8004134 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8004056:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800405c:	4a36      	ldr	r2, [pc, #216]	@ (8004138 <HAL_TIM_PWM_Start_DMA+0x330>)
 800405e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004064:	4a35      	ldr	r2, [pc, #212]	@ (800413c <HAL_TIM_PWM_Start_DMA+0x334>)
 8004066:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800406c:	6879      	ldr	r1, [r7, #4]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	3340      	adds	r3, #64	@ 0x40
 8004074:	461a      	mov	r2, r3
 8004076:	887b      	ldrh	r3, [r7, #2]
 8004078:	f7fe fd0e 	bl	8002a98 <HAL_DMA_Start_IT>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e051      	b.n	800412a <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68da      	ldr	r2, [r3, #12]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004094:	60da      	str	r2, [r3, #12]
      break;
 8004096:	e002      	b.n	800409e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	75fb      	strb	r3, [r7, #23]
      break;
 800409c:	bf00      	nop
  }

  if (status == HAL_OK)
 800409e:	7dfb      	ldrb	r3, [r7, #23]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d141      	bne.n	8004128 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2201      	movs	r2, #1
 80040aa:	68b9      	ldr	r1, [r7, #8]
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 fe0b 	bl	8004cc8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a22      	ldr	r2, [pc, #136]	@ (8004140 <HAL_TIM_PWM_Start_DMA+0x338>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d107      	bne.n	80040cc <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80040ca:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a1b      	ldr	r2, [pc, #108]	@ (8004140 <HAL_TIM_PWM_Start_DMA+0x338>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d00e      	beq.n	80040f4 <HAL_TIM_PWM_Start_DMA+0x2ec>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040de:	d009      	beq.n	80040f4 <HAL_TIM_PWM_Start_DMA+0x2ec>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a17      	ldr	r2, [pc, #92]	@ (8004144 <HAL_TIM_PWM_Start_DMA+0x33c>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d004      	beq.n	80040f4 <HAL_TIM_PWM_Start_DMA+0x2ec>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a16      	ldr	r2, [pc, #88]	@ (8004148 <HAL_TIM_PWM_Start_DMA+0x340>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d111      	bne.n	8004118 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f003 0307 	and.w	r3, r3, #7
 80040fe:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	2b06      	cmp	r3, #6
 8004104:	d010      	beq.n	8004128 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f042 0201 	orr.w	r2, r2, #1
 8004114:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004116:	e007      	b.n	8004128 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f042 0201 	orr.w	r2, r2, #1
 8004126:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004128:	7dfb      	ldrb	r3, [r7, #23]
}
 800412a:	4618      	mov	r0, r3
 800412c:	3718      	adds	r7, #24
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	080046a1 	.word	0x080046a1
 8004138:	08004749 	.word	0x08004749
 800413c:	0800460f 	.word	0x0800460f
 8004140:	40012c00 	.word	0x40012c00
 8004144:	40000400 	.word	0x40000400
 8004148:	40000800 	.word	0x40000800

0800414c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004156:	2300      	movs	r3, #0
 8004158:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	2b0c      	cmp	r3, #12
 800415e:	d855      	bhi.n	800420c <HAL_TIM_PWM_Stop_DMA+0xc0>
 8004160:	a201      	add	r2, pc, #4	@ (adr r2, 8004168 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8004162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004166:	bf00      	nop
 8004168:	0800419d 	.word	0x0800419d
 800416c:	0800420d 	.word	0x0800420d
 8004170:	0800420d 	.word	0x0800420d
 8004174:	0800420d 	.word	0x0800420d
 8004178:	080041b9 	.word	0x080041b9
 800417c:	0800420d 	.word	0x0800420d
 8004180:	0800420d 	.word	0x0800420d
 8004184:	0800420d 	.word	0x0800420d
 8004188:	080041d5 	.word	0x080041d5
 800418c:	0800420d 	.word	0x0800420d
 8004190:	0800420d 	.word	0x0800420d
 8004194:	0800420d 	.word	0x0800420d
 8004198:	080041f1 	.word	0x080041f1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68da      	ldr	r2, [r3, #12]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80041aa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7fe fcd1 	bl	8002b58 <HAL_DMA_Abort_IT>
      break;
 80041b6:	e02c      	b.n	8004212 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68da      	ldr	r2, [r3, #12]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041c6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7fe fcc3 	bl	8002b58 <HAL_DMA_Abort_IT>
      break;
 80041d2:	e01e      	b.n	8004212 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68da      	ldr	r2, [r3, #12]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041e2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7fe fcb5 	bl	8002b58 <HAL_DMA_Abort_IT>
      break;
 80041ee:	e010      	b.n	8004212 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68da      	ldr	r2, [r3, #12]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80041fe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004204:	4618      	mov	r0, r3
 8004206:	f7fe fca7 	bl	8002b58 <HAL_DMA_Abort_IT>
      break;
 800420a:	e002      	b.n	8004212 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	73fb      	strb	r3, [r7, #15]
      break;
 8004210:	bf00      	nop
  }

  if (status == HAL_OK)
 8004212:	7bfb      	ldrb	r3, [r7, #15]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d157      	bne.n	80042c8 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2200      	movs	r2, #0
 800421e:	6839      	ldr	r1, [r7, #0]
 8004220:	4618      	mov	r0, r3
 8004222:	f000 fd51 	bl	8004cc8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a2a      	ldr	r2, [pc, #168]	@ (80042d4 <HAL_TIM_PWM_Stop_DMA+0x188>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d117      	bne.n	8004260 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6a1a      	ldr	r2, [r3, #32]
 8004236:	f241 1311 	movw	r3, #4369	@ 0x1111
 800423a:	4013      	ands	r3, r2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10f      	bne.n	8004260 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6a1a      	ldr	r2, [r3, #32]
 8004246:	f240 4344 	movw	r3, #1092	@ 0x444
 800424a:	4013      	ands	r3, r2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d107      	bne.n	8004260 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800425e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6a1a      	ldr	r2, [r3, #32]
 8004266:	f241 1311 	movw	r3, #4369	@ 0x1111
 800426a:	4013      	ands	r3, r2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d10f      	bne.n	8004290 <HAL_TIM_PWM_Stop_DMA+0x144>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6a1a      	ldr	r2, [r3, #32]
 8004276:	f240 4344 	movw	r3, #1092	@ 0x444
 800427a:	4013      	ands	r3, r2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d107      	bne.n	8004290 <HAL_TIM_PWM_Stop_DMA+0x144>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f022 0201 	bic.w	r2, r2, #1
 800428e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d104      	bne.n	80042a0 <HAL_TIM_PWM_Stop_DMA+0x154>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800429e:	e013      	b.n	80042c8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	2b04      	cmp	r3, #4
 80042a4:	d104      	bne.n	80042b0 <HAL_TIM_PWM_Stop_DMA+0x164>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042ae:	e00b      	b.n	80042c8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	2b08      	cmp	r3, #8
 80042b4:	d104      	bne.n	80042c0 <HAL_TIM_PWM_Stop_DMA+0x174>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042be:	e003      	b.n	80042c8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 80042c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	40012c00 	.word	0x40012c00

080042d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b086      	sub	sp, #24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042e4:	2300      	movs	r3, #0
 80042e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d101      	bne.n	80042f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80042f2:	2302      	movs	r3, #2
 80042f4:	e0ae      	b.n	8004454 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2b0c      	cmp	r3, #12
 8004302:	f200 809f 	bhi.w	8004444 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004306:	a201      	add	r2, pc, #4	@ (adr r2, 800430c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800430c:	08004341 	.word	0x08004341
 8004310:	08004445 	.word	0x08004445
 8004314:	08004445 	.word	0x08004445
 8004318:	08004445 	.word	0x08004445
 800431c:	08004381 	.word	0x08004381
 8004320:	08004445 	.word	0x08004445
 8004324:	08004445 	.word	0x08004445
 8004328:	08004445 	.word	0x08004445
 800432c:	080043c3 	.word	0x080043c3
 8004330:	08004445 	.word	0x08004445
 8004334:	08004445 	.word	0x08004445
 8004338:	08004445 	.word	0x08004445
 800433c:	08004403 	.word	0x08004403
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68b9      	ldr	r1, [r7, #8]
 8004346:	4618      	mov	r0, r3
 8004348:	f000 faa0 	bl	800488c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	699a      	ldr	r2, [r3, #24]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f042 0208 	orr.w	r2, r2, #8
 800435a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	699a      	ldr	r2, [r3, #24]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f022 0204 	bic.w	r2, r2, #4
 800436a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	6999      	ldr	r1, [r3, #24]
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	691a      	ldr	r2, [r3, #16]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	430a      	orrs	r2, r1
 800437c:	619a      	str	r2, [r3, #24]
      break;
 800437e:	e064      	b.n	800444a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68b9      	ldr	r1, [r7, #8]
 8004386:	4618      	mov	r0, r3
 8004388:	f000 fae6 	bl	8004958 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	699a      	ldr	r2, [r3, #24]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800439a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	699a      	ldr	r2, [r3, #24]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6999      	ldr	r1, [r3, #24]
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	021a      	lsls	r2, r3, #8
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	430a      	orrs	r2, r1
 80043be:	619a      	str	r2, [r3, #24]
      break;
 80043c0:	e043      	b.n	800444a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68b9      	ldr	r1, [r7, #8]
 80043c8:	4618      	mov	r0, r3
 80043ca:	f000 fb2f 	bl	8004a2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	69da      	ldr	r2, [r3, #28]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f042 0208 	orr.w	r2, r2, #8
 80043dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	69da      	ldr	r2, [r3, #28]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f022 0204 	bic.w	r2, r2, #4
 80043ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	69d9      	ldr	r1, [r3, #28]
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	691a      	ldr	r2, [r3, #16]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	430a      	orrs	r2, r1
 80043fe:	61da      	str	r2, [r3, #28]
      break;
 8004400:	e023      	b.n	800444a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68b9      	ldr	r1, [r7, #8]
 8004408:	4618      	mov	r0, r3
 800440a:	f000 fb79 	bl	8004b00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	69da      	ldr	r2, [r3, #28]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800441c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	69da      	ldr	r2, [r3, #28]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800442c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	69d9      	ldr	r1, [r3, #28]
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	021a      	lsls	r2, r3, #8
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	430a      	orrs	r2, r1
 8004440:	61da      	str	r2, [r3, #28]
      break;
 8004442:	e002      	b.n	800444a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	75fb      	strb	r3, [r7, #23]
      break;
 8004448:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004452:	7dfb      	ldrb	r3, [r7, #23]
}
 8004454:	4618      	mov	r0, r3
 8004456:	3718      	adds	r7, #24
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004466:	2300      	movs	r3, #0
 8004468:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004470:	2b01      	cmp	r3, #1
 8004472:	d101      	bne.n	8004478 <HAL_TIM_ConfigClockSource+0x1c>
 8004474:	2302      	movs	r3, #2
 8004476:	e0b4      	b.n	80045e2 <HAL_TIM_ConfigClockSource+0x186>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2202      	movs	r2, #2
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004496:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800449e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68ba      	ldr	r2, [r7, #8]
 80044a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044b0:	d03e      	beq.n	8004530 <HAL_TIM_ConfigClockSource+0xd4>
 80044b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044b6:	f200 8087 	bhi.w	80045c8 <HAL_TIM_ConfigClockSource+0x16c>
 80044ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044be:	f000 8086 	beq.w	80045ce <HAL_TIM_ConfigClockSource+0x172>
 80044c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044c6:	d87f      	bhi.n	80045c8 <HAL_TIM_ConfigClockSource+0x16c>
 80044c8:	2b70      	cmp	r3, #112	@ 0x70
 80044ca:	d01a      	beq.n	8004502 <HAL_TIM_ConfigClockSource+0xa6>
 80044cc:	2b70      	cmp	r3, #112	@ 0x70
 80044ce:	d87b      	bhi.n	80045c8 <HAL_TIM_ConfigClockSource+0x16c>
 80044d0:	2b60      	cmp	r3, #96	@ 0x60
 80044d2:	d050      	beq.n	8004576 <HAL_TIM_ConfigClockSource+0x11a>
 80044d4:	2b60      	cmp	r3, #96	@ 0x60
 80044d6:	d877      	bhi.n	80045c8 <HAL_TIM_ConfigClockSource+0x16c>
 80044d8:	2b50      	cmp	r3, #80	@ 0x50
 80044da:	d03c      	beq.n	8004556 <HAL_TIM_ConfigClockSource+0xfa>
 80044dc:	2b50      	cmp	r3, #80	@ 0x50
 80044de:	d873      	bhi.n	80045c8 <HAL_TIM_ConfigClockSource+0x16c>
 80044e0:	2b40      	cmp	r3, #64	@ 0x40
 80044e2:	d058      	beq.n	8004596 <HAL_TIM_ConfigClockSource+0x13a>
 80044e4:	2b40      	cmp	r3, #64	@ 0x40
 80044e6:	d86f      	bhi.n	80045c8 <HAL_TIM_ConfigClockSource+0x16c>
 80044e8:	2b30      	cmp	r3, #48	@ 0x30
 80044ea:	d064      	beq.n	80045b6 <HAL_TIM_ConfigClockSource+0x15a>
 80044ec:	2b30      	cmp	r3, #48	@ 0x30
 80044ee:	d86b      	bhi.n	80045c8 <HAL_TIM_ConfigClockSource+0x16c>
 80044f0:	2b20      	cmp	r3, #32
 80044f2:	d060      	beq.n	80045b6 <HAL_TIM_ConfigClockSource+0x15a>
 80044f4:	2b20      	cmp	r3, #32
 80044f6:	d867      	bhi.n	80045c8 <HAL_TIM_ConfigClockSource+0x16c>
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d05c      	beq.n	80045b6 <HAL_TIM_ConfigClockSource+0x15a>
 80044fc:	2b10      	cmp	r3, #16
 80044fe:	d05a      	beq.n	80045b6 <HAL_TIM_ConfigClockSource+0x15a>
 8004500:	e062      	b.n	80045c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004512:	f000 fbba 	bl	8004c8a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004524:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68ba      	ldr	r2, [r7, #8]
 800452c:	609a      	str	r2, [r3, #8]
      break;
 800452e:	e04f      	b.n	80045d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004540:	f000 fba3 	bl	8004c8a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	689a      	ldr	r2, [r3, #8]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004552:	609a      	str	r2, [r3, #8]
      break;
 8004554:	e03c      	b.n	80045d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004562:	461a      	mov	r2, r3
 8004564:	f000 fb1a 	bl	8004b9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2150      	movs	r1, #80	@ 0x50
 800456e:	4618      	mov	r0, r3
 8004570:	f000 fb71 	bl	8004c56 <TIM_ITRx_SetConfig>
      break;
 8004574:	e02c      	b.n	80045d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004582:	461a      	mov	r2, r3
 8004584:	f000 fb38 	bl	8004bf8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2160      	movs	r1, #96	@ 0x60
 800458e:	4618      	mov	r0, r3
 8004590:	f000 fb61 	bl	8004c56 <TIM_ITRx_SetConfig>
      break;
 8004594:	e01c      	b.n	80045d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045a2:	461a      	mov	r2, r3
 80045a4:	f000 fafa 	bl	8004b9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2140      	movs	r1, #64	@ 0x40
 80045ae:	4618      	mov	r0, r3
 80045b0:	f000 fb51 	bl	8004c56 <TIM_ITRx_SetConfig>
      break;
 80045b4:	e00c      	b.n	80045d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4619      	mov	r1, r3
 80045c0:	4610      	mov	r0, r2
 80045c2:	f000 fb48 	bl	8004c56 <TIM_ITRx_SetConfig>
      break;
 80045c6:	e003      	b.n	80045d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	73fb      	strb	r3, [r7, #15]
      break;
 80045cc:	e000      	b.n	80045d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80045ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80045e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b083      	sub	sp, #12
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80045f2:	bf00      	nop
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bc80      	pop	{r7}
 80045fa:	4770      	bx	lr

080045fc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	bc80      	pop	{r7}
 800460c:	4770      	bx	lr

0800460e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b084      	sub	sp, #16
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	429a      	cmp	r2, r3
 8004624:	d107      	bne.n	8004636 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2201      	movs	r2, #1
 800462a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004634:	e02a      	b.n	800468c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	429a      	cmp	r2, r3
 800463e:	d107      	bne.n	8004650 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2202      	movs	r2, #2
 8004644:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800464e:	e01d      	b.n	800468c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	429a      	cmp	r2, r3
 8004658:	d107      	bne.n	800466a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2204      	movs	r2, #4
 800465e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004668:	e010      	b.n	800468c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	429a      	cmp	r2, r3
 8004672:	d107      	bne.n	8004684 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2208      	movs	r2, #8
 8004678:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004682:	e003      	b.n	800468c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	f7ff ffb5 	bl	80045fc <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	771a      	strb	r2, [r3, #28]
}
 8004698:	bf00      	nop
 800469a:	3710      	adds	r7, #16
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ac:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d10b      	bne.n	80046d0 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2201      	movs	r2, #1
 80046bc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d136      	bne.n	8004734 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046ce:	e031      	b.n	8004734 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d10b      	bne.n	80046f2 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2202      	movs	r2, #2
 80046de:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d125      	bne.n	8004734 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046f0:	e020      	b.n	8004734 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d10b      	bne.n	8004714 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2204      	movs	r2, #4
 8004700:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d114      	bne.n	8004734 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004712:	e00f      	b.n	8004734 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	429a      	cmp	r2, r3
 800471c:	d10a      	bne.n	8004734 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2208      	movs	r2, #8
 8004722:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d103      	bne.n	8004734 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f7fc ff21 	bl	800157c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	771a      	strb	r2, [r3, #28]
}
 8004740:	bf00      	nop
 8004742:	3710      	adds	r7, #16
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004754:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	429a      	cmp	r2, r3
 800475e:	d103      	bne.n	8004768 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2201      	movs	r2, #1
 8004764:	771a      	strb	r2, [r3, #28]
 8004766:	e019      	b.n	800479c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	429a      	cmp	r2, r3
 8004770:	d103      	bne.n	800477a <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2202      	movs	r2, #2
 8004776:	771a      	strb	r2, [r3, #28]
 8004778:	e010      	b.n	800479c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	429a      	cmp	r2, r3
 8004782:	d103      	bne.n	800478c <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2204      	movs	r2, #4
 8004788:	771a      	strb	r2, [r3, #28]
 800478a:	e007      	b.n	800479c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	429a      	cmp	r2, r3
 8004794:	d102      	bne.n	800479c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2208      	movs	r2, #8
 800479a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f7ff ff24 	bl	80045ea <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	771a      	strb	r2, [r3, #28]
}
 80047a8:	bf00      	nop
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a2f      	ldr	r2, [pc, #188]	@ (8004880 <TIM_Base_SetConfig+0xd0>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d00b      	beq.n	80047e0 <TIM_Base_SetConfig+0x30>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047ce:	d007      	beq.n	80047e0 <TIM_Base_SetConfig+0x30>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a2c      	ldr	r2, [pc, #176]	@ (8004884 <TIM_Base_SetConfig+0xd4>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d003      	beq.n	80047e0 <TIM_Base_SetConfig+0x30>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a2b      	ldr	r2, [pc, #172]	@ (8004888 <TIM_Base_SetConfig+0xd8>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d108      	bne.n	80047f2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a22      	ldr	r2, [pc, #136]	@ (8004880 <TIM_Base_SetConfig+0xd0>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d00b      	beq.n	8004812 <TIM_Base_SetConfig+0x62>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004800:	d007      	beq.n	8004812 <TIM_Base_SetConfig+0x62>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a1f      	ldr	r2, [pc, #124]	@ (8004884 <TIM_Base_SetConfig+0xd4>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d003      	beq.n	8004812 <TIM_Base_SetConfig+0x62>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a1e      	ldr	r2, [pc, #120]	@ (8004888 <TIM_Base_SetConfig+0xd8>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d108      	bne.n	8004824 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004818:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	4313      	orrs	r3, r2
 8004822:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	4313      	orrs	r3, r2
 8004830:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	689a      	ldr	r2, [r3, #8]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a0d      	ldr	r2, [pc, #52]	@ (8004880 <TIM_Base_SetConfig+0xd0>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d103      	bne.n	8004858 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	691a      	ldr	r2, [r3, #16]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	2b00      	cmp	r3, #0
 8004868:	d005      	beq.n	8004876 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	f023 0201 	bic.w	r2, r3, #1
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	611a      	str	r2, [r3, #16]
  }
}
 8004876:	bf00      	nop
 8004878:	3714      	adds	r7, #20
 800487a:	46bd      	mov	sp, r7
 800487c:	bc80      	pop	{r7}
 800487e:	4770      	bx	lr
 8004880:	40012c00 	.word	0x40012c00
 8004884:	40000400 	.word	0x40000400
 8004888:	40000800 	.word	0x40000800

0800488c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800488c:	b480      	push	{r7}
 800488e:	b087      	sub	sp, #28
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a1b      	ldr	r3, [r3, #32]
 80048a0:	f023 0201 	bic.w	r2, r3, #1
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f023 0303 	bic.w	r3, r3, #3
 80048c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	f023 0302 	bic.w	r3, r3, #2
 80048d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	4313      	orrs	r3, r2
 80048de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a1c      	ldr	r2, [pc, #112]	@ (8004954 <TIM_OC1_SetConfig+0xc8>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d10c      	bne.n	8004902 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	f023 0308 	bic.w	r3, r3, #8
 80048ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	697a      	ldr	r2, [r7, #20]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	f023 0304 	bic.w	r3, r3, #4
 8004900:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a13      	ldr	r2, [pc, #76]	@ (8004954 <TIM_OC1_SetConfig+0xc8>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d111      	bne.n	800492e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004910:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004918:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	4313      	orrs	r3, r2
 8004922:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	4313      	orrs	r3, r2
 800492c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	693a      	ldr	r2, [r7, #16]
 8004932:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	685a      	ldr	r2, [r3, #4]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	697a      	ldr	r2, [r7, #20]
 8004946:	621a      	str	r2, [r3, #32]
}
 8004948:	bf00      	nop
 800494a:	371c      	adds	r7, #28
 800494c:	46bd      	mov	sp, r7
 800494e:	bc80      	pop	{r7}
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	40012c00 	.word	0x40012c00

08004958 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004958:	b480      	push	{r7}
 800495a:	b087      	sub	sp, #28
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a1b      	ldr	r3, [r3, #32]
 800496c:	f023 0210 	bic.w	r2, r3, #16
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800498e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	021b      	lsls	r3, r3, #8
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	4313      	orrs	r3, r2
 800499a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	f023 0320 	bic.w	r3, r3, #32
 80049a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	011b      	lsls	r3, r3, #4
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a1d      	ldr	r2, [pc, #116]	@ (8004a28 <TIM_OC2_SetConfig+0xd0>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d10d      	bne.n	80049d4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	011b      	lsls	r3, r3, #4
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a14      	ldr	r2, [pc, #80]	@ (8004a28 <TIM_OC2_SetConfig+0xd0>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d113      	bne.n	8004a04 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80049e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80049ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	695b      	ldr	r3, [r3, #20]
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	693a      	ldr	r2, [r7, #16]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	685a      	ldr	r2, [r3, #4]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	697a      	ldr	r2, [r7, #20]
 8004a1c:	621a      	str	r2, [r3, #32]
}
 8004a1e:	bf00      	nop
 8004a20:	371c      	adds	r7, #28
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bc80      	pop	{r7}
 8004a26:	4770      	bx	lr
 8004a28:	40012c00 	.word	0x40012c00

08004a2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b087      	sub	sp, #28
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a1b      	ldr	r3, [r3, #32]
 8004a40:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f023 0303 	bic.w	r3, r3, #3
 8004a62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	021b      	lsls	r3, r3, #8
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a1d      	ldr	r2, [pc, #116]	@ (8004afc <TIM_OC3_SetConfig+0xd0>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d10d      	bne.n	8004aa6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	021b      	lsls	r3, r3, #8
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004aa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a14      	ldr	r2, [pc, #80]	@ (8004afc <TIM_OC3_SetConfig+0xd0>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d113      	bne.n	8004ad6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ab4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004abc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	011b      	lsls	r3, r3, #4
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	011b      	lsls	r3, r3, #4
 8004ad0:	693a      	ldr	r2, [r7, #16]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	685a      	ldr	r2, [r3, #4]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	621a      	str	r2, [r3, #32]
}
 8004af0:	bf00      	nop
 8004af2:	371c      	adds	r7, #28
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bc80      	pop	{r7}
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	40012c00 	.word	0x40012c00

08004b00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b087      	sub	sp, #28
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a1b      	ldr	r3, [r3, #32]
 8004b14:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	69db      	ldr	r3, [r3, #28]
 8004b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	021b      	lsls	r3, r3, #8
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	031b      	lsls	r3, r3, #12
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a0f      	ldr	r2, [pc, #60]	@ (8004b98 <TIM_OC4_SetConfig+0x98>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d109      	bne.n	8004b74 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	695b      	ldr	r3, [r3, #20]
 8004b6c:	019b      	lsls	r3, r3, #6
 8004b6e:	697a      	ldr	r2, [r7, #20]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	621a      	str	r2, [r3, #32]
}
 8004b8e:	bf00      	nop
 8004b90:	371c      	adds	r7, #28
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bc80      	pop	{r7}
 8004b96:	4770      	bx	lr
 8004b98:	40012c00 	.word	0x40012c00

08004b9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b087      	sub	sp, #28
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6a1b      	ldr	r3, [r3, #32]
 8004bac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	f023 0201 	bic.w	r2, r3, #1
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004bc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	011b      	lsls	r3, r3, #4
 8004bcc:	693a      	ldr	r2, [r7, #16]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f023 030a 	bic.w	r3, r3, #10
 8004bd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bda:	697a      	ldr	r2, [r7, #20]
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	697a      	ldr	r2, [r7, #20]
 8004bec:	621a      	str	r2, [r3, #32]
}
 8004bee:	bf00      	nop
 8004bf0:	371c      	adds	r7, #28
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bc80      	pop	{r7}
 8004bf6:	4770      	bx	lr

08004bf8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b087      	sub	sp, #28
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6a1b      	ldr	r3, [r3, #32]
 8004c08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	f023 0210 	bic.w	r2, r3, #16
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004c22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	031b      	lsls	r3, r3, #12
 8004c28:	693a      	ldr	r2, [r7, #16]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004c34:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	011b      	lsls	r3, r3, #4
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	697a      	ldr	r2, [r7, #20]
 8004c4a:	621a      	str	r2, [r3, #32]
}
 8004c4c:	bf00      	nop
 8004c4e:	371c      	adds	r7, #28
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bc80      	pop	{r7}
 8004c54:	4770      	bx	lr

08004c56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b085      	sub	sp, #20
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
 8004c5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c6e:	683a      	ldr	r2, [r7, #0]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	f043 0307 	orr.w	r3, r3, #7
 8004c78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	609a      	str	r2, [r3, #8]
}
 8004c80:	bf00      	nop
 8004c82:	3714      	adds	r7, #20
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bc80      	pop	{r7}
 8004c88:	4770      	bx	lr

08004c8a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	b087      	sub	sp, #28
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	60f8      	str	r0, [r7, #12]
 8004c92:	60b9      	str	r1, [r7, #8]
 8004c94:	607a      	str	r2, [r7, #4]
 8004c96:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ca4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	021a      	lsls	r2, r3, #8
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	431a      	orrs	r2, r3
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	609a      	str	r2, [r3, #8]
}
 8004cbe:	bf00      	nop
 8004cc0:	371c      	adds	r7, #28
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bc80      	pop	{r7}
 8004cc6:	4770      	bx	lr

08004cc8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b087      	sub	sp, #28
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	f003 031f 	and.w	r3, r3, #31
 8004cda:	2201      	movs	r2, #1
 8004cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6a1a      	ldr	r2, [r3, #32]
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	43db      	mvns	r3, r3
 8004cea:	401a      	ands	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6a1a      	ldr	r2, [r3, #32]
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	f003 031f 	and.w	r3, r3, #31
 8004cfa:	6879      	ldr	r1, [r7, #4]
 8004cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8004d00:	431a      	orrs	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	621a      	str	r2, [r3, #32]
}
 8004d06:	bf00      	nop
 8004d08:	371c      	adds	r7, #28
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bc80      	pop	{r7}
 8004d0e:	4770      	bx	lr

08004d10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d101      	bne.n	8004d28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d24:	2302      	movs	r3, #2
 8004d26:	e046      	b.n	8004db6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2202      	movs	r2, #2
 8004d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a16      	ldr	r2, [pc, #88]	@ (8004dc0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d00e      	beq.n	8004d8a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d74:	d009      	beq.n	8004d8a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a12      	ldr	r2, [pc, #72]	@ (8004dc4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d004      	beq.n	8004d8a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a10      	ldr	r2, [pc, #64]	@ (8004dc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d10c      	bne.n	8004da4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	68ba      	ldr	r2, [r7, #8]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3714      	adds	r7, #20
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bc80      	pop	{r7}
 8004dbe:	4770      	bx	lr
 8004dc0:	40012c00 	.word	0x40012c00
 8004dc4:	40000400 	.word	0x40000400
 8004dc8:	40000800 	.word	0x40000800

08004dcc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d101      	bne.n	8004de8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004de4:	2302      	movs	r3, #2
 8004de6:	e03d      	b.n	8004e64 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	695b      	ldr	r3, [r3, #20]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	69db      	ldr	r3, [r3, #28]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3714      	adds	r7, #20
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bc80      	pop	{r7}
 8004e6c:	4770      	bx	lr
	...

08004e70 <sniprintf>:
 8004e70:	b40c      	push	{r2, r3}
 8004e72:	b530      	push	{r4, r5, lr}
 8004e74:	4b18      	ldr	r3, [pc, #96]	@ (8004ed8 <sniprintf+0x68>)
 8004e76:	1e0c      	subs	r4, r1, #0
 8004e78:	681d      	ldr	r5, [r3, #0]
 8004e7a:	b09d      	sub	sp, #116	@ 0x74
 8004e7c:	da08      	bge.n	8004e90 <sniprintf+0x20>
 8004e7e:	238b      	movs	r3, #139	@ 0x8b
 8004e80:	f04f 30ff 	mov.w	r0, #4294967295
 8004e84:	602b      	str	r3, [r5, #0]
 8004e86:	b01d      	add	sp, #116	@ 0x74
 8004e88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e8c:	b002      	add	sp, #8
 8004e8e:	4770      	bx	lr
 8004e90:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004e94:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004e98:	f04f 0300 	mov.w	r3, #0
 8004e9c:	931b      	str	r3, [sp, #108]	@ 0x6c
 8004e9e:	bf0c      	ite	eq
 8004ea0:	4623      	moveq	r3, r4
 8004ea2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004ea6:	9304      	str	r3, [sp, #16]
 8004ea8:	9307      	str	r3, [sp, #28]
 8004eaa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004eae:	9002      	str	r0, [sp, #8]
 8004eb0:	9006      	str	r0, [sp, #24]
 8004eb2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004eb6:	4628      	mov	r0, r5
 8004eb8:	ab21      	add	r3, sp, #132	@ 0x84
 8004eba:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004ebc:	a902      	add	r1, sp, #8
 8004ebe:	9301      	str	r3, [sp, #4]
 8004ec0:	f000 f9a0 	bl	8005204 <_svfiprintf_r>
 8004ec4:	1c43      	adds	r3, r0, #1
 8004ec6:	bfbc      	itt	lt
 8004ec8:	238b      	movlt	r3, #139	@ 0x8b
 8004eca:	602b      	strlt	r3, [r5, #0]
 8004ecc:	2c00      	cmp	r4, #0
 8004ece:	d0da      	beq.n	8004e86 <sniprintf+0x16>
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	9b02      	ldr	r3, [sp, #8]
 8004ed4:	701a      	strb	r2, [r3, #0]
 8004ed6:	e7d6      	b.n	8004e86 <sniprintf+0x16>
 8004ed8:	20000014 	.word	0x20000014

08004edc <memset>:
 8004edc:	4603      	mov	r3, r0
 8004ede:	4402      	add	r2, r0
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d100      	bne.n	8004ee6 <memset+0xa>
 8004ee4:	4770      	bx	lr
 8004ee6:	f803 1b01 	strb.w	r1, [r3], #1
 8004eea:	e7f9      	b.n	8004ee0 <memset+0x4>

08004eec <__errno>:
 8004eec:	4b01      	ldr	r3, [pc, #4]	@ (8004ef4 <__errno+0x8>)
 8004eee:	6818      	ldr	r0, [r3, #0]
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	20000014 	.word	0x20000014

08004ef8 <__libc_init_array>:
 8004ef8:	b570      	push	{r4, r5, r6, lr}
 8004efa:	2600      	movs	r6, #0
 8004efc:	4d0c      	ldr	r5, [pc, #48]	@ (8004f30 <__libc_init_array+0x38>)
 8004efe:	4c0d      	ldr	r4, [pc, #52]	@ (8004f34 <__libc_init_array+0x3c>)
 8004f00:	1b64      	subs	r4, r4, r5
 8004f02:	10a4      	asrs	r4, r4, #2
 8004f04:	42a6      	cmp	r6, r4
 8004f06:	d109      	bne.n	8004f1c <__libc_init_array+0x24>
 8004f08:	f000 fc76 	bl	80057f8 <_init>
 8004f0c:	2600      	movs	r6, #0
 8004f0e:	4d0a      	ldr	r5, [pc, #40]	@ (8004f38 <__libc_init_array+0x40>)
 8004f10:	4c0a      	ldr	r4, [pc, #40]	@ (8004f3c <__libc_init_array+0x44>)
 8004f12:	1b64      	subs	r4, r4, r5
 8004f14:	10a4      	asrs	r4, r4, #2
 8004f16:	42a6      	cmp	r6, r4
 8004f18:	d105      	bne.n	8004f26 <__libc_init_array+0x2e>
 8004f1a:	bd70      	pop	{r4, r5, r6, pc}
 8004f1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f20:	4798      	blx	r3
 8004f22:	3601      	adds	r6, #1
 8004f24:	e7ee      	b.n	8004f04 <__libc_init_array+0xc>
 8004f26:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f2a:	4798      	blx	r3
 8004f2c:	3601      	adds	r6, #1
 8004f2e:	e7f2      	b.n	8004f16 <__libc_init_array+0x1e>
 8004f30:	08005a68 	.word	0x08005a68
 8004f34:	08005a68 	.word	0x08005a68
 8004f38:	08005a68 	.word	0x08005a68
 8004f3c:	08005a6c 	.word	0x08005a6c

08004f40 <__retarget_lock_acquire_recursive>:
 8004f40:	4770      	bx	lr

08004f42 <__retarget_lock_release_recursive>:
 8004f42:	4770      	bx	lr

08004f44 <memcpy>:
 8004f44:	440a      	add	r2, r1
 8004f46:	4291      	cmp	r1, r2
 8004f48:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f4c:	d100      	bne.n	8004f50 <memcpy+0xc>
 8004f4e:	4770      	bx	lr
 8004f50:	b510      	push	{r4, lr}
 8004f52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f56:	4291      	cmp	r1, r2
 8004f58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f5c:	d1f9      	bne.n	8004f52 <memcpy+0xe>
 8004f5e:	bd10      	pop	{r4, pc}

08004f60 <_free_r>:
 8004f60:	b538      	push	{r3, r4, r5, lr}
 8004f62:	4605      	mov	r5, r0
 8004f64:	2900      	cmp	r1, #0
 8004f66:	d040      	beq.n	8004fea <_free_r+0x8a>
 8004f68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f6c:	1f0c      	subs	r4, r1, #4
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	bfb8      	it	lt
 8004f72:	18e4      	addlt	r4, r4, r3
 8004f74:	f000 f8de 	bl	8005134 <__malloc_lock>
 8004f78:	4a1c      	ldr	r2, [pc, #112]	@ (8004fec <_free_r+0x8c>)
 8004f7a:	6813      	ldr	r3, [r2, #0]
 8004f7c:	b933      	cbnz	r3, 8004f8c <_free_r+0x2c>
 8004f7e:	6063      	str	r3, [r4, #4]
 8004f80:	6014      	str	r4, [r2, #0]
 8004f82:	4628      	mov	r0, r5
 8004f84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f88:	f000 b8da 	b.w	8005140 <__malloc_unlock>
 8004f8c:	42a3      	cmp	r3, r4
 8004f8e:	d908      	bls.n	8004fa2 <_free_r+0x42>
 8004f90:	6820      	ldr	r0, [r4, #0]
 8004f92:	1821      	adds	r1, r4, r0
 8004f94:	428b      	cmp	r3, r1
 8004f96:	bf01      	itttt	eq
 8004f98:	6819      	ldreq	r1, [r3, #0]
 8004f9a:	685b      	ldreq	r3, [r3, #4]
 8004f9c:	1809      	addeq	r1, r1, r0
 8004f9e:	6021      	streq	r1, [r4, #0]
 8004fa0:	e7ed      	b.n	8004f7e <_free_r+0x1e>
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	b10b      	cbz	r3, 8004fac <_free_r+0x4c>
 8004fa8:	42a3      	cmp	r3, r4
 8004faa:	d9fa      	bls.n	8004fa2 <_free_r+0x42>
 8004fac:	6811      	ldr	r1, [r2, #0]
 8004fae:	1850      	adds	r0, r2, r1
 8004fb0:	42a0      	cmp	r0, r4
 8004fb2:	d10b      	bne.n	8004fcc <_free_r+0x6c>
 8004fb4:	6820      	ldr	r0, [r4, #0]
 8004fb6:	4401      	add	r1, r0
 8004fb8:	1850      	adds	r0, r2, r1
 8004fba:	4283      	cmp	r3, r0
 8004fbc:	6011      	str	r1, [r2, #0]
 8004fbe:	d1e0      	bne.n	8004f82 <_free_r+0x22>
 8004fc0:	6818      	ldr	r0, [r3, #0]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	4408      	add	r0, r1
 8004fc6:	6010      	str	r0, [r2, #0]
 8004fc8:	6053      	str	r3, [r2, #4]
 8004fca:	e7da      	b.n	8004f82 <_free_r+0x22>
 8004fcc:	d902      	bls.n	8004fd4 <_free_r+0x74>
 8004fce:	230c      	movs	r3, #12
 8004fd0:	602b      	str	r3, [r5, #0]
 8004fd2:	e7d6      	b.n	8004f82 <_free_r+0x22>
 8004fd4:	6820      	ldr	r0, [r4, #0]
 8004fd6:	1821      	adds	r1, r4, r0
 8004fd8:	428b      	cmp	r3, r1
 8004fda:	bf01      	itttt	eq
 8004fdc:	6819      	ldreq	r1, [r3, #0]
 8004fde:	685b      	ldreq	r3, [r3, #4]
 8004fe0:	1809      	addeq	r1, r1, r0
 8004fe2:	6021      	streq	r1, [r4, #0]
 8004fe4:	6063      	str	r3, [r4, #4]
 8004fe6:	6054      	str	r4, [r2, #4]
 8004fe8:	e7cb      	b.n	8004f82 <_free_r+0x22>
 8004fea:	bd38      	pop	{r3, r4, r5, pc}
 8004fec:	20001404 	.word	0x20001404

08004ff0 <sbrk_aligned>:
 8004ff0:	b570      	push	{r4, r5, r6, lr}
 8004ff2:	4e0f      	ldr	r6, [pc, #60]	@ (8005030 <sbrk_aligned+0x40>)
 8004ff4:	460c      	mov	r4, r1
 8004ff6:	6831      	ldr	r1, [r6, #0]
 8004ff8:	4605      	mov	r5, r0
 8004ffa:	b911      	cbnz	r1, 8005002 <sbrk_aligned+0x12>
 8004ffc:	f000 fba8 	bl	8005750 <_sbrk_r>
 8005000:	6030      	str	r0, [r6, #0]
 8005002:	4621      	mov	r1, r4
 8005004:	4628      	mov	r0, r5
 8005006:	f000 fba3 	bl	8005750 <_sbrk_r>
 800500a:	1c43      	adds	r3, r0, #1
 800500c:	d103      	bne.n	8005016 <sbrk_aligned+0x26>
 800500e:	f04f 34ff 	mov.w	r4, #4294967295
 8005012:	4620      	mov	r0, r4
 8005014:	bd70      	pop	{r4, r5, r6, pc}
 8005016:	1cc4      	adds	r4, r0, #3
 8005018:	f024 0403 	bic.w	r4, r4, #3
 800501c:	42a0      	cmp	r0, r4
 800501e:	d0f8      	beq.n	8005012 <sbrk_aligned+0x22>
 8005020:	1a21      	subs	r1, r4, r0
 8005022:	4628      	mov	r0, r5
 8005024:	f000 fb94 	bl	8005750 <_sbrk_r>
 8005028:	3001      	adds	r0, #1
 800502a:	d1f2      	bne.n	8005012 <sbrk_aligned+0x22>
 800502c:	e7ef      	b.n	800500e <sbrk_aligned+0x1e>
 800502e:	bf00      	nop
 8005030:	20001400 	.word	0x20001400

08005034 <_malloc_r>:
 8005034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005038:	1ccd      	adds	r5, r1, #3
 800503a:	f025 0503 	bic.w	r5, r5, #3
 800503e:	3508      	adds	r5, #8
 8005040:	2d0c      	cmp	r5, #12
 8005042:	bf38      	it	cc
 8005044:	250c      	movcc	r5, #12
 8005046:	2d00      	cmp	r5, #0
 8005048:	4606      	mov	r6, r0
 800504a:	db01      	blt.n	8005050 <_malloc_r+0x1c>
 800504c:	42a9      	cmp	r1, r5
 800504e:	d904      	bls.n	800505a <_malloc_r+0x26>
 8005050:	230c      	movs	r3, #12
 8005052:	6033      	str	r3, [r6, #0]
 8005054:	2000      	movs	r0, #0
 8005056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800505a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005130 <_malloc_r+0xfc>
 800505e:	f000 f869 	bl	8005134 <__malloc_lock>
 8005062:	f8d8 3000 	ldr.w	r3, [r8]
 8005066:	461c      	mov	r4, r3
 8005068:	bb44      	cbnz	r4, 80050bc <_malloc_r+0x88>
 800506a:	4629      	mov	r1, r5
 800506c:	4630      	mov	r0, r6
 800506e:	f7ff ffbf 	bl	8004ff0 <sbrk_aligned>
 8005072:	1c43      	adds	r3, r0, #1
 8005074:	4604      	mov	r4, r0
 8005076:	d158      	bne.n	800512a <_malloc_r+0xf6>
 8005078:	f8d8 4000 	ldr.w	r4, [r8]
 800507c:	4627      	mov	r7, r4
 800507e:	2f00      	cmp	r7, #0
 8005080:	d143      	bne.n	800510a <_malloc_r+0xd6>
 8005082:	2c00      	cmp	r4, #0
 8005084:	d04b      	beq.n	800511e <_malloc_r+0xea>
 8005086:	6823      	ldr	r3, [r4, #0]
 8005088:	4639      	mov	r1, r7
 800508a:	4630      	mov	r0, r6
 800508c:	eb04 0903 	add.w	r9, r4, r3
 8005090:	f000 fb5e 	bl	8005750 <_sbrk_r>
 8005094:	4581      	cmp	r9, r0
 8005096:	d142      	bne.n	800511e <_malloc_r+0xea>
 8005098:	6821      	ldr	r1, [r4, #0]
 800509a:	4630      	mov	r0, r6
 800509c:	1a6d      	subs	r5, r5, r1
 800509e:	4629      	mov	r1, r5
 80050a0:	f7ff ffa6 	bl	8004ff0 <sbrk_aligned>
 80050a4:	3001      	adds	r0, #1
 80050a6:	d03a      	beq.n	800511e <_malloc_r+0xea>
 80050a8:	6823      	ldr	r3, [r4, #0]
 80050aa:	442b      	add	r3, r5
 80050ac:	6023      	str	r3, [r4, #0]
 80050ae:	f8d8 3000 	ldr.w	r3, [r8]
 80050b2:	685a      	ldr	r2, [r3, #4]
 80050b4:	bb62      	cbnz	r2, 8005110 <_malloc_r+0xdc>
 80050b6:	f8c8 7000 	str.w	r7, [r8]
 80050ba:	e00f      	b.n	80050dc <_malloc_r+0xa8>
 80050bc:	6822      	ldr	r2, [r4, #0]
 80050be:	1b52      	subs	r2, r2, r5
 80050c0:	d420      	bmi.n	8005104 <_malloc_r+0xd0>
 80050c2:	2a0b      	cmp	r2, #11
 80050c4:	d917      	bls.n	80050f6 <_malloc_r+0xc2>
 80050c6:	1961      	adds	r1, r4, r5
 80050c8:	42a3      	cmp	r3, r4
 80050ca:	6025      	str	r5, [r4, #0]
 80050cc:	bf18      	it	ne
 80050ce:	6059      	strne	r1, [r3, #4]
 80050d0:	6863      	ldr	r3, [r4, #4]
 80050d2:	bf08      	it	eq
 80050d4:	f8c8 1000 	streq.w	r1, [r8]
 80050d8:	5162      	str	r2, [r4, r5]
 80050da:	604b      	str	r3, [r1, #4]
 80050dc:	4630      	mov	r0, r6
 80050de:	f000 f82f 	bl	8005140 <__malloc_unlock>
 80050e2:	f104 000b 	add.w	r0, r4, #11
 80050e6:	1d23      	adds	r3, r4, #4
 80050e8:	f020 0007 	bic.w	r0, r0, #7
 80050ec:	1ac2      	subs	r2, r0, r3
 80050ee:	bf1c      	itt	ne
 80050f0:	1a1b      	subne	r3, r3, r0
 80050f2:	50a3      	strne	r3, [r4, r2]
 80050f4:	e7af      	b.n	8005056 <_malloc_r+0x22>
 80050f6:	6862      	ldr	r2, [r4, #4]
 80050f8:	42a3      	cmp	r3, r4
 80050fa:	bf0c      	ite	eq
 80050fc:	f8c8 2000 	streq.w	r2, [r8]
 8005100:	605a      	strne	r2, [r3, #4]
 8005102:	e7eb      	b.n	80050dc <_malloc_r+0xa8>
 8005104:	4623      	mov	r3, r4
 8005106:	6864      	ldr	r4, [r4, #4]
 8005108:	e7ae      	b.n	8005068 <_malloc_r+0x34>
 800510a:	463c      	mov	r4, r7
 800510c:	687f      	ldr	r7, [r7, #4]
 800510e:	e7b6      	b.n	800507e <_malloc_r+0x4a>
 8005110:	461a      	mov	r2, r3
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	42a3      	cmp	r3, r4
 8005116:	d1fb      	bne.n	8005110 <_malloc_r+0xdc>
 8005118:	2300      	movs	r3, #0
 800511a:	6053      	str	r3, [r2, #4]
 800511c:	e7de      	b.n	80050dc <_malloc_r+0xa8>
 800511e:	230c      	movs	r3, #12
 8005120:	4630      	mov	r0, r6
 8005122:	6033      	str	r3, [r6, #0]
 8005124:	f000 f80c 	bl	8005140 <__malloc_unlock>
 8005128:	e794      	b.n	8005054 <_malloc_r+0x20>
 800512a:	6005      	str	r5, [r0, #0]
 800512c:	e7d6      	b.n	80050dc <_malloc_r+0xa8>
 800512e:	bf00      	nop
 8005130:	20001404 	.word	0x20001404

08005134 <__malloc_lock>:
 8005134:	4801      	ldr	r0, [pc, #4]	@ (800513c <__malloc_lock+0x8>)
 8005136:	f7ff bf03 	b.w	8004f40 <__retarget_lock_acquire_recursive>
 800513a:	bf00      	nop
 800513c:	200013fc 	.word	0x200013fc

08005140 <__malloc_unlock>:
 8005140:	4801      	ldr	r0, [pc, #4]	@ (8005148 <__malloc_unlock+0x8>)
 8005142:	f7ff befe 	b.w	8004f42 <__retarget_lock_release_recursive>
 8005146:	bf00      	nop
 8005148:	200013fc 	.word	0x200013fc

0800514c <__ssputs_r>:
 800514c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005150:	461f      	mov	r7, r3
 8005152:	688e      	ldr	r6, [r1, #8]
 8005154:	4682      	mov	sl, r0
 8005156:	42be      	cmp	r6, r7
 8005158:	460c      	mov	r4, r1
 800515a:	4690      	mov	r8, r2
 800515c:	680b      	ldr	r3, [r1, #0]
 800515e:	d82d      	bhi.n	80051bc <__ssputs_r+0x70>
 8005160:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005164:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005168:	d026      	beq.n	80051b8 <__ssputs_r+0x6c>
 800516a:	6965      	ldr	r5, [r4, #20]
 800516c:	6909      	ldr	r1, [r1, #16]
 800516e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005172:	eba3 0901 	sub.w	r9, r3, r1
 8005176:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800517a:	1c7b      	adds	r3, r7, #1
 800517c:	444b      	add	r3, r9
 800517e:	106d      	asrs	r5, r5, #1
 8005180:	429d      	cmp	r5, r3
 8005182:	bf38      	it	cc
 8005184:	461d      	movcc	r5, r3
 8005186:	0553      	lsls	r3, r2, #21
 8005188:	d527      	bpl.n	80051da <__ssputs_r+0x8e>
 800518a:	4629      	mov	r1, r5
 800518c:	f7ff ff52 	bl	8005034 <_malloc_r>
 8005190:	4606      	mov	r6, r0
 8005192:	b360      	cbz	r0, 80051ee <__ssputs_r+0xa2>
 8005194:	464a      	mov	r2, r9
 8005196:	6921      	ldr	r1, [r4, #16]
 8005198:	f7ff fed4 	bl	8004f44 <memcpy>
 800519c:	89a3      	ldrh	r3, [r4, #12]
 800519e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80051a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051a6:	81a3      	strh	r3, [r4, #12]
 80051a8:	6126      	str	r6, [r4, #16]
 80051aa:	444e      	add	r6, r9
 80051ac:	6026      	str	r6, [r4, #0]
 80051ae:	463e      	mov	r6, r7
 80051b0:	6165      	str	r5, [r4, #20]
 80051b2:	eba5 0509 	sub.w	r5, r5, r9
 80051b6:	60a5      	str	r5, [r4, #8]
 80051b8:	42be      	cmp	r6, r7
 80051ba:	d900      	bls.n	80051be <__ssputs_r+0x72>
 80051bc:	463e      	mov	r6, r7
 80051be:	4632      	mov	r2, r6
 80051c0:	4641      	mov	r1, r8
 80051c2:	6820      	ldr	r0, [r4, #0]
 80051c4:	f000 faaa 	bl	800571c <memmove>
 80051c8:	2000      	movs	r0, #0
 80051ca:	68a3      	ldr	r3, [r4, #8]
 80051cc:	1b9b      	subs	r3, r3, r6
 80051ce:	60a3      	str	r3, [r4, #8]
 80051d0:	6823      	ldr	r3, [r4, #0]
 80051d2:	4433      	add	r3, r6
 80051d4:	6023      	str	r3, [r4, #0]
 80051d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051da:	462a      	mov	r2, r5
 80051dc:	f000 fad6 	bl	800578c <_realloc_r>
 80051e0:	4606      	mov	r6, r0
 80051e2:	2800      	cmp	r0, #0
 80051e4:	d1e0      	bne.n	80051a8 <__ssputs_r+0x5c>
 80051e6:	4650      	mov	r0, sl
 80051e8:	6921      	ldr	r1, [r4, #16]
 80051ea:	f7ff feb9 	bl	8004f60 <_free_r>
 80051ee:	230c      	movs	r3, #12
 80051f0:	f8ca 3000 	str.w	r3, [sl]
 80051f4:	89a3      	ldrh	r3, [r4, #12]
 80051f6:	f04f 30ff 	mov.w	r0, #4294967295
 80051fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051fe:	81a3      	strh	r3, [r4, #12]
 8005200:	e7e9      	b.n	80051d6 <__ssputs_r+0x8a>
	...

08005204 <_svfiprintf_r>:
 8005204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005208:	4698      	mov	r8, r3
 800520a:	898b      	ldrh	r3, [r1, #12]
 800520c:	4607      	mov	r7, r0
 800520e:	061b      	lsls	r3, r3, #24
 8005210:	460d      	mov	r5, r1
 8005212:	4614      	mov	r4, r2
 8005214:	b09d      	sub	sp, #116	@ 0x74
 8005216:	d510      	bpl.n	800523a <_svfiprintf_r+0x36>
 8005218:	690b      	ldr	r3, [r1, #16]
 800521a:	b973      	cbnz	r3, 800523a <_svfiprintf_r+0x36>
 800521c:	2140      	movs	r1, #64	@ 0x40
 800521e:	f7ff ff09 	bl	8005034 <_malloc_r>
 8005222:	6028      	str	r0, [r5, #0]
 8005224:	6128      	str	r0, [r5, #16]
 8005226:	b930      	cbnz	r0, 8005236 <_svfiprintf_r+0x32>
 8005228:	230c      	movs	r3, #12
 800522a:	603b      	str	r3, [r7, #0]
 800522c:	f04f 30ff 	mov.w	r0, #4294967295
 8005230:	b01d      	add	sp, #116	@ 0x74
 8005232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005236:	2340      	movs	r3, #64	@ 0x40
 8005238:	616b      	str	r3, [r5, #20]
 800523a:	2300      	movs	r3, #0
 800523c:	9309      	str	r3, [sp, #36]	@ 0x24
 800523e:	2320      	movs	r3, #32
 8005240:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005244:	2330      	movs	r3, #48	@ 0x30
 8005246:	f04f 0901 	mov.w	r9, #1
 800524a:	f8cd 800c 	str.w	r8, [sp, #12]
 800524e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80053e8 <_svfiprintf_r+0x1e4>
 8005252:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005256:	4623      	mov	r3, r4
 8005258:	469a      	mov	sl, r3
 800525a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800525e:	b10a      	cbz	r2, 8005264 <_svfiprintf_r+0x60>
 8005260:	2a25      	cmp	r2, #37	@ 0x25
 8005262:	d1f9      	bne.n	8005258 <_svfiprintf_r+0x54>
 8005264:	ebba 0b04 	subs.w	fp, sl, r4
 8005268:	d00b      	beq.n	8005282 <_svfiprintf_r+0x7e>
 800526a:	465b      	mov	r3, fp
 800526c:	4622      	mov	r2, r4
 800526e:	4629      	mov	r1, r5
 8005270:	4638      	mov	r0, r7
 8005272:	f7ff ff6b 	bl	800514c <__ssputs_r>
 8005276:	3001      	adds	r0, #1
 8005278:	f000 80a7 	beq.w	80053ca <_svfiprintf_r+0x1c6>
 800527c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800527e:	445a      	add	r2, fp
 8005280:	9209      	str	r2, [sp, #36]	@ 0x24
 8005282:	f89a 3000 	ldrb.w	r3, [sl]
 8005286:	2b00      	cmp	r3, #0
 8005288:	f000 809f 	beq.w	80053ca <_svfiprintf_r+0x1c6>
 800528c:	2300      	movs	r3, #0
 800528e:	f04f 32ff 	mov.w	r2, #4294967295
 8005292:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005296:	f10a 0a01 	add.w	sl, sl, #1
 800529a:	9304      	str	r3, [sp, #16]
 800529c:	9307      	str	r3, [sp, #28]
 800529e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80052a2:	931a      	str	r3, [sp, #104]	@ 0x68
 80052a4:	4654      	mov	r4, sl
 80052a6:	2205      	movs	r2, #5
 80052a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052ac:	484e      	ldr	r0, [pc, #312]	@ (80053e8 <_svfiprintf_r+0x1e4>)
 80052ae:	f000 fa5f 	bl	8005770 <memchr>
 80052b2:	9a04      	ldr	r2, [sp, #16]
 80052b4:	b9d8      	cbnz	r0, 80052ee <_svfiprintf_r+0xea>
 80052b6:	06d0      	lsls	r0, r2, #27
 80052b8:	bf44      	itt	mi
 80052ba:	2320      	movmi	r3, #32
 80052bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80052c0:	0711      	lsls	r1, r2, #28
 80052c2:	bf44      	itt	mi
 80052c4:	232b      	movmi	r3, #43	@ 0x2b
 80052c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80052ca:	f89a 3000 	ldrb.w	r3, [sl]
 80052ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80052d0:	d015      	beq.n	80052fe <_svfiprintf_r+0xfa>
 80052d2:	4654      	mov	r4, sl
 80052d4:	2000      	movs	r0, #0
 80052d6:	f04f 0c0a 	mov.w	ip, #10
 80052da:	9a07      	ldr	r2, [sp, #28]
 80052dc:	4621      	mov	r1, r4
 80052de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052e2:	3b30      	subs	r3, #48	@ 0x30
 80052e4:	2b09      	cmp	r3, #9
 80052e6:	d94b      	bls.n	8005380 <_svfiprintf_r+0x17c>
 80052e8:	b1b0      	cbz	r0, 8005318 <_svfiprintf_r+0x114>
 80052ea:	9207      	str	r2, [sp, #28]
 80052ec:	e014      	b.n	8005318 <_svfiprintf_r+0x114>
 80052ee:	eba0 0308 	sub.w	r3, r0, r8
 80052f2:	fa09 f303 	lsl.w	r3, r9, r3
 80052f6:	4313      	orrs	r3, r2
 80052f8:	46a2      	mov	sl, r4
 80052fa:	9304      	str	r3, [sp, #16]
 80052fc:	e7d2      	b.n	80052a4 <_svfiprintf_r+0xa0>
 80052fe:	9b03      	ldr	r3, [sp, #12]
 8005300:	1d19      	adds	r1, r3, #4
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	9103      	str	r1, [sp, #12]
 8005306:	2b00      	cmp	r3, #0
 8005308:	bfbb      	ittet	lt
 800530a:	425b      	neglt	r3, r3
 800530c:	f042 0202 	orrlt.w	r2, r2, #2
 8005310:	9307      	strge	r3, [sp, #28]
 8005312:	9307      	strlt	r3, [sp, #28]
 8005314:	bfb8      	it	lt
 8005316:	9204      	strlt	r2, [sp, #16]
 8005318:	7823      	ldrb	r3, [r4, #0]
 800531a:	2b2e      	cmp	r3, #46	@ 0x2e
 800531c:	d10a      	bne.n	8005334 <_svfiprintf_r+0x130>
 800531e:	7863      	ldrb	r3, [r4, #1]
 8005320:	2b2a      	cmp	r3, #42	@ 0x2a
 8005322:	d132      	bne.n	800538a <_svfiprintf_r+0x186>
 8005324:	9b03      	ldr	r3, [sp, #12]
 8005326:	3402      	adds	r4, #2
 8005328:	1d1a      	adds	r2, r3, #4
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	9203      	str	r2, [sp, #12]
 800532e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005332:	9305      	str	r3, [sp, #20]
 8005334:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80053ec <_svfiprintf_r+0x1e8>
 8005338:	2203      	movs	r2, #3
 800533a:	4650      	mov	r0, sl
 800533c:	7821      	ldrb	r1, [r4, #0]
 800533e:	f000 fa17 	bl	8005770 <memchr>
 8005342:	b138      	cbz	r0, 8005354 <_svfiprintf_r+0x150>
 8005344:	2240      	movs	r2, #64	@ 0x40
 8005346:	9b04      	ldr	r3, [sp, #16]
 8005348:	eba0 000a 	sub.w	r0, r0, sl
 800534c:	4082      	lsls	r2, r0
 800534e:	4313      	orrs	r3, r2
 8005350:	3401      	adds	r4, #1
 8005352:	9304      	str	r3, [sp, #16]
 8005354:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005358:	2206      	movs	r2, #6
 800535a:	4825      	ldr	r0, [pc, #148]	@ (80053f0 <_svfiprintf_r+0x1ec>)
 800535c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005360:	f000 fa06 	bl	8005770 <memchr>
 8005364:	2800      	cmp	r0, #0
 8005366:	d036      	beq.n	80053d6 <_svfiprintf_r+0x1d2>
 8005368:	4b22      	ldr	r3, [pc, #136]	@ (80053f4 <_svfiprintf_r+0x1f0>)
 800536a:	bb1b      	cbnz	r3, 80053b4 <_svfiprintf_r+0x1b0>
 800536c:	9b03      	ldr	r3, [sp, #12]
 800536e:	3307      	adds	r3, #7
 8005370:	f023 0307 	bic.w	r3, r3, #7
 8005374:	3308      	adds	r3, #8
 8005376:	9303      	str	r3, [sp, #12]
 8005378:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800537a:	4433      	add	r3, r6
 800537c:	9309      	str	r3, [sp, #36]	@ 0x24
 800537e:	e76a      	b.n	8005256 <_svfiprintf_r+0x52>
 8005380:	460c      	mov	r4, r1
 8005382:	2001      	movs	r0, #1
 8005384:	fb0c 3202 	mla	r2, ip, r2, r3
 8005388:	e7a8      	b.n	80052dc <_svfiprintf_r+0xd8>
 800538a:	2300      	movs	r3, #0
 800538c:	f04f 0c0a 	mov.w	ip, #10
 8005390:	4619      	mov	r1, r3
 8005392:	3401      	adds	r4, #1
 8005394:	9305      	str	r3, [sp, #20]
 8005396:	4620      	mov	r0, r4
 8005398:	f810 2b01 	ldrb.w	r2, [r0], #1
 800539c:	3a30      	subs	r2, #48	@ 0x30
 800539e:	2a09      	cmp	r2, #9
 80053a0:	d903      	bls.n	80053aa <_svfiprintf_r+0x1a6>
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d0c6      	beq.n	8005334 <_svfiprintf_r+0x130>
 80053a6:	9105      	str	r1, [sp, #20]
 80053a8:	e7c4      	b.n	8005334 <_svfiprintf_r+0x130>
 80053aa:	4604      	mov	r4, r0
 80053ac:	2301      	movs	r3, #1
 80053ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80053b2:	e7f0      	b.n	8005396 <_svfiprintf_r+0x192>
 80053b4:	ab03      	add	r3, sp, #12
 80053b6:	9300      	str	r3, [sp, #0]
 80053b8:	462a      	mov	r2, r5
 80053ba:	4638      	mov	r0, r7
 80053bc:	4b0e      	ldr	r3, [pc, #56]	@ (80053f8 <_svfiprintf_r+0x1f4>)
 80053be:	a904      	add	r1, sp, #16
 80053c0:	f3af 8000 	nop.w
 80053c4:	1c42      	adds	r2, r0, #1
 80053c6:	4606      	mov	r6, r0
 80053c8:	d1d6      	bne.n	8005378 <_svfiprintf_r+0x174>
 80053ca:	89ab      	ldrh	r3, [r5, #12]
 80053cc:	065b      	lsls	r3, r3, #25
 80053ce:	f53f af2d 	bmi.w	800522c <_svfiprintf_r+0x28>
 80053d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80053d4:	e72c      	b.n	8005230 <_svfiprintf_r+0x2c>
 80053d6:	ab03      	add	r3, sp, #12
 80053d8:	9300      	str	r3, [sp, #0]
 80053da:	462a      	mov	r2, r5
 80053dc:	4638      	mov	r0, r7
 80053de:	4b06      	ldr	r3, [pc, #24]	@ (80053f8 <_svfiprintf_r+0x1f4>)
 80053e0:	a904      	add	r1, sp, #16
 80053e2:	f000 f87d 	bl	80054e0 <_printf_i>
 80053e6:	e7ed      	b.n	80053c4 <_svfiprintf_r+0x1c0>
 80053e8:	08005a32 	.word	0x08005a32
 80053ec:	08005a38 	.word	0x08005a38
 80053f0:	08005a3c 	.word	0x08005a3c
 80053f4:	00000000 	.word	0x00000000
 80053f8:	0800514d 	.word	0x0800514d

080053fc <_printf_common>:
 80053fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005400:	4616      	mov	r6, r2
 8005402:	4698      	mov	r8, r3
 8005404:	688a      	ldr	r2, [r1, #8]
 8005406:	690b      	ldr	r3, [r1, #16]
 8005408:	4607      	mov	r7, r0
 800540a:	4293      	cmp	r3, r2
 800540c:	bfb8      	it	lt
 800540e:	4613      	movlt	r3, r2
 8005410:	6033      	str	r3, [r6, #0]
 8005412:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005416:	460c      	mov	r4, r1
 8005418:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800541c:	b10a      	cbz	r2, 8005422 <_printf_common+0x26>
 800541e:	3301      	adds	r3, #1
 8005420:	6033      	str	r3, [r6, #0]
 8005422:	6823      	ldr	r3, [r4, #0]
 8005424:	0699      	lsls	r1, r3, #26
 8005426:	bf42      	ittt	mi
 8005428:	6833      	ldrmi	r3, [r6, #0]
 800542a:	3302      	addmi	r3, #2
 800542c:	6033      	strmi	r3, [r6, #0]
 800542e:	6825      	ldr	r5, [r4, #0]
 8005430:	f015 0506 	ands.w	r5, r5, #6
 8005434:	d106      	bne.n	8005444 <_printf_common+0x48>
 8005436:	f104 0a19 	add.w	sl, r4, #25
 800543a:	68e3      	ldr	r3, [r4, #12]
 800543c:	6832      	ldr	r2, [r6, #0]
 800543e:	1a9b      	subs	r3, r3, r2
 8005440:	42ab      	cmp	r3, r5
 8005442:	dc2b      	bgt.n	800549c <_printf_common+0xa0>
 8005444:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005448:	6822      	ldr	r2, [r4, #0]
 800544a:	3b00      	subs	r3, #0
 800544c:	bf18      	it	ne
 800544e:	2301      	movne	r3, #1
 8005450:	0692      	lsls	r2, r2, #26
 8005452:	d430      	bmi.n	80054b6 <_printf_common+0xba>
 8005454:	4641      	mov	r1, r8
 8005456:	4638      	mov	r0, r7
 8005458:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800545c:	47c8      	blx	r9
 800545e:	3001      	adds	r0, #1
 8005460:	d023      	beq.n	80054aa <_printf_common+0xae>
 8005462:	6823      	ldr	r3, [r4, #0]
 8005464:	6922      	ldr	r2, [r4, #16]
 8005466:	f003 0306 	and.w	r3, r3, #6
 800546a:	2b04      	cmp	r3, #4
 800546c:	bf14      	ite	ne
 800546e:	2500      	movne	r5, #0
 8005470:	6833      	ldreq	r3, [r6, #0]
 8005472:	f04f 0600 	mov.w	r6, #0
 8005476:	bf08      	it	eq
 8005478:	68e5      	ldreq	r5, [r4, #12]
 800547a:	f104 041a 	add.w	r4, r4, #26
 800547e:	bf08      	it	eq
 8005480:	1aed      	subeq	r5, r5, r3
 8005482:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005486:	bf08      	it	eq
 8005488:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800548c:	4293      	cmp	r3, r2
 800548e:	bfc4      	itt	gt
 8005490:	1a9b      	subgt	r3, r3, r2
 8005492:	18ed      	addgt	r5, r5, r3
 8005494:	42b5      	cmp	r5, r6
 8005496:	d11a      	bne.n	80054ce <_printf_common+0xd2>
 8005498:	2000      	movs	r0, #0
 800549a:	e008      	b.n	80054ae <_printf_common+0xb2>
 800549c:	2301      	movs	r3, #1
 800549e:	4652      	mov	r2, sl
 80054a0:	4641      	mov	r1, r8
 80054a2:	4638      	mov	r0, r7
 80054a4:	47c8      	blx	r9
 80054a6:	3001      	adds	r0, #1
 80054a8:	d103      	bne.n	80054b2 <_printf_common+0xb6>
 80054aa:	f04f 30ff 	mov.w	r0, #4294967295
 80054ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054b2:	3501      	adds	r5, #1
 80054b4:	e7c1      	b.n	800543a <_printf_common+0x3e>
 80054b6:	2030      	movs	r0, #48	@ 0x30
 80054b8:	18e1      	adds	r1, r4, r3
 80054ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80054be:	1c5a      	adds	r2, r3, #1
 80054c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80054c4:	4422      	add	r2, r4
 80054c6:	3302      	adds	r3, #2
 80054c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80054cc:	e7c2      	b.n	8005454 <_printf_common+0x58>
 80054ce:	2301      	movs	r3, #1
 80054d0:	4622      	mov	r2, r4
 80054d2:	4641      	mov	r1, r8
 80054d4:	4638      	mov	r0, r7
 80054d6:	47c8      	blx	r9
 80054d8:	3001      	adds	r0, #1
 80054da:	d0e6      	beq.n	80054aa <_printf_common+0xae>
 80054dc:	3601      	adds	r6, #1
 80054de:	e7d9      	b.n	8005494 <_printf_common+0x98>

080054e0 <_printf_i>:
 80054e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054e4:	7e0f      	ldrb	r7, [r1, #24]
 80054e6:	4691      	mov	r9, r2
 80054e8:	2f78      	cmp	r7, #120	@ 0x78
 80054ea:	4680      	mov	r8, r0
 80054ec:	460c      	mov	r4, r1
 80054ee:	469a      	mov	sl, r3
 80054f0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80054f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80054f6:	d807      	bhi.n	8005508 <_printf_i+0x28>
 80054f8:	2f62      	cmp	r7, #98	@ 0x62
 80054fa:	d80a      	bhi.n	8005512 <_printf_i+0x32>
 80054fc:	2f00      	cmp	r7, #0
 80054fe:	f000 80d1 	beq.w	80056a4 <_printf_i+0x1c4>
 8005502:	2f58      	cmp	r7, #88	@ 0x58
 8005504:	f000 80b8 	beq.w	8005678 <_printf_i+0x198>
 8005508:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800550c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005510:	e03a      	b.n	8005588 <_printf_i+0xa8>
 8005512:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005516:	2b15      	cmp	r3, #21
 8005518:	d8f6      	bhi.n	8005508 <_printf_i+0x28>
 800551a:	a101      	add	r1, pc, #4	@ (adr r1, 8005520 <_printf_i+0x40>)
 800551c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005520:	08005579 	.word	0x08005579
 8005524:	0800558d 	.word	0x0800558d
 8005528:	08005509 	.word	0x08005509
 800552c:	08005509 	.word	0x08005509
 8005530:	08005509 	.word	0x08005509
 8005534:	08005509 	.word	0x08005509
 8005538:	0800558d 	.word	0x0800558d
 800553c:	08005509 	.word	0x08005509
 8005540:	08005509 	.word	0x08005509
 8005544:	08005509 	.word	0x08005509
 8005548:	08005509 	.word	0x08005509
 800554c:	0800568b 	.word	0x0800568b
 8005550:	080055b7 	.word	0x080055b7
 8005554:	08005645 	.word	0x08005645
 8005558:	08005509 	.word	0x08005509
 800555c:	08005509 	.word	0x08005509
 8005560:	080056ad 	.word	0x080056ad
 8005564:	08005509 	.word	0x08005509
 8005568:	080055b7 	.word	0x080055b7
 800556c:	08005509 	.word	0x08005509
 8005570:	08005509 	.word	0x08005509
 8005574:	0800564d 	.word	0x0800564d
 8005578:	6833      	ldr	r3, [r6, #0]
 800557a:	1d1a      	adds	r2, r3, #4
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	6032      	str	r2, [r6, #0]
 8005580:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005584:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005588:	2301      	movs	r3, #1
 800558a:	e09c      	b.n	80056c6 <_printf_i+0x1e6>
 800558c:	6833      	ldr	r3, [r6, #0]
 800558e:	6820      	ldr	r0, [r4, #0]
 8005590:	1d19      	adds	r1, r3, #4
 8005592:	6031      	str	r1, [r6, #0]
 8005594:	0606      	lsls	r6, r0, #24
 8005596:	d501      	bpl.n	800559c <_printf_i+0xbc>
 8005598:	681d      	ldr	r5, [r3, #0]
 800559a:	e003      	b.n	80055a4 <_printf_i+0xc4>
 800559c:	0645      	lsls	r5, r0, #25
 800559e:	d5fb      	bpl.n	8005598 <_printf_i+0xb8>
 80055a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80055a4:	2d00      	cmp	r5, #0
 80055a6:	da03      	bge.n	80055b0 <_printf_i+0xd0>
 80055a8:	232d      	movs	r3, #45	@ 0x2d
 80055aa:	426d      	negs	r5, r5
 80055ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055b0:	230a      	movs	r3, #10
 80055b2:	4858      	ldr	r0, [pc, #352]	@ (8005714 <_printf_i+0x234>)
 80055b4:	e011      	b.n	80055da <_printf_i+0xfa>
 80055b6:	6821      	ldr	r1, [r4, #0]
 80055b8:	6833      	ldr	r3, [r6, #0]
 80055ba:	0608      	lsls	r0, r1, #24
 80055bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80055c0:	d402      	bmi.n	80055c8 <_printf_i+0xe8>
 80055c2:	0649      	lsls	r1, r1, #25
 80055c4:	bf48      	it	mi
 80055c6:	b2ad      	uxthmi	r5, r5
 80055c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80055ca:	6033      	str	r3, [r6, #0]
 80055cc:	bf14      	ite	ne
 80055ce:	230a      	movne	r3, #10
 80055d0:	2308      	moveq	r3, #8
 80055d2:	4850      	ldr	r0, [pc, #320]	@ (8005714 <_printf_i+0x234>)
 80055d4:	2100      	movs	r1, #0
 80055d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80055da:	6866      	ldr	r6, [r4, #4]
 80055dc:	2e00      	cmp	r6, #0
 80055de:	60a6      	str	r6, [r4, #8]
 80055e0:	db05      	blt.n	80055ee <_printf_i+0x10e>
 80055e2:	6821      	ldr	r1, [r4, #0]
 80055e4:	432e      	orrs	r6, r5
 80055e6:	f021 0104 	bic.w	r1, r1, #4
 80055ea:	6021      	str	r1, [r4, #0]
 80055ec:	d04b      	beq.n	8005686 <_printf_i+0x1a6>
 80055ee:	4616      	mov	r6, r2
 80055f0:	fbb5 f1f3 	udiv	r1, r5, r3
 80055f4:	fb03 5711 	mls	r7, r3, r1, r5
 80055f8:	5dc7      	ldrb	r7, [r0, r7]
 80055fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80055fe:	462f      	mov	r7, r5
 8005600:	42bb      	cmp	r3, r7
 8005602:	460d      	mov	r5, r1
 8005604:	d9f4      	bls.n	80055f0 <_printf_i+0x110>
 8005606:	2b08      	cmp	r3, #8
 8005608:	d10b      	bne.n	8005622 <_printf_i+0x142>
 800560a:	6823      	ldr	r3, [r4, #0]
 800560c:	07df      	lsls	r7, r3, #31
 800560e:	d508      	bpl.n	8005622 <_printf_i+0x142>
 8005610:	6923      	ldr	r3, [r4, #16]
 8005612:	6861      	ldr	r1, [r4, #4]
 8005614:	4299      	cmp	r1, r3
 8005616:	bfde      	ittt	le
 8005618:	2330      	movle	r3, #48	@ 0x30
 800561a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800561e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005622:	1b92      	subs	r2, r2, r6
 8005624:	6122      	str	r2, [r4, #16]
 8005626:	464b      	mov	r3, r9
 8005628:	4621      	mov	r1, r4
 800562a:	4640      	mov	r0, r8
 800562c:	f8cd a000 	str.w	sl, [sp]
 8005630:	aa03      	add	r2, sp, #12
 8005632:	f7ff fee3 	bl	80053fc <_printf_common>
 8005636:	3001      	adds	r0, #1
 8005638:	d14a      	bne.n	80056d0 <_printf_i+0x1f0>
 800563a:	f04f 30ff 	mov.w	r0, #4294967295
 800563e:	b004      	add	sp, #16
 8005640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005644:	6823      	ldr	r3, [r4, #0]
 8005646:	f043 0320 	orr.w	r3, r3, #32
 800564a:	6023      	str	r3, [r4, #0]
 800564c:	2778      	movs	r7, #120	@ 0x78
 800564e:	4832      	ldr	r0, [pc, #200]	@ (8005718 <_printf_i+0x238>)
 8005650:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005654:	6823      	ldr	r3, [r4, #0]
 8005656:	6831      	ldr	r1, [r6, #0]
 8005658:	061f      	lsls	r7, r3, #24
 800565a:	f851 5b04 	ldr.w	r5, [r1], #4
 800565e:	d402      	bmi.n	8005666 <_printf_i+0x186>
 8005660:	065f      	lsls	r7, r3, #25
 8005662:	bf48      	it	mi
 8005664:	b2ad      	uxthmi	r5, r5
 8005666:	6031      	str	r1, [r6, #0]
 8005668:	07d9      	lsls	r1, r3, #31
 800566a:	bf44      	itt	mi
 800566c:	f043 0320 	orrmi.w	r3, r3, #32
 8005670:	6023      	strmi	r3, [r4, #0]
 8005672:	b11d      	cbz	r5, 800567c <_printf_i+0x19c>
 8005674:	2310      	movs	r3, #16
 8005676:	e7ad      	b.n	80055d4 <_printf_i+0xf4>
 8005678:	4826      	ldr	r0, [pc, #152]	@ (8005714 <_printf_i+0x234>)
 800567a:	e7e9      	b.n	8005650 <_printf_i+0x170>
 800567c:	6823      	ldr	r3, [r4, #0]
 800567e:	f023 0320 	bic.w	r3, r3, #32
 8005682:	6023      	str	r3, [r4, #0]
 8005684:	e7f6      	b.n	8005674 <_printf_i+0x194>
 8005686:	4616      	mov	r6, r2
 8005688:	e7bd      	b.n	8005606 <_printf_i+0x126>
 800568a:	6833      	ldr	r3, [r6, #0]
 800568c:	6825      	ldr	r5, [r4, #0]
 800568e:	1d18      	adds	r0, r3, #4
 8005690:	6961      	ldr	r1, [r4, #20]
 8005692:	6030      	str	r0, [r6, #0]
 8005694:	062e      	lsls	r6, r5, #24
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	d501      	bpl.n	800569e <_printf_i+0x1be>
 800569a:	6019      	str	r1, [r3, #0]
 800569c:	e002      	b.n	80056a4 <_printf_i+0x1c4>
 800569e:	0668      	lsls	r0, r5, #25
 80056a0:	d5fb      	bpl.n	800569a <_printf_i+0x1ba>
 80056a2:	8019      	strh	r1, [r3, #0]
 80056a4:	2300      	movs	r3, #0
 80056a6:	4616      	mov	r6, r2
 80056a8:	6123      	str	r3, [r4, #16]
 80056aa:	e7bc      	b.n	8005626 <_printf_i+0x146>
 80056ac:	6833      	ldr	r3, [r6, #0]
 80056ae:	2100      	movs	r1, #0
 80056b0:	1d1a      	adds	r2, r3, #4
 80056b2:	6032      	str	r2, [r6, #0]
 80056b4:	681e      	ldr	r6, [r3, #0]
 80056b6:	6862      	ldr	r2, [r4, #4]
 80056b8:	4630      	mov	r0, r6
 80056ba:	f000 f859 	bl	8005770 <memchr>
 80056be:	b108      	cbz	r0, 80056c4 <_printf_i+0x1e4>
 80056c0:	1b80      	subs	r0, r0, r6
 80056c2:	6060      	str	r0, [r4, #4]
 80056c4:	6863      	ldr	r3, [r4, #4]
 80056c6:	6123      	str	r3, [r4, #16]
 80056c8:	2300      	movs	r3, #0
 80056ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056ce:	e7aa      	b.n	8005626 <_printf_i+0x146>
 80056d0:	4632      	mov	r2, r6
 80056d2:	4649      	mov	r1, r9
 80056d4:	4640      	mov	r0, r8
 80056d6:	6923      	ldr	r3, [r4, #16]
 80056d8:	47d0      	blx	sl
 80056da:	3001      	adds	r0, #1
 80056dc:	d0ad      	beq.n	800563a <_printf_i+0x15a>
 80056de:	6823      	ldr	r3, [r4, #0]
 80056e0:	079b      	lsls	r3, r3, #30
 80056e2:	d413      	bmi.n	800570c <_printf_i+0x22c>
 80056e4:	68e0      	ldr	r0, [r4, #12]
 80056e6:	9b03      	ldr	r3, [sp, #12]
 80056e8:	4298      	cmp	r0, r3
 80056ea:	bfb8      	it	lt
 80056ec:	4618      	movlt	r0, r3
 80056ee:	e7a6      	b.n	800563e <_printf_i+0x15e>
 80056f0:	2301      	movs	r3, #1
 80056f2:	4632      	mov	r2, r6
 80056f4:	4649      	mov	r1, r9
 80056f6:	4640      	mov	r0, r8
 80056f8:	47d0      	blx	sl
 80056fa:	3001      	adds	r0, #1
 80056fc:	d09d      	beq.n	800563a <_printf_i+0x15a>
 80056fe:	3501      	adds	r5, #1
 8005700:	68e3      	ldr	r3, [r4, #12]
 8005702:	9903      	ldr	r1, [sp, #12]
 8005704:	1a5b      	subs	r3, r3, r1
 8005706:	42ab      	cmp	r3, r5
 8005708:	dcf2      	bgt.n	80056f0 <_printf_i+0x210>
 800570a:	e7eb      	b.n	80056e4 <_printf_i+0x204>
 800570c:	2500      	movs	r5, #0
 800570e:	f104 0619 	add.w	r6, r4, #25
 8005712:	e7f5      	b.n	8005700 <_printf_i+0x220>
 8005714:	08005a43 	.word	0x08005a43
 8005718:	08005a54 	.word	0x08005a54

0800571c <memmove>:
 800571c:	4288      	cmp	r0, r1
 800571e:	b510      	push	{r4, lr}
 8005720:	eb01 0402 	add.w	r4, r1, r2
 8005724:	d902      	bls.n	800572c <memmove+0x10>
 8005726:	4284      	cmp	r4, r0
 8005728:	4623      	mov	r3, r4
 800572a:	d807      	bhi.n	800573c <memmove+0x20>
 800572c:	1e43      	subs	r3, r0, #1
 800572e:	42a1      	cmp	r1, r4
 8005730:	d008      	beq.n	8005744 <memmove+0x28>
 8005732:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005736:	f803 2f01 	strb.w	r2, [r3, #1]!
 800573a:	e7f8      	b.n	800572e <memmove+0x12>
 800573c:	4601      	mov	r1, r0
 800573e:	4402      	add	r2, r0
 8005740:	428a      	cmp	r2, r1
 8005742:	d100      	bne.n	8005746 <memmove+0x2a>
 8005744:	bd10      	pop	{r4, pc}
 8005746:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800574a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800574e:	e7f7      	b.n	8005740 <memmove+0x24>

08005750 <_sbrk_r>:
 8005750:	b538      	push	{r3, r4, r5, lr}
 8005752:	2300      	movs	r3, #0
 8005754:	4d05      	ldr	r5, [pc, #20]	@ (800576c <_sbrk_r+0x1c>)
 8005756:	4604      	mov	r4, r0
 8005758:	4608      	mov	r0, r1
 800575a:	602b      	str	r3, [r5, #0]
 800575c:	f7fc faf4 	bl	8001d48 <_sbrk>
 8005760:	1c43      	adds	r3, r0, #1
 8005762:	d102      	bne.n	800576a <_sbrk_r+0x1a>
 8005764:	682b      	ldr	r3, [r5, #0]
 8005766:	b103      	cbz	r3, 800576a <_sbrk_r+0x1a>
 8005768:	6023      	str	r3, [r4, #0]
 800576a:	bd38      	pop	{r3, r4, r5, pc}
 800576c:	200013f8 	.word	0x200013f8

08005770 <memchr>:
 8005770:	4603      	mov	r3, r0
 8005772:	b510      	push	{r4, lr}
 8005774:	b2c9      	uxtb	r1, r1
 8005776:	4402      	add	r2, r0
 8005778:	4293      	cmp	r3, r2
 800577a:	4618      	mov	r0, r3
 800577c:	d101      	bne.n	8005782 <memchr+0x12>
 800577e:	2000      	movs	r0, #0
 8005780:	e003      	b.n	800578a <memchr+0x1a>
 8005782:	7804      	ldrb	r4, [r0, #0]
 8005784:	3301      	adds	r3, #1
 8005786:	428c      	cmp	r4, r1
 8005788:	d1f6      	bne.n	8005778 <memchr+0x8>
 800578a:	bd10      	pop	{r4, pc}

0800578c <_realloc_r>:
 800578c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005790:	4607      	mov	r7, r0
 8005792:	4614      	mov	r4, r2
 8005794:	460d      	mov	r5, r1
 8005796:	b921      	cbnz	r1, 80057a2 <_realloc_r+0x16>
 8005798:	4611      	mov	r1, r2
 800579a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800579e:	f7ff bc49 	b.w	8005034 <_malloc_r>
 80057a2:	b92a      	cbnz	r2, 80057b0 <_realloc_r+0x24>
 80057a4:	f7ff fbdc 	bl	8004f60 <_free_r>
 80057a8:	4625      	mov	r5, r4
 80057aa:	4628      	mov	r0, r5
 80057ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057b0:	f000 f81a 	bl	80057e8 <_malloc_usable_size_r>
 80057b4:	4284      	cmp	r4, r0
 80057b6:	4606      	mov	r6, r0
 80057b8:	d802      	bhi.n	80057c0 <_realloc_r+0x34>
 80057ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80057be:	d8f4      	bhi.n	80057aa <_realloc_r+0x1e>
 80057c0:	4621      	mov	r1, r4
 80057c2:	4638      	mov	r0, r7
 80057c4:	f7ff fc36 	bl	8005034 <_malloc_r>
 80057c8:	4680      	mov	r8, r0
 80057ca:	b908      	cbnz	r0, 80057d0 <_realloc_r+0x44>
 80057cc:	4645      	mov	r5, r8
 80057ce:	e7ec      	b.n	80057aa <_realloc_r+0x1e>
 80057d0:	42b4      	cmp	r4, r6
 80057d2:	4622      	mov	r2, r4
 80057d4:	4629      	mov	r1, r5
 80057d6:	bf28      	it	cs
 80057d8:	4632      	movcs	r2, r6
 80057da:	f7ff fbb3 	bl	8004f44 <memcpy>
 80057de:	4629      	mov	r1, r5
 80057e0:	4638      	mov	r0, r7
 80057e2:	f7ff fbbd 	bl	8004f60 <_free_r>
 80057e6:	e7f1      	b.n	80057cc <_realloc_r+0x40>

080057e8 <_malloc_usable_size_r>:
 80057e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057ec:	1f18      	subs	r0, r3, #4
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	bfbc      	itt	lt
 80057f2:	580b      	ldrlt	r3, [r1, r0]
 80057f4:	18c0      	addlt	r0, r0, r3
 80057f6:	4770      	bx	lr

080057f8 <_init>:
 80057f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057fa:	bf00      	nop
 80057fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057fe:	bc08      	pop	{r3}
 8005800:	469e      	mov	lr, r3
 8005802:	4770      	bx	lr

08005804 <_fini>:
 8005804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005806:	bf00      	nop
 8005808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800580a:	bc08      	pop	{r3}
 800580c:	469e      	mov	lr, r3
 800580e:	4770      	bx	lr
