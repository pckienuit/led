
led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002de4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002ef0  08002ef0  00003ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f14  08002f14  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002f14  08002f14  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002f14  08002f14  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f14  08002f14  00003f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002f18  08002f18  00003f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002f1c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e34  2000000c  08002f28  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e40  08002f28  00004e40  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000084f4  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001842  00000000  00000000  0000c529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f0  00000000  00000000  0000dd70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007b0  00000000  00000000  0000e760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017280  00000000  00000000  0000ef10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000abea  00000000  00000000  00026190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087f85  00000000  00000000  00030d7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b8cff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028f8  00000000  00000000  000b8d44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000bb63c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ed8 	.word	0x08002ed8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002ed8 	.word	0x08002ed8

0800014c <HAL_TIM_PWM_PulseFinishedCallback>:
uint8_t LED_Data[MAX_LED][4];
uint8_t LED_Mod[MAX_LED][4];

int datasentflag = 0;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8000154:	2100      	movs	r1, #0
 8000156:	4805      	ldr	r0, [pc, #20]	@ (800016c <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000158:	f002 f800 	bl	800215c <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;
 800015c:	4b04      	ldr	r3, [pc, #16]	@ (8000170 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 800015e:	2201      	movs	r2, #1
 8000160:	601a      	str	r2, [r3, #0]
}
 8000162:	bf00      	nop
 8000164:	3708      	adds	r7, #8
 8000166:	46bd      	mov	sp, r7
 8000168:	bd80      	pop	{r7, pc}
 800016a:	bf00      	nop
 800016c:	20000028 	.word	0x20000028
 8000170:	20000294 	.word	0x20000294

08000174 <Set_LED>:

void Set_LED (int LEDnum, int Red, int Green, int Blue) {
 8000174:	b480      	push	{r7}
 8000176:	b085      	sub	sp, #20
 8000178:	af00      	add	r7, sp, #0
 800017a:	60f8      	str	r0, [r7, #12]
 800017c:	60b9      	str	r1, [r7, #8]
 800017e:	607a      	str	r2, [r7, #4]
 8000180:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8000182:	68fb      	ldr	r3, [r7, #12]
 8000184:	b2d9      	uxtb	r1, r3
 8000186:	4a10      	ldr	r2, [pc, #64]	@ (80001c8 <Set_LED+0x54>)
 8000188:	68fb      	ldr	r3, [r7, #12]
 800018a:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	b2d9      	uxtb	r1, r3
 8000192:	4a0d      	ldr	r2, [pc, #52]	@ (80001c8 <Set_LED+0x54>)
 8000194:	68fb      	ldr	r3, [r7, #12]
 8000196:	009b      	lsls	r3, r3, #2
 8000198:	4413      	add	r3, r2
 800019a:	460a      	mov	r2, r1
 800019c:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 800019e:	68bb      	ldr	r3, [r7, #8]
 80001a0:	b2d9      	uxtb	r1, r3
 80001a2:	4a09      	ldr	r2, [pc, #36]	@ (80001c8 <Set_LED+0x54>)
 80001a4:	68fb      	ldr	r3, [r7, #12]
 80001a6:	009b      	lsls	r3, r3, #2
 80001a8:	4413      	add	r3, r2
 80001aa:	460a      	mov	r2, r1
 80001ac:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 80001ae:	683b      	ldr	r3, [r7, #0]
 80001b0:	b2d9      	uxtb	r1, r3
 80001b2:	4a05      	ldr	r2, [pc, #20]	@ (80001c8 <Set_LED+0x54>)
 80001b4:	68fb      	ldr	r3, [r7, #12]
 80001b6:	009b      	lsls	r3, r3, #2
 80001b8:	4413      	add	r3, r2
 80001ba:	460a      	mov	r2, r1
 80001bc:	70da      	strb	r2, [r3, #3]
}
 80001be:	bf00      	nop
 80001c0:	3714      	adds	r7, #20
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bc80      	pop	{r7}
 80001c6:	4770      	bx	lr
 80001c8:	200000b4 	.word	0x200000b4

080001cc <Set_Brightness>:
    }
}

#define PI 3.14159265

void Set_Brightness (int brightness) {
 80001cc:	b480      	push	{r7}
 80001ce:	b085      	sub	sp, #20
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if (brightness > 100) brightness = 100;
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	2b64      	cmp	r3, #100	@ 0x64
 80001d8:	dd01      	ble.n	80001de <Set_Brightness+0x12>
 80001da:	2364      	movs	r3, #100	@ 0x64
 80001dc:	607b      	str	r3, [r7, #4]
	if (brightness < 0) brightness = 0;
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	da01      	bge.n	80001e8 <Set_Brightness+0x1c>
 80001e4:	2300      	movs	r3, #0
 80001e6:	607b      	str	r3, [r7, #4]
	
	for (int i=0; i < MAX_LED; i++) {
 80001e8:	2300      	movs	r3, #0
 80001ea:	60fb      	str	r3, [r7, #12]
 80001ec:	e02d      	b.n	800024a <Set_Brightness+0x7e>
		LED_Mod[i][0] = LED_Data[i][0];
 80001ee:	4a1b      	ldr	r2, [pc, #108]	@ (800025c <Set_Brightness+0x90>)
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 80001f6:	4a1a      	ldr	r2, [pc, #104]	@ (8000260 <Set_Brightness+0x94>)
 80001f8:	68fb      	ldr	r3, [r7, #12]
 80001fa:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j = 1; j < 4; ++j) {
 80001fe:	2301      	movs	r3, #1
 8000200:	60bb      	str	r3, [r7, #8]
 8000202:	e01c      	b.n	800023e <Set_Brightness+0x72>
			// Simple percentage calculation: brightness from 0-100%
			LED_Mod[i][j] = (LED_Data[i][j] * brightness) / 100;
 8000204:	4a15      	ldr	r2, [pc, #84]	@ (800025c <Set_Brightness+0x90>)
 8000206:	68fb      	ldr	r3, [r7, #12]
 8000208:	009b      	lsls	r3, r3, #2
 800020a:	441a      	add	r2, r3
 800020c:	68bb      	ldr	r3, [r7, #8]
 800020e:	4413      	add	r3, r2
 8000210:	781b      	ldrb	r3, [r3, #0]
 8000212:	461a      	mov	r2, r3
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	fb02 f303 	mul.w	r3, r2, r3
 800021a:	4a12      	ldr	r2, [pc, #72]	@ (8000264 <Set_Brightness+0x98>)
 800021c:	fb82 1203 	smull	r1, r2, r2, r3
 8000220:	1152      	asrs	r2, r2, #5
 8000222:	17db      	asrs	r3, r3, #31
 8000224:	1ad3      	subs	r3, r2, r3
 8000226:	b2d9      	uxtb	r1, r3
 8000228:	4a0d      	ldr	r2, [pc, #52]	@ (8000260 <Set_Brightness+0x94>)
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	009b      	lsls	r3, r3, #2
 800022e:	441a      	add	r2, r3
 8000230:	68bb      	ldr	r3, [r7, #8]
 8000232:	4413      	add	r3, r2
 8000234:	460a      	mov	r2, r1
 8000236:	701a      	strb	r2, [r3, #0]
		for (int j = 1; j < 4; ++j) {
 8000238:	68bb      	ldr	r3, [r7, #8]
 800023a:	3301      	adds	r3, #1
 800023c:	60bb      	str	r3, [r7, #8]
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	2b03      	cmp	r3, #3
 8000242:	dddf      	ble.n	8000204 <Set_Brightness+0x38>
	for (int i=0; i < MAX_LED; i++) {
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	3301      	adds	r3, #1
 8000248:	60fb      	str	r3, [r7, #12]
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	2b3b      	cmp	r3, #59	@ 0x3b
 800024e:	ddce      	ble.n	80001ee <Set_Brightness+0x22>
		}
	}

#endif
}
 8000250:	bf00      	nop
 8000252:	bf00      	nop
 8000254:	3714      	adds	r7, #20
 8000256:	46bd      	mov	sp, r7
 8000258:	bc80      	pop	{r7}
 800025a:	4770      	bx	lr
 800025c:	200000b4 	.word	0x200000b4
 8000260:	200001a4 	.word	0x200001a4
 8000264:	51eb851f 	.word	0x51eb851f

08000268 <WS2812_Send>:
//
//	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, 24);
//}


void WS2812_Send (void) {
 8000268:	b580      	push	{r7, lr}
 800026a:	b086      	sub	sp, #24
 800026c:	af00      	add	r7, sp, #0
	uint32_t indx = 0;
 800026e:	2300      	movs	r3, #0
 8000270:	617b      	str	r3, [r7, #20]
	uint32_t color;

	for (int i = 0; i < MAX_LED; ++i) {
 8000272:	2300      	movs	r3, #0
 8000274:	613b      	str	r3, [r7, #16]
 8000276:	e036      	b.n	80002e6 <WS2812_Send+0x7e>
		color = ((LED_Mod[i][1] << 16) | (LED_Mod[i][2] << 8) | (LED_Mod[i][3]));
 8000278:	4a39      	ldr	r2, [pc, #228]	@ (8000360 <WS2812_Send+0xf8>)
 800027a:	693b      	ldr	r3, [r7, #16]
 800027c:	009b      	lsls	r3, r3, #2
 800027e:	4413      	add	r3, r2
 8000280:	785b      	ldrb	r3, [r3, #1]
 8000282:	041a      	lsls	r2, r3, #16
 8000284:	4936      	ldr	r1, [pc, #216]	@ (8000360 <WS2812_Send+0xf8>)
 8000286:	693b      	ldr	r3, [r7, #16]
 8000288:	009b      	lsls	r3, r3, #2
 800028a:	440b      	add	r3, r1
 800028c:	789b      	ldrb	r3, [r3, #2]
 800028e:	021b      	lsls	r3, r3, #8
 8000290:	431a      	orrs	r2, r3
 8000292:	4933      	ldr	r1, [pc, #204]	@ (8000360 <WS2812_Send+0xf8>)
 8000294:	693b      	ldr	r3, [r7, #16]
 8000296:	009b      	lsls	r3, r3, #2
 8000298:	440b      	add	r3, r1
 800029a:	78db      	ldrb	r3, [r3, #3]
 800029c:	4313      	orrs	r3, r2
 800029e:	603b      	str	r3, [r7, #0]

		for (int j = 23; j >= 0; j--) {
 80002a0:	2317      	movs	r3, #23
 80002a2:	60fb      	str	r3, [r7, #12]
 80002a4:	e019      	b.n	80002da <WS2812_Send+0x72>
			if (color&(1<<j)) {
 80002a6:	2201      	movs	r2, #1
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	fa02 f303 	lsl.w	r3, r2, r3
 80002ae:	461a      	mov	r2, r3
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	4013      	ands	r3, r2
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d005      	beq.n	80002c4 <WS2812_Send+0x5c>
				pwmData[indx] = 60;
 80002b8:	4a2a      	ldr	r2, [pc, #168]	@ (8000364 <WS2812_Send+0xfc>)
 80002ba:	697b      	ldr	r3, [r7, #20]
 80002bc:	213c      	movs	r1, #60	@ 0x3c
 80002be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80002c2:	e004      	b.n	80002ce <WS2812_Send+0x66>
			} else {
				pwmData[indx] = 30;
 80002c4:	4a27      	ldr	r2, [pc, #156]	@ (8000364 <WS2812_Send+0xfc>)
 80002c6:	697b      	ldr	r3, [r7, #20]
 80002c8:	211e      	movs	r1, #30
 80002ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}

			indx++;
 80002ce:	697b      	ldr	r3, [r7, #20]
 80002d0:	3301      	adds	r3, #1
 80002d2:	617b      	str	r3, [r7, #20]
		for (int j = 23; j >= 0; j--) {
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	3b01      	subs	r3, #1
 80002d8:	60fb      	str	r3, [r7, #12]
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	dae2      	bge.n	80002a6 <WS2812_Send+0x3e>
	for (int i = 0; i < MAX_LED; ++i) {
 80002e0:	693b      	ldr	r3, [r7, #16]
 80002e2:	3301      	adds	r3, #1
 80002e4:	613b      	str	r3, [r7, #16]
 80002e6:	693b      	ldr	r3, [r7, #16]
 80002e8:	2b3b      	cmp	r3, #59	@ 0x3b
 80002ea:	ddc5      	ble.n	8000278 <WS2812_Send+0x10>
		}
	}

	for (int i = 0; i < 50; ++i) {
 80002ec:	2300      	movs	r3, #0
 80002ee:	60bb      	str	r3, [r7, #8]
 80002f0:	e00a      	b.n	8000308 <WS2812_Send+0xa0>
		pwmData[indx] = 0;
 80002f2:	4a1c      	ldr	r2, [pc, #112]	@ (8000364 <WS2812_Send+0xfc>)
 80002f4:	697b      	ldr	r3, [r7, #20]
 80002f6:	2100      	movs	r1, #0
 80002f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 80002fc:	697b      	ldr	r3, [r7, #20]
 80002fe:	3301      	adds	r3, #1
 8000300:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 50; ++i) {
 8000302:	68bb      	ldr	r3, [r7, #8]
 8000304:	3301      	adds	r3, #1
 8000306:	60bb      	str	r3, [r7, #8]
 8000308:	68bb      	ldr	r3, [r7, #8]
 800030a:	2b31      	cmp	r3, #49	@ 0x31
 800030c:	ddf1      	ble.n	80002f2 <WS2812_Send+0x8a>
	}

	// Reset flag before starting DMA
	datasentflag = 0;
 800030e:	4b16      	ldr	r3, [pc, #88]	@ (8000368 <WS2812_Send+0x100>)
 8000310:	2200      	movs	r2, #0
 8000312:	601a      	str	r2, [r3, #0]
	
	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 8000314:	697b      	ldr	r3, [r7, #20]
 8000316:	b29b      	uxth	r3, r3
 8000318:	4a12      	ldr	r2, [pc, #72]	@ (8000364 <WS2812_Send+0xfc>)
 800031a:	2100      	movs	r1, #0
 800031c:	4813      	ldr	r0, [pc, #76]	@ (800036c <WS2812_Send+0x104>)
 800031e:	f001 fd7b 	bl	8001e18 <HAL_TIM_PWM_Start_DMA>
	
	// Add timeout to prevent infinite loop
	uint32_t timeout = 1000000;  // Adjust timeout value
 8000322:	4b13      	ldr	r3, [pc, #76]	@ (8000370 <WS2812_Send+0x108>)
 8000324:	607b      	str	r3, [r7, #4]
	while(!datasentflag && timeout > 0) {
 8000326:	e002      	b.n	800032e <WS2812_Send+0xc6>
		timeout--;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	3b01      	subs	r3, #1
 800032c:	607b      	str	r3, [r7, #4]
	while(!datasentflag && timeout > 0) {
 800032e:	4b0e      	ldr	r3, [pc, #56]	@ (8000368 <WS2812_Send+0x100>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	2b00      	cmp	r3, #0
 8000334:	d102      	bne.n	800033c <WS2812_Send+0xd4>
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d1f5      	bne.n	8000328 <WS2812_Send+0xc0>
	}
	
	// Force stop if timeout occurred
	if (timeout == 0) {
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	2b00      	cmp	r3, #0
 8000340:	d106      	bne.n	8000350 <WS2812_Send+0xe8>
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8000342:	2100      	movs	r1, #0
 8000344:	4809      	ldr	r0, [pc, #36]	@ (800036c <WS2812_Send+0x104>)
 8000346:	f001 ff09 	bl	800215c <HAL_TIM_PWM_Stop_DMA>
		datasentflag = 1;
 800034a:	4b07      	ldr	r3, [pc, #28]	@ (8000368 <WS2812_Send+0x100>)
 800034c:	2201      	movs	r2, #1
 800034e:	601a      	str	r2, [r3, #0]
	}
	
	datasentflag = 0;
 8000350:	4b05      	ldr	r3, [pc, #20]	@ (8000368 <WS2812_Send+0x100>)
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
}
 8000356:	bf00      	nop
 8000358:	3718      	adds	r7, #24
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	200001a4 	.word	0x200001a4
 8000364:	20000298 	.word	0x20000298
 8000368:	20000294 	.word	0x20000294
 800036c:	20000028 	.word	0x20000028
 8000370:	000f4240 	.word	0x000f4240

08000374 <Rainbow_Effect>:
		WS2812_Send();
		HAL_Delay(LED_DELAY/speed);
	}
}

void Rainbow_Effect (int speed) {
 8000374:	b580      	push	{r7, lr}
 8000376:	b088      	sub	sp, #32
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
	//2 <= H' < 3: (0, C, X)
	//3 <= H' < 4: (0, X, C)
	//4 <= H' < 5: (X, 0, C)
	//5 <= H' < 6: (C, 0, X)

	for (int hue = 0; hue < 360; hue += 2) {
 800037c:	2300      	movs	r3, #0
 800037e:	61fb      	str	r3, [r7, #28]
 8000380:	e0a9      	b.n	80004d6 <Rainbow_Effect+0x162>
		int red, green, blue;

        int sector = hue / 60;
 8000382:	69fb      	ldr	r3, [r7, #28]
 8000384:	4a59      	ldr	r2, [pc, #356]	@ (80004ec <Rainbow_Effect+0x178>)
 8000386:	fb82 1203 	smull	r1, r2, r2, r3
 800038a:	441a      	add	r2, r3
 800038c:	1152      	asrs	r2, r2, #5
 800038e:	17db      	asrs	r3, r3, #31
 8000390:	1ad3      	subs	r3, r2, r3
 8000392:	60fb      	str	r3, [r7, #12]
        int remainder = hue % 60;
 8000394:	69fa      	ldr	r2, [r7, #28]
 8000396:	4b55      	ldr	r3, [pc, #340]	@ (80004ec <Rainbow_Effect+0x178>)
 8000398:	fb83 1302 	smull	r1, r3, r3, r2
 800039c:	4413      	add	r3, r2
 800039e:	1159      	asrs	r1, r3, #5
 80003a0:	17d3      	asrs	r3, r2, #31
 80003a2:	1ac9      	subs	r1, r1, r3
 80003a4:	460b      	mov	r3, r1
 80003a6:	011b      	lsls	r3, r3, #4
 80003a8:	1a5b      	subs	r3, r3, r1
 80003aa:	009b      	lsls	r3, r3, #2
 80003ac:	1ad3      	subs	r3, r2, r3
 80003ae:	60bb      	str	r3, [r7, #8]
        
        switch(sector) {
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	2b05      	cmp	r3, #5
 80003b4:	d877      	bhi.n	80004a6 <Rainbow_Effect+0x132>
 80003b6:	a201      	add	r2, pc, #4	@ (adr r2, 80003bc <Rainbow_Effect+0x48>)
 80003b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003bc:	080003d5 	.word	0x080003d5
 80003c0:	080003f7 	.word	0x080003f7
 80003c4:	0800041b 	.word	0x0800041b
 80003c8:	0800043d 	.word	0x0800043d
 80003cc:	08000461 	.word	0x08000461
 80003d0:	08000483 	.word	0x08000483
            case 0: red = 255; green = (remainder * 255) / 60; blue = 0; break;
 80003d4:	23ff      	movs	r3, #255	@ 0xff
 80003d6:	61bb      	str	r3, [r7, #24]
 80003d8:	68ba      	ldr	r2, [r7, #8]
 80003da:	4613      	mov	r3, r2
 80003dc:	021b      	lsls	r3, r3, #8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	4a42      	ldr	r2, [pc, #264]	@ (80004ec <Rainbow_Effect+0x178>)
 80003e2:	fb82 1203 	smull	r1, r2, r2, r3
 80003e6:	441a      	add	r2, r3
 80003e8:	1152      	asrs	r2, r2, #5
 80003ea:	17db      	asrs	r3, r3, #31
 80003ec:	1ad3      	subs	r3, r2, r3
 80003ee:	617b      	str	r3, [r7, #20]
 80003f0:	2300      	movs	r3, #0
 80003f2:	613b      	str	r3, [r7, #16]
 80003f4:	e05e      	b.n	80004b4 <Rainbow_Effect+0x140>
            case 1: red = 255 - ((remainder * 255) / 60); green = 255; blue = 0; break;
 80003f6:	68ba      	ldr	r2, [r7, #8]
 80003f8:	4613      	mov	r3, r2
 80003fa:	021b      	lsls	r3, r3, #8
 80003fc:	1a9b      	subs	r3, r3, r2
 80003fe:	4a3b      	ldr	r2, [pc, #236]	@ (80004ec <Rainbow_Effect+0x178>)
 8000400:	fb82 1203 	smull	r1, r2, r2, r3
 8000404:	441a      	add	r2, r3
 8000406:	1152      	asrs	r2, r2, #5
 8000408:	17db      	asrs	r3, r3, #31
 800040a:	1a9b      	subs	r3, r3, r2
 800040c:	33ff      	adds	r3, #255	@ 0xff
 800040e:	61bb      	str	r3, [r7, #24]
 8000410:	23ff      	movs	r3, #255	@ 0xff
 8000412:	617b      	str	r3, [r7, #20]
 8000414:	2300      	movs	r3, #0
 8000416:	613b      	str	r3, [r7, #16]
 8000418:	e04c      	b.n	80004b4 <Rainbow_Effect+0x140>
            case 2: red = 0; green = 255; blue = (remainder * 255) / 60; break;
 800041a:	2300      	movs	r3, #0
 800041c:	61bb      	str	r3, [r7, #24]
 800041e:	23ff      	movs	r3, #255	@ 0xff
 8000420:	617b      	str	r3, [r7, #20]
 8000422:	68ba      	ldr	r2, [r7, #8]
 8000424:	4613      	mov	r3, r2
 8000426:	021b      	lsls	r3, r3, #8
 8000428:	1a9b      	subs	r3, r3, r2
 800042a:	4a30      	ldr	r2, [pc, #192]	@ (80004ec <Rainbow_Effect+0x178>)
 800042c:	fb82 1203 	smull	r1, r2, r2, r3
 8000430:	441a      	add	r2, r3
 8000432:	1152      	asrs	r2, r2, #5
 8000434:	17db      	asrs	r3, r3, #31
 8000436:	1ad3      	subs	r3, r2, r3
 8000438:	613b      	str	r3, [r7, #16]
 800043a:	e03b      	b.n	80004b4 <Rainbow_Effect+0x140>
            case 3: red = 0; green = 255 - ((remainder * 255) / 60); blue = 255; break;
 800043c:	2300      	movs	r3, #0
 800043e:	61bb      	str	r3, [r7, #24]
 8000440:	68ba      	ldr	r2, [r7, #8]
 8000442:	4613      	mov	r3, r2
 8000444:	021b      	lsls	r3, r3, #8
 8000446:	1a9b      	subs	r3, r3, r2
 8000448:	4a28      	ldr	r2, [pc, #160]	@ (80004ec <Rainbow_Effect+0x178>)
 800044a:	fb82 1203 	smull	r1, r2, r2, r3
 800044e:	441a      	add	r2, r3
 8000450:	1152      	asrs	r2, r2, #5
 8000452:	17db      	asrs	r3, r3, #31
 8000454:	1a9b      	subs	r3, r3, r2
 8000456:	33ff      	adds	r3, #255	@ 0xff
 8000458:	617b      	str	r3, [r7, #20]
 800045a:	23ff      	movs	r3, #255	@ 0xff
 800045c:	613b      	str	r3, [r7, #16]
 800045e:	e029      	b.n	80004b4 <Rainbow_Effect+0x140>
            case 4: red = (remainder * 255) / 60; green = 0; blue = 255; break;
 8000460:	68ba      	ldr	r2, [r7, #8]
 8000462:	4613      	mov	r3, r2
 8000464:	021b      	lsls	r3, r3, #8
 8000466:	1a9b      	subs	r3, r3, r2
 8000468:	4a20      	ldr	r2, [pc, #128]	@ (80004ec <Rainbow_Effect+0x178>)
 800046a:	fb82 1203 	smull	r1, r2, r2, r3
 800046e:	441a      	add	r2, r3
 8000470:	1152      	asrs	r2, r2, #5
 8000472:	17db      	asrs	r3, r3, #31
 8000474:	1ad3      	subs	r3, r2, r3
 8000476:	61bb      	str	r3, [r7, #24]
 8000478:	2300      	movs	r3, #0
 800047a:	617b      	str	r3, [r7, #20]
 800047c:	23ff      	movs	r3, #255	@ 0xff
 800047e:	613b      	str	r3, [r7, #16]
 8000480:	e018      	b.n	80004b4 <Rainbow_Effect+0x140>
            case 5: red = 255; green = 0; blue = 255 - ((remainder * 255) / 60); break;
 8000482:	23ff      	movs	r3, #255	@ 0xff
 8000484:	61bb      	str	r3, [r7, #24]
 8000486:	2300      	movs	r3, #0
 8000488:	617b      	str	r3, [r7, #20]
 800048a:	68ba      	ldr	r2, [r7, #8]
 800048c:	4613      	mov	r3, r2
 800048e:	021b      	lsls	r3, r3, #8
 8000490:	1a9b      	subs	r3, r3, r2
 8000492:	4a16      	ldr	r2, [pc, #88]	@ (80004ec <Rainbow_Effect+0x178>)
 8000494:	fb82 1203 	smull	r1, r2, r2, r3
 8000498:	441a      	add	r2, r3
 800049a:	1152      	asrs	r2, r2, #5
 800049c:	17db      	asrs	r3, r3, #31
 800049e:	1a9b      	subs	r3, r3, r2
 80004a0:	33ff      	adds	r3, #255	@ 0xff
 80004a2:	613b      	str	r3, [r7, #16]
 80004a4:	e006      	b.n	80004b4 <Rainbow_Effect+0x140>
            default: red = 255; green = 0; blue = 0; break;
 80004a6:	23ff      	movs	r3, #255	@ 0xff
 80004a8:	61bb      	str	r3, [r7, #24]
 80004aa:	2300      	movs	r3, #0
 80004ac:	617b      	str	r3, [r7, #20]
 80004ae:	2300      	movs	r3, #0
 80004b0:	613b      	str	r3, [r7, #16]
 80004b2:	bf00      	nop
        }

		//Set_All_LEDs_Same_Color(red, green, blue);

		Set_LED(1, red, green, blue);
 80004b4:	693b      	ldr	r3, [r7, #16]
 80004b6:	697a      	ldr	r2, [r7, #20]
 80004b8:	69b9      	ldr	r1, [r7, #24]
 80004ba:	2001      	movs	r0, #1
 80004bc:	f7ff fe5a 	bl	8000174 <Set_LED>
		Set_Brightness(100);
 80004c0:	2064      	movs	r0, #100	@ 0x64
 80004c2:	f7ff fe83 	bl	80001cc <Set_Brightness>
		WS2812_Send();
 80004c6:	f7ff fecf 	bl	8000268 <WS2812_Send>
		HAL_Delay(10);
 80004ca:	200a      	movs	r0, #10
 80004cc:	f000 faea 	bl	8000aa4 <HAL_Delay>
	for (int hue = 0; hue < 360; hue += 2) {
 80004d0:	69fb      	ldr	r3, [r7, #28]
 80004d2:	3302      	adds	r3, #2
 80004d4:	61fb      	str	r3, [r7, #28]
 80004d6:	69fb      	ldr	r3, [r7, #28]
 80004d8:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 80004dc:	f6ff af51 	blt.w	8000382 <Rainbow_Effect+0xe>
	}
}
 80004e0:	bf00      	nop
 80004e2:	bf00      	nop
 80004e4:	3720      	adds	r7, #32
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	88888889 	.word	0x88888889

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f4:	f000 fa74 	bl	80009e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f8:	f000 f80a 	bl	8000510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f000 f90c 	bl	8000718 <MX_GPIO_Init>
  MX_DMA_Init();
 8000500:	f000 f8ec 	bl	80006dc <MX_DMA_Init>
  MX_TIM1_Init();
 8000504:	f000 f84a 	bl	800059c <MX_TIM1_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //Fade_Effect(255, 0, 0, 10);
	  Rainbow_Effect(10);
 8000508:	200a      	movs	r0, #10
 800050a:	f7ff ff33 	bl	8000374 <Rainbow_Effect>
 800050e:	e7fb      	b.n	8000508 <main+0x18>

08000510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b090      	sub	sp, #64	@ 0x40
 8000514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000516:	f107 0318 	add.w	r3, r7, #24
 800051a:	2228      	movs	r2, #40	@ 0x28
 800051c:	2100      	movs	r1, #0
 800051e:	4618      	mov	r0, r3
 8000520:	f002 fcad 	bl	8002e7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000524:	1d3b      	adds	r3, r7, #4
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
 800052c:	609a      	str	r2, [r3, #8]
 800052e:	60da      	str	r2, [r3, #12]
 8000530:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000532:	2301      	movs	r3, #1
 8000534:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000536:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800053a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800053c:	2300      	movs	r3, #0
 800053e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000540:	2301      	movs	r3, #1
 8000542:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000544:	2302      	movs	r3, #2
 8000546:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000548:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800054c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800054e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000552:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000554:	f107 0318 	add.w	r3, r7, #24
 8000558:	4618      	mov	r0, r3
 800055a:	f000 ffd7 	bl	800150c <HAL_RCC_OscConfig>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000564:	f000 f924 	bl	80007b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000568:	230f      	movs	r3, #15
 800056a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800056c:	2302      	movs	r3, #2
 800056e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000570:	2300      	movs	r3, #0
 8000572:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000574:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000578:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800057a:	2300      	movs	r3, #0
 800057c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800057e:	1d3b      	adds	r3, r7, #4
 8000580:	2102      	movs	r1, #2
 8000582:	4618      	mov	r0, r3
 8000584:	f001 fa44 	bl	8001a10 <HAL_RCC_ClockConfig>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800058e:	f000 f90f 	bl	80007b0 <Error_Handler>
  }
}
 8000592:	bf00      	nop
 8000594:	3740      	adds	r7, #64	@ 0x40
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
	...

0800059c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b096      	sub	sp, #88	@ 0x58
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005a2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	605a      	str	r2, [r3, #4]
 80005ac:	609a      	str	r2, [r3, #8]
 80005ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005b0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]
 80005ca:	615a      	str	r2, [r3, #20]
 80005cc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	2220      	movs	r2, #32
 80005d2:	2100      	movs	r1, #0
 80005d4:	4618      	mov	r0, r3
 80005d6:	f002 fc52 	bl	8002e7e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005da:	4b3e      	ldr	r3, [pc, #248]	@ (80006d4 <MX_TIM1_Init+0x138>)
 80005dc:	4a3e      	ldr	r2, [pc, #248]	@ (80006d8 <MX_TIM1_Init+0x13c>)
 80005de:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80005e0:	4b3c      	ldr	r3, [pc, #240]	@ (80006d4 <MX_TIM1_Init+0x138>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005e6:	4b3b      	ldr	r3, [pc, #236]	@ (80006d4 <MX_TIM1_Init+0x138>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 80005ec:	4b39      	ldr	r3, [pc, #228]	@ (80006d4 <MX_TIM1_Init+0x138>)
 80005ee:	2259      	movs	r2, #89	@ 0x59
 80005f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005f2:	4b38      	ldr	r3, [pc, #224]	@ (80006d4 <MX_TIM1_Init+0x138>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005f8:	4b36      	ldr	r3, [pc, #216]	@ (80006d4 <MX_TIM1_Init+0x138>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005fe:	4b35      	ldr	r3, [pc, #212]	@ (80006d4 <MX_TIM1_Init+0x138>)
 8000600:	2200      	movs	r2, #0
 8000602:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000604:	4833      	ldr	r0, [pc, #204]	@ (80006d4 <MX_TIM1_Init+0x138>)
 8000606:	f001 fb5f 	bl	8001cc8 <HAL_TIM_Base_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000610:	f000 f8ce 	bl	80007b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000614:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000618:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800061a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800061e:	4619      	mov	r1, r3
 8000620:	482c      	ldr	r0, [pc, #176]	@ (80006d4 <MX_TIM1_Init+0x138>)
 8000622:	f001 ff23 	bl	800246c <HAL_TIM_ConfigClockSource>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800062c:	f000 f8c0 	bl	80007b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000630:	4828      	ldr	r0, [pc, #160]	@ (80006d4 <MX_TIM1_Init+0x138>)
 8000632:	f001 fb98 	bl	8001d66 <HAL_TIM_PWM_Init>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800063c:	f000 f8b8 	bl	80007b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000640:	2300      	movs	r3, #0
 8000642:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000644:	2300      	movs	r3, #0
 8000646:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000648:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800064c:	4619      	mov	r1, r3
 800064e:	4821      	ldr	r0, [pc, #132]	@ (80006d4 <MX_TIM1_Init+0x138>)
 8000650:	f002 fb66 	bl	8002d20 <HAL_TIMEx_MasterConfigSynchronization>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800065a:	f000 f8a9 	bl	80007b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800065e:	2360      	movs	r3, #96	@ 0x60
 8000660:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000666:	2300      	movs	r3, #0
 8000668:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800066a:	2300      	movs	r3, #0
 800066c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800066e:	2300      	movs	r3, #0
 8000670:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000672:	2300      	movs	r3, #0
 8000674:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000676:	2300      	movs	r3, #0
 8000678:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800067a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800067e:	2200      	movs	r2, #0
 8000680:	4619      	mov	r1, r3
 8000682:	4814      	ldr	r0, [pc, #80]	@ (80006d4 <MX_TIM1_Init+0x138>)
 8000684:	f001 fe30 	bl	80022e8 <HAL_TIM_PWM_ConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800068e:	f000 f88f 	bl	80007b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000692:	2300      	movs	r3, #0
 8000694:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000696:	2300      	movs	r3, #0
 8000698:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006a2:	2300      	movs	r3, #0
 80006a4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006aa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	4619      	mov	r1, r3
 80006b4:	4807      	ldr	r0, [pc, #28]	@ (80006d4 <MX_TIM1_Init+0x138>)
 80006b6:	f002 fb91 	bl	8002ddc <HAL_TIMEx_ConfigBreakDeadTime>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80006c0:	f000 f876 	bl	80007b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80006c4:	4803      	ldr	r0, [pc, #12]	@ (80006d4 <MX_TIM1_Init+0x138>)
 80006c6:	f000 f8f5 	bl	80008b4 <HAL_TIM_MspPostInit>

}
 80006ca:	bf00      	nop
 80006cc:	3758      	adds	r7, #88	@ 0x58
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000028 	.word	0x20000028
 80006d8:	40012c00 	.word	0x40012c00

080006dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000714 <MX_DMA_Init+0x38>)
 80006e4:	695b      	ldr	r3, [r3, #20]
 80006e6:	4a0b      	ldr	r2, [pc, #44]	@ (8000714 <MX_DMA_Init+0x38>)
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	6153      	str	r3, [r2, #20]
 80006ee:	4b09      	ldr	r3, [pc, #36]	@ (8000714 <MX_DMA_Init+0x38>)
 80006f0:	695b      	ldr	r3, [r3, #20]
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2100      	movs	r1, #0
 80006fe:	200c      	movs	r0, #12
 8000700:	f000 facb 	bl	8000c9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000704:	200c      	movs	r0, #12
 8000706:	f000 fae4 	bl	8000cd2 <HAL_NVIC_EnableIRQ>

}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40021000 	.word	0x40021000

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b088      	sub	sp, #32
 800071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 0310 	add.w	r3, r7, #16
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072c:	4b1e      	ldr	r3, [pc, #120]	@ (80007a8 <MX_GPIO_Init+0x90>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	4a1d      	ldr	r2, [pc, #116]	@ (80007a8 <MX_GPIO_Init+0x90>)
 8000732:	f043 0310 	orr.w	r3, r3, #16
 8000736:	6193      	str	r3, [r2, #24]
 8000738:	4b1b      	ldr	r3, [pc, #108]	@ (80007a8 <MX_GPIO_Init+0x90>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	f003 0310 	and.w	r3, r3, #16
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000744:	4b18      	ldr	r3, [pc, #96]	@ (80007a8 <MX_GPIO_Init+0x90>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	4a17      	ldr	r2, [pc, #92]	@ (80007a8 <MX_GPIO_Init+0x90>)
 800074a:	f043 0320 	orr.w	r3, r3, #32
 800074e:	6193      	str	r3, [r2, #24]
 8000750:	4b15      	ldr	r3, [pc, #84]	@ (80007a8 <MX_GPIO_Init+0x90>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	f003 0320 	and.w	r3, r3, #32
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075c:	4b12      	ldr	r3, [pc, #72]	@ (80007a8 <MX_GPIO_Init+0x90>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	4a11      	ldr	r2, [pc, #68]	@ (80007a8 <MX_GPIO_Init+0x90>)
 8000762:	f043 0304 	orr.w	r3, r3, #4
 8000766:	6193      	str	r3, [r2, #24]
 8000768:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <MX_GPIO_Init+0x90>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	f003 0304 	and.w	r3, r3, #4
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000774:	2200      	movs	r2, #0
 8000776:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800077a:	480c      	ldr	r0, [pc, #48]	@ (80007ac <MX_GPIO_Init+0x94>)
 800077c:	f000 feae 	bl	80014dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000780:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000784:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000786:	2301      	movs	r3, #1
 8000788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	2302      	movs	r3, #2
 8000790:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000792:	f107 0310 	add.w	r3, r7, #16
 8000796:	4619      	mov	r1, r3
 8000798:	4804      	ldr	r0, [pc, #16]	@ (80007ac <MX_GPIO_Init+0x94>)
 800079a:	f000 fd1b 	bl	80011d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800079e:	bf00      	nop
 80007a0:	3720      	adds	r7, #32
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40021000 	.word	0x40021000
 80007ac:	40011000 	.word	0x40011000

080007b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b4:	b672      	cpsid	i
}
 80007b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b8:	bf00      	nop
 80007ba:	e7fd      	b.n	80007b8 <Error_Handler+0x8>

080007bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	b085      	sub	sp, #20
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007c2:	4b15      	ldr	r3, [pc, #84]	@ (8000818 <HAL_MspInit+0x5c>)
 80007c4:	699b      	ldr	r3, [r3, #24]
 80007c6:	4a14      	ldr	r2, [pc, #80]	@ (8000818 <HAL_MspInit+0x5c>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6193      	str	r3, [r2, #24]
 80007ce:	4b12      	ldr	r3, [pc, #72]	@ (8000818 <HAL_MspInit+0x5c>)
 80007d0:	699b      	ldr	r3, [r3, #24]
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007da:	4b0f      	ldr	r3, [pc, #60]	@ (8000818 <HAL_MspInit+0x5c>)
 80007dc:	69db      	ldr	r3, [r3, #28]
 80007de:	4a0e      	ldr	r2, [pc, #56]	@ (8000818 <HAL_MspInit+0x5c>)
 80007e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007e4:	61d3      	str	r3, [r2, #28]
 80007e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000818 <HAL_MspInit+0x5c>)
 80007e8:	69db      	ldr	r3, [r3, #28]
 80007ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007f2:	4b0a      	ldr	r3, [pc, #40]	@ (800081c <HAL_MspInit+0x60>)
 80007f4:	685b      	ldr	r3, [r3, #4]
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	4a04      	ldr	r2, [pc, #16]	@ (800081c <HAL_MspInit+0x60>)
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800080e:	bf00      	nop
 8000810:	3714      	adds	r7, #20
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr
 8000818:	40021000 	.word	0x40021000
 800081c:	40010000 	.word	0x40010000

08000820 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a1d      	ldr	r2, [pc, #116]	@ (80008a4 <HAL_TIM_Base_MspInit+0x84>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d133      	bne.n	800089a <HAL_TIM_Base_MspInit+0x7a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000832:	4b1d      	ldr	r3, [pc, #116]	@ (80008a8 <HAL_TIM_Base_MspInit+0x88>)
 8000834:	699b      	ldr	r3, [r3, #24]
 8000836:	4a1c      	ldr	r2, [pc, #112]	@ (80008a8 <HAL_TIM_Base_MspInit+0x88>)
 8000838:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800083c:	6193      	str	r3, [r2, #24]
 800083e:	4b1a      	ldr	r3, [pc, #104]	@ (80008a8 <HAL_TIM_Base_MspInit+0x88>)
 8000840:	699b      	ldr	r3, [r3, #24]
 8000842:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 800084a:	4b18      	ldr	r3, [pc, #96]	@ (80008ac <HAL_TIM_Base_MspInit+0x8c>)
 800084c:	4a18      	ldr	r2, [pc, #96]	@ (80008b0 <HAL_TIM_Base_MspInit+0x90>)
 800084e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000850:	4b16      	ldr	r3, [pc, #88]	@ (80008ac <HAL_TIM_Base_MspInit+0x8c>)
 8000852:	2210      	movs	r2, #16
 8000854:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000856:	4b15      	ldr	r3, [pc, #84]	@ (80008ac <HAL_TIM_Base_MspInit+0x8c>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800085c:	4b13      	ldr	r3, [pc, #76]	@ (80008ac <HAL_TIM_Base_MspInit+0x8c>)
 800085e:	2280      	movs	r2, #128	@ 0x80
 8000860:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000862:	4b12      	ldr	r3, [pc, #72]	@ (80008ac <HAL_TIM_Base_MspInit+0x8c>)
 8000864:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000868:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800086a:	4b10      	ldr	r3, [pc, #64]	@ (80008ac <HAL_TIM_Base_MspInit+0x8c>)
 800086c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000870:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8000872:	4b0e      	ldr	r3, [pc, #56]	@ (80008ac <HAL_TIM_Base_MspInit+0x8c>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000878:	4b0c      	ldr	r3, [pc, #48]	@ (80008ac <HAL_TIM_Base_MspInit+0x8c>)
 800087a:	2200      	movs	r2, #0
 800087c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800087e:	480b      	ldr	r0, [pc, #44]	@ (80008ac <HAL_TIM_Base_MspInit+0x8c>)
 8000880:	f000 fa42 	bl	8000d08 <HAL_DMA_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 800088a:	f7ff ff91 	bl	80007b0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4a06      	ldr	r2, [pc, #24]	@ (80008ac <HAL_TIM_Base_MspInit+0x8c>)
 8000892:	625a      	str	r2, [r3, #36]	@ 0x24
 8000894:	4a05      	ldr	r2, [pc, #20]	@ (80008ac <HAL_TIM_Base_MspInit+0x8c>)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800089a:	bf00      	nop
 800089c:	3710      	adds	r7, #16
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40012c00 	.word	0x40012c00
 80008a8:	40021000 	.word	0x40021000
 80008ac:	20000070 	.word	0x20000070
 80008b0:	4002001c 	.word	0x4002001c

080008b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b088      	sub	sp, #32
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	f107 0310 	add.w	r3, r7, #16
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a10      	ldr	r2, [pc, #64]	@ (8000910 <HAL_TIM_MspPostInit+0x5c>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d118      	bne.n	8000906 <HAL_TIM_MspPostInit+0x52>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000914 <HAL_TIM_MspPostInit+0x60>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	4a0e      	ldr	r2, [pc, #56]	@ (8000914 <HAL_TIM_MspPostInit+0x60>)
 80008da:	f043 0304 	orr.w	r3, r3, #4
 80008de:	6193      	str	r3, [r2, #24]
 80008e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000914 <HAL_TIM_MspPostInit+0x60>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	f003 0304 	and.w	r3, r3, #4
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80008ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f2:	2302      	movs	r3, #2
 80008f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	2302      	movs	r3, #2
 80008f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fa:	f107 0310 	add.w	r3, r7, #16
 80008fe:	4619      	mov	r1, r3
 8000900:	4805      	ldr	r0, [pc, #20]	@ (8000918 <HAL_TIM_MspPostInit+0x64>)
 8000902:	f000 fc67 	bl	80011d4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000906:	bf00      	nop
 8000908:	3720      	adds	r7, #32
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40012c00 	.word	0x40012c00
 8000914:	40021000 	.word	0x40021000
 8000918:	40010800 	.word	0x40010800

0800091c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000920:	bf00      	nop
 8000922:	e7fd      	b.n	8000920 <NMI_Handler+0x4>

08000924 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000928:	bf00      	nop
 800092a:	e7fd      	b.n	8000928 <HardFault_Handler+0x4>

0800092c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000930:	bf00      	nop
 8000932:	e7fd      	b.n	8000930 <MemManage_Handler+0x4>

08000934 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000938:	bf00      	nop
 800093a:	e7fd      	b.n	8000938 <BusFault_Handler+0x4>

0800093c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000940:	bf00      	nop
 8000942:	e7fd      	b.n	8000940 <UsageFault_Handler+0x4>

08000944 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr

08000950 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr

0800095c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr

08000968 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800096c:	f000 f87e 	bl	8000a6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}

08000974 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000978:	4802      	ldr	r0, [pc, #8]	@ (8000984 <DMA1_Channel2_IRQHandler+0x10>)
 800097a:	f000 faf7 	bl	8000f6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000070 	.word	0x20000070

08000988 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr

08000994 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000994:	f7ff fff8 	bl	8000988 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000998:	480b      	ldr	r0, [pc, #44]	@ (80009c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800099a:	490c      	ldr	r1, [pc, #48]	@ (80009cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800099c:	4a0c      	ldr	r2, [pc, #48]	@ (80009d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800099e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a0:	e002      	b.n	80009a8 <LoopCopyDataInit>

080009a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009a6:	3304      	adds	r3, #4

080009a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009ac:	d3f9      	bcc.n	80009a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ae:	4a09      	ldr	r2, [pc, #36]	@ (80009d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009b0:	4c09      	ldr	r4, [pc, #36]	@ (80009d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b4:	e001      	b.n	80009ba <LoopFillZerobss>

080009b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b8:	3204      	adds	r2, #4

080009ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009bc:	d3fb      	bcc.n	80009b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009be:	f002 fa67 	bl	8002e90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009c2:	f7ff fd95 	bl	80004f0 <main>
  bx lr
 80009c6:	4770      	bx	lr
  ldr r0, =_sdata
 80009c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009d0:	08002f1c 	.word	0x08002f1c
  ldr r2, =_sbss
 80009d4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009d8:	20000e40 	.word	0x20000e40

080009dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009dc:	e7fe      	b.n	80009dc <ADC1_2_IRQHandler>
	...

080009e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009e4:	4b08      	ldr	r3, [pc, #32]	@ (8000a08 <HAL_Init+0x28>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a07      	ldr	r2, [pc, #28]	@ (8000a08 <HAL_Init+0x28>)
 80009ea:	f043 0310 	orr.w	r3, r3, #16
 80009ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f0:	2003      	movs	r0, #3
 80009f2:	f000 f947 	bl	8000c84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009f6:	200f      	movs	r0, #15
 80009f8:	f000 f808 	bl	8000a0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009fc:	f7ff fede 	bl	80007bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40022000 	.word	0x40022000

08000a0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a14:	4b12      	ldr	r3, [pc, #72]	@ (8000a60 <HAL_InitTick+0x54>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	4b12      	ldr	r3, [pc, #72]	@ (8000a64 <HAL_InitTick+0x58>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 f95f 	bl	8000cee <HAL_SYSTICK_Config>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
 8000a38:	e00e      	b.n	8000a58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2b0f      	cmp	r3, #15
 8000a3e:	d80a      	bhi.n	8000a56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a40:	2200      	movs	r2, #0
 8000a42:	6879      	ldr	r1, [r7, #4]
 8000a44:	f04f 30ff 	mov.w	r0, #4294967295
 8000a48:	f000 f927 	bl	8000c9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a4c:	4a06      	ldr	r2, [pc, #24]	@ (8000a68 <HAL_InitTick+0x5c>)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a52:	2300      	movs	r3, #0
 8000a54:	e000      	b.n	8000a58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000000 	.word	0x20000000
 8000a64:	20000008 	.word	0x20000008
 8000a68:	20000004 	.word	0x20000004

08000a6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a70:	4b05      	ldr	r3, [pc, #20]	@ (8000a88 <HAL_IncTick+0x1c>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	461a      	mov	r2, r3
 8000a76:	4b05      	ldr	r3, [pc, #20]	@ (8000a8c <HAL_IncTick+0x20>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	4a03      	ldr	r2, [pc, #12]	@ (8000a8c <HAL_IncTick+0x20>)
 8000a7e:	6013      	str	r3, [r2, #0]
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr
 8000a88:	20000008 	.word	0x20000008
 8000a8c:	20000e3c 	.word	0x20000e3c

08000a90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  return uwTick;
 8000a94:	4b02      	ldr	r3, [pc, #8]	@ (8000aa0 <HAL_GetTick+0x10>)
 8000a96:	681b      	ldr	r3, [r3, #0]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr
 8000aa0:	20000e3c 	.word	0x20000e3c

08000aa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000aac:	f7ff fff0 	bl	8000a90 <HAL_GetTick>
 8000ab0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000abc:	d005      	beq.n	8000aca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000abe:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae8 <HAL_Delay+0x44>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000aca:	bf00      	nop
 8000acc:	f7ff ffe0 	bl	8000a90 <HAL_GetTick>
 8000ad0:	4602      	mov	r2, r0
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	1ad3      	subs	r3, r2, r3
 8000ad6:	68fa      	ldr	r2, [r7, #12]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d8f7      	bhi.n	8000acc <HAL_Delay+0x28>
  {
  }
}
 8000adc:	bf00      	nop
 8000ade:	bf00      	nop
 8000ae0:	3710      	adds	r7, #16
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000008 	.word	0x20000008

08000aec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	f003 0307 	and.w	r3, r3, #7
 8000afa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000afc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b30 <__NVIC_SetPriorityGrouping+0x44>)
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b02:	68ba      	ldr	r2, [r7, #8]
 8000b04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b08:	4013      	ands	r3, r2
 8000b0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b1e:	4a04      	ldr	r2, [pc, #16]	@ (8000b30 <__NVIC_SetPriorityGrouping+0x44>)
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	60d3      	str	r3, [r2, #12]
}
 8000b24:	bf00      	nop
 8000b26:	3714      	adds	r7, #20
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b38:	4b04      	ldr	r3, [pc, #16]	@ (8000b4c <__NVIC_GetPriorityGrouping+0x18>)
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	0a1b      	lsrs	r3, r3, #8
 8000b3e:	f003 0307 	and.w	r3, r3, #7
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bc80      	pop	{r7}
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	db0b      	blt.n	8000b7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	f003 021f 	and.w	r2, r3, #31
 8000b68:	4906      	ldr	r1, [pc, #24]	@ (8000b84 <__NVIC_EnableIRQ+0x34>)
 8000b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6e:	095b      	lsrs	r3, r3, #5
 8000b70:	2001      	movs	r0, #1
 8000b72:	fa00 f202 	lsl.w	r2, r0, r2
 8000b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr
 8000b84:	e000e100 	.word	0xe000e100

08000b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	6039      	str	r1, [r7, #0]
 8000b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	db0a      	blt.n	8000bb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	490c      	ldr	r1, [pc, #48]	@ (8000bd4 <__NVIC_SetPriority+0x4c>)
 8000ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba6:	0112      	lsls	r2, r2, #4
 8000ba8:	b2d2      	uxtb	r2, r2
 8000baa:	440b      	add	r3, r1
 8000bac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bb0:	e00a      	b.n	8000bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	4908      	ldr	r1, [pc, #32]	@ (8000bd8 <__NVIC_SetPriority+0x50>)
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	f003 030f 	and.w	r3, r3, #15
 8000bbe:	3b04      	subs	r3, #4
 8000bc0:	0112      	lsls	r2, r2, #4
 8000bc2:	b2d2      	uxtb	r2, r2
 8000bc4:	440b      	add	r3, r1
 8000bc6:	761a      	strb	r2, [r3, #24]
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bc80      	pop	{r7}
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	e000e100 	.word	0xe000e100
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b089      	sub	sp, #36	@ 0x24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	f003 0307 	and.w	r3, r3, #7
 8000bee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	f1c3 0307 	rsb	r3, r3, #7
 8000bf6:	2b04      	cmp	r3, #4
 8000bf8:	bf28      	it	cs
 8000bfa:	2304      	movcs	r3, #4
 8000bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	3304      	adds	r3, #4
 8000c02:	2b06      	cmp	r3, #6
 8000c04:	d902      	bls.n	8000c0c <NVIC_EncodePriority+0x30>
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	3b03      	subs	r3, #3
 8000c0a:	e000      	b.n	8000c0e <NVIC_EncodePriority+0x32>
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c10:	f04f 32ff 	mov.w	r2, #4294967295
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	43da      	mvns	r2, r3
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	401a      	ands	r2, r3
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c24:	f04f 31ff 	mov.w	r1, #4294967295
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2e:	43d9      	mvns	r1, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c34:	4313      	orrs	r3, r2
         );
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3724      	adds	r7, #36	@ 0x24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr

08000c40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c50:	d301      	bcc.n	8000c56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c52:	2301      	movs	r3, #1
 8000c54:	e00f      	b.n	8000c76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c56:	4a0a      	ldr	r2, [pc, #40]	@ (8000c80 <SysTick_Config+0x40>)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c5e:	210f      	movs	r1, #15
 8000c60:	f04f 30ff 	mov.w	r0, #4294967295
 8000c64:	f7ff ff90 	bl	8000b88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c68:	4b05      	ldr	r3, [pc, #20]	@ (8000c80 <SysTick_Config+0x40>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c6e:	4b04      	ldr	r3, [pc, #16]	@ (8000c80 <SysTick_Config+0x40>)
 8000c70:	2207      	movs	r2, #7
 8000c72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	e000e010 	.word	0xe000e010

08000c84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f7ff ff2d 	bl	8000aec <__NVIC_SetPriorityGrouping>
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b086      	sub	sp, #24
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	60b9      	str	r1, [r7, #8]
 8000ca4:	607a      	str	r2, [r7, #4]
 8000ca6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cac:	f7ff ff42 	bl	8000b34 <__NVIC_GetPriorityGrouping>
 8000cb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	68b9      	ldr	r1, [r7, #8]
 8000cb6:	6978      	ldr	r0, [r7, #20]
 8000cb8:	f7ff ff90 	bl	8000bdc <NVIC_EncodePriority>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cc2:	4611      	mov	r1, r2
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff ff5f 	bl	8000b88 <__NVIC_SetPriority>
}
 8000cca:	bf00      	nop
 8000ccc:	3718      	adds	r7, #24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	4603      	mov	r3, r0
 8000cda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff ff35 	bl	8000b50 <__NVIC_EnableIRQ>
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f7ff ffa2 	bl	8000c40 <SysTick_Config>
 8000cfc:	4603      	mov	r3, r0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
	...

08000d08 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d10:	2300      	movs	r3, #0
 8000d12:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d101      	bne.n	8000d1e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e043      	b.n	8000da6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	461a      	mov	r2, r3
 8000d24:	4b22      	ldr	r3, [pc, #136]	@ (8000db0 <HAL_DMA_Init+0xa8>)
 8000d26:	4413      	add	r3, r2
 8000d28:	4a22      	ldr	r2, [pc, #136]	@ (8000db4 <HAL_DMA_Init+0xac>)
 8000d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d2e:	091b      	lsrs	r3, r3, #4
 8000d30:	009a      	lsls	r2, r3, #2
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a1f      	ldr	r2, [pc, #124]	@ (8000db8 <HAL_DMA_Init+0xb0>)
 8000d3a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2202      	movs	r2, #2
 8000d40:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000d52:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000d56:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000d60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	68db      	ldr	r3, [r3, #12]
 8000d66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	695b      	ldr	r3, [r3, #20]
 8000d72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	69db      	ldr	r3, [r3, #28]
 8000d7e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d80:	68fa      	ldr	r2, [r7, #12]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2200      	movs	r2, #0
 8000d92:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2201      	movs	r2, #1
 8000d98:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3714      	adds	r7, #20
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr
 8000db0:	bffdfff8 	.word	0xbffdfff8
 8000db4:	cccccccd 	.word	0xcccccccd
 8000db8:	40020000 	.word	0x40020000

08000dbc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
 8000dc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d101      	bne.n	8000ddc <HAL_DMA_Start_IT+0x20>
 8000dd8:	2302      	movs	r3, #2
 8000dda:	e04b      	b.n	8000e74 <HAL_DMA_Start_IT+0xb8>
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	2201      	movs	r2, #1
 8000de0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d13a      	bne.n	8000e66 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	2202      	movs	r2, #2
 8000df4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f022 0201 	bic.w	r2, r2, #1
 8000e0c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	68b9      	ldr	r1, [r7, #8]
 8000e14:	68f8      	ldr	r0, [r7, #12]
 8000e16:	f000 f9af 	bl	8001178 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d008      	beq.n	8000e34 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f042 020e 	orr.w	r2, r2, #14
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	e00f      	b.n	8000e54 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f022 0204 	bic.w	r2, r2, #4
 8000e42:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f042 020a 	orr.w	r2, r2, #10
 8000e52:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f042 0201 	orr.w	r2, r2, #1
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	e005      	b.n	8000e72 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000e72:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3718      	adds	r7, #24
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e84:	2300      	movs	r3, #0
 8000e86:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	d005      	beq.n	8000ea0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2204      	movs	r2, #4
 8000e98:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	73fb      	strb	r3, [r7, #15]
 8000e9e:	e051      	b.n	8000f44 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f022 020e 	bic.w	r2, r2, #14
 8000eae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f022 0201 	bic.w	r2, r2, #1
 8000ebe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a22      	ldr	r2, [pc, #136]	@ (8000f50 <HAL_DMA_Abort_IT+0xd4>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d029      	beq.n	8000f1e <HAL_DMA_Abort_IT+0xa2>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a21      	ldr	r2, [pc, #132]	@ (8000f54 <HAL_DMA_Abort_IT+0xd8>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d022      	beq.n	8000f1a <HAL_DMA_Abort_IT+0x9e>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a1f      	ldr	r2, [pc, #124]	@ (8000f58 <HAL_DMA_Abort_IT+0xdc>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d01a      	beq.n	8000f14 <HAL_DMA_Abort_IT+0x98>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a1e      	ldr	r2, [pc, #120]	@ (8000f5c <HAL_DMA_Abort_IT+0xe0>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d012      	beq.n	8000f0e <HAL_DMA_Abort_IT+0x92>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a1c      	ldr	r2, [pc, #112]	@ (8000f60 <HAL_DMA_Abort_IT+0xe4>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d00a      	beq.n	8000f08 <HAL_DMA_Abort_IT+0x8c>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a1b      	ldr	r2, [pc, #108]	@ (8000f64 <HAL_DMA_Abort_IT+0xe8>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d102      	bne.n	8000f02 <HAL_DMA_Abort_IT+0x86>
 8000efc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000f00:	e00e      	b.n	8000f20 <HAL_DMA_Abort_IT+0xa4>
 8000f02:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000f06:	e00b      	b.n	8000f20 <HAL_DMA_Abort_IT+0xa4>
 8000f08:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f0c:	e008      	b.n	8000f20 <HAL_DMA_Abort_IT+0xa4>
 8000f0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f12:	e005      	b.n	8000f20 <HAL_DMA_Abort_IT+0xa4>
 8000f14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f18:	e002      	b.n	8000f20 <HAL_DMA_Abort_IT+0xa4>
 8000f1a:	2310      	movs	r3, #16
 8000f1c:	e000      	b.n	8000f20 <HAL_DMA_Abort_IT+0xa4>
 8000f1e:	2301      	movs	r3, #1
 8000f20:	4a11      	ldr	r2, [pc, #68]	@ (8000f68 <HAL_DMA_Abort_IT+0xec>)
 8000f22:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2201      	movs	r2, #1
 8000f28:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d003      	beq.n	8000f44 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	4798      	blx	r3
    } 
  }
  return status;
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40020008 	.word	0x40020008
 8000f54:	4002001c 	.word	0x4002001c
 8000f58:	40020030 	.word	0x40020030
 8000f5c:	40020044 	.word	0x40020044
 8000f60:	40020058 	.word	0x40020058
 8000f64:	4002006c 	.word	0x4002006c
 8000f68:	40020000 	.word	0x40020000

08000f6c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f88:	2204      	movs	r2, #4
 8000f8a:	409a      	lsls	r2, r3
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d04f      	beq.n	8001034 <HAL_DMA_IRQHandler+0xc8>
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	f003 0304 	and.w	r3, r3, #4
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d04a      	beq.n	8001034 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f003 0320 	and.w	r3, r3, #32
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d107      	bne.n	8000fbc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f022 0204 	bic.w	r2, r2, #4
 8000fba:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a66      	ldr	r2, [pc, #408]	@ (800115c <HAL_DMA_IRQHandler+0x1f0>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d029      	beq.n	800101a <HAL_DMA_IRQHandler+0xae>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a65      	ldr	r2, [pc, #404]	@ (8001160 <HAL_DMA_IRQHandler+0x1f4>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d022      	beq.n	8001016 <HAL_DMA_IRQHandler+0xaa>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a63      	ldr	r2, [pc, #396]	@ (8001164 <HAL_DMA_IRQHandler+0x1f8>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d01a      	beq.n	8001010 <HAL_DMA_IRQHandler+0xa4>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a62      	ldr	r2, [pc, #392]	@ (8001168 <HAL_DMA_IRQHandler+0x1fc>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d012      	beq.n	800100a <HAL_DMA_IRQHandler+0x9e>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a60      	ldr	r2, [pc, #384]	@ (800116c <HAL_DMA_IRQHandler+0x200>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d00a      	beq.n	8001004 <HAL_DMA_IRQHandler+0x98>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a5f      	ldr	r2, [pc, #380]	@ (8001170 <HAL_DMA_IRQHandler+0x204>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d102      	bne.n	8000ffe <HAL_DMA_IRQHandler+0x92>
 8000ff8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ffc:	e00e      	b.n	800101c <HAL_DMA_IRQHandler+0xb0>
 8000ffe:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001002:	e00b      	b.n	800101c <HAL_DMA_IRQHandler+0xb0>
 8001004:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001008:	e008      	b.n	800101c <HAL_DMA_IRQHandler+0xb0>
 800100a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800100e:	e005      	b.n	800101c <HAL_DMA_IRQHandler+0xb0>
 8001010:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001014:	e002      	b.n	800101c <HAL_DMA_IRQHandler+0xb0>
 8001016:	2340      	movs	r3, #64	@ 0x40
 8001018:	e000      	b.n	800101c <HAL_DMA_IRQHandler+0xb0>
 800101a:	2304      	movs	r3, #4
 800101c:	4a55      	ldr	r2, [pc, #340]	@ (8001174 <HAL_DMA_IRQHandler+0x208>)
 800101e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001024:	2b00      	cmp	r3, #0
 8001026:	f000 8094 	beq.w	8001152 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001032:	e08e      	b.n	8001152 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001038:	2202      	movs	r2, #2
 800103a:	409a      	lsls	r2, r3
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4013      	ands	r3, r2
 8001040:	2b00      	cmp	r3, #0
 8001042:	d056      	beq.n	80010f2 <HAL_DMA_IRQHandler+0x186>
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	2b00      	cmp	r3, #0
 800104c:	d051      	beq.n	80010f2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 0320 	and.w	r3, r3, #32
 8001058:	2b00      	cmp	r3, #0
 800105a:	d10b      	bne.n	8001074 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f022 020a 	bic.w	r2, r2, #10
 800106a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2201      	movs	r2, #1
 8001070:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a38      	ldr	r2, [pc, #224]	@ (800115c <HAL_DMA_IRQHandler+0x1f0>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d029      	beq.n	80010d2 <HAL_DMA_IRQHandler+0x166>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a37      	ldr	r2, [pc, #220]	@ (8001160 <HAL_DMA_IRQHandler+0x1f4>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d022      	beq.n	80010ce <HAL_DMA_IRQHandler+0x162>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a35      	ldr	r2, [pc, #212]	@ (8001164 <HAL_DMA_IRQHandler+0x1f8>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d01a      	beq.n	80010c8 <HAL_DMA_IRQHandler+0x15c>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a34      	ldr	r2, [pc, #208]	@ (8001168 <HAL_DMA_IRQHandler+0x1fc>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d012      	beq.n	80010c2 <HAL_DMA_IRQHandler+0x156>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a32      	ldr	r2, [pc, #200]	@ (800116c <HAL_DMA_IRQHandler+0x200>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d00a      	beq.n	80010bc <HAL_DMA_IRQHandler+0x150>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a31      	ldr	r2, [pc, #196]	@ (8001170 <HAL_DMA_IRQHandler+0x204>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d102      	bne.n	80010b6 <HAL_DMA_IRQHandler+0x14a>
 80010b0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80010b4:	e00e      	b.n	80010d4 <HAL_DMA_IRQHandler+0x168>
 80010b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80010ba:	e00b      	b.n	80010d4 <HAL_DMA_IRQHandler+0x168>
 80010bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80010c0:	e008      	b.n	80010d4 <HAL_DMA_IRQHandler+0x168>
 80010c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010c6:	e005      	b.n	80010d4 <HAL_DMA_IRQHandler+0x168>
 80010c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010cc:	e002      	b.n	80010d4 <HAL_DMA_IRQHandler+0x168>
 80010ce:	2320      	movs	r3, #32
 80010d0:	e000      	b.n	80010d4 <HAL_DMA_IRQHandler+0x168>
 80010d2:	2302      	movs	r3, #2
 80010d4:	4a27      	ldr	r2, [pc, #156]	@ (8001174 <HAL_DMA_IRQHandler+0x208>)
 80010d6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d034      	beq.n	8001152 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80010f0:	e02f      	b.n	8001152 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f6:	2208      	movs	r2, #8
 80010f8:	409a      	lsls	r2, r3
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	4013      	ands	r3, r2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d028      	beq.n	8001154 <HAL_DMA_IRQHandler+0x1e8>
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	f003 0308 	and.w	r3, r3, #8
 8001108:	2b00      	cmp	r3, #0
 800110a:	d023      	beq.n	8001154 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f022 020e 	bic.w	r2, r2, #14
 800111a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001124:	2101      	movs	r1, #1
 8001126:	fa01 f202 	lsl.w	r2, r1, r2
 800112a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2201      	movs	r2, #1
 8001130:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2201      	movs	r2, #1
 8001136:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2200      	movs	r2, #0
 800113e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001146:	2b00      	cmp	r3, #0
 8001148:	d004      	beq.n	8001154 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	4798      	blx	r3
    }
  }
  return;
 8001152:	bf00      	nop
 8001154:	bf00      	nop
}
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40020008 	.word	0x40020008
 8001160:	4002001c 	.word	0x4002001c
 8001164:	40020030 	.word	0x40020030
 8001168:	40020044 	.word	0x40020044
 800116c:	40020058 	.word	0x40020058
 8001170:	4002006c 	.word	0x4002006c
 8001174:	40020000 	.word	0x40020000

08001178 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
 8001184:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800118e:	2101      	movs	r1, #1
 8001190:	fa01 f202 	lsl.w	r2, r1, r2
 8001194:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	2b10      	cmp	r3, #16
 80011a4:	d108      	bne.n	80011b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	68ba      	ldr	r2, [r7, #8]
 80011b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80011b6:	e007      	b.n	80011c8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	68ba      	ldr	r2, [r7, #8]
 80011be:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	60da      	str	r2, [r3, #12]
}
 80011c8:	bf00      	nop
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr
	...

080011d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b08b      	sub	sp, #44	@ 0x2c
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011de:	2300      	movs	r3, #0
 80011e0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011e2:	2300      	movs	r3, #0
 80011e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011e6:	e169      	b.n	80014bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011e8:	2201      	movs	r2, #1
 80011ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	69fa      	ldr	r2, [r7, #28]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	429a      	cmp	r2, r3
 8001202:	f040 8158 	bne.w	80014b6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	4a9a      	ldr	r2, [pc, #616]	@ (8001474 <HAL_GPIO_Init+0x2a0>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d05e      	beq.n	80012ce <HAL_GPIO_Init+0xfa>
 8001210:	4a98      	ldr	r2, [pc, #608]	@ (8001474 <HAL_GPIO_Init+0x2a0>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d875      	bhi.n	8001302 <HAL_GPIO_Init+0x12e>
 8001216:	4a98      	ldr	r2, [pc, #608]	@ (8001478 <HAL_GPIO_Init+0x2a4>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d058      	beq.n	80012ce <HAL_GPIO_Init+0xfa>
 800121c:	4a96      	ldr	r2, [pc, #600]	@ (8001478 <HAL_GPIO_Init+0x2a4>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d86f      	bhi.n	8001302 <HAL_GPIO_Init+0x12e>
 8001222:	4a96      	ldr	r2, [pc, #600]	@ (800147c <HAL_GPIO_Init+0x2a8>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d052      	beq.n	80012ce <HAL_GPIO_Init+0xfa>
 8001228:	4a94      	ldr	r2, [pc, #592]	@ (800147c <HAL_GPIO_Init+0x2a8>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d869      	bhi.n	8001302 <HAL_GPIO_Init+0x12e>
 800122e:	4a94      	ldr	r2, [pc, #592]	@ (8001480 <HAL_GPIO_Init+0x2ac>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d04c      	beq.n	80012ce <HAL_GPIO_Init+0xfa>
 8001234:	4a92      	ldr	r2, [pc, #584]	@ (8001480 <HAL_GPIO_Init+0x2ac>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d863      	bhi.n	8001302 <HAL_GPIO_Init+0x12e>
 800123a:	4a92      	ldr	r2, [pc, #584]	@ (8001484 <HAL_GPIO_Init+0x2b0>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d046      	beq.n	80012ce <HAL_GPIO_Init+0xfa>
 8001240:	4a90      	ldr	r2, [pc, #576]	@ (8001484 <HAL_GPIO_Init+0x2b0>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d85d      	bhi.n	8001302 <HAL_GPIO_Init+0x12e>
 8001246:	2b12      	cmp	r3, #18
 8001248:	d82a      	bhi.n	80012a0 <HAL_GPIO_Init+0xcc>
 800124a:	2b12      	cmp	r3, #18
 800124c:	d859      	bhi.n	8001302 <HAL_GPIO_Init+0x12e>
 800124e:	a201      	add	r2, pc, #4	@ (adr r2, 8001254 <HAL_GPIO_Init+0x80>)
 8001250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001254:	080012cf 	.word	0x080012cf
 8001258:	080012a9 	.word	0x080012a9
 800125c:	080012bb 	.word	0x080012bb
 8001260:	080012fd 	.word	0x080012fd
 8001264:	08001303 	.word	0x08001303
 8001268:	08001303 	.word	0x08001303
 800126c:	08001303 	.word	0x08001303
 8001270:	08001303 	.word	0x08001303
 8001274:	08001303 	.word	0x08001303
 8001278:	08001303 	.word	0x08001303
 800127c:	08001303 	.word	0x08001303
 8001280:	08001303 	.word	0x08001303
 8001284:	08001303 	.word	0x08001303
 8001288:	08001303 	.word	0x08001303
 800128c:	08001303 	.word	0x08001303
 8001290:	08001303 	.word	0x08001303
 8001294:	08001303 	.word	0x08001303
 8001298:	080012b1 	.word	0x080012b1
 800129c:	080012c5 	.word	0x080012c5
 80012a0:	4a79      	ldr	r2, [pc, #484]	@ (8001488 <HAL_GPIO_Init+0x2b4>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d013      	beq.n	80012ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012a6:	e02c      	b.n	8001302 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	623b      	str	r3, [r7, #32]
          break;
 80012ae:	e029      	b.n	8001304 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	3304      	adds	r3, #4
 80012b6:	623b      	str	r3, [r7, #32]
          break;
 80012b8:	e024      	b.n	8001304 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	3308      	adds	r3, #8
 80012c0:	623b      	str	r3, [r7, #32]
          break;
 80012c2:	e01f      	b.n	8001304 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	330c      	adds	r3, #12
 80012ca:	623b      	str	r3, [r7, #32]
          break;
 80012cc:	e01a      	b.n	8001304 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d102      	bne.n	80012dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012d6:	2304      	movs	r3, #4
 80012d8:	623b      	str	r3, [r7, #32]
          break;
 80012da:	e013      	b.n	8001304 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d105      	bne.n	80012f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012e4:	2308      	movs	r3, #8
 80012e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	69fa      	ldr	r2, [r7, #28]
 80012ec:	611a      	str	r2, [r3, #16]
          break;
 80012ee:	e009      	b.n	8001304 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012f0:	2308      	movs	r3, #8
 80012f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	69fa      	ldr	r2, [r7, #28]
 80012f8:	615a      	str	r2, [r3, #20]
          break;
 80012fa:	e003      	b.n	8001304 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012fc:	2300      	movs	r3, #0
 80012fe:	623b      	str	r3, [r7, #32]
          break;
 8001300:	e000      	b.n	8001304 <HAL_GPIO_Init+0x130>
          break;
 8001302:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	2bff      	cmp	r3, #255	@ 0xff
 8001308:	d801      	bhi.n	800130e <HAL_GPIO_Init+0x13a>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	e001      	b.n	8001312 <HAL_GPIO_Init+0x13e>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	3304      	adds	r3, #4
 8001312:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	2bff      	cmp	r3, #255	@ 0xff
 8001318:	d802      	bhi.n	8001320 <HAL_GPIO_Init+0x14c>
 800131a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	e002      	b.n	8001326 <HAL_GPIO_Init+0x152>
 8001320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001322:	3b08      	subs	r3, #8
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	210f      	movs	r1, #15
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	fa01 f303 	lsl.w	r3, r1, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	401a      	ands	r2, r3
 8001338:	6a39      	ldr	r1, [r7, #32]
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	fa01 f303 	lsl.w	r3, r1, r3
 8001340:	431a      	orrs	r2, r3
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800134e:	2b00      	cmp	r3, #0
 8001350:	f000 80b1 	beq.w	80014b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001354:	4b4d      	ldr	r3, [pc, #308]	@ (800148c <HAL_GPIO_Init+0x2b8>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	4a4c      	ldr	r2, [pc, #304]	@ (800148c <HAL_GPIO_Init+0x2b8>)
 800135a:	f043 0301 	orr.w	r3, r3, #1
 800135e:	6193      	str	r3, [r2, #24]
 8001360:	4b4a      	ldr	r3, [pc, #296]	@ (800148c <HAL_GPIO_Init+0x2b8>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800136c:	4a48      	ldr	r2, [pc, #288]	@ (8001490 <HAL_GPIO_Init+0x2bc>)
 800136e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001370:	089b      	lsrs	r3, r3, #2
 8001372:	3302      	adds	r3, #2
 8001374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001378:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800137a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800137c:	f003 0303 	and.w	r3, r3, #3
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	220f      	movs	r2, #15
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	4013      	ands	r3, r2
 800138e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a40      	ldr	r2, [pc, #256]	@ (8001494 <HAL_GPIO_Init+0x2c0>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d013      	beq.n	80013c0 <HAL_GPIO_Init+0x1ec>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a3f      	ldr	r2, [pc, #252]	@ (8001498 <HAL_GPIO_Init+0x2c4>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d00d      	beq.n	80013bc <HAL_GPIO_Init+0x1e8>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a3e      	ldr	r2, [pc, #248]	@ (800149c <HAL_GPIO_Init+0x2c8>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d007      	beq.n	80013b8 <HAL_GPIO_Init+0x1e4>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a3d      	ldr	r2, [pc, #244]	@ (80014a0 <HAL_GPIO_Init+0x2cc>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d101      	bne.n	80013b4 <HAL_GPIO_Init+0x1e0>
 80013b0:	2303      	movs	r3, #3
 80013b2:	e006      	b.n	80013c2 <HAL_GPIO_Init+0x1ee>
 80013b4:	2304      	movs	r3, #4
 80013b6:	e004      	b.n	80013c2 <HAL_GPIO_Init+0x1ee>
 80013b8:	2302      	movs	r3, #2
 80013ba:	e002      	b.n	80013c2 <HAL_GPIO_Init+0x1ee>
 80013bc:	2301      	movs	r3, #1
 80013be:	e000      	b.n	80013c2 <HAL_GPIO_Init+0x1ee>
 80013c0:	2300      	movs	r3, #0
 80013c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013c4:	f002 0203 	and.w	r2, r2, #3
 80013c8:	0092      	lsls	r2, r2, #2
 80013ca:	4093      	lsls	r3, r2
 80013cc:	68fa      	ldr	r2, [r7, #12]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013d2:	492f      	ldr	r1, [pc, #188]	@ (8001490 <HAL_GPIO_Init+0x2bc>)
 80013d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d6:	089b      	lsrs	r3, r3, #2
 80013d8:	3302      	adds	r3, #2
 80013da:	68fa      	ldr	r2, [r7, #12]
 80013dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d006      	beq.n	80013fa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013ec:	4b2d      	ldr	r3, [pc, #180]	@ (80014a4 <HAL_GPIO_Init+0x2d0>)
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	492c      	ldr	r1, [pc, #176]	@ (80014a4 <HAL_GPIO_Init+0x2d0>)
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	608b      	str	r3, [r1, #8]
 80013f8:	e006      	b.n	8001408 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013fa:	4b2a      	ldr	r3, [pc, #168]	@ (80014a4 <HAL_GPIO_Init+0x2d0>)
 80013fc:	689a      	ldr	r2, [r3, #8]
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	43db      	mvns	r3, r3
 8001402:	4928      	ldr	r1, [pc, #160]	@ (80014a4 <HAL_GPIO_Init+0x2d0>)
 8001404:	4013      	ands	r3, r2
 8001406:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d006      	beq.n	8001422 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001414:	4b23      	ldr	r3, [pc, #140]	@ (80014a4 <HAL_GPIO_Init+0x2d0>)
 8001416:	68da      	ldr	r2, [r3, #12]
 8001418:	4922      	ldr	r1, [pc, #136]	@ (80014a4 <HAL_GPIO_Init+0x2d0>)
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	4313      	orrs	r3, r2
 800141e:	60cb      	str	r3, [r1, #12]
 8001420:	e006      	b.n	8001430 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001422:	4b20      	ldr	r3, [pc, #128]	@ (80014a4 <HAL_GPIO_Init+0x2d0>)
 8001424:	68da      	ldr	r2, [r3, #12]
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	43db      	mvns	r3, r3
 800142a:	491e      	ldr	r1, [pc, #120]	@ (80014a4 <HAL_GPIO_Init+0x2d0>)
 800142c:	4013      	ands	r3, r2
 800142e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d006      	beq.n	800144a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800143c:	4b19      	ldr	r3, [pc, #100]	@ (80014a4 <HAL_GPIO_Init+0x2d0>)
 800143e:	685a      	ldr	r2, [r3, #4]
 8001440:	4918      	ldr	r1, [pc, #96]	@ (80014a4 <HAL_GPIO_Init+0x2d0>)
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	4313      	orrs	r3, r2
 8001446:	604b      	str	r3, [r1, #4]
 8001448:	e006      	b.n	8001458 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800144a:	4b16      	ldr	r3, [pc, #88]	@ (80014a4 <HAL_GPIO_Init+0x2d0>)
 800144c:	685a      	ldr	r2, [r3, #4]
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	43db      	mvns	r3, r3
 8001452:	4914      	ldr	r1, [pc, #80]	@ (80014a4 <HAL_GPIO_Init+0x2d0>)
 8001454:	4013      	ands	r3, r2
 8001456:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d021      	beq.n	80014a8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001464:	4b0f      	ldr	r3, [pc, #60]	@ (80014a4 <HAL_GPIO_Init+0x2d0>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	490e      	ldr	r1, [pc, #56]	@ (80014a4 <HAL_GPIO_Init+0x2d0>)
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	4313      	orrs	r3, r2
 800146e:	600b      	str	r3, [r1, #0]
 8001470:	e021      	b.n	80014b6 <HAL_GPIO_Init+0x2e2>
 8001472:	bf00      	nop
 8001474:	10320000 	.word	0x10320000
 8001478:	10310000 	.word	0x10310000
 800147c:	10220000 	.word	0x10220000
 8001480:	10210000 	.word	0x10210000
 8001484:	10120000 	.word	0x10120000
 8001488:	10110000 	.word	0x10110000
 800148c:	40021000 	.word	0x40021000
 8001490:	40010000 	.word	0x40010000
 8001494:	40010800 	.word	0x40010800
 8001498:	40010c00 	.word	0x40010c00
 800149c:	40011000 	.word	0x40011000
 80014a0:	40011400 	.word	0x40011400
 80014a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014a8:	4b0b      	ldr	r3, [pc, #44]	@ (80014d8 <HAL_GPIO_Init+0x304>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	43db      	mvns	r3, r3
 80014b0:	4909      	ldr	r1, [pc, #36]	@ (80014d8 <HAL_GPIO_Init+0x304>)
 80014b2:	4013      	ands	r3, r2
 80014b4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80014b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b8:	3301      	adds	r3, #1
 80014ba:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c2:	fa22 f303 	lsr.w	r3, r2, r3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	f47f ae8e 	bne.w	80011e8 <HAL_GPIO_Init+0x14>
  }
}
 80014cc:	bf00      	nop
 80014ce:	bf00      	nop
 80014d0:	372c      	adds	r7, #44	@ 0x2c
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr
 80014d8:	40010400 	.word	0x40010400

080014dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	807b      	strh	r3, [r7, #2]
 80014e8:	4613      	mov	r3, r2
 80014ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014ec:	787b      	ldrb	r3, [r7, #1]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014f2:	887a      	ldrh	r2, [r7, #2]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014f8:	e003      	b.n	8001502 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014fa:	887b      	ldrh	r3, [r7, #2]
 80014fc:	041a      	lsls	r2, r3, #16
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	611a      	str	r2, [r3, #16]
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr

0800150c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d101      	bne.n	800151e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e272      	b.n	8001a04 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	2b00      	cmp	r3, #0
 8001528:	f000 8087 	beq.w	800163a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800152c:	4b92      	ldr	r3, [pc, #584]	@ (8001778 <HAL_RCC_OscConfig+0x26c>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f003 030c 	and.w	r3, r3, #12
 8001534:	2b04      	cmp	r3, #4
 8001536:	d00c      	beq.n	8001552 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001538:	4b8f      	ldr	r3, [pc, #572]	@ (8001778 <HAL_RCC_OscConfig+0x26c>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f003 030c 	and.w	r3, r3, #12
 8001540:	2b08      	cmp	r3, #8
 8001542:	d112      	bne.n	800156a <HAL_RCC_OscConfig+0x5e>
 8001544:	4b8c      	ldr	r3, [pc, #560]	@ (8001778 <HAL_RCC_OscConfig+0x26c>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800154c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001550:	d10b      	bne.n	800156a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001552:	4b89      	ldr	r3, [pc, #548]	@ (8001778 <HAL_RCC_OscConfig+0x26c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d06c      	beq.n	8001638 <HAL_RCC_OscConfig+0x12c>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d168      	bne.n	8001638 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e24c      	b.n	8001a04 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001572:	d106      	bne.n	8001582 <HAL_RCC_OscConfig+0x76>
 8001574:	4b80      	ldr	r3, [pc, #512]	@ (8001778 <HAL_RCC_OscConfig+0x26c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a7f      	ldr	r2, [pc, #508]	@ (8001778 <HAL_RCC_OscConfig+0x26c>)
 800157a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800157e:	6013      	str	r3, [r2, #0]
 8001580:	e02e      	b.n	80015e0 <HAL_RCC_OscConfig+0xd4>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d10c      	bne.n	80015a4 <HAL_RCC_OscConfig+0x98>
 800158a:	4b7b      	ldr	r3, [pc, #492]	@ (8001778 <HAL_RCC_OscConfig+0x26c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a7a      	ldr	r2, [pc, #488]	@ (8001778 <HAL_RCC_OscConfig+0x26c>)
 8001590:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001594:	6013      	str	r3, [r2, #0]
 8001596:	4b78      	ldr	r3, [pc, #480]	@ (8001778 <HAL_RCC_OscConfig+0x26c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a77      	ldr	r2, [pc, #476]	@ (8001778 <HAL_RCC_OscConfig+0x26c>)
 800159c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015a0:	6013      	str	r3, [r2, #0]
 80015a2:	e01d      	b.n	80015e0 <HAL_RCC_OscConfig+0xd4>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015ac:	d10c      	bne.n	80015c8 <HAL_RCC_OscConfig+0xbc>
 80015ae:	4b72      	ldr	r3, [pc, #456]	@ (8001778 <HAL_RCC_OscConfig+0x26c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a71      	ldr	r2, [pc, #452]	@ (8001778 <HAL_RCC_OscConfig+0x26c>)
 80015b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015b8:	6013      	str	r3, [r2, #0]
 80015ba:	4b6f      	ldr	r3, [pc, #444]	@ (8001778 <HAL_RCC_OscConfig+0x26c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a6e      	ldr	r2, [pc, #440]	@ (8001778 <HAL_RCC_OscConfig+0x26c>)
 80015c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015c4:	6013      	str	r3, [r2, #0]
 80015c6:	e00b      	b.n	80015e0 <HAL_RCC_OscConfig+0xd4>
 80015c8:	4b6b      	ldr	r3, [pc, #428]	@ (8001778 <HAL_RCC_OscConfig+0x26c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a6a      	ldr	r2, [pc, #424]	@ (8001778 <HAL_RCC_OscConfig+0x26c>)
 80015ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015d2:	6013      	str	r3, [r2, #0]
 80015d4:	4b68      	ldr	r3, [pc, #416]	@ (8001778 <HAL_RCC_OscConfig+0x26c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a67      	ldr	r2, [pc, #412]	@ (8001778 <HAL_RCC_OscConfig+0x26c>)
 80015da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d013      	beq.n	8001610 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e8:	f7ff fa52 	bl	8000a90 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015f0:	f7ff fa4e 	bl	8000a90 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b64      	cmp	r3, #100	@ 0x64
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e200      	b.n	8001a04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001602:	4b5d      	ldr	r3, [pc, #372]	@ (8001778 <HAL_RCC_OscConfig+0x26c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d0f0      	beq.n	80015f0 <HAL_RCC_OscConfig+0xe4>
 800160e:	e014      	b.n	800163a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001610:	f7ff fa3e 	bl	8000a90 <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001618:	f7ff fa3a 	bl	8000a90 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b64      	cmp	r3, #100	@ 0x64
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e1ec      	b.n	8001a04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800162a:	4b53      	ldr	r3, [pc, #332]	@ (8001778 <HAL_RCC_OscConfig+0x26c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1f0      	bne.n	8001618 <HAL_RCC_OscConfig+0x10c>
 8001636:	e000      	b.n	800163a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001638:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d063      	beq.n	800170e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001646:	4b4c      	ldr	r3, [pc, #304]	@ (8001778 <HAL_RCC_OscConfig+0x26c>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f003 030c 	and.w	r3, r3, #12
 800164e:	2b00      	cmp	r3, #0
 8001650:	d00b      	beq.n	800166a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001652:	4b49      	ldr	r3, [pc, #292]	@ (8001778 <HAL_RCC_OscConfig+0x26c>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f003 030c 	and.w	r3, r3, #12
 800165a:	2b08      	cmp	r3, #8
 800165c:	d11c      	bne.n	8001698 <HAL_RCC_OscConfig+0x18c>
 800165e:	4b46      	ldr	r3, [pc, #280]	@ (8001778 <HAL_RCC_OscConfig+0x26c>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d116      	bne.n	8001698 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800166a:	4b43      	ldr	r3, [pc, #268]	@ (8001778 <HAL_RCC_OscConfig+0x26c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d005      	beq.n	8001682 <HAL_RCC_OscConfig+0x176>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d001      	beq.n	8001682 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e1c0      	b.n	8001a04 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001682:	4b3d      	ldr	r3, [pc, #244]	@ (8001778 <HAL_RCC_OscConfig+0x26c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	4939      	ldr	r1, [pc, #228]	@ (8001778 <HAL_RCC_OscConfig+0x26c>)
 8001692:	4313      	orrs	r3, r2
 8001694:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001696:	e03a      	b.n	800170e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d020      	beq.n	80016e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016a0:	4b36      	ldr	r3, [pc, #216]	@ (800177c <HAL_RCC_OscConfig+0x270>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a6:	f7ff f9f3 	bl	8000a90 <HAL_GetTick>
 80016aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ac:	e008      	b.n	80016c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ae:	f7ff f9ef 	bl	8000a90 <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e1a1      	b.n	8001a04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001778 <HAL_RCC_OscConfig+0x26c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0302 	and.w	r3, r3, #2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d0f0      	beq.n	80016ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001778 <HAL_RCC_OscConfig+0x26c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	695b      	ldr	r3, [r3, #20]
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	4927      	ldr	r1, [pc, #156]	@ (8001778 <HAL_RCC_OscConfig+0x26c>)
 80016dc:	4313      	orrs	r3, r2
 80016de:	600b      	str	r3, [r1, #0]
 80016e0:	e015      	b.n	800170e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016e2:	4b26      	ldr	r3, [pc, #152]	@ (800177c <HAL_RCC_OscConfig+0x270>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e8:	f7ff f9d2 	bl	8000a90 <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016f0:	f7ff f9ce 	bl	8000a90 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e180      	b.n	8001a04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001702:	4b1d      	ldr	r3, [pc, #116]	@ (8001778 <HAL_RCC_OscConfig+0x26c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1f0      	bne.n	80016f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0308 	and.w	r3, r3, #8
 8001716:	2b00      	cmp	r3, #0
 8001718:	d03a      	beq.n	8001790 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d019      	beq.n	8001756 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001722:	4b17      	ldr	r3, [pc, #92]	@ (8001780 <HAL_RCC_OscConfig+0x274>)
 8001724:	2201      	movs	r2, #1
 8001726:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001728:	f7ff f9b2 	bl	8000a90 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001730:	f7ff f9ae 	bl	8000a90 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e160      	b.n	8001a04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001742:	4b0d      	ldr	r3, [pc, #52]	@ (8001778 <HAL_RCC_OscConfig+0x26c>)
 8001744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d0f0      	beq.n	8001730 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800174e:	2001      	movs	r0, #1
 8001750:	f000 fa9c 	bl	8001c8c <RCC_Delay>
 8001754:	e01c      	b.n	8001790 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001756:	4b0a      	ldr	r3, [pc, #40]	@ (8001780 <HAL_RCC_OscConfig+0x274>)
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800175c:	f7ff f998 	bl	8000a90 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001762:	e00f      	b.n	8001784 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001764:	f7ff f994 	bl	8000a90 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d908      	bls.n	8001784 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e146      	b.n	8001a04 <HAL_RCC_OscConfig+0x4f8>
 8001776:	bf00      	nop
 8001778:	40021000 	.word	0x40021000
 800177c:	42420000 	.word	0x42420000
 8001780:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001784:	4b92      	ldr	r3, [pc, #584]	@ (80019d0 <HAL_RCC_OscConfig+0x4c4>)
 8001786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1e9      	bne.n	8001764 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0304 	and.w	r3, r3, #4
 8001798:	2b00      	cmp	r3, #0
 800179a:	f000 80a6 	beq.w	80018ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800179e:	2300      	movs	r3, #0
 80017a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017a2:	4b8b      	ldr	r3, [pc, #556]	@ (80019d0 <HAL_RCC_OscConfig+0x4c4>)
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d10d      	bne.n	80017ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ae:	4b88      	ldr	r3, [pc, #544]	@ (80019d0 <HAL_RCC_OscConfig+0x4c4>)
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	4a87      	ldr	r2, [pc, #540]	@ (80019d0 <HAL_RCC_OscConfig+0x4c4>)
 80017b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017b8:	61d3      	str	r3, [r2, #28]
 80017ba:	4b85      	ldr	r3, [pc, #532]	@ (80019d0 <HAL_RCC_OscConfig+0x4c4>)
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017c6:	2301      	movs	r3, #1
 80017c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ca:	4b82      	ldr	r3, [pc, #520]	@ (80019d4 <HAL_RCC_OscConfig+0x4c8>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d118      	bne.n	8001808 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017d6:	4b7f      	ldr	r3, [pc, #508]	@ (80019d4 <HAL_RCC_OscConfig+0x4c8>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a7e      	ldr	r2, [pc, #504]	@ (80019d4 <HAL_RCC_OscConfig+0x4c8>)
 80017dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017e2:	f7ff f955 	bl	8000a90 <HAL_GetTick>
 80017e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e8:	e008      	b.n	80017fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017ea:	f7ff f951 	bl	8000a90 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b64      	cmp	r3, #100	@ 0x64
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e103      	b.n	8001a04 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017fc:	4b75      	ldr	r3, [pc, #468]	@ (80019d4 <HAL_RCC_OscConfig+0x4c8>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001804:	2b00      	cmp	r3, #0
 8001806:	d0f0      	beq.n	80017ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d106      	bne.n	800181e <HAL_RCC_OscConfig+0x312>
 8001810:	4b6f      	ldr	r3, [pc, #444]	@ (80019d0 <HAL_RCC_OscConfig+0x4c4>)
 8001812:	6a1b      	ldr	r3, [r3, #32]
 8001814:	4a6e      	ldr	r2, [pc, #440]	@ (80019d0 <HAL_RCC_OscConfig+0x4c4>)
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	6213      	str	r3, [r2, #32]
 800181c:	e02d      	b.n	800187a <HAL_RCC_OscConfig+0x36e>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d10c      	bne.n	8001840 <HAL_RCC_OscConfig+0x334>
 8001826:	4b6a      	ldr	r3, [pc, #424]	@ (80019d0 <HAL_RCC_OscConfig+0x4c4>)
 8001828:	6a1b      	ldr	r3, [r3, #32]
 800182a:	4a69      	ldr	r2, [pc, #420]	@ (80019d0 <HAL_RCC_OscConfig+0x4c4>)
 800182c:	f023 0301 	bic.w	r3, r3, #1
 8001830:	6213      	str	r3, [r2, #32]
 8001832:	4b67      	ldr	r3, [pc, #412]	@ (80019d0 <HAL_RCC_OscConfig+0x4c4>)
 8001834:	6a1b      	ldr	r3, [r3, #32]
 8001836:	4a66      	ldr	r2, [pc, #408]	@ (80019d0 <HAL_RCC_OscConfig+0x4c4>)
 8001838:	f023 0304 	bic.w	r3, r3, #4
 800183c:	6213      	str	r3, [r2, #32]
 800183e:	e01c      	b.n	800187a <HAL_RCC_OscConfig+0x36e>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	2b05      	cmp	r3, #5
 8001846:	d10c      	bne.n	8001862 <HAL_RCC_OscConfig+0x356>
 8001848:	4b61      	ldr	r3, [pc, #388]	@ (80019d0 <HAL_RCC_OscConfig+0x4c4>)
 800184a:	6a1b      	ldr	r3, [r3, #32]
 800184c:	4a60      	ldr	r2, [pc, #384]	@ (80019d0 <HAL_RCC_OscConfig+0x4c4>)
 800184e:	f043 0304 	orr.w	r3, r3, #4
 8001852:	6213      	str	r3, [r2, #32]
 8001854:	4b5e      	ldr	r3, [pc, #376]	@ (80019d0 <HAL_RCC_OscConfig+0x4c4>)
 8001856:	6a1b      	ldr	r3, [r3, #32]
 8001858:	4a5d      	ldr	r2, [pc, #372]	@ (80019d0 <HAL_RCC_OscConfig+0x4c4>)
 800185a:	f043 0301 	orr.w	r3, r3, #1
 800185e:	6213      	str	r3, [r2, #32]
 8001860:	e00b      	b.n	800187a <HAL_RCC_OscConfig+0x36e>
 8001862:	4b5b      	ldr	r3, [pc, #364]	@ (80019d0 <HAL_RCC_OscConfig+0x4c4>)
 8001864:	6a1b      	ldr	r3, [r3, #32]
 8001866:	4a5a      	ldr	r2, [pc, #360]	@ (80019d0 <HAL_RCC_OscConfig+0x4c4>)
 8001868:	f023 0301 	bic.w	r3, r3, #1
 800186c:	6213      	str	r3, [r2, #32]
 800186e:	4b58      	ldr	r3, [pc, #352]	@ (80019d0 <HAL_RCC_OscConfig+0x4c4>)
 8001870:	6a1b      	ldr	r3, [r3, #32]
 8001872:	4a57      	ldr	r2, [pc, #348]	@ (80019d0 <HAL_RCC_OscConfig+0x4c4>)
 8001874:	f023 0304 	bic.w	r3, r3, #4
 8001878:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d015      	beq.n	80018ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001882:	f7ff f905 	bl	8000a90 <HAL_GetTick>
 8001886:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001888:	e00a      	b.n	80018a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800188a:	f7ff f901 	bl	8000a90 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001898:	4293      	cmp	r3, r2
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e0b1      	b.n	8001a04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018a0:	4b4b      	ldr	r3, [pc, #300]	@ (80019d0 <HAL_RCC_OscConfig+0x4c4>)
 80018a2:	6a1b      	ldr	r3, [r3, #32]
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d0ee      	beq.n	800188a <HAL_RCC_OscConfig+0x37e>
 80018ac:	e014      	b.n	80018d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ae:	f7ff f8ef 	bl	8000a90 <HAL_GetTick>
 80018b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018b4:	e00a      	b.n	80018cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018b6:	f7ff f8eb 	bl	8000a90 <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e09b      	b.n	8001a04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018cc:	4b40      	ldr	r3, [pc, #256]	@ (80019d0 <HAL_RCC_OscConfig+0x4c4>)
 80018ce:	6a1b      	ldr	r3, [r3, #32]
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d1ee      	bne.n	80018b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018d8:	7dfb      	ldrb	r3, [r7, #23]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d105      	bne.n	80018ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018de:	4b3c      	ldr	r3, [pc, #240]	@ (80019d0 <HAL_RCC_OscConfig+0x4c4>)
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	4a3b      	ldr	r2, [pc, #236]	@ (80019d0 <HAL_RCC_OscConfig+0x4c4>)
 80018e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	69db      	ldr	r3, [r3, #28]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f000 8087 	beq.w	8001a02 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018f4:	4b36      	ldr	r3, [pc, #216]	@ (80019d0 <HAL_RCC_OscConfig+0x4c4>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f003 030c 	and.w	r3, r3, #12
 80018fc:	2b08      	cmp	r3, #8
 80018fe:	d061      	beq.n	80019c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	69db      	ldr	r3, [r3, #28]
 8001904:	2b02      	cmp	r3, #2
 8001906:	d146      	bne.n	8001996 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001908:	4b33      	ldr	r3, [pc, #204]	@ (80019d8 <HAL_RCC_OscConfig+0x4cc>)
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190e:	f7ff f8bf 	bl	8000a90 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001916:	f7ff f8bb 	bl	8000a90 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e06d      	b.n	8001a04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001928:	4b29      	ldr	r3, [pc, #164]	@ (80019d0 <HAL_RCC_OscConfig+0x4c4>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1f0      	bne.n	8001916 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a1b      	ldr	r3, [r3, #32]
 8001938:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800193c:	d108      	bne.n	8001950 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800193e:	4b24      	ldr	r3, [pc, #144]	@ (80019d0 <HAL_RCC_OscConfig+0x4c4>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	4921      	ldr	r1, [pc, #132]	@ (80019d0 <HAL_RCC_OscConfig+0x4c4>)
 800194c:	4313      	orrs	r3, r2
 800194e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001950:	4b1f      	ldr	r3, [pc, #124]	@ (80019d0 <HAL_RCC_OscConfig+0x4c4>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a19      	ldr	r1, [r3, #32]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001960:	430b      	orrs	r3, r1
 8001962:	491b      	ldr	r1, [pc, #108]	@ (80019d0 <HAL_RCC_OscConfig+0x4c4>)
 8001964:	4313      	orrs	r3, r2
 8001966:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001968:	4b1b      	ldr	r3, [pc, #108]	@ (80019d8 <HAL_RCC_OscConfig+0x4cc>)
 800196a:	2201      	movs	r2, #1
 800196c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196e:	f7ff f88f 	bl	8000a90 <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001974:	e008      	b.n	8001988 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001976:	f7ff f88b 	bl	8000a90 <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e03d      	b.n	8001a04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001988:	4b11      	ldr	r3, [pc, #68]	@ (80019d0 <HAL_RCC_OscConfig+0x4c4>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d0f0      	beq.n	8001976 <HAL_RCC_OscConfig+0x46a>
 8001994:	e035      	b.n	8001a02 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001996:	4b10      	ldr	r3, [pc, #64]	@ (80019d8 <HAL_RCC_OscConfig+0x4cc>)
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199c:	f7ff f878 	bl	8000a90 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a4:	f7ff f874 	bl	8000a90 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e026      	b.n	8001a04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b6:	4b06      	ldr	r3, [pc, #24]	@ (80019d0 <HAL_RCC_OscConfig+0x4c4>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1f0      	bne.n	80019a4 <HAL_RCC_OscConfig+0x498>
 80019c2:	e01e      	b.n	8001a02 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	69db      	ldr	r3, [r3, #28]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d107      	bne.n	80019dc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e019      	b.n	8001a04 <HAL_RCC_OscConfig+0x4f8>
 80019d0:	40021000 	.word	0x40021000
 80019d4:	40007000 	.word	0x40007000
 80019d8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019dc:	4b0b      	ldr	r3, [pc, #44]	@ (8001a0c <HAL_RCC_OscConfig+0x500>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a1b      	ldr	r3, [r3, #32]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d106      	bne.n	80019fe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d001      	beq.n	8001a02 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e000      	b.n	8001a04 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40021000 	.word	0x40021000

08001a10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d101      	bne.n	8001a24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e0d0      	b.n	8001bc6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a24:	4b6a      	ldr	r3, [pc, #424]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0307 	and.w	r3, r3, #7
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d910      	bls.n	8001a54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a32:	4b67      	ldr	r3, [pc, #412]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f023 0207 	bic.w	r2, r3, #7
 8001a3a:	4965      	ldr	r1, [pc, #404]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a42:	4b63      	ldr	r3, [pc, #396]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d001      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e0b8      	b.n	8001bc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d020      	beq.n	8001aa2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d005      	beq.n	8001a78 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a6c:	4b59      	ldr	r3, [pc, #356]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	4a58      	ldr	r2, [pc, #352]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a72:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001a76:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0308 	and.w	r3, r3, #8
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d005      	beq.n	8001a90 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a84:	4b53      	ldr	r3, [pc, #332]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	4a52      	ldr	r2, [pc, #328]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001a8e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a90:	4b50      	ldr	r3, [pc, #320]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	494d      	ldr	r1, [pc, #308]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d040      	beq.n	8001b30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d107      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab6:	4b47      	ldr	r3, [pc, #284]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d115      	bne.n	8001aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e07f      	b.n	8001bc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d107      	bne.n	8001ade <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ace:	4b41      	ldr	r3, [pc, #260]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d109      	bne.n	8001aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e073      	b.n	8001bc6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ade:	4b3d      	ldr	r3, [pc, #244]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e06b      	b.n	8001bc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aee:	4b39      	ldr	r3, [pc, #228]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f023 0203 	bic.w	r2, r3, #3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	4936      	ldr	r1, [pc, #216]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001afc:	4313      	orrs	r3, r2
 8001afe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b00:	f7fe ffc6 	bl	8000a90 <HAL_GetTick>
 8001b04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b06:	e00a      	b.n	8001b1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b08:	f7fe ffc2 	bl	8000a90 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e053      	b.n	8001bc6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b1e:	4b2d      	ldr	r3, [pc, #180]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f003 020c 	and.w	r2, r3, #12
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d1eb      	bne.n	8001b08 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b30:	4b27      	ldr	r3, [pc, #156]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d210      	bcs.n	8001b60 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b3e:	4b24      	ldr	r3, [pc, #144]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f023 0207 	bic.w	r2, r3, #7
 8001b46:	4922      	ldr	r1, [pc, #136]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b4e:	4b20      	ldr	r3, [pc, #128]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d001      	beq.n	8001b60 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e032      	b.n	8001bc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0304 	and.w	r3, r3, #4
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d008      	beq.n	8001b7e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b6c:	4b19      	ldr	r3, [pc, #100]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	4916      	ldr	r1, [pc, #88]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0308 	and.w	r3, r3, #8
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d009      	beq.n	8001b9e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b8a:	4b12      	ldr	r3, [pc, #72]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	490e      	ldr	r1, [pc, #56]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b9e:	f000 f821 	bl	8001be4 <HAL_RCC_GetSysClockFreq>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	091b      	lsrs	r3, r3, #4
 8001baa:	f003 030f 	and.w	r3, r3, #15
 8001bae:	490a      	ldr	r1, [pc, #40]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001bb0:	5ccb      	ldrb	r3, [r1, r3]
 8001bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb6:	4a09      	ldr	r2, [pc, #36]	@ (8001bdc <HAL_RCC_ClockConfig+0x1cc>)
 8001bb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bba:	4b09      	ldr	r3, [pc, #36]	@ (8001be0 <HAL_RCC_ClockConfig+0x1d0>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7fe ff24 	bl	8000a0c <HAL_InitTick>

  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40022000 	.word	0x40022000
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	08002ef0 	.word	0x08002ef0
 8001bdc:	20000000 	.word	0x20000000
 8001be0:	20000004 	.word	0x20000004

08001be4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b087      	sub	sp, #28
 8001be8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60bb      	str	r3, [r7, #8]
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001bfe:	4b1e      	ldr	r3, [pc, #120]	@ (8001c78 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f003 030c 	and.w	r3, r3, #12
 8001c0a:	2b04      	cmp	r3, #4
 8001c0c:	d002      	beq.n	8001c14 <HAL_RCC_GetSysClockFreq+0x30>
 8001c0e:	2b08      	cmp	r3, #8
 8001c10:	d003      	beq.n	8001c1a <HAL_RCC_GetSysClockFreq+0x36>
 8001c12:	e027      	b.n	8001c64 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c14:	4b19      	ldr	r3, [pc, #100]	@ (8001c7c <HAL_RCC_GetSysClockFreq+0x98>)
 8001c16:	613b      	str	r3, [r7, #16]
      break;
 8001c18:	e027      	b.n	8001c6a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	0c9b      	lsrs	r3, r3, #18
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	4a17      	ldr	r2, [pc, #92]	@ (8001c80 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c24:	5cd3      	ldrb	r3, [r2, r3]
 8001c26:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d010      	beq.n	8001c54 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c32:	4b11      	ldr	r3, [pc, #68]	@ (8001c78 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	0c5b      	lsrs	r3, r3, #17
 8001c38:	f003 0301 	and.w	r3, r3, #1
 8001c3c:	4a11      	ldr	r2, [pc, #68]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c3e:	5cd3      	ldrb	r3, [r2, r3]
 8001c40:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a0d      	ldr	r2, [pc, #52]	@ (8001c7c <HAL_RCC_GetSysClockFreq+0x98>)
 8001c46:	fb03 f202 	mul.w	r2, r3, r2
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c50:	617b      	str	r3, [r7, #20]
 8001c52:	e004      	b.n	8001c5e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4a0c      	ldr	r2, [pc, #48]	@ (8001c88 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c58:	fb02 f303 	mul.w	r3, r2, r3
 8001c5c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	613b      	str	r3, [r7, #16]
      break;
 8001c62:	e002      	b.n	8001c6a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c64:	4b05      	ldr	r3, [pc, #20]	@ (8001c7c <HAL_RCC_GetSysClockFreq+0x98>)
 8001c66:	613b      	str	r3, [r7, #16]
      break;
 8001c68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c6a:	693b      	ldr	r3, [r7, #16]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	371c      	adds	r7, #28
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bc80      	pop	{r7}
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	007a1200 	.word	0x007a1200
 8001c80:	08002f00 	.word	0x08002f00
 8001c84:	08002f10 	.word	0x08002f10
 8001c88:	003d0900 	.word	0x003d0900

08001c8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c94:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc0 <RCC_Delay+0x34>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc4 <RCC_Delay+0x38>)
 8001c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c9e:	0a5b      	lsrs	r3, r3, #9
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	fb02 f303 	mul.w	r3, r2, r3
 8001ca6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ca8:	bf00      	nop
  }
  while (Delay --);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	1e5a      	subs	r2, r3, #1
 8001cae:	60fa      	str	r2, [r7, #12]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1f9      	bne.n	8001ca8 <RCC_Delay+0x1c>
}
 8001cb4:	bf00      	nop
 8001cb6:	bf00      	nop
 8001cb8:	3714      	adds	r7, #20
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr
 8001cc0:	20000000 	.word	0x20000000
 8001cc4:	10624dd3 	.word	0x10624dd3

08001cc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e041      	b.n	8001d5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d106      	bne.n	8001cf4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7fe fd96 	bl	8000820 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3304      	adds	r3, #4
 8001d04:	4619      	mov	r1, r3
 8001d06:	4610      	mov	r0, r2
 8001d08:	f000 fd5a 	bl	80027c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b082      	sub	sp, #8
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d101      	bne.n	8001d78 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e041      	b.n	8001dfc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d106      	bne.n	8001d92 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 f839 	bl	8001e04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2202      	movs	r2, #2
 8001d96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	3304      	adds	r3, #4
 8001da2:	4619      	mov	r1, r3
 8001da4:	4610      	mov	r0, r2
 8001da6:	f000 fd0b 	bl	80027c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2201      	movs	r2, #1
 8001dae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2201      	movs	r2, #1
 8001db6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2201      	movs	r2, #1
 8001dee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bc80      	pop	{r7}
 8001e14:	4770      	bx	lr
	...

08001e18 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
 8001e24:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8001e26:	2300      	movs	r3, #0
 8001e28:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d109      	bne.n	8001e44 <HAL_TIM_PWM_Start_DMA+0x2c>
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	bf0c      	ite	eq
 8001e3c:	2301      	moveq	r3, #1
 8001e3e:	2300      	movne	r3, #0
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	e022      	b.n	8001e8a <HAL_TIM_PWM_Start_DMA+0x72>
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	d109      	bne.n	8001e5e <HAL_TIM_PWM_Start_DMA+0x46>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	bf0c      	ite	eq
 8001e56:	2301      	moveq	r3, #1
 8001e58:	2300      	movne	r3, #0
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	e015      	b.n	8001e8a <HAL_TIM_PWM_Start_DMA+0x72>
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	2b08      	cmp	r3, #8
 8001e62:	d109      	bne.n	8001e78 <HAL_TIM_PWM_Start_DMA+0x60>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	bf0c      	ite	eq
 8001e70:	2301      	moveq	r3, #1
 8001e72:	2300      	movne	r3, #0
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	e008      	b.n	8001e8a <HAL_TIM_PWM_Start_DMA+0x72>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	bf0c      	ite	eq
 8001e84:	2301      	moveq	r3, #1
 8001e86:	2300      	movne	r3, #0
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8001e8e:	2302      	movs	r3, #2
 8001e90:	e153      	b.n	800213a <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d109      	bne.n	8001eac <HAL_TIM_PWM_Start_DMA+0x94>
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	bf0c      	ite	eq
 8001ea4:	2301      	moveq	r3, #1
 8001ea6:	2300      	movne	r3, #0
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	e022      	b.n	8001ef2 <HAL_TIM_PWM_Start_DMA+0xda>
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	d109      	bne.n	8001ec6 <HAL_TIM_PWM_Start_DMA+0xae>
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	bf0c      	ite	eq
 8001ebe:	2301      	moveq	r3, #1
 8001ec0:	2300      	movne	r3, #0
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	e015      	b.n	8001ef2 <HAL_TIM_PWM_Start_DMA+0xda>
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	2b08      	cmp	r3, #8
 8001eca:	d109      	bne.n	8001ee0 <HAL_TIM_PWM_Start_DMA+0xc8>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	bf0c      	ite	eq
 8001ed8:	2301      	moveq	r3, #1
 8001eda:	2300      	movne	r3, #0
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	e008      	b.n	8001ef2 <HAL_TIM_PWM_Start_DMA+0xda>
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	bf0c      	ite	eq
 8001eec:	2301      	moveq	r3, #1
 8001eee:	2300      	movne	r3, #0
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d024      	beq.n	8001f40 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d002      	beq.n	8001f02 <HAL_TIM_PWM_Start_DMA+0xea>
 8001efc:	887b      	ldrh	r3, [r7, #2]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e119      	b.n	800213a <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d104      	bne.n	8001f16 <HAL_TIM_PWM_Start_DMA+0xfe>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2202      	movs	r2, #2
 8001f10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f14:	e016      	b.n	8001f44 <HAL_TIM_PWM_Start_DMA+0x12c>
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	2b04      	cmp	r3, #4
 8001f1a:	d104      	bne.n	8001f26 <HAL_TIM_PWM_Start_DMA+0x10e>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2202      	movs	r2, #2
 8001f20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f24:	e00e      	b.n	8001f44 <HAL_TIM_PWM_Start_DMA+0x12c>
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	2b08      	cmp	r3, #8
 8001f2a:	d104      	bne.n	8001f36 <HAL_TIM_PWM_Start_DMA+0x11e>
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2202      	movs	r2, #2
 8001f30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f34:	e006      	b.n	8001f44 <HAL_TIM_PWM_Start_DMA+0x12c>
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2202      	movs	r2, #2
 8001f3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001f3e:	e001      	b.n	8001f44 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e0fa      	b.n	800213a <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	2b0c      	cmp	r3, #12
 8001f48:	f200 80ae 	bhi.w	80020a8 <HAL_TIM_PWM_Start_DMA+0x290>
 8001f4c:	a201      	add	r2, pc, #4	@ (adr r2, 8001f54 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8001f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f52:	bf00      	nop
 8001f54:	08001f89 	.word	0x08001f89
 8001f58:	080020a9 	.word	0x080020a9
 8001f5c:	080020a9 	.word	0x080020a9
 8001f60:	080020a9 	.word	0x080020a9
 8001f64:	08001fd1 	.word	0x08001fd1
 8001f68:	080020a9 	.word	0x080020a9
 8001f6c:	080020a9 	.word	0x080020a9
 8001f70:	080020a9 	.word	0x080020a9
 8001f74:	08002019 	.word	0x08002019
 8001f78:	080020a9 	.word	0x080020a9
 8001f7c:	080020a9 	.word	0x080020a9
 8001f80:	080020a9 	.word	0x080020a9
 8001f84:	08002061 	.word	0x08002061
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f8c:	4a6d      	ldr	r2, [pc, #436]	@ (8002144 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8001f8e:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f94:	4a6c      	ldr	r2, [pc, #432]	@ (8002148 <HAL_TIM_PWM_Start_DMA+0x330>)
 8001f96:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f9c:	4a6b      	ldr	r2, [pc, #428]	@ (800214c <HAL_TIM_PWM_Start_DMA+0x334>)
 8001f9e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8001fa4:	6879      	ldr	r1, [r7, #4]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	3334      	adds	r3, #52	@ 0x34
 8001fac:	461a      	mov	r2, r3
 8001fae:	887b      	ldrh	r3, [r7, #2]
 8001fb0:	f7fe ff04 	bl	8000dbc <HAL_DMA_Start_IT>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e0bd      	b.n	800213a <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68da      	ldr	r2, [r3, #12]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fcc:	60da      	str	r2, [r3, #12]
      break;
 8001fce:	e06e      	b.n	80020ae <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd4:	4a5b      	ldr	r2, [pc, #364]	@ (8002144 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8001fd6:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fdc:	4a5a      	ldr	r2, [pc, #360]	@ (8002148 <HAL_TIM_PWM_Start_DMA+0x330>)
 8001fde:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe4:	4a59      	ldr	r2, [pc, #356]	@ (800214c <HAL_TIM_PWM_Start_DMA+0x334>)
 8001fe6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001fec:	6879      	ldr	r1, [r7, #4]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	3338      	adds	r3, #56	@ 0x38
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	887b      	ldrh	r3, [r7, #2]
 8001ff8:	f7fe fee0 	bl	8000dbc <HAL_DMA_Start_IT>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e099      	b.n	800213a <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68da      	ldr	r2, [r3, #12]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002014:	60da      	str	r2, [r3, #12]
      break;
 8002016:	e04a      	b.n	80020ae <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800201c:	4a49      	ldr	r2, [pc, #292]	@ (8002144 <HAL_TIM_PWM_Start_DMA+0x32c>)
 800201e:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002024:	4a48      	ldr	r2, [pc, #288]	@ (8002148 <HAL_TIM_PWM_Start_DMA+0x330>)
 8002026:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800202c:	4a47      	ldr	r2, [pc, #284]	@ (800214c <HAL_TIM_PWM_Start_DMA+0x334>)
 800202e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002034:	6879      	ldr	r1, [r7, #4]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	333c      	adds	r3, #60	@ 0x3c
 800203c:	461a      	mov	r2, r3
 800203e:	887b      	ldrh	r3, [r7, #2]
 8002040:	f7fe febc 	bl	8000dbc <HAL_DMA_Start_IT>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e075      	b.n	800213a <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68da      	ldr	r2, [r3, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800205c:	60da      	str	r2, [r3, #12]
      break;
 800205e:	e026      	b.n	80020ae <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002064:	4a37      	ldr	r2, [pc, #220]	@ (8002144 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002066:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206c:	4a36      	ldr	r2, [pc, #216]	@ (8002148 <HAL_TIM_PWM_Start_DMA+0x330>)
 800206e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002074:	4a35      	ldr	r2, [pc, #212]	@ (800214c <HAL_TIM_PWM_Start_DMA+0x334>)
 8002076:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800207c:	6879      	ldr	r1, [r7, #4]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	3340      	adds	r3, #64	@ 0x40
 8002084:	461a      	mov	r2, r3
 8002086:	887b      	ldrh	r3, [r7, #2]
 8002088:	f7fe fe98 	bl	8000dbc <HAL_DMA_Start_IT>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e051      	b.n	800213a <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80020a4:	60da      	str	r2, [r3, #12]
      break;
 80020a6:	e002      	b.n	80020ae <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	75fb      	strb	r3, [r7, #23]
      break;
 80020ac:	bf00      	nop
  }

  if (status == HAL_OK)
 80020ae:	7dfb      	ldrb	r3, [r7, #23]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d141      	bne.n	8002138 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2201      	movs	r2, #1
 80020ba:	68b9      	ldr	r1, [r7, #8]
 80020bc:	4618      	mov	r0, r3
 80020be:	f000 fe0b 	bl	8002cd8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a22      	ldr	r2, [pc, #136]	@ (8002150 <HAL_TIM_PWM_Start_DMA+0x338>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d107      	bne.n	80020dc <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80020da:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a1b      	ldr	r2, [pc, #108]	@ (8002150 <HAL_TIM_PWM_Start_DMA+0x338>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d00e      	beq.n	8002104 <HAL_TIM_PWM_Start_DMA+0x2ec>
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020ee:	d009      	beq.n	8002104 <HAL_TIM_PWM_Start_DMA+0x2ec>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a17      	ldr	r2, [pc, #92]	@ (8002154 <HAL_TIM_PWM_Start_DMA+0x33c>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d004      	beq.n	8002104 <HAL_TIM_PWM_Start_DMA+0x2ec>
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a16      	ldr	r2, [pc, #88]	@ (8002158 <HAL_TIM_PWM_Start_DMA+0x340>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d111      	bne.n	8002128 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	2b06      	cmp	r3, #6
 8002114:	d010      	beq.n	8002138 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f042 0201 	orr.w	r2, r2, #1
 8002124:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002126:	e007      	b.n	8002138 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f042 0201 	orr.w	r2, r2, #1
 8002136:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002138:	7dfb      	ldrb	r3, [r7, #23]
}
 800213a:	4618      	mov	r0, r3
 800213c:	3718      	adds	r7, #24
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	080026b1 	.word	0x080026b1
 8002148:	08002759 	.word	0x08002759
 800214c:	0800261f 	.word	0x0800261f
 8002150:	40012c00 	.word	0x40012c00
 8002154:	40000400 	.word	0x40000400
 8002158:	40000800 	.word	0x40000800

0800215c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002166:	2300      	movs	r3, #0
 8002168:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	2b0c      	cmp	r3, #12
 800216e:	d855      	bhi.n	800221c <HAL_TIM_PWM_Stop_DMA+0xc0>
 8002170:	a201      	add	r2, pc, #4	@ (adr r2, 8002178 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8002172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002176:	bf00      	nop
 8002178:	080021ad 	.word	0x080021ad
 800217c:	0800221d 	.word	0x0800221d
 8002180:	0800221d 	.word	0x0800221d
 8002184:	0800221d 	.word	0x0800221d
 8002188:	080021c9 	.word	0x080021c9
 800218c:	0800221d 	.word	0x0800221d
 8002190:	0800221d 	.word	0x0800221d
 8002194:	0800221d 	.word	0x0800221d
 8002198:	080021e5 	.word	0x080021e5
 800219c:	0800221d 	.word	0x0800221d
 80021a0:	0800221d 	.word	0x0800221d
 80021a4:	0800221d 	.word	0x0800221d
 80021a8:	08002201 	.word	0x08002201
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68da      	ldr	r2, [r3, #12]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80021ba:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7fe fe5b 	bl	8000e7c <HAL_DMA_Abort_IT>
      break;
 80021c6:	e02c      	b.n	8002222 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68da      	ldr	r2, [r3, #12]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021d6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021dc:	4618      	mov	r0, r3
 80021de:	f7fe fe4d 	bl	8000e7c <HAL_DMA_Abort_IT>
      break;
 80021e2:	e01e      	b.n	8002222 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68da      	ldr	r2, [r3, #12]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021f2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7fe fe3f 	bl	8000e7c <HAL_DMA_Abort_IT>
      break;
 80021fe:	e010      	b.n	8002222 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68da      	ldr	r2, [r3, #12]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800220e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002214:	4618      	mov	r0, r3
 8002216:	f7fe fe31 	bl	8000e7c <HAL_DMA_Abort_IT>
      break;
 800221a:	e002      	b.n	8002222 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	73fb      	strb	r3, [r7, #15]
      break;
 8002220:	bf00      	nop
  }

  if (status == HAL_OK)
 8002222:	7bfb      	ldrb	r3, [r7, #15]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d157      	bne.n	80022d8 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2200      	movs	r2, #0
 800222e:	6839      	ldr	r1, [r7, #0]
 8002230:	4618      	mov	r0, r3
 8002232:	f000 fd51 	bl	8002cd8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a2a      	ldr	r2, [pc, #168]	@ (80022e4 <HAL_TIM_PWM_Stop_DMA+0x188>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d117      	bne.n	8002270 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6a1a      	ldr	r2, [r3, #32]
 8002246:	f241 1311 	movw	r3, #4369	@ 0x1111
 800224a:	4013      	ands	r3, r2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d10f      	bne.n	8002270 <HAL_TIM_PWM_Stop_DMA+0x114>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6a1a      	ldr	r2, [r3, #32]
 8002256:	f240 4344 	movw	r3, #1092	@ 0x444
 800225a:	4013      	ands	r3, r2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d107      	bne.n	8002270 <HAL_TIM_PWM_Stop_DMA+0x114>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800226e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6a1a      	ldr	r2, [r3, #32]
 8002276:	f241 1311 	movw	r3, #4369	@ 0x1111
 800227a:	4013      	ands	r3, r2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d10f      	bne.n	80022a0 <HAL_TIM_PWM_Stop_DMA+0x144>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6a1a      	ldr	r2, [r3, #32]
 8002286:	f240 4344 	movw	r3, #1092	@ 0x444
 800228a:	4013      	ands	r3, r2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d107      	bne.n	80022a0 <HAL_TIM_PWM_Stop_DMA+0x144>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0201 	bic.w	r2, r2, #1
 800229e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d104      	bne.n	80022b0 <HAL_TIM_PWM_Stop_DMA+0x154>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80022ae:	e013      	b.n	80022d8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	d104      	bne.n	80022c0 <HAL_TIM_PWM_Stop_DMA+0x164>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80022be:	e00b      	b.n	80022d8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	2b08      	cmp	r3, #8
 80022c4:	d104      	bne.n	80022d0 <HAL_TIM_PWM_Stop_DMA+0x174>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80022ce:	e003      	b.n	80022d8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 80022d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40012c00 	.word	0x40012c00

080022e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022f4:	2300      	movs	r3, #0
 80022f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d101      	bne.n	8002306 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002302:	2302      	movs	r3, #2
 8002304:	e0ae      	b.n	8002464 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2201      	movs	r2, #1
 800230a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b0c      	cmp	r3, #12
 8002312:	f200 809f 	bhi.w	8002454 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002316:	a201      	add	r2, pc, #4	@ (adr r2, 800231c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800231c:	08002351 	.word	0x08002351
 8002320:	08002455 	.word	0x08002455
 8002324:	08002455 	.word	0x08002455
 8002328:	08002455 	.word	0x08002455
 800232c:	08002391 	.word	0x08002391
 8002330:	08002455 	.word	0x08002455
 8002334:	08002455 	.word	0x08002455
 8002338:	08002455 	.word	0x08002455
 800233c:	080023d3 	.word	0x080023d3
 8002340:	08002455 	.word	0x08002455
 8002344:	08002455 	.word	0x08002455
 8002348:	08002455 	.word	0x08002455
 800234c:	08002413 	.word	0x08002413
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68b9      	ldr	r1, [r7, #8]
 8002356:	4618      	mov	r0, r3
 8002358:	f000 faa0 	bl	800289c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	699a      	ldr	r2, [r3, #24]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0208 	orr.w	r2, r2, #8
 800236a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	699a      	ldr	r2, [r3, #24]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 0204 	bic.w	r2, r2, #4
 800237a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6999      	ldr	r1, [r3, #24]
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	691a      	ldr	r2, [r3, #16]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	430a      	orrs	r2, r1
 800238c:	619a      	str	r2, [r3, #24]
      break;
 800238e:	e064      	b.n	800245a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68b9      	ldr	r1, [r7, #8]
 8002396:	4618      	mov	r0, r3
 8002398:	f000 fae6 	bl	8002968 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	699a      	ldr	r2, [r3, #24]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	699a      	ldr	r2, [r3, #24]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6999      	ldr	r1, [r3, #24]
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	021a      	lsls	r2, r3, #8
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	430a      	orrs	r2, r1
 80023ce:	619a      	str	r2, [r3, #24]
      break;
 80023d0:	e043      	b.n	800245a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68b9      	ldr	r1, [r7, #8]
 80023d8:	4618      	mov	r0, r3
 80023da:	f000 fb2f 	bl	8002a3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	69da      	ldr	r2, [r3, #28]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f042 0208 	orr.w	r2, r2, #8
 80023ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	69da      	ldr	r2, [r3, #28]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f022 0204 	bic.w	r2, r2, #4
 80023fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	69d9      	ldr	r1, [r3, #28]
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	691a      	ldr	r2, [r3, #16]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	430a      	orrs	r2, r1
 800240e:	61da      	str	r2, [r3, #28]
      break;
 8002410:	e023      	b.n	800245a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68b9      	ldr	r1, [r7, #8]
 8002418:	4618      	mov	r0, r3
 800241a:	f000 fb79 	bl	8002b10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	69da      	ldr	r2, [r3, #28]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800242c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	69da      	ldr	r2, [r3, #28]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800243c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	69d9      	ldr	r1, [r3, #28]
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	021a      	lsls	r2, r3, #8
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	430a      	orrs	r2, r1
 8002450:	61da      	str	r2, [r3, #28]
      break;
 8002452:	e002      	b.n	800245a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	75fb      	strb	r3, [r7, #23]
      break;
 8002458:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002462:	7dfb      	ldrb	r3, [r7, #23]
}
 8002464:	4618      	mov	r0, r3
 8002466:	3718      	adds	r7, #24
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002476:	2300      	movs	r3, #0
 8002478:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002480:	2b01      	cmp	r3, #1
 8002482:	d101      	bne.n	8002488 <HAL_TIM_ConfigClockSource+0x1c>
 8002484:	2302      	movs	r3, #2
 8002486:	e0b4      	b.n	80025f2 <HAL_TIM_ConfigClockSource+0x186>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2202      	movs	r2, #2
 8002494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80024a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80024ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68ba      	ldr	r2, [r7, #8]
 80024b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024c0:	d03e      	beq.n	8002540 <HAL_TIM_ConfigClockSource+0xd4>
 80024c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024c6:	f200 8087 	bhi.w	80025d8 <HAL_TIM_ConfigClockSource+0x16c>
 80024ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024ce:	f000 8086 	beq.w	80025de <HAL_TIM_ConfigClockSource+0x172>
 80024d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024d6:	d87f      	bhi.n	80025d8 <HAL_TIM_ConfigClockSource+0x16c>
 80024d8:	2b70      	cmp	r3, #112	@ 0x70
 80024da:	d01a      	beq.n	8002512 <HAL_TIM_ConfigClockSource+0xa6>
 80024dc:	2b70      	cmp	r3, #112	@ 0x70
 80024de:	d87b      	bhi.n	80025d8 <HAL_TIM_ConfigClockSource+0x16c>
 80024e0:	2b60      	cmp	r3, #96	@ 0x60
 80024e2:	d050      	beq.n	8002586 <HAL_TIM_ConfigClockSource+0x11a>
 80024e4:	2b60      	cmp	r3, #96	@ 0x60
 80024e6:	d877      	bhi.n	80025d8 <HAL_TIM_ConfigClockSource+0x16c>
 80024e8:	2b50      	cmp	r3, #80	@ 0x50
 80024ea:	d03c      	beq.n	8002566 <HAL_TIM_ConfigClockSource+0xfa>
 80024ec:	2b50      	cmp	r3, #80	@ 0x50
 80024ee:	d873      	bhi.n	80025d8 <HAL_TIM_ConfigClockSource+0x16c>
 80024f0:	2b40      	cmp	r3, #64	@ 0x40
 80024f2:	d058      	beq.n	80025a6 <HAL_TIM_ConfigClockSource+0x13a>
 80024f4:	2b40      	cmp	r3, #64	@ 0x40
 80024f6:	d86f      	bhi.n	80025d8 <HAL_TIM_ConfigClockSource+0x16c>
 80024f8:	2b30      	cmp	r3, #48	@ 0x30
 80024fa:	d064      	beq.n	80025c6 <HAL_TIM_ConfigClockSource+0x15a>
 80024fc:	2b30      	cmp	r3, #48	@ 0x30
 80024fe:	d86b      	bhi.n	80025d8 <HAL_TIM_ConfigClockSource+0x16c>
 8002500:	2b20      	cmp	r3, #32
 8002502:	d060      	beq.n	80025c6 <HAL_TIM_ConfigClockSource+0x15a>
 8002504:	2b20      	cmp	r3, #32
 8002506:	d867      	bhi.n	80025d8 <HAL_TIM_ConfigClockSource+0x16c>
 8002508:	2b00      	cmp	r3, #0
 800250a:	d05c      	beq.n	80025c6 <HAL_TIM_ConfigClockSource+0x15a>
 800250c:	2b10      	cmp	r3, #16
 800250e:	d05a      	beq.n	80025c6 <HAL_TIM_ConfigClockSource+0x15a>
 8002510:	e062      	b.n	80025d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002522:	f000 fbba 	bl	8002c9a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002534:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68ba      	ldr	r2, [r7, #8]
 800253c:	609a      	str	r2, [r3, #8]
      break;
 800253e:	e04f      	b.n	80025e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002550:	f000 fba3 	bl	8002c9a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689a      	ldr	r2, [r3, #8]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002562:	609a      	str	r2, [r3, #8]
      break;
 8002564:	e03c      	b.n	80025e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002572:	461a      	mov	r2, r3
 8002574:	f000 fb1a 	bl	8002bac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2150      	movs	r1, #80	@ 0x50
 800257e:	4618      	mov	r0, r3
 8002580:	f000 fb71 	bl	8002c66 <TIM_ITRx_SetConfig>
      break;
 8002584:	e02c      	b.n	80025e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002592:	461a      	mov	r2, r3
 8002594:	f000 fb38 	bl	8002c08 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2160      	movs	r1, #96	@ 0x60
 800259e:	4618      	mov	r0, r3
 80025a0:	f000 fb61 	bl	8002c66 <TIM_ITRx_SetConfig>
      break;
 80025a4:	e01c      	b.n	80025e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025b2:	461a      	mov	r2, r3
 80025b4:	f000 fafa 	bl	8002bac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2140      	movs	r1, #64	@ 0x40
 80025be:	4618      	mov	r0, r3
 80025c0:	f000 fb51 	bl	8002c66 <TIM_ITRx_SetConfig>
      break;
 80025c4:	e00c      	b.n	80025e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4619      	mov	r1, r3
 80025d0:	4610      	mov	r0, r2
 80025d2:	f000 fb48 	bl	8002c66 <TIM_ITRx_SetConfig>
      break;
 80025d6:	e003      	b.n	80025e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	73fb      	strb	r3, [r7, #15]
      break;
 80025dc:	e000      	b.n	80025e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80025de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr

0800260c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	bc80      	pop	{r7}
 800261c:	4770      	bx	lr

0800261e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b084      	sub	sp, #16
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800262a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	429a      	cmp	r2, r3
 8002634:	d107      	bne.n	8002646 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2201      	movs	r2, #1
 800263a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002644:	e02a      	b.n	800269c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	429a      	cmp	r2, r3
 800264e:	d107      	bne.n	8002660 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2202      	movs	r2, #2
 8002654:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2201      	movs	r2, #1
 800265a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800265e:	e01d      	b.n	800269c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	429a      	cmp	r2, r3
 8002668:	d107      	bne.n	800267a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2204      	movs	r2, #4
 800266e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002678:	e010      	b.n	800269c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	429a      	cmp	r2, r3
 8002682:	d107      	bne.n	8002694 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2208      	movs	r2, #8
 8002688:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002692:	e003      	b.n	800269c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f7ff ffb5 	bl	800260c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	771a      	strb	r2, [r3, #28]
}
 80026a8:	bf00      	nop
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026bc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d10b      	bne.n	80026e0 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2201      	movs	r2, #1
 80026cc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d136      	bne.n	8002744 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80026de:	e031      	b.n	8002744 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d10b      	bne.n	8002702 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2202      	movs	r2, #2
 80026ee:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d125      	bne.n	8002744 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002700:	e020      	b.n	8002744 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	429a      	cmp	r2, r3
 800270a:	d10b      	bne.n	8002724 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2204      	movs	r2, #4
 8002710:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d114      	bne.n	8002744 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002722:	e00f      	b.n	8002744 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	429a      	cmp	r2, r3
 800272c:	d10a      	bne.n	8002744 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2208      	movs	r2, #8
 8002732:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d103      	bne.n	8002744 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	f7fd fd01 	bl	800014c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	771a      	strb	r2, [r3, #28]
}
 8002750:	bf00      	nop
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002764:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	429a      	cmp	r2, r3
 800276e:	d103      	bne.n	8002778 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2201      	movs	r2, #1
 8002774:	771a      	strb	r2, [r3, #28]
 8002776:	e019      	b.n	80027ac <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	429a      	cmp	r2, r3
 8002780:	d103      	bne.n	800278a <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2202      	movs	r2, #2
 8002786:	771a      	strb	r2, [r3, #28]
 8002788:	e010      	b.n	80027ac <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	429a      	cmp	r2, r3
 8002792:	d103      	bne.n	800279c <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2204      	movs	r2, #4
 8002798:	771a      	strb	r2, [r3, #28]
 800279a:	e007      	b.n	80027ac <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d102      	bne.n	80027ac <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2208      	movs	r2, #8
 80027aa:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f7ff ff24 	bl	80025fa <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	771a      	strb	r2, [r3, #28]
}
 80027b8:	bf00      	nop
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4a2f      	ldr	r2, [pc, #188]	@ (8002890 <TIM_Base_SetConfig+0xd0>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d00b      	beq.n	80027f0 <TIM_Base_SetConfig+0x30>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027de:	d007      	beq.n	80027f0 <TIM_Base_SetConfig+0x30>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a2c      	ldr	r2, [pc, #176]	@ (8002894 <TIM_Base_SetConfig+0xd4>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d003      	beq.n	80027f0 <TIM_Base_SetConfig+0x30>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a2b      	ldr	r2, [pc, #172]	@ (8002898 <TIM_Base_SetConfig+0xd8>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d108      	bne.n	8002802 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	4313      	orrs	r3, r2
 8002800:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a22      	ldr	r2, [pc, #136]	@ (8002890 <TIM_Base_SetConfig+0xd0>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d00b      	beq.n	8002822 <TIM_Base_SetConfig+0x62>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002810:	d007      	beq.n	8002822 <TIM_Base_SetConfig+0x62>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a1f      	ldr	r2, [pc, #124]	@ (8002894 <TIM_Base_SetConfig+0xd4>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d003      	beq.n	8002822 <TIM_Base_SetConfig+0x62>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a1e      	ldr	r2, [pc, #120]	@ (8002898 <TIM_Base_SetConfig+0xd8>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d108      	bne.n	8002834 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002828:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	4313      	orrs	r3, r2
 8002832:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	4313      	orrs	r3, r2
 8002840:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	689a      	ldr	r2, [r3, #8]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a0d      	ldr	r2, [pc, #52]	@ (8002890 <TIM_Base_SetConfig+0xd0>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d103      	bne.n	8002868 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	691a      	ldr	r2, [r3, #16]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	d005      	beq.n	8002886 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	f023 0201 	bic.w	r2, r3, #1
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	611a      	str	r2, [r3, #16]
  }
}
 8002886:	bf00      	nop
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr
 8002890:	40012c00 	.word	0x40012c00
 8002894:	40000400 	.word	0x40000400
 8002898:	40000800 	.word	0x40000800

0800289c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800289c:	b480      	push	{r7}
 800289e:	b087      	sub	sp, #28
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	f023 0201 	bic.w	r2, r3, #1
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f023 0303 	bic.w	r3, r3, #3
 80028d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	4313      	orrs	r3, r2
 80028dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f023 0302 	bic.w	r3, r3, #2
 80028e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a1c      	ldr	r2, [pc, #112]	@ (8002964 <TIM_OC1_SetConfig+0xc8>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d10c      	bne.n	8002912 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	f023 0308 	bic.w	r3, r3, #8
 80028fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	4313      	orrs	r3, r2
 8002908:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	f023 0304 	bic.w	r3, r3, #4
 8002910:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a13      	ldr	r2, [pc, #76]	@ (8002964 <TIM_OC1_SetConfig+0xc8>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d111      	bne.n	800293e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002920:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002928:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	4313      	orrs	r3, r2
 8002932:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	4313      	orrs	r3, r2
 800293c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	621a      	str	r2, [r3, #32]
}
 8002958:	bf00      	nop
 800295a:	371c      	adds	r7, #28
 800295c:	46bd      	mov	sp, r7
 800295e:	bc80      	pop	{r7}
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	40012c00 	.word	0x40012c00

08002968 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002968:	b480      	push	{r7}
 800296a:	b087      	sub	sp, #28
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	f023 0210 	bic.w	r2, r3, #16
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800299e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	021b      	lsls	r3, r3, #8
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	f023 0320 	bic.w	r3, r3, #32
 80029b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	011b      	lsls	r3, r3, #4
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	4313      	orrs	r3, r2
 80029be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a1d      	ldr	r2, [pc, #116]	@ (8002a38 <TIM_OC2_SetConfig+0xd0>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d10d      	bne.n	80029e4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80029ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	011b      	lsls	r3, r3, #4
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	4313      	orrs	r3, r2
 80029da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80029e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a14      	ldr	r2, [pc, #80]	@ (8002a38 <TIM_OC2_SetConfig+0xd0>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d113      	bne.n	8002a14 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80029f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80029fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	621a      	str	r2, [r3, #32]
}
 8002a2e:	bf00      	nop
 8002a30:	371c      	adds	r7, #28
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr
 8002a38:	40012c00 	.word	0x40012c00

08002a3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b087      	sub	sp, #28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f023 0303 	bic.w	r3, r3, #3
 8002a72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002a84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	021b      	lsls	r3, r3, #8
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a1d      	ldr	r2, [pc, #116]	@ (8002b0c <TIM_OC3_SetConfig+0xd0>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d10d      	bne.n	8002ab6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002aa0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	021b      	lsls	r3, r3, #8
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002ab4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a14      	ldr	r2, [pc, #80]	@ (8002b0c <TIM_OC3_SetConfig+0xd0>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d113      	bne.n	8002ae6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002ac4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002acc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	011b      	lsls	r3, r3, #4
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	621a      	str	r2, [r3, #32]
}
 8002b00:	bf00      	nop
 8002b02:	371c      	adds	r7, #28
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bc80      	pop	{r7}
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	40012c00 	.word	0x40012c00

08002b10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b087      	sub	sp, #28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	021b      	lsls	r3, r3, #8
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002b5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	031b      	lsls	r3, r3, #12
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a0f      	ldr	r2, [pc, #60]	@ (8002ba8 <TIM_OC4_SetConfig+0x98>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d109      	bne.n	8002b84 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002b76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	019b      	lsls	r3, r3, #6
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	621a      	str	r2, [r3, #32]
}
 8002b9e:	bf00      	nop
 8002ba0:	371c      	adds	r7, #28
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bc80      	pop	{r7}
 8002ba6:	4770      	bx	lr
 8002ba8:	40012c00 	.word	0x40012c00

08002bac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b087      	sub	sp, #28
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	f023 0201 	bic.w	r2, r3, #1
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002bd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	011b      	lsls	r3, r3, #4
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	f023 030a 	bic.w	r3, r3, #10
 8002be8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	621a      	str	r2, [r3, #32]
}
 8002bfe:	bf00      	nop
 8002c00:	371c      	adds	r7, #28
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr

08002c08 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b087      	sub	sp, #28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	f023 0210 	bic.w	r2, r3, #16
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002c32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	031b      	lsls	r3, r3, #12
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002c44:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	011b      	lsls	r3, r3, #4
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	621a      	str	r2, [r3, #32]
}
 8002c5c:	bf00      	nop
 8002c5e:	371c      	adds	r7, #28
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bc80      	pop	{r7}
 8002c64:	4770      	bx	lr

08002c66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c66:	b480      	push	{r7}
 8002c68:	b085      	sub	sp, #20
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
 8002c6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	f043 0307 	orr.w	r3, r3, #7
 8002c88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	609a      	str	r2, [r3, #8]
}
 8002c90:	bf00      	nop
 8002c92:	3714      	adds	r7, #20
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bc80      	pop	{r7}
 8002c98:	4770      	bx	lr

08002c9a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b087      	sub	sp, #28
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	60f8      	str	r0, [r7, #12]
 8002ca2:	60b9      	str	r1, [r7, #8]
 8002ca4:	607a      	str	r2, [r7, #4]
 8002ca6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002cb4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	021a      	lsls	r2, r3, #8
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	609a      	str	r2, [r3, #8]
}
 8002cce:	bf00      	nop
 8002cd0:	371c      	adds	r7, #28
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr

08002cd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b087      	sub	sp, #28
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	f003 031f 	and.w	r3, r3, #31
 8002cea:	2201      	movs	r2, #1
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6a1a      	ldr	r2, [r3, #32]
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	401a      	ands	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6a1a      	ldr	r2, [r3, #32]
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f003 031f 	and.w	r3, r3, #31
 8002d0a:	6879      	ldr	r1, [r7, #4]
 8002d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d10:	431a      	orrs	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	621a      	str	r2, [r3, #32]
}
 8002d16:	bf00      	nop
 8002d18:	371c      	adds	r7, #28
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr

08002d20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d101      	bne.n	8002d38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d34:	2302      	movs	r3, #2
 8002d36:	e046      	b.n	8002dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2202      	movs	r2, #2
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a16      	ldr	r2, [pc, #88]	@ (8002dd0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d00e      	beq.n	8002d9a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d84:	d009      	beq.n	8002d9a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a12      	ldr	r2, [pc, #72]	@ (8002dd4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d004      	beq.n	8002d9a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a10      	ldr	r2, [pc, #64]	@ (8002dd8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d10c      	bne.n	8002db4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002da0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	68ba      	ldr	r2, [r7, #8]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68ba      	ldr	r2, [r7, #8]
 8002db2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3714      	adds	r7, #20
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bc80      	pop	{r7}
 8002dce:	4770      	bx	lr
 8002dd0:	40012c00 	.word	0x40012c00
 8002dd4:	40000400 	.word	0x40000400
 8002dd8:	40000800 	.word	0x40000800

08002ddc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002de6:	2300      	movs	r3, #0
 8002de8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d101      	bne.n	8002df8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002df4:	2302      	movs	r3, #2
 8002df6:	e03d      	b.n	8002e74 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3714      	adds	r7, #20
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bc80      	pop	{r7}
 8002e7c:	4770      	bx	lr

08002e7e <memset>:
 8002e7e:	4603      	mov	r3, r0
 8002e80:	4402      	add	r2, r0
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d100      	bne.n	8002e88 <memset+0xa>
 8002e86:	4770      	bx	lr
 8002e88:	f803 1b01 	strb.w	r1, [r3], #1
 8002e8c:	e7f9      	b.n	8002e82 <memset+0x4>
	...

08002e90 <__libc_init_array>:
 8002e90:	b570      	push	{r4, r5, r6, lr}
 8002e92:	2600      	movs	r6, #0
 8002e94:	4d0c      	ldr	r5, [pc, #48]	@ (8002ec8 <__libc_init_array+0x38>)
 8002e96:	4c0d      	ldr	r4, [pc, #52]	@ (8002ecc <__libc_init_array+0x3c>)
 8002e98:	1b64      	subs	r4, r4, r5
 8002e9a:	10a4      	asrs	r4, r4, #2
 8002e9c:	42a6      	cmp	r6, r4
 8002e9e:	d109      	bne.n	8002eb4 <__libc_init_array+0x24>
 8002ea0:	f000 f81a 	bl	8002ed8 <_init>
 8002ea4:	2600      	movs	r6, #0
 8002ea6:	4d0a      	ldr	r5, [pc, #40]	@ (8002ed0 <__libc_init_array+0x40>)
 8002ea8:	4c0a      	ldr	r4, [pc, #40]	@ (8002ed4 <__libc_init_array+0x44>)
 8002eaa:	1b64      	subs	r4, r4, r5
 8002eac:	10a4      	asrs	r4, r4, #2
 8002eae:	42a6      	cmp	r6, r4
 8002eb0:	d105      	bne.n	8002ebe <__libc_init_array+0x2e>
 8002eb2:	bd70      	pop	{r4, r5, r6, pc}
 8002eb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eb8:	4798      	blx	r3
 8002eba:	3601      	adds	r6, #1
 8002ebc:	e7ee      	b.n	8002e9c <__libc_init_array+0xc>
 8002ebe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ec2:	4798      	blx	r3
 8002ec4:	3601      	adds	r6, #1
 8002ec6:	e7f2      	b.n	8002eae <__libc_init_array+0x1e>
 8002ec8:	08002f14 	.word	0x08002f14
 8002ecc:	08002f14 	.word	0x08002f14
 8002ed0:	08002f14 	.word	0x08002f14
 8002ed4:	08002f18 	.word	0x08002f18

08002ed8 <_init>:
 8002ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eda:	bf00      	nop
 8002edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ede:	bc08      	pop	{r3}
 8002ee0:	469e      	mov	lr, r3
 8002ee2:	4770      	bx	lr

08002ee4 <_fini>:
 8002ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ee6:	bf00      	nop
 8002ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eea:	bc08      	pop	{r3}
 8002eec:	469e      	mov	lr, r3
 8002eee:	4770      	bx	lr
