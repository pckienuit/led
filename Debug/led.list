
led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e30  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002f3c  08002f3c  00003f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f60  08002f60  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002f60  08002f60  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002f60  08002f60  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f60  08002f60  00003f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002f64  08002f64  00003f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002f68  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e34  2000000c  08002f74  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e40  08002f74  00004e40  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000085b0  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001842  00000000  00000000  0000c5e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f8  00000000  00000000  0000de28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007b7  00000000  00000000  0000e820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017280  00000000  00000000  0000efd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000acec  00000000  00000000  00026257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087fa3  00000000  00000000  00030f43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b8ee6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000291c  00000000  00000000  000b8f2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000bb848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f24 	.word	0x08002f24

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002f24 	.word	0x08002f24

0800014c <HAL_TIM_PWM_PulseFinishedCallback>:
uint8_t LED_Data[MAX_LED][4];
uint8_t LED_Mod[MAX_LED][4];

int datasentflag = 0;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8000154:	2100      	movs	r1, #0
 8000156:	4805      	ldr	r0, [pc, #20]	@ (800016c <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000158:	f002 f826 	bl	80021a8 <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;
 800015c:	4b04      	ldr	r3, [pc, #16]	@ (8000170 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 800015e:	2201      	movs	r2, #1
 8000160:	601a      	str	r2, [r3, #0]
}
 8000162:	bf00      	nop
 8000164:	3708      	adds	r7, #8
 8000166:	46bd      	mov	sp, r7
 8000168:	bd80      	pop	{r7, pc}
 800016a:	bf00      	nop
 800016c:	20000028 	.word	0x20000028
 8000170:	20000294 	.word	0x20000294

08000174 <Set_LED>:

void Set_LED (int LEDnum, int Red, int Green, int Blue) {
 8000174:	b480      	push	{r7}
 8000176:	b085      	sub	sp, #20
 8000178:	af00      	add	r7, sp, #0
 800017a:	60f8      	str	r0, [r7, #12]
 800017c:	60b9      	str	r1, [r7, #8]
 800017e:	607a      	str	r2, [r7, #4]
 8000180:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8000182:	68fb      	ldr	r3, [r7, #12]
 8000184:	b2d9      	uxtb	r1, r3
 8000186:	4a10      	ldr	r2, [pc, #64]	@ (80001c8 <Set_LED+0x54>)
 8000188:	68fb      	ldr	r3, [r7, #12]
 800018a:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	b2d9      	uxtb	r1, r3
 8000192:	4a0d      	ldr	r2, [pc, #52]	@ (80001c8 <Set_LED+0x54>)
 8000194:	68fb      	ldr	r3, [r7, #12]
 8000196:	009b      	lsls	r3, r3, #2
 8000198:	4413      	add	r3, r2
 800019a:	460a      	mov	r2, r1
 800019c:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 800019e:	68bb      	ldr	r3, [r7, #8]
 80001a0:	b2d9      	uxtb	r1, r3
 80001a2:	4a09      	ldr	r2, [pc, #36]	@ (80001c8 <Set_LED+0x54>)
 80001a4:	68fb      	ldr	r3, [r7, #12]
 80001a6:	009b      	lsls	r3, r3, #2
 80001a8:	4413      	add	r3, r2
 80001aa:	460a      	mov	r2, r1
 80001ac:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 80001ae:	683b      	ldr	r3, [r7, #0]
 80001b0:	b2d9      	uxtb	r1, r3
 80001b2:	4a05      	ldr	r2, [pc, #20]	@ (80001c8 <Set_LED+0x54>)
 80001b4:	68fb      	ldr	r3, [r7, #12]
 80001b6:	009b      	lsls	r3, r3, #2
 80001b8:	4413      	add	r3, r2
 80001ba:	460a      	mov	r2, r1
 80001bc:	70da      	strb	r2, [r3, #3]
}
 80001be:	bf00      	nop
 80001c0:	3714      	adds	r7, #20
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bc80      	pop	{r7}
 80001c6:	4770      	bx	lr
 80001c8:	200000b4 	.word	0x200000b4

080001cc <Set_Brightness>:
    }
}

#define PI 3.14159265

void Set_Brightness (int brightness) {
 80001cc:	b480      	push	{r7}
 80001ce:	b085      	sub	sp, #20
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if (brightness > 100) brightness = 100;
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	2b64      	cmp	r3, #100	@ 0x64
 80001d8:	dd01      	ble.n	80001de <Set_Brightness+0x12>
 80001da:	2364      	movs	r3, #100	@ 0x64
 80001dc:	607b      	str	r3, [r7, #4]
	if (brightness < 0) brightness = 0;
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	da01      	bge.n	80001e8 <Set_Brightness+0x1c>
 80001e4:	2300      	movs	r3, #0
 80001e6:	607b      	str	r3, [r7, #4]
	
	for (int i=0; i < MAX_LED; i++) {
 80001e8:	2300      	movs	r3, #0
 80001ea:	60fb      	str	r3, [r7, #12]
 80001ec:	e02d      	b.n	800024a <Set_Brightness+0x7e>
		LED_Mod[i][0] = LED_Data[i][0];
 80001ee:	4a1b      	ldr	r2, [pc, #108]	@ (800025c <Set_Brightness+0x90>)
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 80001f6:	4a1a      	ldr	r2, [pc, #104]	@ (8000260 <Set_Brightness+0x94>)
 80001f8:	68fb      	ldr	r3, [r7, #12]
 80001fa:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j = 1; j < 4; ++j) {
 80001fe:	2301      	movs	r3, #1
 8000200:	60bb      	str	r3, [r7, #8]
 8000202:	e01c      	b.n	800023e <Set_Brightness+0x72>
			// Simple percentage calculation: brightness from 0-100%
			LED_Mod[i][j] = (LED_Data[i][j] * brightness) / 100;
 8000204:	4a15      	ldr	r2, [pc, #84]	@ (800025c <Set_Brightness+0x90>)
 8000206:	68fb      	ldr	r3, [r7, #12]
 8000208:	009b      	lsls	r3, r3, #2
 800020a:	441a      	add	r2, r3
 800020c:	68bb      	ldr	r3, [r7, #8]
 800020e:	4413      	add	r3, r2
 8000210:	781b      	ldrb	r3, [r3, #0]
 8000212:	461a      	mov	r2, r3
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	fb02 f303 	mul.w	r3, r2, r3
 800021a:	4a12      	ldr	r2, [pc, #72]	@ (8000264 <Set_Brightness+0x98>)
 800021c:	fb82 1203 	smull	r1, r2, r2, r3
 8000220:	1152      	asrs	r2, r2, #5
 8000222:	17db      	asrs	r3, r3, #31
 8000224:	1ad3      	subs	r3, r2, r3
 8000226:	b2d9      	uxtb	r1, r3
 8000228:	4a0d      	ldr	r2, [pc, #52]	@ (8000260 <Set_Brightness+0x94>)
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	009b      	lsls	r3, r3, #2
 800022e:	441a      	add	r2, r3
 8000230:	68bb      	ldr	r3, [r7, #8]
 8000232:	4413      	add	r3, r2
 8000234:	460a      	mov	r2, r1
 8000236:	701a      	strb	r2, [r3, #0]
		for (int j = 1; j < 4; ++j) {
 8000238:	68bb      	ldr	r3, [r7, #8]
 800023a:	3301      	adds	r3, #1
 800023c:	60bb      	str	r3, [r7, #8]
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	2b03      	cmp	r3, #3
 8000242:	dddf      	ble.n	8000204 <Set_Brightness+0x38>
	for (int i=0; i < MAX_LED; i++) {
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	3301      	adds	r3, #1
 8000248:	60fb      	str	r3, [r7, #12]
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	2b3b      	cmp	r3, #59	@ 0x3b
 800024e:	ddce      	ble.n	80001ee <Set_Brightness+0x22>
		}
	}

#endif
}
 8000250:	bf00      	nop
 8000252:	bf00      	nop
 8000254:	3714      	adds	r7, #20
 8000256:	46bd      	mov	sp, r7
 8000258:	bc80      	pop	{r7}
 800025a:	4770      	bx	lr
 800025c:	200000b4 	.word	0x200000b4
 8000260:	200001a4 	.word	0x200001a4
 8000264:	51eb851f 	.word	0x51eb851f

08000268 <WS2812_Send>:
//
//	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, 24);
//}


void WS2812_Send (void) {
 8000268:	b580      	push	{r7, lr}
 800026a:	b086      	sub	sp, #24
 800026c:	af00      	add	r7, sp, #0
	uint32_t indx = 0;
 800026e:	2300      	movs	r3, #0
 8000270:	617b      	str	r3, [r7, #20]
	uint32_t color;

	for (int i = 0; i < MAX_LED; ++i) {
 8000272:	2300      	movs	r3, #0
 8000274:	613b      	str	r3, [r7, #16]
 8000276:	e036      	b.n	80002e6 <WS2812_Send+0x7e>
		color = ((LED_Mod[i][1] << 16) | (LED_Mod[i][2] << 8) | (LED_Mod[i][3]));
 8000278:	4a39      	ldr	r2, [pc, #228]	@ (8000360 <WS2812_Send+0xf8>)
 800027a:	693b      	ldr	r3, [r7, #16]
 800027c:	009b      	lsls	r3, r3, #2
 800027e:	4413      	add	r3, r2
 8000280:	785b      	ldrb	r3, [r3, #1]
 8000282:	041a      	lsls	r2, r3, #16
 8000284:	4936      	ldr	r1, [pc, #216]	@ (8000360 <WS2812_Send+0xf8>)
 8000286:	693b      	ldr	r3, [r7, #16]
 8000288:	009b      	lsls	r3, r3, #2
 800028a:	440b      	add	r3, r1
 800028c:	789b      	ldrb	r3, [r3, #2]
 800028e:	021b      	lsls	r3, r3, #8
 8000290:	431a      	orrs	r2, r3
 8000292:	4933      	ldr	r1, [pc, #204]	@ (8000360 <WS2812_Send+0xf8>)
 8000294:	693b      	ldr	r3, [r7, #16]
 8000296:	009b      	lsls	r3, r3, #2
 8000298:	440b      	add	r3, r1
 800029a:	78db      	ldrb	r3, [r3, #3]
 800029c:	4313      	orrs	r3, r2
 800029e:	603b      	str	r3, [r7, #0]

		for (int j = 23; j >= 0; j--) {
 80002a0:	2317      	movs	r3, #23
 80002a2:	60fb      	str	r3, [r7, #12]
 80002a4:	e019      	b.n	80002da <WS2812_Send+0x72>
			if (color&(1<<j)) {
 80002a6:	2201      	movs	r2, #1
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	fa02 f303 	lsl.w	r3, r2, r3
 80002ae:	461a      	mov	r2, r3
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	4013      	ands	r3, r2
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d005      	beq.n	80002c4 <WS2812_Send+0x5c>
				pwmData[indx] = 60;
 80002b8:	4a2a      	ldr	r2, [pc, #168]	@ (8000364 <WS2812_Send+0xfc>)
 80002ba:	697b      	ldr	r3, [r7, #20]
 80002bc:	213c      	movs	r1, #60	@ 0x3c
 80002be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80002c2:	e004      	b.n	80002ce <WS2812_Send+0x66>
			} else {
				pwmData[indx] = 30;
 80002c4:	4a27      	ldr	r2, [pc, #156]	@ (8000364 <WS2812_Send+0xfc>)
 80002c6:	697b      	ldr	r3, [r7, #20]
 80002c8:	211e      	movs	r1, #30
 80002ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}

			indx++;
 80002ce:	697b      	ldr	r3, [r7, #20]
 80002d0:	3301      	adds	r3, #1
 80002d2:	617b      	str	r3, [r7, #20]
		for (int j = 23; j >= 0; j--) {
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	3b01      	subs	r3, #1
 80002d8:	60fb      	str	r3, [r7, #12]
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	dae2      	bge.n	80002a6 <WS2812_Send+0x3e>
	for (int i = 0; i < MAX_LED; ++i) {
 80002e0:	693b      	ldr	r3, [r7, #16]
 80002e2:	3301      	adds	r3, #1
 80002e4:	613b      	str	r3, [r7, #16]
 80002e6:	693b      	ldr	r3, [r7, #16]
 80002e8:	2b3b      	cmp	r3, #59	@ 0x3b
 80002ea:	ddc5      	ble.n	8000278 <WS2812_Send+0x10>
		}
	}

	for (int i = 0; i < 50; ++i) {
 80002ec:	2300      	movs	r3, #0
 80002ee:	60bb      	str	r3, [r7, #8]
 80002f0:	e00a      	b.n	8000308 <WS2812_Send+0xa0>
		pwmData[indx] = 0;
 80002f2:	4a1c      	ldr	r2, [pc, #112]	@ (8000364 <WS2812_Send+0xfc>)
 80002f4:	697b      	ldr	r3, [r7, #20]
 80002f6:	2100      	movs	r1, #0
 80002f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 80002fc:	697b      	ldr	r3, [r7, #20]
 80002fe:	3301      	adds	r3, #1
 8000300:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 50; ++i) {
 8000302:	68bb      	ldr	r3, [r7, #8]
 8000304:	3301      	adds	r3, #1
 8000306:	60bb      	str	r3, [r7, #8]
 8000308:	68bb      	ldr	r3, [r7, #8]
 800030a:	2b31      	cmp	r3, #49	@ 0x31
 800030c:	ddf1      	ble.n	80002f2 <WS2812_Send+0x8a>
	}

	// Reset flag before starting DMA
	datasentflag = 0;
 800030e:	4b16      	ldr	r3, [pc, #88]	@ (8000368 <WS2812_Send+0x100>)
 8000310:	2200      	movs	r2, #0
 8000312:	601a      	str	r2, [r3, #0]
	
	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 8000314:	697b      	ldr	r3, [r7, #20]
 8000316:	b29b      	uxth	r3, r3
 8000318:	4a12      	ldr	r2, [pc, #72]	@ (8000364 <WS2812_Send+0xfc>)
 800031a:	2100      	movs	r1, #0
 800031c:	4813      	ldr	r0, [pc, #76]	@ (800036c <WS2812_Send+0x104>)
 800031e:	f001 fda1 	bl	8001e64 <HAL_TIM_PWM_Start_DMA>
	
	// Add timeout to prevent infinite loop
	uint32_t timeout = 1000000;  // Adjust timeout value
 8000322:	4b13      	ldr	r3, [pc, #76]	@ (8000370 <WS2812_Send+0x108>)
 8000324:	607b      	str	r3, [r7, #4]
	while(!datasentflag && timeout > 0) {
 8000326:	e002      	b.n	800032e <WS2812_Send+0xc6>
		timeout--;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	3b01      	subs	r3, #1
 800032c:	607b      	str	r3, [r7, #4]
	while(!datasentflag && timeout > 0) {
 800032e:	4b0e      	ldr	r3, [pc, #56]	@ (8000368 <WS2812_Send+0x100>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	2b00      	cmp	r3, #0
 8000334:	d102      	bne.n	800033c <WS2812_Send+0xd4>
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d1f5      	bne.n	8000328 <WS2812_Send+0xc0>
	}
	
	// Force stop if timeout occurred
	if (timeout == 0) {
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	2b00      	cmp	r3, #0
 8000340:	d106      	bne.n	8000350 <WS2812_Send+0xe8>
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8000342:	2100      	movs	r1, #0
 8000344:	4809      	ldr	r0, [pc, #36]	@ (800036c <WS2812_Send+0x104>)
 8000346:	f001 ff2f 	bl	80021a8 <HAL_TIM_PWM_Stop_DMA>
		datasentflag = 1;
 800034a:	4b07      	ldr	r3, [pc, #28]	@ (8000368 <WS2812_Send+0x100>)
 800034c:	2201      	movs	r2, #1
 800034e:	601a      	str	r2, [r3, #0]
	}
	
	datasentflag = 0;
 8000350:	4b05      	ldr	r3, [pc, #20]	@ (8000368 <WS2812_Send+0x100>)
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
}
 8000356:	bf00      	nop
 8000358:	3718      	adds	r7, #24
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	200001a4 	.word	0x200001a4
 8000364:	20000298 	.word	0x20000298
 8000368:	20000294 	.word	0x20000294
 800036c:	20000028 	.word	0x20000028
 8000370:	000f4240 	.word	0x000f4240

08000374 <Rainbow_Effect>:
		WS2812_Send();
		HAL_Delay(LED_DELAY/speed);
	}
}

void Rainbow_Effect (int speed) {
 8000374:	b580      	push	{r7, lr}
 8000376:	b08a      	sub	sp, #40	@ 0x28
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
	if (speed > 10) speed = 10;
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	2b0a      	cmp	r3, #10
 8000380:	dd01      	ble.n	8000386 <Rainbow_Effect+0x12>
 8000382:	230a      	movs	r3, #10
 8000384:	607b      	str	r3, [r7, #4]
	if (speed < 1)	speed = 1;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	2b00      	cmp	r3, #0
 800038a:	dc01      	bgt.n	8000390 <Rainbow_Effect+0x1c>
 800038c:	2301      	movs	r3, #1
 800038e:	607b      	str	r3, [r7, #4]

	for (int hue = 0; hue < 360; hue += 1) {
 8000390:	2300      	movs	r3, #0
 8000392:	627b      	str	r3, [r7, #36]	@ 0x24
 8000394:	e0c5      	b.n	8000522 <Rainbow_Effect+0x1ae>
		int red, green, blue;

		for (int led_num = 0; led_num < MAX_LED; ++led_num) {
 8000396:	2300      	movs	r3, #0
 8000398:	617b      	str	r3, [r7, #20]
 800039a:	e0af      	b.n	80004fc <Rainbow_Effect+0x188>
			if (hue > 359) hue = 0;
 800039c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800039e:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 80003a2:	db01      	blt.n	80003a8 <Rainbow_Effect+0x34>
 80003a4:	2300      	movs	r3, #0
 80003a6:	627b      	str	r3, [r7, #36]	@ 0x24
			hue += led_num;
 80003a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80003aa:	697b      	ldr	r3, [r7, #20]
 80003ac:	4413      	add	r3, r2
 80003ae:	627b      	str	r3, [r7, #36]	@ 0x24
			int sector = hue / 60;
 80003b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003b2:	4a61      	ldr	r2, [pc, #388]	@ (8000538 <Rainbow_Effect+0x1c4>)
 80003b4:	fb82 1203 	smull	r1, r2, r2, r3
 80003b8:	441a      	add	r2, r3
 80003ba:	1152      	asrs	r2, r2, #5
 80003bc:	17db      	asrs	r3, r3, #31
 80003be:	1ad3      	subs	r3, r2, r3
 80003c0:	613b      	str	r3, [r7, #16]
			int remainder = hue % 60;
 80003c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80003c4:	4b5c      	ldr	r3, [pc, #368]	@ (8000538 <Rainbow_Effect+0x1c4>)
 80003c6:	fb83 1302 	smull	r1, r3, r3, r2
 80003ca:	4413      	add	r3, r2
 80003cc:	1159      	asrs	r1, r3, #5
 80003ce:	17d3      	asrs	r3, r2, #31
 80003d0:	1ac9      	subs	r1, r1, r3
 80003d2:	460b      	mov	r3, r1
 80003d4:	011b      	lsls	r3, r3, #4
 80003d6:	1a5b      	subs	r3, r3, r1
 80003d8:	009b      	lsls	r3, r3, #2
 80003da:	1ad3      	subs	r3, r2, r3
 80003dc:	60fb      	str	r3, [r7, #12]

			switch(sector) {
 80003de:	693b      	ldr	r3, [r7, #16]
 80003e0:	2b05      	cmp	r3, #5
 80003e2:	d878      	bhi.n	80004d6 <Rainbow_Effect+0x162>
 80003e4:	a201      	add	r2, pc, #4	@ (adr r2, 80003ec <Rainbow_Effect+0x78>)
 80003e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ea:	bf00      	nop
 80003ec:	08000405 	.word	0x08000405
 80003f0:	08000427 	.word	0x08000427
 80003f4:	0800044b 	.word	0x0800044b
 80003f8:	0800046d 	.word	0x0800046d
 80003fc:	08000491 	.word	0x08000491
 8000400:	080004b3 	.word	0x080004b3
				case 0: red = 255; green = (remainder * 255) / 60; blue = 0; break;
 8000404:	23ff      	movs	r3, #255	@ 0xff
 8000406:	623b      	str	r3, [r7, #32]
 8000408:	68fa      	ldr	r2, [r7, #12]
 800040a:	4613      	mov	r3, r2
 800040c:	021b      	lsls	r3, r3, #8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	4a49      	ldr	r2, [pc, #292]	@ (8000538 <Rainbow_Effect+0x1c4>)
 8000412:	fb82 1203 	smull	r1, r2, r2, r3
 8000416:	441a      	add	r2, r3
 8000418:	1152      	asrs	r2, r2, #5
 800041a:	17db      	asrs	r3, r3, #31
 800041c:	1ad3      	subs	r3, r2, r3
 800041e:	61fb      	str	r3, [r7, #28]
 8000420:	2300      	movs	r3, #0
 8000422:	61bb      	str	r3, [r7, #24]
 8000424:	e05e      	b.n	80004e4 <Rainbow_Effect+0x170>
				case 1: red = 255 - ((remainder * 255) / 60); green = 255; blue = 0; break;
 8000426:	68fa      	ldr	r2, [r7, #12]
 8000428:	4613      	mov	r3, r2
 800042a:	021b      	lsls	r3, r3, #8
 800042c:	1a9b      	subs	r3, r3, r2
 800042e:	4a42      	ldr	r2, [pc, #264]	@ (8000538 <Rainbow_Effect+0x1c4>)
 8000430:	fb82 1203 	smull	r1, r2, r2, r3
 8000434:	441a      	add	r2, r3
 8000436:	1152      	asrs	r2, r2, #5
 8000438:	17db      	asrs	r3, r3, #31
 800043a:	1a9b      	subs	r3, r3, r2
 800043c:	33ff      	adds	r3, #255	@ 0xff
 800043e:	623b      	str	r3, [r7, #32]
 8000440:	23ff      	movs	r3, #255	@ 0xff
 8000442:	61fb      	str	r3, [r7, #28]
 8000444:	2300      	movs	r3, #0
 8000446:	61bb      	str	r3, [r7, #24]
 8000448:	e04c      	b.n	80004e4 <Rainbow_Effect+0x170>
				case 2: red = 0; green = 255; blue = (remainder * 255) / 60; break;
 800044a:	2300      	movs	r3, #0
 800044c:	623b      	str	r3, [r7, #32]
 800044e:	23ff      	movs	r3, #255	@ 0xff
 8000450:	61fb      	str	r3, [r7, #28]
 8000452:	68fa      	ldr	r2, [r7, #12]
 8000454:	4613      	mov	r3, r2
 8000456:	021b      	lsls	r3, r3, #8
 8000458:	1a9b      	subs	r3, r3, r2
 800045a:	4a37      	ldr	r2, [pc, #220]	@ (8000538 <Rainbow_Effect+0x1c4>)
 800045c:	fb82 1203 	smull	r1, r2, r2, r3
 8000460:	441a      	add	r2, r3
 8000462:	1152      	asrs	r2, r2, #5
 8000464:	17db      	asrs	r3, r3, #31
 8000466:	1ad3      	subs	r3, r2, r3
 8000468:	61bb      	str	r3, [r7, #24]
 800046a:	e03b      	b.n	80004e4 <Rainbow_Effect+0x170>
				case 3: red = 0; green = 255 - ((remainder * 255) / 60); blue = 255; break;
 800046c:	2300      	movs	r3, #0
 800046e:	623b      	str	r3, [r7, #32]
 8000470:	68fa      	ldr	r2, [r7, #12]
 8000472:	4613      	mov	r3, r2
 8000474:	021b      	lsls	r3, r3, #8
 8000476:	1a9b      	subs	r3, r3, r2
 8000478:	4a2f      	ldr	r2, [pc, #188]	@ (8000538 <Rainbow_Effect+0x1c4>)
 800047a:	fb82 1203 	smull	r1, r2, r2, r3
 800047e:	441a      	add	r2, r3
 8000480:	1152      	asrs	r2, r2, #5
 8000482:	17db      	asrs	r3, r3, #31
 8000484:	1a9b      	subs	r3, r3, r2
 8000486:	33ff      	adds	r3, #255	@ 0xff
 8000488:	61fb      	str	r3, [r7, #28]
 800048a:	23ff      	movs	r3, #255	@ 0xff
 800048c:	61bb      	str	r3, [r7, #24]
 800048e:	e029      	b.n	80004e4 <Rainbow_Effect+0x170>
				case 4: red = (remainder * 255) / 60; green = 0; blue = 255; break;
 8000490:	68fa      	ldr	r2, [r7, #12]
 8000492:	4613      	mov	r3, r2
 8000494:	021b      	lsls	r3, r3, #8
 8000496:	1a9b      	subs	r3, r3, r2
 8000498:	4a27      	ldr	r2, [pc, #156]	@ (8000538 <Rainbow_Effect+0x1c4>)
 800049a:	fb82 1203 	smull	r1, r2, r2, r3
 800049e:	441a      	add	r2, r3
 80004a0:	1152      	asrs	r2, r2, #5
 80004a2:	17db      	asrs	r3, r3, #31
 80004a4:	1ad3      	subs	r3, r2, r3
 80004a6:	623b      	str	r3, [r7, #32]
 80004a8:	2300      	movs	r3, #0
 80004aa:	61fb      	str	r3, [r7, #28]
 80004ac:	23ff      	movs	r3, #255	@ 0xff
 80004ae:	61bb      	str	r3, [r7, #24]
 80004b0:	e018      	b.n	80004e4 <Rainbow_Effect+0x170>
				case 5: red = 255; green = 0; blue = 255 - ((remainder * 255) / 60); break;
 80004b2:	23ff      	movs	r3, #255	@ 0xff
 80004b4:	623b      	str	r3, [r7, #32]
 80004b6:	2300      	movs	r3, #0
 80004b8:	61fb      	str	r3, [r7, #28]
 80004ba:	68fa      	ldr	r2, [r7, #12]
 80004bc:	4613      	mov	r3, r2
 80004be:	021b      	lsls	r3, r3, #8
 80004c0:	1a9b      	subs	r3, r3, r2
 80004c2:	4a1d      	ldr	r2, [pc, #116]	@ (8000538 <Rainbow_Effect+0x1c4>)
 80004c4:	fb82 1203 	smull	r1, r2, r2, r3
 80004c8:	441a      	add	r2, r3
 80004ca:	1152      	asrs	r2, r2, #5
 80004cc:	17db      	asrs	r3, r3, #31
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	33ff      	adds	r3, #255	@ 0xff
 80004d2:	61bb      	str	r3, [r7, #24]
 80004d4:	e006      	b.n	80004e4 <Rainbow_Effect+0x170>
				default: red = 255; green = 0; blue = 0; break;
 80004d6:	23ff      	movs	r3, #255	@ 0xff
 80004d8:	623b      	str	r3, [r7, #32]
 80004da:	2300      	movs	r3, #0
 80004dc:	61fb      	str	r3, [r7, #28]
 80004de:	2300      	movs	r3, #0
 80004e0:	61bb      	str	r3, [r7, #24]
 80004e2:	bf00      	nop
			}

			//Set_All_LEDs_Same_Color(red, green, blue);

			Set_LED(led_num, red, green, blue);
 80004e4:	69bb      	ldr	r3, [r7, #24]
 80004e6:	69fa      	ldr	r2, [r7, #28]
 80004e8:	6a39      	ldr	r1, [r7, #32]
 80004ea:	6978      	ldr	r0, [r7, #20]
 80004ec:	f7ff fe42 	bl	8000174 <Set_LED>
			HAL_Delay(1);
 80004f0:	2001      	movs	r0, #1
 80004f2:	f000 fafd 	bl	8000af0 <HAL_Delay>
		for (int led_num = 0; led_num < MAX_LED; ++led_num) {
 80004f6:	697b      	ldr	r3, [r7, #20]
 80004f8:	3301      	adds	r3, #1
 80004fa:	617b      	str	r3, [r7, #20]
 80004fc:	697b      	ldr	r3, [r7, #20]
 80004fe:	2b3b      	cmp	r3, #59	@ 0x3b
 8000500:	f77f af4c 	ble.w	800039c <Rainbow_Effect+0x28>
		}

		Set_Brightness(10);
 8000504:	200a      	movs	r0, #10
 8000506:	f7ff fe61 	bl	80001cc <Set_Brightness>
		WS2812_Send();
 800050a:	f7ff fead 	bl	8000268 <WS2812_Send>
		HAL_Delay(LED_DELAY/speed);
 800050e:	220a      	movs	r2, #10
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	fb92 f3f3 	sdiv	r3, r2, r3
 8000516:	4618      	mov	r0, r3
 8000518:	f000 faea 	bl	8000af0 <HAL_Delay>
	for (int hue = 0; hue < 360; hue += 1) {
 800051c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800051e:	3301      	adds	r3, #1
 8000520:	627b      	str	r3, [r7, #36]	@ 0x24
 8000522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000524:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8000528:	f6ff af35 	blt.w	8000396 <Rainbow_Effect+0x22>
	}
}
 800052c:	bf00      	nop
 800052e:	bf00      	nop
 8000530:	3728      	adds	r7, #40	@ 0x28
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	88888889 	.word	0x88888889

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000540:	f000 fa74 	bl	8000a2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000544:	f000 f80a 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000548:	f000 f90c 	bl	8000764 <MX_GPIO_Init>
  MX_DMA_Init();
 800054c:	f000 f8ec 	bl	8000728 <MX_DMA_Init>
  MX_TIM1_Init();
 8000550:	f000 f84a 	bl	80005e8 <MX_TIM1_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //Fade_Effect(255, 0, 0, 10);
	  Rainbow_Effect(1);
 8000554:	2001      	movs	r0, #1
 8000556:	f7ff ff0d 	bl	8000374 <Rainbow_Effect>
 800055a:	e7fb      	b.n	8000554 <main+0x18>

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b090      	sub	sp, #64	@ 0x40
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 0318 	add.w	r3, r7, #24
 8000566:	2228      	movs	r2, #40	@ 0x28
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f002 fcad 	bl	8002eca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800057e:	2301      	movs	r3, #1
 8000580:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000582:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000586:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000588:	2300      	movs	r3, #0
 800058a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800058c:	2301      	movs	r3, #1
 800058e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000590:	2302      	movs	r3, #2
 8000592:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000594:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000598:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800059a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800059e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a0:	f107 0318 	add.w	r3, r7, #24
 80005a4:	4618      	mov	r0, r3
 80005a6:	f000 ffd7 	bl	8001558 <HAL_RCC_OscConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80005b0:	f000 f924 	bl	80007fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b4:	230f      	movs	r3, #15
 80005b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b8:	2302      	movs	r3, #2
 80005ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	2102      	movs	r1, #2
 80005ce:	4618      	mov	r0, r3
 80005d0:	f001 fa44 	bl	8001a5c <HAL_RCC_ClockConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005da:	f000 f90f 	bl	80007fc <Error_Handler>
  }
}
 80005de:	bf00      	nop
 80005e0:	3740      	adds	r7, #64	@ 0x40
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
	...

080005e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b096      	sub	sp, #88	@ 0x58
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005ee:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005fc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000606:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]
 8000610:	609a      	str	r2, [r3, #8]
 8000612:	60da      	str	r2, [r3, #12]
 8000614:	611a      	str	r2, [r3, #16]
 8000616:	615a      	str	r2, [r3, #20]
 8000618:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	2220      	movs	r2, #32
 800061e:	2100      	movs	r1, #0
 8000620:	4618      	mov	r0, r3
 8000622:	f002 fc52 	bl	8002eca <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000626:	4b3e      	ldr	r3, [pc, #248]	@ (8000720 <MX_TIM1_Init+0x138>)
 8000628:	4a3e      	ldr	r2, [pc, #248]	@ (8000724 <MX_TIM1_Init+0x13c>)
 800062a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800062c:	4b3c      	ldr	r3, [pc, #240]	@ (8000720 <MX_TIM1_Init+0x138>)
 800062e:	2200      	movs	r2, #0
 8000630:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000632:	4b3b      	ldr	r3, [pc, #236]	@ (8000720 <MX_TIM1_Init+0x138>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 8000638:	4b39      	ldr	r3, [pc, #228]	@ (8000720 <MX_TIM1_Init+0x138>)
 800063a:	2259      	movs	r2, #89	@ 0x59
 800063c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800063e:	4b38      	ldr	r3, [pc, #224]	@ (8000720 <MX_TIM1_Init+0x138>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000644:	4b36      	ldr	r3, [pc, #216]	@ (8000720 <MX_TIM1_Init+0x138>)
 8000646:	2200      	movs	r2, #0
 8000648:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800064a:	4b35      	ldr	r3, [pc, #212]	@ (8000720 <MX_TIM1_Init+0x138>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000650:	4833      	ldr	r0, [pc, #204]	@ (8000720 <MX_TIM1_Init+0x138>)
 8000652:	f001 fb5f 	bl	8001d14 <HAL_TIM_Base_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800065c:	f000 f8ce 	bl	80007fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000660:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000664:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000666:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800066a:	4619      	mov	r1, r3
 800066c:	482c      	ldr	r0, [pc, #176]	@ (8000720 <MX_TIM1_Init+0x138>)
 800066e:	f001 ff23 	bl	80024b8 <HAL_TIM_ConfigClockSource>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000678:	f000 f8c0 	bl	80007fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800067c:	4828      	ldr	r0, [pc, #160]	@ (8000720 <MX_TIM1_Init+0x138>)
 800067e:	f001 fb98 	bl	8001db2 <HAL_TIM_PWM_Init>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000688:	f000 f8b8 	bl	80007fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800068c:	2300      	movs	r3, #0
 800068e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000690:	2300      	movs	r3, #0
 8000692:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000694:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000698:	4619      	mov	r1, r3
 800069a:	4821      	ldr	r0, [pc, #132]	@ (8000720 <MX_TIM1_Init+0x138>)
 800069c:	f002 fb66 	bl	8002d6c <HAL_TIMEx_MasterConfigSynchronization>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80006a6:	f000 f8a9 	bl	80007fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006aa:	2360      	movs	r3, #96	@ 0x60
 80006ac:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006b2:	2300      	movs	r3, #0
 80006b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006b6:	2300      	movs	r3, #0
 80006b8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006ba:	2300      	movs	r3, #0
 80006bc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006be:	2300      	movs	r3, #0
 80006c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006c2:	2300      	movs	r3, #0
 80006c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006ca:	2200      	movs	r2, #0
 80006cc:	4619      	mov	r1, r3
 80006ce:	4814      	ldr	r0, [pc, #80]	@ (8000720 <MX_TIM1_Init+0x138>)
 80006d0:	f001 fe30 	bl	8002334 <HAL_TIM_PWM_ConfigChannel>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80006da:	f000 f88f 	bl	80007fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006de:	2300      	movs	r3, #0
 80006e0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006e2:	2300      	movs	r3, #0
 80006e4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006e6:	2300      	movs	r3, #0
 80006e8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006f6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006f8:	2300      	movs	r3, #0
 80006fa:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	4619      	mov	r1, r3
 8000700:	4807      	ldr	r0, [pc, #28]	@ (8000720 <MX_TIM1_Init+0x138>)
 8000702:	f002 fb91 	bl	8002e28 <HAL_TIMEx_ConfigBreakDeadTime>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800070c:	f000 f876 	bl	80007fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000710:	4803      	ldr	r0, [pc, #12]	@ (8000720 <MX_TIM1_Init+0x138>)
 8000712:	f000 f8f5 	bl	8000900 <HAL_TIM_MspPostInit>

}
 8000716:	bf00      	nop
 8000718:	3758      	adds	r7, #88	@ 0x58
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000028 	.word	0x20000028
 8000724:	40012c00 	.word	0x40012c00

08000728 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800072e:	4b0c      	ldr	r3, [pc, #48]	@ (8000760 <MX_DMA_Init+0x38>)
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	4a0b      	ldr	r2, [pc, #44]	@ (8000760 <MX_DMA_Init+0x38>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	6153      	str	r3, [r2, #20]
 800073a:	4b09      	ldr	r3, [pc, #36]	@ (8000760 <MX_DMA_Init+0x38>)
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000746:	2200      	movs	r2, #0
 8000748:	2100      	movs	r1, #0
 800074a:	200c      	movs	r0, #12
 800074c:	f000 facb 	bl	8000ce6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000750:	200c      	movs	r0, #12
 8000752:	f000 fae4 	bl	8000d1e <HAL_NVIC_EnableIRQ>

}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40021000 	.word	0x40021000

08000764 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b088      	sub	sp, #32
 8000768:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076a:	f107 0310 	add.w	r3, r7, #16
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000778:	4b1e      	ldr	r3, [pc, #120]	@ (80007f4 <MX_GPIO_Init+0x90>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	4a1d      	ldr	r2, [pc, #116]	@ (80007f4 <MX_GPIO_Init+0x90>)
 800077e:	f043 0310 	orr.w	r3, r3, #16
 8000782:	6193      	str	r3, [r2, #24]
 8000784:	4b1b      	ldr	r3, [pc, #108]	@ (80007f4 <MX_GPIO_Init+0x90>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	f003 0310 	and.w	r3, r3, #16
 800078c:	60fb      	str	r3, [r7, #12]
 800078e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000790:	4b18      	ldr	r3, [pc, #96]	@ (80007f4 <MX_GPIO_Init+0x90>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	4a17      	ldr	r2, [pc, #92]	@ (80007f4 <MX_GPIO_Init+0x90>)
 8000796:	f043 0320 	orr.w	r3, r3, #32
 800079a:	6193      	str	r3, [r2, #24]
 800079c:	4b15      	ldr	r3, [pc, #84]	@ (80007f4 <MX_GPIO_Init+0x90>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	f003 0320 	and.w	r3, r3, #32
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a8:	4b12      	ldr	r3, [pc, #72]	@ (80007f4 <MX_GPIO_Init+0x90>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	4a11      	ldr	r2, [pc, #68]	@ (80007f4 <MX_GPIO_Init+0x90>)
 80007ae:	f043 0304 	orr.w	r3, r3, #4
 80007b2:	6193      	str	r3, [r2, #24]
 80007b4:	4b0f      	ldr	r3, [pc, #60]	@ (80007f4 <MX_GPIO_Init+0x90>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	f003 0304 	and.w	r3, r3, #4
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80007c0:	2200      	movs	r2, #0
 80007c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007c6:	480c      	ldr	r0, [pc, #48]	@ (80007f8 <MX_GPIO_Init+0x94>)
 80007c8:	f000 feae 	bl	8001528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d2:	2301      	movs	r3, #1
 80007d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007da:	2302      	movs	r3, #2
 80007dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007de:	f107 0310 	add.w	r3, r7, #16
 80007e2:	4619      	mov	r1, r3
 80007e4:	4804      	ldr	r0, [pc, #16]	@ (80007f8 <MX_GPIO_Init+0x94>)
 80007e6:	f000 fd1b 	bl	8001220 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007ea:	bf00      	nop
 80007ec:	3720      	adds	r7, #32
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40021000 	.word	0x40021000
 80007f8:	40011000 	.word	0x40011000

080007fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000800:	b672      	cpsid	i
}
 8000802:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000804:	bf00      	nop
 8000806:	e7fd      	b.n	8000804 <Error_Handler+0x8>

08000808 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800080e:	4b15      	ldr	r3, [pc, #84]	@ (8000864 <HAL_MspInit+0x5c>)
 8000810:	699b      	ldr	r3, [r3, #24]
 8000812:	4a14      	ldr	r2, [pc, #80]	@ (8000864 <HAL_MspInit+0x5c>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6193      	str	r3, [r2, #24]
 800081a:	4b12      	ldr	r3, [pc, #72]	@ (8000864 <HAL_MspInit+0x5c>)
 800081c:	699b      	ldr	r3, [r3, #24]
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000826:	4b0f      	ldr	r3, [pc, #60]	@ (8000864 <HAL_MspInit+0x5c>)
 8000828:	69db      	ldr	r3, [r3, #28]
 800082a:	4a0e      	ldr	r2, [pc, #56]	@ (8000864 <HAL_MspInit+0x5c>)
 800082c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000830:	61d3      	str	r3, [r2, #28]
 8000832:	4b0c      	ldr	r3, [pc, #48]	@ (8000864 <HAL_MspInit+0x5c>)
 8000834:	69db      	ldr	r3, [r3, #28]
 8000836:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800083e:	4b0a      	ldr	r3, [pc, #40]	@ (8000868 <HAL_MspInit+0x60>)
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	4a04      	ldr	r2, [pc, #16]	@ (8000868 <HAL_MspInit+0x60>)
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085a:	bf00      	nop
 800085c:	3714      	adds	r7, #20
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr
 8000864:	40021000 	.word	0x40021000
 8000868:	40010000 	.word	0x40010000

0800086c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a1d      	ldr	r2, [pc, #116]	@ (80008f0 <HAL_TIM_Base_MspInit+0x84>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d133      	bne.n	80008e6 <HAL_TIM_Base_MspInit+0x7a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800087e:	4b1d      	ldr	r3, [pc, #116]	@ (80008f4 <HAL_TIM_Base_MspInit+0x88>)
 8000880:	699b      	ldr	r3, [r3, #24]
 8000882:	4a1c      	ldr	r2, [pc, #112]	@ (80008f4 <HAL_TIM_Base_MspInit+0x88>)
 8000884:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000888:	6193      	str	r3, [r2, #24]
 800088a:	4b1a      	ldr	r3, [pc, #104]	@ (80008f4 <HAL_TIM_Base_MspInit+0x88>)
 800088c:	699b      	ldr	r3, [r3, #24]
 800088e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8000896:	4b18      	ldr	r3, [pc, #96]	@ (80008f8 <HAL_TIM_Base_MspInit+0x8c>)
 8000898:	4a18      	ldr	r2, [pc, #96]	@ (80008fc <HAL_TIM_Base_MspInit+0x90>)
 800089a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800089c:	4b16      	ldr	r3, [pc, #88]	@ (80008f8 <HAL_TIM_Base_MspInit+0x8c>)
 800089e:	2210      	movs	r2, #16
 80008a0:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008a2:	4b15      	ldr	r3, [pc, #84]	@ (80008f8 <HAL_TIM_Base_MspInit+0x8c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80008a8:	4b13      	ldr	r3, [pc, #76]	@ (80008f8 <HAL_TIM_Base_MspInit+0x8c>)
 80008aa:	2280      	movs	r2, #128	@ 0x80
 80008ac:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008ae:	4b12      	ldr	r3, [pc, #72]	@ (80008f8 <HAL_TIM_Base_MspInit+0x8c>)
 80008b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008b4:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008b6:	4b10      	ldr	r3, [pc, #64]	@ (80008f8 <HAL_TIM_Base_MspInit+0x8c>)
 80008b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008bc:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80008be:	4b0e      	ldr	r3, [pc, #56]	@ (80008f8 <HAL_TIM_Base_MspInit+0x8c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	@ (80008f8 <HAL_TIM_Base_MspInit+0x8c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80008ca:	480b      	ldr	r0, [pc, #44]	@ (80008f8 <HAL_TIM_Base_MspInit+0x8c>)
 80008cc:	f000 fa42 	bl	8000d54 <HAL_DMA_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 80008d6:	f7ff ff91 	bl	80007fc <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4a06      	ldr	r2, [pc, #24]	@ (80008f8 <HAL_TIM_Base_MspInit+0x8c>)
 80008de:	625a      	str	r2, [r3, #36]	@ 0x24
 80008e0:	4a05      	ldr	r2, [pc, #20]	@ (80008f8 <HAL_TIM_Base_MspInit+0x8c>)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80008e6:	bf00      	nop
 80008e8:	3710      	adds	r7, #16
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40012c00 	.word	0x40012c00
 80008f4:	40021000 	.word	0x40021000
 80008f8:	20000070 	.word	0x20000070
 80008fc:	4002001c 	.word	0x4002001c

08000900 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b088      	sub	sp, #32
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	f107 0310 	add.w	r3, r7, #16
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a10      	ldr	r2, [pc, #64]	@ (800095c <HAL_TIM_MspPostInit+0x5c>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d118      	bne.n	8000952 <HAL_TIM_MspPostInit+0x52>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000920:	4b0f      	ldr	r3, [pc, #60]	@ (8000960 <HAL_TIM_MspPostInit+0x60>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	4a0e      	ldr	r2, [pc, #56]	@ (8000960 <HAL_TIM_MspPostInit+0x60>)
 8000926:	f043 0304 	orr.w	r3, r3, #4
 800092a:	6193      	str	r3, [r2, #24]
 800092c:	4b0c      	ldr	r3, [pc, #48]	@ (8000960 <HAL_TIM_MspPostInit+0x60>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	f003 0304 	and.w	r3, r3, #4
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000938:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800093c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093e:	2302      	movs	r3, #2
 8000940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2302      	movs	r3, #2
 8000944:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000946:	f107 0310 	add.w	r3, r7, #16
 800094a:	4619      	mov	r1, r3
 800094c:	4805      	ldr	r0, [pc, #20]	@ (8000964 <HAL_TIM_MspPostInit+0x64>)
 800094e:	f000 fc67 	bl	8001220 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000952:	bf00      	nop
 8000954:	3720      	adds	r7, #32
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40012c00 	.word	0x40012c00
 8000960:	40021000 	.word	0x40021000
 8000964:	40010800 	.word	0x40010800

08000968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <NMI_Handler+0x4>

08000970 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <HardFault_Handler+0x4>

08000978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <MemManage_Handler+0x4>

08000980 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <BusFault_Handler+0x4>

08000988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <UsageFault_Handler+0x4>

08000990 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr

0800099c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr

080009a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr

080009b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b8:	f000 f87e 	bl	8000ab8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}

080009c0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80009c4:	4802      	ldr	r0, [pc, #8]	@ (80009d0 <DMA1_Channel2_IRQHandler+0x10>)
 80009c6:	f000 faf7 	bl	8000fb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000070 	.word	0x20000070

080009d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr

080009e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009e0:	f7ff fff8 	bl	80009d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009e4:	480b      	ldr	r0, [pc, #44]	@ (8000a14 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80009e6:	490c      	ldr	r1, [pc, #48]	@ (8000a18 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80009e8:	4a0c      	ldr	r2, [pc, #48]	@ (8000a1c <LoopFillZerobss+0x16>)
  movs r3, #0
 80009ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009ec:	e002      	b.n	80009f4 <LoopCopyDataInit>

080009ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f2:	3304      	adds	r3, #4

080009f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f8:	d3f9      	bcc.n	80009ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fa:	4a09      	ldr	r2, [pc, #36]	@ (8000a20 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009fc:	4c09      	ldr	r4, [pc, #36]	@ (8000a24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a00:	e001      	b.n	8000a06 <LoopFillZerobss>

08000a02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a04:	3204      	adds	r2, #4

08000a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a08:	d3fb      	bcc.n	8000a02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a0a:	f002 fa67 	bl	8002edc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a0e:	f7ff fd95 	bl	800053c <main>
  bx lr
 8000a12:	4770      	bx	lr
  ldr r0, =_sdata
 8000a14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a18:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a1c:	08002f68 	.word	0x08002f68
  ldr r2, =_sbss
 8000a20:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a24:	20000e40 	.word	0x20000e40

08000a28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a28:	e7fe      	b.n	8000a28 <ADC1_2_IRQHandler>
	...

08000a2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a30:	4b08      	ldr	r3, [pc, #32]	@ (8000a54 <HAL_Init+0x28>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a07      	ldr	r2, [pc, #28]	@ (8000a54 <HAL_Init+0x28>)
 8000a36:	f043 0310 	orr.w	r3, r3, #16
 8000a3a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a3c:	2003      	movs	r0, #3
 8000a3e:	f000 f947 	bl	8000cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a42:	200f      	movs	r0, #15
 8000a44:	f000 f808 	bl	8000a58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a48:	f7ff fede 	bl	8000808 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a4c:	2300      	movs	r3, #0
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40022000 	.word	0x40022000

08000a58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a60:	4b12      	ldr	r3, [pc, #72]	@ (8000aac <HAL_InitTick+0x54>)
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	4b12      	ldr	r3, [pc, #72]	@ (8000ab0 <HAL_InitTick+0x58>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a76:	4618      	mov	r0, r3
 8000a78:	f000 f95f 	bl	8000d3a <HAL_SYSTICK_Config>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
 8000a84:	e00e      	b.n	8000aa4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2b0f      	cmp	r3, #15
 8000a8a:	d80a      	bhi.n	8000aa2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	6879      	ldr	r1, [r7, #4]
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	f000 f927 	bl	8000ce6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a98:	4a06      	ldr	r2, [pc, #24]	@ (8000ab4 <HAL_InitTick+0x5c>)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	e000      	b.n	8000aa4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000000 	.word	0x20000000
 8000ab0:	20000008 	.word	0x20000008
 8000ab4:	20000004 	.word	0x20000004

08000ab8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000abc:	4b05      	ldr	r3, [pc, #20]	@ (8000ad4 <HAL_IncTick+0x1c>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4b05      	ldr	r3, [pc, #20]	@ (8000ad8 <HAL_IncTick+0x20>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	4a03      	ldr	r2, [pc, #12]	@ (8000ad8 <HAL_IncTick+0x20>)
 8000aca:	6013      	str	r3, [r2, #0]
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr
 8000ad4:	20000008 	.word	0x20000008
 8000ad8:	20000e3c 	.word	0x20000e3c

08000adc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae0:	4b02      	ldr	r3, [pc, #8]	@ (8000aec <HAL_GetTick+0x10>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr
 8000aec:	20000e3c 	.word	0x20000e3c

08000af0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000af8:	f7ff fff0 	bl	8000adc <HAL_GetTick>
 8000afc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b08:	d005      	beq.n	8000b16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b34 <HAL_Delay+0x44>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	461a      	mov	r2, r3
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	4413      	add	r3, r2
 8000b14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b16:	bf00      	nop
 8000b18:	f7ff ffe0 	bl	8000adc <HAL_GetTick>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	68fa      	ldr	r2, [r7, #12]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d8f7      	bhi.n	8000b18 <HAL_Delay+0x28>
  {
  }
}
 8000b28:	bf00      	nop
 8000b2a:	bf00      	nop
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000008 	.word	0x20000008

08000b38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f003 0307 	and.w	r3, r3, #7
 8000b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b48:	4b0c      	ldr	r3, [pc, #48]	@ (8000b7c <__NVIC_SetPriorityGrouping+0x44>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b4e:	68ba      	ldr	r2, [r7, #8]
 8000b50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b54:	4013      	ands	r3, r2
 8000b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b6a:	4a04      	ldr	r2, [pc, #16]	@ (8000b7c <__NVIC_SetPriorityGrouping+0x44>)
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	60d3      	str	r3, [r2, #12]
}
 8000b70:	bf00      	nop
 8000b72:	3714      	adds	r7, #20
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bc80      	pop	{r7}
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b84:	4b04      	ldr	r3, [pc, #16]	@ (8000b98 <__NVIC_GetPriorityGrouping+0x18>)
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	0a1b      	lsrs	r3, r3, #8
 8000b8a:	f003 0307 	and.w	r3, r3, #7
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bc80      	pop	{r7}
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	db0b      	blt.n	8000bc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	f003 021f 	and.w	r2, r3, #31
 8000bb4:	4906      	ldr	r1, [pc, #24]	@ (8000bd0 <__NVIC_EnableIRQ+0x34>)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	095b      	lsrs	r3, r3, #5
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr
 8000bd0:	e000e100 	.word	0xe000e100

08000bd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	6039      	str	r1, [r7, #0]
 8000bde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	db0a      	blt.n	8000bfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	b2da      	uxtb	r2, r3
 8000bec:	490c      	ldr	r1, [pc, #48]	@ (8000c20 <__NVIC_SetPriority+0x4c>)
 8000bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf2:	0112      	lsls	r2, r2, #4
 8000bf4:	b2d2      	uxtb	r2, r2
 8000bf6:	440b      	add	r3, r1
 8000bf8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bfc:	e00a      	b.n	8000c14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	4908      	ldr	r1, [pc, #32]	@ (8000c24 <__NVIC_SetPriority+0x50>)
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	f003 030f 	and.w	r3, r3, #15
 8000c0a:	3b04      	subs	r3, #4
 8000c0c:	0112      	lsls	r2, r2, #4
 8000c0e:	b2d2      	uxtb	r2, r2
 8000c10:	440b      	add	r3, r1
 8000c12:	761a      	strb	r2, [r3, #24]
}
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	e000e100 	.word	0xe000e100
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b089      	sub	sp, #36	@ 0x24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	f003 0307 	and.w	r3, r3, #7
 8000c3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	f1c3 0307 	rsb	r3, r3, #7
 8000c42:	2b04      	cmp	r3, #4
 8000c44:	bf28      	it	cs
 8000c46:	2304      	movcs	r3, #4
 8000c48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	3304      	adds	r3, #4
 8000c4e:	2b06      	cmp	r3, #6
 8000c50:	d902      	bls.n	8000c58 <NVIC_EncodePriority+0x30>
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	3b03      	subs	r3, #3
 8000c56:	e000      	b.n	8000c5a <NVIC_EncodePriority+0x32>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	43da      	mvns	r2, r3
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	401a      	ands	r2, r3
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c70:	f04f 31ff 	mov.w	r1, #4294967295
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7a:	43d9      	mvns	r1, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c80:	4313      	orrs	r3, r2
         );
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3724      	adds	r7, #36	@ 0x24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bc80      	pop	{r7}
 8000c8a:	4770      	bx	lr

08000c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c9c:	d301      	bcc.n	8000ca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e00f      	b.n	8000cc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ca2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ccc <SysTick_Config+0x40>)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000caa:	210f      	movs	r1, #15
 8000cac:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb0:	f7ff ff90 	bl	8000bd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb4:	4b05      	ldr	r3, [pc, #20]	@ (8000ccc <SysTick_Config+0x40>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cba:	4b04      	ldr	r3, [pc, #16]	@ (8000ccc <SysTick_Config+0x40>)
 8000cbc:	2207      	movs	r2, #7
 8000cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	e000e010 	.word	0xe000e010

08000cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f7ff ff2d 	bl	8000b38 <__NVIC_SetPriorityGrouping>
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b086      	sub	sp, #24
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	4603      	mov	r3, r0
 8000cee:	60b9      	str	r1, [r7, #8]
 8000cf0:	607a      	str	r2, [r7, #4]
 8000cf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf8:	f7ff ff42 	bl	8000b80 <__NVIC_GetPriorityGrouping>
 8000cfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	68b9      	ldr	r1, [r7, #8]
 8000d02:	6978      	ldr	r0, [r7, #20]
 8000d04:	f7ff ff90 	bl	8000c28 <NVIC_EncodePriority>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d0e:	4611      	mov	r1, r2
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff ff5f 	bl	8000bd4 <__NVIC_SetPriority>
}
 8000d16:	bf00      	nop
 8000d18:	3718      	adds	r7, #24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	4603      	mov	r3, r0
 8000d26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff ff35 	bl	8000b9c <__NVIC_EnableIRQ>
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f7ff ffa2 	bl	8000c8c <SysTick_Config>
 8000d48:	4603      	mov	r3, r0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d101      	bne.n	8000d6a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e043      	b.n	8000df2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	461a      	mov	r2, r3
 8000d70:	4b22      	ldr	r3, [pc, #136]	@ (8000dfc <HAL_DMA_Init+0xa8>)
 8000d72:	4413      	add	r3, r2
 8000d74:	4a22      	ldr	r2, [pc, #136]	@ (8000e00 <HAL_DMA_Init+0xac>)
 8000d76:	fba2 2303 	umull	r2, r3, r2, r3
 8000d7a:	091b      	lsrs	r3, r3, #4
 8000d7c:	009a      	lsls	r2, r3, #2
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a1f      	ldr	r2, [pc, #124]	@ (8000e04 <HAL_DMA_Init+0xb0>)
 8000d86:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2202      	movs	r2, #2
 8000d8c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000d9e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000da2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000dac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	68db      	ldr	r3, [r3, #12]
 8000db2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000db8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	695b      	ldr	r3, [r3, #20]
 8000dbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	69db      	ldr	r3, [r3, #28]
 8000dca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000dcc:	68fa      	ldr	r2, [r7, #12]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2201      	movs	r2, #1
 8000de4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2200      	movs	r2, #0
 8000dec:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3714      	adds	r7, #20
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr
 8000dfc:	bffdfff8 	.word	0xbffdfff8
 8000e00:	cccccccd 	.word	0xcccccccd
 8000e04:	40020000 	.word	0x40020000

08000e08 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
 8000e14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e16:	2300      	movs	r3, #0
 8000e18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d101      	bne.n	8000e28 <HAL_DMA_Start_IT+0x20>
 8000e24:	2302      	movs	r3, #2
 8000e26:	e04b      	b.n	8000ec0 <HAL_DMA_Start_IT+0xb8>
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d13a      	bne.n	8000eb2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	2202      	movs	r2, #2
 8000e40:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	2200      	movs	r2, #0
 8000e48:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f022 0201 	bic.w	r2, r2, #1
 8000e58:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	68b9      	ldr	r1, [r7, #8]
 8000e60:	68f8      	ldr	r0, [r7, #12]
 8000e62:	f000 f9af 	bl	80011c4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d008      	beq.n	8000e80 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f042 020e 	orr.w	r2, r2, #14
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	e00f      	b.n	8000ea0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f022 0204 	bic.w	r2, r2, #4
 8000e8e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f042 020a 	orr.w	r2, r2, #10
 8000e9e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f042 0201 	orr.w	r2, r2, #1
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	e005      	b.n	8000ebe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000ebe:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3718      	adds	r7, #24
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d005      	beq.n	8000eec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2204      	movs	r2, #4
 8000ee4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	73fb      	strb	r3, [r7, #15]
 8000eea:	e051      	b.n	8000f90 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f022 020e 	bic.w	r2, r2, #14
 8000efa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f022 0201 	bic.w	r2, r2, #1
 8000f0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a22      	ldr	r2, [pc, #136]	@ (8000f9c <HAL_DMA_Abort_IT+0xd4>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d029      	beq.n	8000f6a <HAL_DMA_Abort_IT+0xa2>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a21      	ldr	r2, [pc, #132]	@ (8000fa0 <HAL_DMA_Abort_IT+0xd8>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d022      	beq.n	8000f66 <HAL_DMA_Abort_IT+0x9e>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a1f      	ldr	r2, [pc, #124]	@ (8000fa4 <HAL_DMA_Abort_IT+0xdc>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d01a      	beq.n	8000f60 <HAL_DMA_Abort_IT+0x98>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a1e      	ldr	r2, [pc, #120]	@ (8000fa8 <HAL_DMA_Abort_IT+0xe0>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d012      	beq.n	8000f5a <HAL_DMA_Abort_IT+0x92>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a1c      	ldr	r2, [pc, #112]	@ (8000fac <HAL_DMA_Abort_IT+0xe4>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d00a      	beq.n	8000f54 <HAL_DMA_Abort_IT+0x8c>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a1b      	ldr	r2, [pc, #108]	@ (8000fb0 <HAL_DMA_Abort_IT+0xe8>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d102      	bne.n	8000f4e <HAL_DMA_Abort_IT+0x86>
 8000f48:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000f4c:	e00e      	b.n	8000f6c <HAL_DMA_Abort_IT+0xa4>
 8000f4e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000f52:	e00b      	b.n	8000f6c <HAL_DMA_Abort_IT+0xa4>
 8000f54:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f58:	e008      	b.n	8000f6c <HAL_DMA_Abort_IT+0xa4>
 8000f5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f5e:	e005      	b.n	8000f6c <HAL_DMA_Abort_IT+0xa4>
 8000f60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f64:	e002      	b.n	8000f6c <HAL_DMA_Abort_IT+0xa4>
 8000f66:	2310      	movs	r3, #16
 8000f68:	e000      	b.n	8000f6c <HAL_DMA_Abort_IT+0xa4>
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	4a11      	ldr	r2, [pc, #68]	@ (8000fb4 <HAL_DMA_Abort_IT+0xec>)
 8000f6e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2201      	movs	r2, #1
 8000f74:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d003      	beq.n	8000f90 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	4798      	blx	r3
    } 
  }
  return status;
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40020008 	.word	0x40020008
 8000fa0:	4002001c 	.word	0x4002001c
 8000fa4:	40020030 	.word	0x40020030
 8000fa8:	40020044 	.word	0x40020044
 8000fac:	40020058 	.word	0x40020058
 8000fb0:	4002006c 	.word	0x4002006c
 8000fb4:	40020000 	.word	0x40020000

08000fb8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd4:	2204      	movs	r2, #4
 8000fd6:	409a      	lsls	r2, r3
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d04f      	beq.n	8001080 <HAL_DMA_IRQHandler+0xc8>
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	f003 0304 	and.w	r3, r3, #4
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d04a      	beq.n	8001080 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f003 0320 	and.w	r3, r3, #32
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d107      	bne.n	8001008 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f022 0204 	bic.w	r2, r2, #4
 8001006:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a66      	ldr	r2, [pc, #408]	@ (80011a8 <HAL_DMA_IRQHandler+0x1f0>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d029      	beq.n	8001066 <HAL_DMA_IRQHandler+0xae>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a65      	ldr	r2, [pc, #404]	@ (80011ac <HAL_DMA_IRQHandler+0x1f4>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d022      	beq.n	8001062 <HAL_DMA_IRQHandler+0xaa>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a63      	ldr	r2, [pc, #396]	@ (80011b0 <HAL_DMA_IRQHandler+0x1f8>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d01a      	beq.n	800105c <HAL_DMA_IRQHandler+0xa4>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a62      	ldr	r2, [pc, #392]	@ (80011b4 <HAL_DMA_IRQHandler+0x1fc>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d012      	beq.n	8001056 <HAL_DMA_IRQHandler+0x9e>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a60      	ldr	r2, [pc, #384]	@ (80011b8 <HAL_DMA_IRQHandler+0x200>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d00a      	beq.n	8001050 <HAL_DMA_IRQHandler+0x98>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a5f      	ldr	r2, [pc, #380]	@ (80011bc <HAL_DMA_IRQHandler+0x204>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d102      	bne.n	800104a <HAL_DMA_IRQHandler+0x92>
 8001044:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001048:	e00e      	b.n	8001068 <HAL_DMA_IRQHandler+0xb0>
 800104a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800104e:	e00b      	b.n	8001068 <HAL_DMA_IRQHandler+0xb0>
 8001050:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001054:	e008      	b.n	8001068 <HAL_DMA_IRQHandler+0xb0>
 8001056:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800105a:	e005      	b.n	8001068 <HAL_DMA_IRQHandler+0xb0>
 800105c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001060:	e002      	b.n	8001068 <HAL_DMA_IRQHandler+0xb0>
 8001062:	2340      	movs	r3, #64	@ 0x40
 8001064:	e000      	b.n	8001068 <HAL_DMA_IRQHandler+0xb0>
 8001066:	2304      	movs	r3, #4
 8001068:	4a55      	ldr	r2, [pc, #340]	@ (80011c0 <HAL_DMA_IRQHandler+0x208>)
 800106a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001070:	2b00      	cmp	r3, #0
 8001072:	f000 8094 	beq.w	800119e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800107e:	e08e      	b.n	800119e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001084:	2202      	movs	r2, #2
 8001086:	409a      	lsls	r2, r3
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4013      	ands	r3, r2
 800108c:	2b00      	cmp	r3, #0
 800108e:	d056      	beq.n	800113e <HAL_DMA_IRQHandler+0x186>
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d051      	beq.n	800113e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 0320 	and.w	r3, r3, #32
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d10b      	bne.n	80010c0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f022 020a 	bic.w	r2, r2, #10
 80010b6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2201      	movs	r2, #1
 80010bc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a38      	ldr	r2, [pc, #224]	@ (80011a8 <HAL_DMA_IRQHandler+0x1f0>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d029      	beq.n	800111e <HAL_DMA_IRQHandler+0x166>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a37      	ldr	r2, [pc, #220]	@ (80011ac <HAL_DMA_IRQHandler+0x1f4>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d022      	beq.n	800111a <HAL_DMA_IRQHandler+0x162>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a35      	ldr	r2, [pc, #212]	@ (80011b0 <HAL_DMA_IRQHandler+0x1f8>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d01a      	beq.n	8001114 <HAL_DMA_IRQHandler+0x15c>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a34      	ldr	r2, [pc, #208]	@ (80011b4 <HAL_DMA_IRQHandler+0x1fc>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d012      	beq.n	800110e <HAL_DMA_IRQHandler+0x156>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a32      	ldr	r2, [pc, #200]	@ (80011b8 <HAL_DMA_IRQHandler+0x200>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d00a      	beq.n	8001108 <HAL_DMA_IRQHandler+0x150>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a31      	ldr	r2, [pc, #196]	@ (80011bc <HAL_DMA_IRQHandler+0x204>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d102      	bne.n	8001102 <HAL_DMA_IRQHandler+0x14a>
 80010fc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001100:	e00e      	b.n	8001120 <HAL_DMA_IRQHandler+0x168>
 8001102:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001106:	e00b      	b.n	8001120 <HAL_DMA_IRQHandler+0x168>
 8001108:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800110c:	e008      	b.n	8001120 <HAL_DMA_IRQHandler+0x168>
 800110e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001112:	e005      	b.n	8001120 <HAL_DMA_IRQHandler+0x168>
 8001114:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001118:	e002      	b.n	8001120 <HAL_DMA_IRQHandler+0x168>
 800111a:	2320      	movs	r3, #32
 800111c:	e000      	b.n	8001120 <HAL_DMA_IRQHandler+0x168>
 800111e:	2302      	movs	r3, #2
 8001120:	4a27      	ldr	r2, [pc, #156]	@ (80011c0 <HAL_DMA_IRQHandler+0x208>)
 8001122:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001130:	2b00      	cmp	r3, #0
 8001132:	d034      	beq.n	800119e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800113c:	e02f      	b.n	800119e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001142:	2208      	movs	r2, #8
 8001144:	409a      	lsls	r2, r3
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	4013      	ands	r3, r2
 800114a:	2b00      	cmp	r3, #0
 800114c:	d028      	beq.n	80011a0 <HAL_DMA_IRQHandler+0x1e8>
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	f003 0308 	and.w	r3, r3, #8
 8001154:	2b00      	cmp	r3, #0
 8001156:	d023      	beq.n	80011a0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f022 020e 	bic.w	r2, r2, #14
 8001166:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001170:	2101      	movs	r1, #1
 8001172:	fa01 f202 	lsl.w	r2, r1, r2
 8001176:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2201      	movs	r2, #1
 800117c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2201      	movs	r2, #1
 8001182:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2200      	movs	r2, #0
 800118a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001192:	2b00      	cmp	r3, #0
 8001194:	d004      	beq.n	80011a0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	4798      	blx	r3
    }
  }
  return;
 800119e:	bf00      	nop
 80011a0:	bf00      	nop
}
 80011a2:	3710      	adds	r7, #16
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40020008 	.word	0x40020008
 80011ac:	4002001c 	.word	0x4002001c
 80011b0:	40020030 	.word	0x40020030
 80011b4:	40020044 	.word	0x40020044
 80011b8:	40020058 	.word	0x40020058
 80011bc:	4002006c 	.word	0x4002006c
 80011c0:	40020000 	.word	0x40020000

080011c4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
 80011d0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011da:	2101      	movs	r1, #1
 80011dc:	fa01 f202 	lsl.w	r2, r1, r2
 80011e0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	683a      	ldr	r2, [r7, #0]
 80011e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	2b10      	cmp	r3, #16
 80011f0:	d108      	bne.n	8001204 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001202:	e007      	b.n	8001214 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	68ba      	ldr	r2, [r7, #8]
 800120a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	60da      	str	r2, [r3, #12]
}
 8001214:	bf00      	nop
 8001216:	3714      	adds	r7, #20
 8001218:	46bd      	mov	sp, r7
 800121a:	bc80      	pop	{r7}
 800121c:	4770      	bx	lr
	...

08001220 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001220:	b480      	push	{r7}
 8001222:	b08b      	sub	sp, #44	@ 0x2c
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800122a:	2300      	movs	r3, #0
 800122c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800122e:	2300      	movs	r3, #0
 8001230:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001232:	e169      	b.n	8001508 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001234:	2201      	movs	r2, #1
 8001236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	69fa      	ldr	r2, [r7, #28]
 8001244:	4013      	ands	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	429a      	cmp	r2, r3
 800124e:	f040 8158 	bne.w	8001502 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	4a9a      	ldr	r2, [pc, #616]	@ (80014c0 <HAL_GPIO_Init+0x2a0>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d05e      	beq.n	800131a <HAL_GPIO_Init+0xfa>
 800125c:	4a98      	ldr	r2, [pc, #608]	@ (80014c0 <HAL_GPIO_Init+0x2a0>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d875      	bhi.n	800134e <HAL_GPIO_Init+0x12e>
 8001262:	4a98      	ldr	r2, [pc, #608]	@ (80014c4 <HAL_GPIO_Init+0x2a4>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d058      	beq.n	800131a <HAL_GPIO_Init+0xfa>
 8001268:	4a96      	ldr	r2, [pc, #600]	@ (80014c4 <HAL_GPIO_Init+0x2a4>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d86f      	bhi.n	800134e <HAL_GPIO_Init+0x12e>
 800126e:	4a96      	ldr	r2, [pc, #600]	@ (80014c8 <HAL_GPIO_Init+0x2a8>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d052      	beq.n	800131a <HAL_GPIO_Init+0xfa>
 8001274:	4a94      	ldr	r2, [pc, #592]	@ (80014c8 <HAL_GPIO_Init+0x2a8>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d869      	bhi.n	800134e <HAL_GPIO_Init+0x12e>
 800127a:	4a94      	ldr	r2, [pc, #592]	@ (80014cc <HAL_GPIO_Init+0x2ac>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d04c      	beq.n	800131a <HAL_GPIO_Init+0xfa>
 8001280:	4a92      	ldr	r2, [pc, #584]	@ (80014cc <HAL_GPIO_Init+0x2ac>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d863      	bhi.n	800134e <HAL_GPIO_Init+0x12e>
 8001286:	4a92      	ldr	r2, [pc, #584]	@ (80014d0 <HAL_GPIO_Init+0x2b0>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d046      	beq.n	800131a <HAL_GPIO_Init+0xfa>
 800128c:	4a90      	ldr	r2, [pc, #576]	@ (80014d0 <HAL_GPIO_Init+0x2b0>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d85d      	bhi.n	800134e <HAL_GPIO_Init+0x12e>
 8001292:	2b12      	cmp	r3, #18
 8001294:	d82a      	bhi.n	80012ec <HAL_GPIO_Init+0xcc>
 8001296:	2b12      	cmp	r3, #18
 8001298:	d859      	bhi.n	800134e <HAL_GPIO_Init+0x12e>
 800129a:	a201      	add	r2, pc, #4	@ (adr r2, 80012a0 <HAL_GPIO_Init+0x80>)
 800129c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012a0:	0800131b 	.word	0x0800131b
 80012a4:	080012f5 	.word	0x080012f5
 80012a8:	08001307 	.word	0x08001307
 80012ac:	08001349 	.word	0x08001349
 80012b0:	0800134f 	.word	0x0800134f
 80012b4:	0800134f 	.word	0x0800134f
 80012b8:	0800134f 	.word	0x0800134f
 80012bc:	0800134f 	.word	0x0800134f
 80012c0:	0800134f 	.word	0x0800134f
 80012c4:	0800134f 	.word	0x0800134f
 80012c8:	0800134f 	.word	0x0800134f
 80012cc:	0800134f 	.word	0x0800134f
 80012d0:	0800134f 	.word	0x0800134f
 80012d4:	0800134f 	.word	0x0800134f
 80012d8:	0800134f 	.word	0x0800134f
 80012dc:	0800134f 	.word	0x0800134f
 80012e0:	0800134f 	.word	0x0800134f
 80012e4:	080012fd 	.word	0x080012fd
 80012e8:	08001311 	.word	0x08001311
 80012ec:	4a79      	ldr	r2, [pc, #484]	@ (80014d4 <HAL_GPIO_Init+0x2b4>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d013      	beq.n	800131a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012f2:	e02c      	b.n	800134e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	623b      	str	r3, [r7, #32]
          break;
 80012fa:	e029      	b.n	8001350 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	3304      	adds	r3, #4
 8001302:	623b      	str	r3, [r7, #32]
          break;
 8001304:	e024      	b.n	8001350 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	3308      	adds	r3, #8
 800130c:	623b      	str	r3, [r7, #32]
          break;
 800130e:	e01f      	b.n	8001350 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	330c      	adds	r3, #12
 8001316:	623b      	str	r3, [r7, #32]
          break;
 8001318:	e01a      	b.n	8001350 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d102      	bne.n	8001328 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001322:	2304      	movs	r3, #4
 8001324:	623b      	str	r3, [r7, #32]
          break;
 8001326:	e013      	b.n	8001350 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d105      	bne.n	800133c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001330:	2308      	movs	r3, #8
 8001332:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	69fa      	ldr	r2, [r7, #28]
 8001338:	611a      	str	r2, [r3, #16]
          break;
 800133a:	e009      	b.n	8001350 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800133c:	2308      	movs	r3, #8
 800133e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	69fa      	ldr	r2, [r7, #28]
 8001344:	615a      	str	r2, [r3, #20]
          break;
 8001346:	e003      	b.n	8001350 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001348:	2300      	movs	r3, #0
 800134a:	623b      	str	r3, [r7, #32]
          break;
 800134c:	e000      	b.n	8001350 <HAL_GPIO_Init+0x130>
          break;
 800134e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	2bff      	cmp	r3, #255	@ 0xff
 8001354:	d801      	bhi.n	800135a <HAL_GPIO_Init+0x13a>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	e001      	b.n	800135e <HAL_GPIO_Init+0x13e>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	3304      	adds	r3, #4
 800135e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	2bff      	cmp	r3, #255	@ 0xff
 8001364:	d802      	bhi.n	800136c <HAL_GPIO_Init+0x14c>
 8001366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	e002      	b.n	8001372 <HAL_GPIO_Init+0x152>
 800136c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800136e:	3b08      	subs	r3, #8
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	210f      	movs	r1, #15
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	fa01 f303 	lsl.w	r3, r1, r3
 8001380:	43db      	mvns	r3, r3
 8001382:	401a      	ands	r2, r3
 8001384:	6a39      	ldr	r1, [r7, #32]
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	fa01 f303 	lsl.w	r3, r1, r3
 800138c:	431a      	orrs	r2, r3
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800139a:	2b00      	cmp	r3, #0
 800139c:	f000 80b1 	beq.w	8001502 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013a0:	4b4d      	ldr	r3, [pc, #308]	@ (80014d8 <HAL_GPIO_Init+0x2b8>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	4a4c      	ldr	r2, [pc, #304]	@ (80014d8 <HAL_GPIO_Init+0x2b8>)
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	6193      	str	r3, [r2, #24]
 80013ac:	4b4a      	ldr	r3, [pc, #296]	@ (80014d8 <HAL_GPIO_Init+0x2b8>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013b8:	4a48      	ldr	r2, [pc, #288]	@ (80014dc <HAL_GPIO_Init+0x2bc>)
 80013ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013bc:	089b      	lsrs	r3, r3, #2
 80013be:	3302      	adds	r3, #2
 80013c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c8:	f003 0303 	and.w	r3, r3, #3
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	220f      	movs	r2, #15
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	68fa      	ldr	r2, [r7, #12]
 80013d8:	4013      	ands	r3, r2
 80013da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a40      	ldr	r2, [pc, #256]	@ (80014e0 <HAL_GPIO_Init+0x2c0>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d013      	beq.n	800140c <HAL_GPIO_Init+0x1ec>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a3f      	ldr	r2, [pc, #252]	@ (80014e4 <HAL_GPIO_Init+0x2c4>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d00d      	beq.n	8001408 <HAL_GPIO_Init+0x1e8>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a3e      	ldr	r2, [pc, #248]	@ (80014e8 <HAL_GPIO_Init+0x2c8>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d007      	beq.n	8001404 <HAL_GPIO_Init+0x1e4>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4a3d      	ldr	r2, [pc, #244]	@ (80014ec <HAL_GPIO_Init+0x2cc>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d101      	bne.n	8001400 <HAL_GPIO_Init+0x1e0>
 80013fc:	2303      	movs	r3, #3
 80013fe:	e006      	b.n	800140e <HAL_GPIO_Init+0x1ee>
 8001400:	2304      	movs	r3, #4
 8001402:	e004      	b.n	800140e <HAL_GPIO_Init+0x1ee>
 8001404:	2302      	movs	r3, #2
 8001406:	e002      	b.n	800140e <HAL_GPIO_Init+0x1ee>
 8001408:	2301      	movs	r3, #1
 800140a:	e000      	b.n	800140e <HAL_GPIO_Init+0x1ee>
 800140c:	2300      	movs	r3, #0
 800140e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001410:	f002 0203 	and.w	r2, r2, #3
 8001414:	0092      	lsls	r2, r2, #2
 8001416:	4093      	lsls	r3, r2
 8001418:	68fa      	ldr	r2, [r7, #12]
 800141a:	4313      	orrs	r3, r2
 800141c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800141e:	492f      	ldr	r1, [pc, #188]	@ (80014dc <HAL_GPIO_Init+0x2bc>)
 8001420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001422:	089b      	lsrs	r3, r3, #2
 8001424:	3302      	adds	r3, #2
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d006      	beq.n	8001446 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001438:	4b2d      	ldr	r3, [pc, #180]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	492c      	ldr	r1, [pc, #176]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	4313      	orrs	r3, r2
 8001442:	608b      	str	r3, [r1, #8]
 8001444:	e006      	b.n	8001454 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001446:	4b2a      	ldr	r3, [pc, #168]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001448:	689a      	ldr	r2, [r3, #8]
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	43db      	mvns	r3, r3
 800144e:	4928      	ldr	r1, [pc, #160]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001450:	4013      	ands	r3, r2
 8001452:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d006      	beq.n	800146e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001460:	4b23      	ldr	r3, [pc, #140]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001462:	68da      	ldr	r2, [r3, #12]
 8001464:	4922      	ldr	r1, [pc, #136]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	4313      	orrs	r3, r2
 800146a:	60cb      	str	r3, [r1, #12]
 800146c:	e006      	b.n	800147c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800146e:	4b20      	ldr	r3, [pc, #128]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001470:	68da      	ldr	r2, [r3, #12]
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	43db      	mvns	r3, r3
 8001476:	491e      	ldr	r1, [pc, #120]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001478:	4013      	ands	r3, r2
 800147a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d006      	beq.n	8001496 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001488:	4b19      	ldr	r3, [pc, #100]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 800148a:	685a      	ldr	r2, [r3, #4]
 800148c:	4918      	ldr	r1, [pc, #96]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	4313      	orrs	r3, r2
 8001492:	604b      	str	r3, [r1, #4]
 8001494:	e006      	b.n	80014a4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001496:	4b16      	ldr	r3, [pc, #88]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001498:	685a      	ldr	r2, [r3, #4]
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	43db      	mvns	r3, r3
 800149e:	4914      	ldr	r1, [pc, #80]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 80014a0:	4013      	ands	r3, r2
 80014a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d021      	beq.n	80014f4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014b0:	4b0f      	ldr	r3, [pc, #60]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	490e      	ldr	r1, [pc, #56]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	600b      	str	r3, [r1, #0]
 80014bc:	e021      	b.n	8001502 <HAL_GPIO_Init+0x2e2>
 80014be:	bf00      	nop
 80014c0:	10320000 	.word	0x10320000
 80014c4:	10310000 	.word	0x10310000
 80014c8:	10220000 	.word	0x10220000
 80014cc:	10210000 	.word	0x10210000
 80014d0:	10120000 	.word	0x10120000
 80014d4:	10110000 	.word	0x10110000
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40010000 	.word	0x40010000
 80014e0:	40010800 	.word	0x40010800
 80014e4:	40010c00 	.word	0x40010c00
 80014e8:	40011000 	.word	0x40011000
 80014ec:	40011400 	.word	0x40011400
 80014f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001524 <HAL_GPIO_Init+0x304>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	43db      	mvns	r3, r3
 80014fc:	4909      	ldr	r1, [pc, #36]	@ (8001524 <HAL_GPIO_Init+0x304>)
 80014fe:	4013      	ands	r3, r2
 8001500:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001504:	3301      	adds	r3, #1
 8001506:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150e:	fa22 f303 	lsr.w	r3, r2, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	f47f ae8e 	bne.w	8001234 <HAL_GPIO_Init+0x14>
  }
}
 8001518:	bf00      	nop
 800151a:	bf00      	nop
 800151c:	372c      	adds	r7, #44	@ 0x2c
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr
 8001524:	40010400 	.word	0x40010400

08001528 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	460b      	mov	r3, r1
 8001532:	807b      	strh	r3, [r7, #2]
 8001534:	4613      	mov	r3, r2
 8001536:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001538:	787b      	ldrb	r3, [r7, #1]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800153e:	887a      	ldrh	r2, [r7, #2]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001544:	e003      	b.n	800154e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001546:	887b      	ldrh	r3, [r7, #2]
 8001548:	041a      	lsls	r2, r3, #16
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	611a      	str	r2, [r3, #16]
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr

08001558 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e272      	b.n	8001a50 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	2b00      	cmp	r3, #0
 8001574:	f000 8087 	beq.w	8001686 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001578:	4b92      	ldr	r3, [pc, #584]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f003 030c 	and.w	r3, r3, #12
 8001580:	2b04      	cmp	r3, #4
 8001582:	d00c      	beq.n	800159e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001584:	4b8f      	ldr	r3, [pc, #572]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f003 030c 	and.w	r3, r3, #12
 800158c:	2b08      	cmp	r3, #8
 800158e:	d112      	bne.n	80015b6 <HAL_RCC_OscConfig+0x5e>
 8001590:	4b8c      	ldr	r3, [pc, #560]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001598:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800159c:	d10b      	bne.n	80015b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800159e:	4b89      	ldr	r3, [pc, #548]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d06c      	beq.n	8001684 <HAL_RCC_OscConfig+0x12c>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d168      	bne.n	8001684 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e24c      	b.n	8001a50 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015be:	d106      	bne.n	80015ce <HAL_RCC_OscConfig+0x76>
 80015c0:	4b80      	ldr	r3, [pc, #512]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a7f      	ldr	r2, [pc, #508]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 80015c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015ca:	6013      	str	r3, [r2, #0]
 80015cc:	e02e      	b.n	800162c <HAL_RCC_OscConfig+0xd4>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d10c      	bne.n	80015f0 <HAL_RCC_OscConfig+0x98>
 80015d6:	4b7b      	ldr	r3, [pc, #492]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a7a      	ldr	r2, [pc, #488]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 80015dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015e0:	6013      	str	r3, [r2, #0]
 80015e2:	4b78      	ldr	r3, [pc, #480]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a77      	ldr	r2, [pc, #476]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 80015e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015ec:	6013      	str	r3, [r2, #0]
 80015ee:	e01d      	b.n	800162c <HAL_RCC_OscConfig+0xd4>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015f8:	d10c      	bne.n	8001614 <HAL_RCC_OscConfig+0xbc>
 80015fa:	4b72      	ldr	r3, [pc, #456]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a71      	ldr	r2, [pc, #452]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 8001600:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001604:	6013      	str	r3, [r2, #0]
 8001606:	4b6f      	ldr	r3, [pc, #444]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a6e      	ldr	r2, [pc, #440]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 800160c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	e00b      	b.n	800162c <HAL_RCC_OscConfig+0xd4>
 8001614:	4b6b      	ldr	r3, [pc, #428]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a6a      	ldr	r2, [pc, #424]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 800161a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800161e:	6013      	str	r3, [r2, #0]
 8001620:	4b68      	ldr	r3, [pc, #416]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a67      	ldr	r2, [pc, #412]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 8001626:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800162a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d013      	beq.n	800165c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001634:	f7ff fa52 	bl	8000adc <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800163c:	f7ff fa4e 	bl	8000adc <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b64      	cmp	r3, #100	@ 0x64
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e200      	b.n	8001a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164e:	4b5d      	ldr	r3, [pc, #372]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0f0      	beq.n	800163c <HAL_RCC_OscConfig+0xe4>
 800165a:	e014      	b.n	8001686 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165c:	f7ff fa3e 	bl	8000adc <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001664:	f7ff fa3a 	bl	8000adc <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b64      	cmp	r3, #100	@ 0x64
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e1ec      	b.n	8001a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001676:	4b53      	ldr	r3, [pc, #332]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1f0      	bne.n	8001664 <HAL_RCC_OscConfig+0x10c>
 8001682:	e000      	b.n	8001686 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d063      	beq.n	800175a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001692:	4b4c      	ldr	r3, [pc, #304]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f003 030c 	and.w	r3, r3, #12
 800169a:	2b00      	cmp	r3, #0
 800169c:	d00b      	beq.n	80016b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800169e:	4b49      	ldr	r3, [pc, #292]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f003 030c 	and.w	r3, r3, #12
 80016a6:	2b08      	cmp	r3, #8
 80016a8:	d11c      	bne.n	80016e4 <HAL_RCC_OscConfig+0x18c>
 80016aa:	4b46      	ldr	r3, [pc, #280]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d116      	bne.n	80016e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016b6:	4b43      	ldr	r3, [pc, #268]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d005      	beq.n	80016ce <HAL_RCC_OscConfig+0x176>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d001      	beq.n	80016ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e1c0      	b.n	8001a50 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ce:	4b3d      	ldr	r3, [pc, #244]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	4939      	ldr	r1, [pc, #228]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 80016de:	4313      	orrs	r3, r2
 80016e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016e2:	e03a      	b.n	800175a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	691b      	ldr	r3, [r3, #16]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d020      	beq.n	800172e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016ec:	4b36      	ldr	r3, [pc, #216]	@ (80017c8 <HAL_RCC_OscConfig+0x270>)
 80016ee:	2201      	movs	r2, #1
 80016f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f2:	f7ff f9f3 	bl	8000adc <HAL_GetTick>
 80016f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f8:	e008      	b.n	800170c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016fa:	f7ff f9ef 	bl	8000adc <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d901      	bls.n	800170c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e1a1      	b.n	8001a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800170c:	4b2d      	ldr	r3, [pc, #180]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0302 	and.w	r3, r3, #2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d0f0      	beq.n	80016fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001718:	4b2a      	ldr	r3, [pc, #168]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	695b      	ldr	r3, [r3, #20]
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	4927      	ldr	r1, [pc, #156]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 8001728:	4313      	orrs	r3, r2
 800172a:	600b      	str	r3, [r1, #0]
 800172c:	e015      	b.n	800175a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800172e:	4b26      	ldr	r3, [pc, #152]	@ (80017c8 <HAL_RCC_OscConfig+0x270>)
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001734:	f7ff f9d2 	bl	8000adc <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800173c:	f7ff f9ce 	bl	8000adc <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e180      	b.n	8001a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800174e:	4b1d      	ldr	r3, [pc, #116]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1f0      	bne.n	800173c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0308 	and.w	r3, r3, #8
 8001762:	2b00      	cmp	r3, #0
 8001764:	d03a      	beq.n	80017dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d019      	beq.n	80017a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800176e:	4b17      	ldr	r3, [pc, #92]	@ (80017cc <HAL_RCC_OscConfig+0x274>)
 8001770:	2201      	movs	r2, #1
 8001772:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001774:	f7ff f9b2 	bl	8000adc <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800177c:	f7ff f9ae 	bl	8000adc <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e160      	b.n	8001a50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800178e:	4b0d      	ldr	r3, [pc, #52]	@ (80017c4 <HAL_RCC_OscConfig+0x26c>)
 8001790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d0f0      	beq.n	800177c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800179a:	2001      	movs	r0, #1
 800179c:	f000 fa9c 	bl	8001cd8 <RCC_Delay>
 80017a0:	e01c      	b.n	80017dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017a2:	4b0a      	ldr	r3, [pc, #40]	@ (80017cc <HAL_RCC_OscConfig+0x274>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a8:	f7ff f998 	bl	8000adc <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017ae:	e00f      	b.n	80017d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017b0:	f7ff f994 	bl	8000adc <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d908      	bls.n	80017d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e146      	b.n	8001a50 <HAL_RCC_OscConfig+0x4f8>
 80017c2:	bf00      	nop
 80017c4:	40021000 	.word	0x40021000
 80017c8:	42420000 	.word	0x42420000
 80017cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d0:	4b92      	ldr	r3, [pc, #584]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 80017d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1e9      	bne.n	80017b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0304 	and.w	r3, r3, #4
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	f000 80a6 	beq.w	8001936 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017ea:	2300      	movs	r3, #0
 80017ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ee:	4b8b      	ldr	r3, [pc, #556]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d10d      	bne.n	8001816 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017fa:	4b88      	ldr	r3, [pc, #544]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	4a87      	ldr	r2, [pc, #540]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 8001800:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001804:	61d3      	str	r3, [r2, #28]
 8001806:	4b85      	ldr	r3, [pc, #532]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001812:	2301      	movs	r3, #1
 8001814:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001816:	4b82      	ldr	r3, [pc, #520]	@ (8001a20 <HAL_RCC_OscConfig+0x4c8>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800181e:	2b00      	cmp	r3, #0
 8001820:	d118      	bne.n	8001854 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001822:	4b7f      	ldr	r3, [pc, #508]	@ (8001a20 <HAL_RCC_OscConfig+0x4c8>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a7e      	ldr	r2, [pc, #504]	@ (8001a20 <HAL_RCC_OscConfig+0x4c8>)
 8001828:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800182c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800182e:	f7ff f955 	bl	8000adc <HAL_GetTick>
 8001832:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001834:	e008      	b.n	8001848 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001836:	f7ff f951 	bl	8000adc <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b64      	cmp	r3, #100	@ 0x64
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e103      	b.n	8001a50 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001848:	4b75      	ldr	r3, [pc, #468]	@ (8001a20 <HAL_RCC_OscConfig+0x4c8>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001850:	2b00      	cmp	r3, #0
 8001852:	d0f0      	beq.n	8001836 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d106      	bne.n	800186a <HAL_RCC_OscConfig+0x312>
 800185c:	4b6f      	ldr	r3, [pc, #444]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 800185e:	6a1b      	ldr	r3, [r3, #32]
 8001860:	4a6e      	ldr	r2, [pc, #440]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 8001862:	f043 0301 	orr.w	r3, r3, #1
 8001866:	6213      	str	r3, [r2, #32]
 8001868:	e02d      	b.n	80018c6 <HAL_RCC_OscConfig+0x36e>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d10c      	bne.n	800188c <HAL_RCC_OscConfig+0x334>
 8001872:	4b6a      	ldr	r3, [pc, #424]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 8001874:	6a1b      	ldr	r3, [r3, #32]
 8001876:	4a69      	ldr	r2, [pc, #420]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 8001878:	f023 0301 	bic.w	r3, r3, #1
 800187c:	6213      	str	r3, [r2, #32]
 800187e:	4b67      	ldr	r3, [pc, #412]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 8001880:	6a1b      	ldr	r3, [r3, #32]
 8001882:	4a66      	ldr	r2, [pc, #408]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 8001884:	f023 0304 	bic.w	r3, r3, #4
 8001888:	6213      	str	r3, [r2, #32]
 800188a:	e01c      	b.n	80018c6 <HAL_RCC_OscConfig+0x36e>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	2b05      	cmp	r3, #5
 8001892:	d10c      	bne.n	80018ae <HAL_RCC_OscConfig+0x356>
 8001894:	4b61      	ldr	r3, [pc, #388]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	4a60      	ldr	r2, [pc, #384]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 800189a:	f043 0304 	orr.w	r3, r3, #4
 800189e:	6213      	str	r3, [r2, #32]
 80018a0:	4b5e      	ldr	r3, [pc, #376]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 80018a2:	6a1b      	ldr	r3, [r3, #32]
 80018a4:	4a5d      	ldr	r2, [pc, #372]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 80018a6:	f043 0301 	orr.w	r3, r3, #1
 80018aa:	6213      	str	r3, [r2, #32]
 80018ac:	e00b      	b.n	80018c6 <HAL_RCC_OscConfig+0x36e>
 80018ae:	4b5b      	ldr	r3, [pc, #364]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 80018b0:	6a1b      	ldr	r3, [r3, #32]
 80018b2:	4a5a      	ldr	r2, [pc, #360]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 80018b4:	f023 0301 	bic.w	r3, r3, #1
 80018b8:	6213      	str	r3, [r2, #32]
 80018ba:	4b58      	ldr	r3, [pc, #352]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 80018bc:	6a1b      	ldr	r3, [r3, #32]
 80018be:	4a57      	ldr	r2, [pc, #348]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 80018c0:	f023 0304 	bic.w	r3, r3, #4
 80018c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d015      	beq.n	80018fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ce:	f7ff f905 	bl	8000adc <HAL_GetTick>
 80018d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d4:	e00a      	b.n	80018ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018d6:	f7ff f901 	bl	8000adc <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e0b1      	b.n	8001a50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ec:	4b4b      	ldr	r3, [pc, #300]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 80018ee:	6a1b      	ldr	r3, [r3, #32]
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d0ee      	beq.n	80018d6 <HAL_RCC_OscConfig+0x37e>
 80018f8:	e014      	b.n	8001924 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018fa:	f7ff f8ef 	bl	8000adc <HAL_GetTick>
 80018fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001900:	e00a      	b.n	8001918 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001902:	f7ff f8eb 	bl	8000adc <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001910:	4293      	cmp	r3, r2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e09b      	b.n	8001a50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001918:	4b40      	ldr	r3, [pc, #256]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1ee      	bne.n	8001902 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001924:	7dfb      	ldrb	r3, [r7, #23]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d105      	bne.n	8001936 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800192a:	4b3c      	ldr	r3, [pc, #240]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 800192c:	69db      	ldr	r3, [r3, #28]
 800192e:	4a3b      	ldr	r2, [pc, #236]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 8001930:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001934:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	2b00      	cmp	r3, #0
 800193c:	f000 8087 	beq.w	8001a4e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001940:	4b36      	ldr	r3, [pc, #216]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 030c 	and.w	r3, r3, #12
 8001948:	2b08      	cmp	r3, #8
 800194a:	d061      	beq.n	8001a10 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	69db      	ldr	r3, [r3, #28]
 8001950:	2b02      	cmp	r3, #2
 8001952:	d146      	bne.n	80019e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001954:	4b33      	ldr	r3, [pc, #204]	@ (8001a24 <HAL_RCC_OscConfig+0x4cc>)
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195a:	f7ff f8bf 	bl	8000adc <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001960:	e008      	b.n	8001974 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001962:	f7ff f8bb 	bl	8000adc <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e06d      	b.n	8001a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001974:	4b29      	ldr	r3, [pc, #164]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1f0      	bne.n	8001962 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a1b      	ldr	r3, [r3, #32]
 8001984:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001988:	d108      	bne.n	800199c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800198a:	4b24      	ldr	r3, [pc, #144]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	4921      	ldr	r1, [pc, #132]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 8001998:	4313      	orrs	r3, r2
 800199a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800199c:	4b1f      	ldr	r3, [pc, #124]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a19      	ldr	r1, [r3, #32]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ac:	430b      	orrs	r3, r1
 80019ae:	491b      	ldr	r1, [pc, #108]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a24 <HAL_RCC_OscConfig+0x4cc>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ba:	f7ff f88f 	bl	8000adc <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c2:	f7ff f88b 	bl	8000adc <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e03d      	b.n	8001a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019d4:	4b11      	ldr	r3, [pc, #68]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0f0      	beq.n	80019c2 <HAL_RCC_OscConfig+0x46a>
 80019e0:	e035      	b.n	8001a4e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e2:	4b10      	ldr	r3, [pc, #64]	@ (8001a24 <HAL_RCC_OscConfig+0x4cc>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e8:	f7ff f878 	bl	8000adc <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019f0:	f7ff f874 	bl	8000adc <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e026      	b.n	8001a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a02:	4b06      	ldr	r3, [pc, #24]	@ (8001a1c <HAL_RCC_OscConfig+0x4c4>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1f0      	bne.n	80019f0 <HAL_RCC_OscConfig+0x498>
 8001a0e:	e01e      	b.n	8001a4e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	69db      	ldr	r3, [r3, #28]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d107      	bne.n	8001a28 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e019      	b.n	8001a50 <HAL_RCC_OscConfig+0x4f8>
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	40007000 	.word	0x40007000
 8001a24:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a28:	4b0b      	ldr	r3, [pc, #44]	@ (8001a58 <HAL_RCC_OscConfig+0x500>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d106      	bne.n	8001a4a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d001      	beq.n	8001a4e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e000      	b.n	8001a50 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3718      	adds	r7, #24
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40021000 	.word	0x40021000

08001a5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d101      	bne.n	8001a70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e0d0      	b.n	8001c12 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a70:	4b6a      	ldr	r3, [pc, #424]	@ (8001c1c <HAL_RCC_ClockConfig+0x1c0>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d910      	bls.n	8001aa0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a7e:	4b67      	ldr	r3, [pc, #412]	@ (8001c1c <HAL_RCC_ClockConfig+0x1c0>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f023 0207 	bic.w	r2, r3, #7
 8001a86:	4965      	ldr	r1, [pc, #404]	@ (8001c1c <HAL_RCC_ClockConfig+0x1c0>)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a8e:	4b63      	ldr	r3, [pc, #396]	@ (8001c1c <HAL_RCC_ClockConfig+0x1c0>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	683a      	ldr	r2, [r7, #0]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d001      	beq.n	8001aa0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e0b8      	b.n	8001c12 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d020      	beq.n	8001aee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0304 	and.w	r3, r3, #4
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d005      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ab8:	4b59      	ldr	r3, [pc, #356]	@ (8001c20 <HAL_RCC_ClockConfig+0x1c4>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	4a58      	ldr	r2, [pc, #352]	@ (8001c20 <HAL_RCC_ClockConfig+0x1c4>)
 8001abe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001ac2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0308 	and.w	r3, r3, #8
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d005      	beq.n	8001adc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ad0:	4b53      	ldr	r3, [pc, #332]	@ (8001c20 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	4a52      	ldr	r2, [pc, #328]	@ (8001c20 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001ada:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001adc:	4b50      	ldr	r3, [pc, #320]	@ (8001c20 <HAL_RCC_ClockConfig+0x1c4>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	494d      	ldr	r1, [pc, #308]	@ (8001c20 <HAL_RCC_ClockConfig+0x1c4>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d040      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d107      	bne.n	8001b12 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b02:	4b47      	ldr	r3, [pc, #284]	@ (8001c20 <HAL_RCC_ClockConfig+0x1c4>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d115      	bne.n	8001b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e07f      	b.n	8001c12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d107      	bne.n	8001b2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b1a:	4b41      	ldr	r3, [pc, #260]	@ (8001c20 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d109      	bne.n	8001b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e073      	b.n	8001c12 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b2a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c20 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e06b      	b.n	8001c12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b3a:	4b39      	ldr	r3, [pc, #228]	@ (8001c20 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f023 0203 	bic.w	r2, r3, #3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	4936      	ldr	r1, [pc, #216]	@ (8001c20 <HAL_RCC_ClockConfig+0x1c4>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b4c:	f7fe ffc6 	bl	8000adc <HAL_GetTick>
 8001b50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b52:	e00a      	b.n	8001b6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b54:	f7fe ffc2 	bl	8000adc <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e053      	b.n	8001c12 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b6a:	4b2d      	ldr	r3, [pc, #180]	@ (8001c20 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f003 020c 	and.w	r2, r3, #12
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d1eb      	bne.n	8001b54 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b7c:	4b27      	ldr	r3, [pc, #156]	@ (8001c1c <HAL_RCC_ClockConfig+0x1c0>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d210      	bcs.n	8001bac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b8a:	4b24      	ldr	r3, [pc, #144]	@ (8001c1c <HAL_RCC_ClockConfig+0x1c0>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f023 0207 	bic.w	r2, r3, #7
 8001b92:	4922      	ldr	r1, [pc, #136]	@ (8001c1c <HAL_RCC_ClockConfig+0x1c0>)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9a:	4b20      	ldr	r3, [pc, #128]	@ (8001c1c <HAL_RCC_ClockConfig+0x1c0>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d001      	beq.n	8001bac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e032      	b.n	8001c12 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0304 	and.w	r3, r3, #4
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d008      	beq.n	8001bca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bb8:	4b19      	ldr	r3, [pc, #100]	@ (8001c20 <HAL_RCC_ClockConfig+0x1c4>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	4916      	ldr	r1, [pc, #88]	@ (8001c20 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0308 	and.w	r3, r3, #8
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d009      	beq.n	8001bea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bd6:	4b12      	ldr	r3, [pc, #72]	@ (8001c20 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	490e      	ldr	r1, [pc, #56]	@ (8001c20 <HAL_RCC_ClockConfig+0x1c4>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bea:	f000 f821 	bl	8001c30 <HAL_RCC_GetSysClockFreq>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8001c20 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	091b      	lsrs	r3, r3, #4
 8001bf6:	f003 030f 	and.w	r3, r3, #15
 8001bfa:	490a      	ldr	r1, [pc, #40]	@ (8001c24 <HAL_RCC_ClockConfig+0x1c8>)
 8001bfc:	5ccb      	ldrb	r3, [r1, r3]
 8001bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8001c02:	4a09      	ldr	r2, [pc, #36]	@ (8001c28 <HAL_RCC_ClockConfig+0x1cc>)
 8001c04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c06:	4b09      	ldr	r3, [pc, #36]	@ (8001c2c <HAL_RCC_ClockConfig+0x1d0>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7fe ff24 	bl	8000a58 <HAL_InitTick>

  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40022000 	.word	0x40022000
 8001c20:	40021000 	.word	0x40021000
 8001c24:	08002f3c 	.word	0x08002f3c
 8001c28:	20000000 	.word	0x20000000
 8001c2c:	20000004 	.word	0x20000004

08001c30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b087      	sub	sp, #28
 8001c34:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c36:	2300      	movs	r3, #0
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60bb      	str	r3, [r7, #8]
 8001c3e:	2300      	movs	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]
 8001c42:	2300      	movs	r3, #0
 8001c44:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c46:	2300      	movs	r3, #0
 8001c48:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c4a:	4b1e      	ldr	r3, [pc, #120]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f003 030c 	and.w	r3, r3, #12
 8001c56:	2b04      	cmp	r3, #4
 8001c58:	d002      	beq.n	8001c60 <HAL_RCC_GetSysClockFreq+0x30>
 8001c5a:	2b08      	cmp	r3, #8
 8001c5c:	d003      	beq.n	8001c66 <HAL_RCC_GetSysClockFreq+0x36>
 8001c5e:	e027      	b.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c60:	4b19      	ldr	r3, [pc, #100]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c62:	613b      	str	r3, [r7, #16]
      break;
 8001c64:	e027      	b.n	8001cb6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	0c9b      	lsrs	r3, r3, #18
 8001c6a:	f003 030f 	and.w	r3, r3, #15
 8001c6e:	4a17      	ldr	r2, [pc, #92]	@ (8001ccc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c70:	5cd3      	ldrb	r3, [r2, r3]
 8001c72:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d010      	beq.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c7e:	4b11      	ldr	r3, [pc, #68]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	0c5b      	lsrs	r3, r3, #17
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	4a11      	ldr	r2, [pc, #68]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c8a:	5cd3      	ldrb	r3, [r2, r3]
 8001c8c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a0d      	ldr	r2, [pc, #52]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c92:	fb03 f202 	mul.w	r2, r3, r2
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c9c:	617b      	str	r3, [r7, #20]
 8001c9e:	e004      	b.n	8001caa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a0c      	ldr	r2, [pc, #48]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ca4:	fb02 f303 	mul.w	r3, r2, r3
 8001ca8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	613b      	str	r3, [r7, #16]
      break;
 8001cae:	e002      	b.n	8001cb6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cb0:	4b05      	ldr	r3, [pc, #20]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cb2:	613b      	str	r3, [r7, #16]
      break;
 8001cb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cb6:	693b      	ldr	r3, [r7, #16]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	371c      	adds	r7, #28
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	007a1200 	.word	0x007a1200
 8001ccc:	08002f4c 	.word	0x08002f4c
 8001cd0:	08002f5c 	.word	0x08002f5c
 8001cd4:	003d0900 	.word	0x003d0900

08001cd8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8001d0c <RCC_Delay+0x34>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a0a      	ldr	r2, [pc, #40]	@ (8001d10 <RCC_Delay+0x38>)
 8001ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cea:	0a5b      	lsrs	r3, r3, #9
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	fb02 f303 	mul.w	r3, r2, r3
 8001cf2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001cf4:	bf00      	nop
  }
  while (Delay --);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	1e5a      	subs	r2, r3, #1
 8001cfa:	60fa      	str	r2, [r7, #12]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1f9      	bne.n	8001cf4 <RCC_Delay+0x1c>
}
 8001d00:	bf00      	nop
 8001d02:	bf00      	nop
 8001d04:	3714      	adds	r7, #20
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bc80      	pop	{r7}
 8001d0a:	4770      	bx	lr
 8001d0c:	20000000 	.word	0x20000000
 8001d10:	10624dd3 	.word	0x10624dd3

08001d14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e041      	b.n	8001daa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d106      	bne.n	8001d40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7fe fd96 	bl	800086c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2202      	movs	r2, #2
 8001d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3304      	adds	r3, #4
 8001d50:	4619      	mov	r1, r3
 8001d52:	4610      	mov	r0, r2
 8001d54:	f000 fd5a 	bl	800280c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d101      	bne.n	8001dc4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e041      	b.n	8001e48 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d106      	bne.n	8001dde <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 f839 	bl	8001e50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2202      	movs	r2, #2
 8001de2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	3304      	adds	r3, #4
 8001dee:	4619      	mov	r1, r3
 8001df0:	4610      	mov	r0, r2
 8001df2:	f000 fd0b 	bl	800280c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2201      	movs	r2, #1
 8001e42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bc80      	pop	{r7}
 8001e60:	4770      	bx	lr
	...

08001e64 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
 8001e70:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8001e72:	2300      	movs	r3, #0
 8001e74:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d109      	bne.n	8001e90 <HAL_TIM_PWM_Start_DMA+0x2c>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	bf0c      	ite	eq
 8001e88:	2301      	moveq	r3, #1
 8001e8a:	2300      	movne	r3, #0
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	e022      	b.n	8001ed6 <HAL_TIM_PWM_Start_DMA+0x72>
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	d109      	bne.n	8001eaa <HAL_TIM_PWM_Start_DMA+0x46>
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	bf0c      	ite	eq
 8001ea2:	2301      	moveq	r3, #1
 8001ea4:	2300      	movne	r3, #0
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	e015      	b.n	8001ed6 <HAL_TIM_PWM_Start_DMA+0x72>
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	2b08      	cmp	r3, #8
 8001eae:	d109      	bne.n	8001ec4 <HAL_TIM_PWM_Start_DMA+0x60>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	bf0c      	ite	eq
 8001ebc:	2301      	moveq	r3, #1
 8001ebe:	2300      	movne	r3, #0
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	e008      	b.n	8001ed6 <HAL_TIM_PWM_Start_DMA+0x72>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	bf0c      	ite	eq
 8001ed0:	2301      	moveq	r3, #1
 8001ed2:	2300      	movne	r3, #0
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8001eda:	2302      	movs	r3, #2
 8001edc:	e153      	b.n	8002186 <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d109      	bne.n	8001ef8 <HAL_TIM_PWM_Start_DMA+0x94>
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	bf0c      	ite	eq
 8001ef0:	2301      	moveq	r3, #1
 8001ef2:	2300      	movne	r3, #0
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	e022      	b.n	8001f3e <HAL_TIM_PWM_Start_DMA+0xda>
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	d109      	bne.n	8001f12 <HAL_TIM_PWM_Start_DMA+0xae>
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	bf0c      	ite	eq
 8001f0a:	2301      	moveq	r3, #1
 8001f0c:	2300      	movne	r3, #0
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	e015      	b.n	8001f3e <HAL_TIM_PWM_Start_DMA+0xda>
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	2b08      	cmp	r3, #8
 8001f16:	d109      	bne.n	8001f2c <HAL_TIM_PWM_Start_DMA+0xc8>
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	bf0c      	ite	eq
 8001f24:	2301      	moveq	r3, #1
 8001f26:	2300      	movne	r3, #0
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	e008      	b.n	8001f3e <HAL_TIM_PWM_Start_DMA+0xda>
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	bf0c      	ite	eq
 8001f38:	2301      	moveq	r3, #1
 8001f3a:	2300      	movne	r3, #0
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d024      	beq.n	8001f8c <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d002      	beq.n	8001f4e <HAL_TIM_PWM_Start_DMA+0xea>
 8001f48:	887b      	ldrh	r3, [r7, #2]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e119      	b.n	8002186 <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d104      	bne.n	8001f62 <HAL_TIM_PWM_Start_DMA+0xfe>
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f60:	e016      	b.n	8001f90 <HAL_TIM_PWM_Start_DMA+0x12c>
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	2b04      	cmp	r3, #4
 8001f66:	d104      	bne.n	8001f72 <HAL_TIM_PWM_Start_DMA+0x10e>
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2202      	movs	r2, #2
 8001f6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f70:	e00e      	b.n	8001f90 <HAL_TIM_PWM_Start_DMA+0x12c>
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	2b08      	cmp	r3, #8
 8001f76:	d104      	bne.n	8001f82 <HAL_TIM_PWM_Start_DMA+0x11e>
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f80:	e006      	b.n	8001f90 <HAL_TIM_PWM_Start_DMA+0x12c>
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2202      	movs	r2, #2
 8001f86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001f8a:	e001      	b.n	8001f90 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e0fa      	b.n	8002186 <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	2b0c      	cmp	r3, #12
 8001f94:	f200 80ae 	bhi.w	80020f4 <HAL_TIM_PWM_Start_DMA+0x290>
 8001f98:	a201      	add	r2, pc, #4	@ (adr r2, 8001fa0 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8001f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f9e:	bf00      	nop
 8001fa0:	08001fd5 	.word	0x08001fd5
 8001fa4:	080020f5 	.word	0x080020f5
 8001fa8:	080020f5 	.word	0x080020f5
 8001fac:	080020f5 	.word	0x080020f5
 8001fb0:	0800201d 	.word	0x0800201d
 8001fb4:	080020f5 	.word	0x080020f5
 8001fb8:	080020f5 	.word	0x080020f5
 8001fbc:	080020f5 	.word	0x080020f5
 8001fc0:	08002065 	.word	0x08002065
 8001fc4:	080020f5 	.word	0x080020f5
 8001fc8:	080020f5 	.word	0x080020f5
 8001fcc:	080020f5 	.word	0x080020f5
 8001fd0:	080020ad 	.word	0x080020ad
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd8:	4a6d      	ldr	r2, [pc, #436]	@ (8002190 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8001fda:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe0:	4a6c      	ldr	r2, [pc, #432]	@ (8002194 <HAL_TIM_PWM_Start_DMA+0x330>)
 8001fe2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe8:	4a6b      	ldr	r2, [pc, #428]	@ (8002198 <HAL_TIM_PWM_Start_DMA+0x334>)
 8001fea:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8001ff0:	6879      	ldr	r1, [r7, #4]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	3334      	adds	r3, #52	@ 0x34
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	887b      	ldrh	r3, [r7, #2]
 8001ffc:	f7fe ff04 	bl	8000e08 <HAL_DMA_Start_IT>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e0bd      	b.n	8002186 <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	68da      	ldr	r2, [r3, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002018:	60da      	str	r2, [r3, #12]
      break;
 800201a:	e06e      	b.n	80020fa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002020:	4a5b      	ldr	r2, [pc, #364]	@ (8002190 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002022:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002028:	4a5a      	ldr	r2, [pc, #360]	@ (8002194 <HAL_TIM_PWM_Start_DMA+0x330>)
 800202a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002030:	4a59      	ldr	r2, [pc, #356]	@ (8002198 <HAL_TIM_PWM_Start_DMA+0x334>)
 8002032:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	3338      	adds	r3, #56	@ 0x38
 8002040:	461a      	mov	r2, r3
 8002042:	887b      	ldrh	r3, [r7, #2]
 8002044:	f7fe fee0 	bl	8000e08 <HAL_DMA_Start_IT>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e099      	b.n	8002186 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68da      	ldr	r2, [r3, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002060:	60da      	str	r2, [r3, #12]
      break;
 8002062:	e04a      	b.n	80020fa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002068:	4a49      	ldr	r2, [pc, #292]	@ (8002190 <HAL_TIM_PWM_Start_DMA+0x32c>)
 800206a:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002070:	4a48      	ldr	r2, [pc, #288]	@ (8002194 <HAL_TIM_PWM_Start_DMA+0x330>)
 8002072:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002078:	4a47      	ldr	r2, [pc, #284]	@ (8002198 <HAL_TIM_PWM_Start_DMA+0x334>)
 800207a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002080:	6879      	ldr	r1, [r7, #4]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	333c      	adds	r3, #60	@ 0x3c
 8002088:	461a      	mov	r2, r3
 800208a:	887b      	ldrh	r3, [r7, #2]
 800208c:	f7fe febc 	bl	8000e08 <HAL_DMA_Start_IT>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e075      	b.n	8002186 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68da      	ldr	r2, [r3, #12]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80020a8:	60da      	str	r2, [r3, #12]
      break;
 80020aa:	e026      	b.n	80020fa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b0:	4a37      	ldr	r2, [pc, #220]	@ (8002190 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80020b2:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b8:	4a36      	ldr	r2, [pc, #216]	@ (8002194 <HAL_TIM_PWM_Start_DMA+0x330>)
 80020ba:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c0:	4a35      	ldr	r2, [pc, #212]	@ (8002198 <HAL_TIM_PWM_Start_DMA+0x334>)
 80020c2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	3340      	adds	r3, #64	@ 0x40
 80020d0:	461a      	mov	r2, r3
 80020d2:	887b      	ldrh	r3, [r7, #2]
 80020d4:	f7fe fe98 	bl	8000e08 <HAL_DMA_Start_IT>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e051      	b.n	8002186 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68da      	ldr	r2, [r3, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80020f0:	60da      	str	r2, [r3, #12]
      break;
 80020f2:	e002      	b.n	80020fa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	75fb      	strb	r3, [r7, #23]
      break;
 80020f8:	bf00      	nop
  }

  if (status == HAL_OK)
 80020fa:	7dfb      	ldrb	r3, [r7, #23]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d141      	bne.n	8002184 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2201      	movs	r2, #1
 8002106:	68b9      	ldr	r1, [r7, #8]
 8002108:	4618      	mov	r0, r3
 800210a:	f000 fe0b 	bl	8002d24 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a22      	ldr	r2, [pc, #136]	@ (800219c <HAL_TIM_PWM_Start_DMA+0x338>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d107      	bne.n	8002128 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002126:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a1b      	ldr	r2, [pc, #108]	@ (800219c <HAL_TIM_PWM_Start_DMA+0x338>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d00e      	beq.n	8002150 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800213a:	d009      	beq.n	8002150 <HAL_TIM_PWM_Start_DMA+0x2ec>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a17      	ldr	r2, [pc, #92]	@ (80021a0 <HAL_TIM_PWM_Start_DMA+0x33c>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d004      	beq.n	8002150 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a16      	ldr	r2, [pc, #88]	@ (80021a4 <HAL_TIM_PWM_Start_DMA+0x340>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d111      	bne.n	8002174 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	2b06      	cmp	r3, #6
 8002160:	d010      	beq.n	8002184 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f042 0201 	orr.w	r2, r2, #1
 8002170:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002172:	e007      	b.n	8002184 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f042 0201 	orr.w	r2, r2, #1
 8002182:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002184:	7dfb      	ldrb	r3, [r7, #23]
}
 8002186:	4618      	mov	r0, r3
 8002188:	3718      	adds	r7, #24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	080026fd 	.word	0x080026fd
 8002194:	080027a5 	.word	0x080027a5
 8002198:	0800266b 	.word	0x0800266b
 800219c:	40012c00 	.word	0x40012c00
 80021a0:	40000400 	.word	0x40000400
 80021a4:	40000800 	.word	0x40000800

080021a8 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021b2:	2300      	movs	r3, #0
 80021b4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	2b0c      	cmp	r3, #12
 80021ba:	d855      	bhi.n	8002268 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80021bc:	a201      	add	r2, pc, #4	@ (adr r2, 80021c4 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80021be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c2:	bf00      	nop
 80021c4:	080021f9 	.word	0x080021f9
 80021c8:	08002269 	.word	0x08002269
 80021cc:	08002269 	.word	0x08002269
 80021d0:	08002269 	.word	0x08002269
 80021d4:	08002215 	.word	0x08002215
 80021d8:	08002269 	.word	0x08002269
 80021dc:	08002269 	.word	0x08002269
 80021e0:	08002269 	.word	0x08002269
 80021e4:	08002231 	.word	0x08002231
 80021e8:	08002269 	.word	0x08002269
 80021ec:	08002269 	.word	0x08002269
 80021f0:	08002269 	.word	0x08002269
 80021f4:	0800224d 	.word	0x0800224d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68da      	ldr	r2, [r3, #12]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002206:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800220c:	4618      	mov	r0, r3
 800220e:	f7fe fe5b 	bl	8000ec8 <HAL_DMA_Abort_IT>
      break;
 8002212:	e02c      	b.n	800226e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68da      	ldr	r2, [r3, #12]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002222:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002228:	4618      	mov	r0, r3
 800222a:	f7fe fe4d 	bl	8000ec8 <HAL_DMA_Abort_IT>
      break;
 800222e:	e01e      	b.n	800226e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68da      	ldr	r2, [r3, #12]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800223e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002244:	4618      	mov	r0, r3
 8002246:	f7fe fe3f 	bl	8000ec8 <HAL_DMA_Abort_IT>
      break;
 800224a:	e010      	b.n	800226e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68da      	ldr	r2, [r3, #12]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800225a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002260:	4618      	mov	r0, r3
 8002262:	f7fe fe31 	bl	8000ec8 <HAL_DMA_Abort_IT>
      break;
 8002266:	e002      	b.n	800226e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	73fb      	strb	r3, [r7, #15]
      break;
 800226c:	bf00      	nop
  }

  if (status == HAL_OK)
 800226e:	7bfb      	ldrb	r3, [r7, #15]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d157      	bne.n	8002324 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2200      	movs	r2, #0
 800227a:	6839      	ldr	r1, [r7, #0]
 800227c:	4618      	mov	r0, r3
 800227e:	f000 fd51 	bl	8002d24 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a2a      	ldr	r2, [pc, #168]	@ (8002330 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d117      	bne.n	80022bc <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6a1a      	ldr	r2, [r3, #32]
 8002292:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002296:	4013      	ands	r3, r2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d10f      	bne.n	80022bc <HAL_TIM_PWM_Stop_DMA+0x114>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6a1a      	ldr	r2, [r3, #32]
 80022a2:	f240 4344 	movw	r3, #1092	@ 0x444
 80022a6:	4013      	ands	r3, r2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d107      	bne.n	80022bc <HAL_TIM_PWM_Stop_DMA+0x114>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80022ba:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6a1a      	ldr	r2, [r3, #32]
 80022c2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80022c6:	4013      	ands	r3, r2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d10f      	bne.n	80022ec <HAL_TIM_PWM_Stop_DMA+0x144>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6a1a      	ldr	r2, [r3, #32]
 80022d2:	f240 4344 	movw	r3, #1092	@ 0x444
 80022d6:	4013      	ands	r3, r2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d107      	bne.n	80022ec <HAL_TIM_PWM_Stop_DMA+0x144>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 0201 	bic.w	r2, r2, #1
 80022ea:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d104      	bne.n	80022fc <HAL_TIM_PWM_Stop_DMA+0x154>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80022fa:	e013      	b.n	8002324 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	2b04      	cmp	r3, #4
 8002300:	d104      	bne.n	800230c <HAL_TIM_PWM_Stop_DMA+0x164>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800230a:	e00b      	b.n	8002324 <HAL_TIM_PWM_Stop_DMA+0x17c>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	2b08      	cmp	r3, #8
 8002310:	d104      	bne.n	800231c <HAL_TIM_PWM_Stop_DMA+0x174>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800231a:	e003      	b.n	8002324 <HAL_TIM_PWM_Stop_DMA+0x17c>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8002324:	7bfb      	ldrb	r3, [r7, #15]
}
 8002326:	4618      	mov	r0, r3
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40012c00 	.word	0x40012c00

08002334 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002340:	2300      	movs	r3, #0
 8002342:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800234a:	2b01      	cmp	r3, #1
 800234c:	d101      	bne.n	8002352 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800234e:	2302      	movs	r3, #2
 8002350:	e0ae      	b.n	80024b0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2b0c      	cmp	r3, #12
 800235e:	f200 809f 	bhi.w	80024a0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002362:	a201      	add	r2, pc, #4	@ (adr r2, 8002368 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002368:	0800239d 	.word	0x0800239d
 800236c:	080024a1 	.word	0x080024a1
 8002370:	080024a1 	.word	0x080024a1
 8002374:	080024a1 	.word	0x080024a1
 8002378:	080023dd 	.word	0x080023dd
 800237c:	080024a1 	.word	0x080024a1
 8002380:	080024a1 	.word	0x080024a1
 8002384:	080024a1 	.word	0x080024a1
 8002388:	0800241f 	.word	0x0800241f
 800238c:	080024a1 	.word	0x080024a1
 8002390:	080024a1 	.word	0x080024a1
 8002394:	080024a1 	.word	0x080024a1
 8002398:	0800245f 	.word	0x0800245f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68b9      	ldr	r1, [r7, #8]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 faa0 	bl	80028e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	699a      	ldr	r2, [r3, #24]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f042 0208 	orr.w	r2, r2, #8
 80023b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	699a      	ldr	r2, [r3, #24]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0204 	bic.w	r2, r2, #4
 80023c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6999      	ldr	r1, [r3, #24]
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	691a      	ldr	r2, [r3, #16]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	430a      	orrs	r2, r1
 80023d8:	619a      	str	r2, [r3, #24]
      break;
 80023da:	e064      	b.n	80024a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68b9      	ldr	r1, [r7, #8]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f000 fae6 	bl	80029b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	699a      	ldr	r2, [r3, #24]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	699a      	ldr	r2, [r3, #24]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002406:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6999      	ldr	r1, [r3, #24]
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	021a      	lsls	r2, r3, #8
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	430a      	orrs	r2, r1
 800241a:	619a      	str	r2, [r3, #24]
      break;
 800241c:	e043      	b.n	80024a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68b9      	ldr	r1, [r7, #8]
 8002424:	4618      	mov	r0, r3
 8002426:	f000 fb2f 	bl	8002a88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	69da      	ldr	r2, [r3, #28]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f042 0208 	orr.w	r2, r2, #8
 8002438:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	69da      	ldr	r2, [r3, #28]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 0204 	bic.w	r2, r2, #4
 8002448:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	69d9      	ldr	r1, [r3, #28]
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	691a      	ldr	r2, [r3, #16]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	430a      	orrs	r2, r1
 800245a:	61da      	str	r2, [r3, #28]
      break;
 800245c:	e023      	b.n	80024a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68b9      	ldr	r1, [r7, #8]
 8002464:	4618      	mov	r0, r3
 8002466:	f000 fb79 	bl	8002b5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	69da      	ldr	r2, [r3, #28]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002478:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	69da      	ldr	r2, [r3, #28]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002488:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	69d9      	ldr	r1, [r3, #28]
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	021a      	lsls	r2, r3, #8
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	430a      	orrs	r2, r1
 800249c:	61da      	str	r2, [r3, #28]
      break;
 800249e:	e002      	b.n	80024a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	75fb      	strb	r3, [r7, #23]
      break;
 80024a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80024ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024c2:	2300      	movs	r3, #0
 80024c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d101      	bne.n	80024d4 <HAL_TIM_ConfigClockSource+0x1c>
 80024d0:	2302      	movs	r3, #2
 80024d2:	e0b4      	b.n	800263e <HAL_TIM_ConfigClockSource+0x186>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2202      	movs	r2, #2
 80024e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80024f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80024fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68ba      	ldr	r2, [r7, #8]
 8002502:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800250c:	d03e      	beq.n	800258c <HAL_TIM_ConfigClockSource+0xd4>
 800250e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002512:	f200 8087 	bhi.w	8002624 <HAL_TIM_ConfigClockSource+0x16c>
 8002516:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800251a:	f000 8086 	beq.w	800262a <HAL_TIM_ConfigClockSource+0x172>
 800251e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002522:	d87f      	bhi.n	8002624 <HAL_TIM_ConfigClockSource+0x16c>
 8002524:	2b70      	cmp	r3, #112	@ 0x70
 8002526:	d01a      	beq.n	800255e <HAL_TIM_ConfigClockSource+0xa6>
 8002528:	2b70      	cmp	r3, #112	@ 0x70
 800252a:	d87b      	bhi.n	8002624 <HAL_TIM_ConfigClockSource+0x16c>
 800252c:	2b60      	cmp	r3, #96	@ 0x60
 800252e:	d050      	beq.n	80025d2 <HAL_TIM_ConfigClockSource+0x11a>
 8002530:	2b60      	cmp	r3, #96	@ 0x60
 8002532:	d877      	bhi.n	8002624 <HAL_TIM_ConfigClockSource+0x16c>
 8002534:	2b50      	cmp	r3, #80	@ 0x50
 8002536:	d03c      	beq.n	80025b2 <HAL_TIM_ConfigClockSource+0xfa>
 8002538:	2b50      	cmp	r3, #80	@ 0x50
 800253a:	d873      	bhi.n	8002624 <HAL_TIM_ConfigClockSource+0x16c>
 800253c:	2b40      	cmp	r3, #64	@ 0x40
 800253e:	d058      	beq.n	80025f2 <HAL_TIM_ConfigClockSource+0x13a>
 8002540:	2b40      	cmp	r3, #64	@ 0x40
 8002542:	d86f      	bhi.n	8002624 <HAL_TIM_ConfigClockSource+0x16c>
 8002544:	2b30      	cmp	r3, #48	@ 0x30
 8002546:	d064      	beq.n	8002612 <HAL_TIM_ConfigClockSource+0x15a>
 8002548:	2b30      	cmp	r3, #48	@ 0x30
 800254a:	d86b      	bhi.n	8002624 <HAL_TIM_ConfigClockSource+0x16c>
 800254c:	2b20      	cmp	r3, #32
 800254e:	d060      	beq.n	8002612 <HAL_TIM_ConfigClockSource+0x15a>
 8002550:	2b20      	cmp	r3, #32
 8002552:	d867      	bhi.n	8002624 <HAL_TIM_ConfigClockSource+0x16c>
 8002554:	2b00      	cmp	r3, #0
 8002556:	d05c      	beq.n	8002612 <HAL_TIM_ConfigClockSource+0x15a>
 8002558:	2b10      	cmp	r3, #16
 800255a:	d05a      	beq.n	8002612 <HAL_TIM_ConfigClockSource+0x15a>
 800255c:	e062      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800256e:	f000 fbba 	bl	8002ce6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002580:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	609a      	str	r2, [r3, #8]
      break;
 800258a:	e04f      	b.n	800262c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800259c:	f000 fba3 	bl	8002ce6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689a      	ldr	r2, [r3, #8]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80025ae:	609a      	str	r2, [r3, #8]
      break;
 80025b0:	e03c      	b.n	800262c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025be:	461a      	mov	r2, r3
 80025c0:	f000 fb1a 	bl	8002bf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2150      	movs	r1, #80	@ 0x50
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 fb71 	bl	8002cb2 <TIM_ITRx_SetConfig>
      break;
 80025d0:	e02c      	b.n	800262c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80025de:	461a      	mov	r2, r3
 80025e0:	f000 fb38 	bl	8002c54 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2160      	movs	r1, #96	@ 0x60
 80025ea:	4618      	mov	r0, r3
 80025ec:	f000 fb61 	bl	8002cb2 <TIM_ITRx_SetConfig>
      break;
 80025f0:	e01c      	b.n	800262c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025fe:	461a      	mov	r2, r3
 8002600:	f000 fafa 	bl	8002bf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2140      	movs	r1, #64	@ 0x40
 800260a:	4618      	mov	r0, r3
 800260c:	f000 fb51 	bl	8002cb2 <TIM_ITRx_SetConfig>
      break;
 8002610:	e00c      	b.n	800262c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4619      	mov	r1, r3
 800261c:	4610      	mov	r0, r2
 800261e:	f000 fb48 	bl	8002cb2 <TIM_ITRx_SetConfig>
      break;
 8002622:	e003      	b.n	800262c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	73fb      	strb	r3, [r7, #15]
      break;
 8002628:	e000      	b.n	800262c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800262a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800263c:	7bfb      	ldrb	r3, [r7, #15]
}
 800263e:	4618      	mov	r0, r3
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002646:	b480      	push	{r7}
 8002648:	b083      	sub	sp, #12
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800264e:	bf00      	nop
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr

08002658 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr

0800266a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b084      	sub	sp, #16
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002676:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	429a      	cmp	r2, r3
 8002680:	d107      	bne.n	8002692 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2201      	movs	r2, #1
 8002686:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002690:	e02a      	b.n	80026e8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	429a      	cmp	r2, r3
 800269a:	d107      	bne.n	80026ac <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2202      	movs	r2, #2
 80026a0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80026aa:	e01d      	b.n	80026e8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d107      	bne.n	80026c6 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2204      	movs	r2, #4
 80026ba:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80026c4:	e010      	b.n	80026e8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d107      	bne.n	80026e0 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2208      	movs	r2, #8
 80026d4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80026de:	e003      	b.n	80026e8 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f7ff ffb5 	bl	8002658 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2200      	movs	r2, #0
 80026f2:	771a      	strb	r2, [r3, #28]
}
 80026f4:	bf00      	nop
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002708:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	429a      	cmp	r2, r3
 8002712:	d10b      	bne.n	800272c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2201      	movs	r2, #1
 8002718:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d136      	bne.n	8002790 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800272a:	e031      	b.n	8002790 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	429a      	cmp	r2, r3
 8002734:	d10b      	bne.n	800274e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2202      	movs	r2, #2
 800273a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d125      	bne.n	8002790 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800274c:	e020      	b.n	8002790 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	429a      	cmp	r2, r3
 8002756:	d10b      	bne.n	8002770 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2204      	movs	r2, #4
 800275c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d114      	bne.n	8002790 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800276e:	e00f      	b.n	8002790 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	429a      	cmp	r2, r3
 8002778:	d10a      	bne.n	8002790 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2208      	movs	r2, #8
 800277e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d103      	bne.n	8002790 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f7fd fcdb 	bl	800014c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	771a      	strb	r2, [r3, #28]
}
 800279c:	bf00      	nop
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d103      	bne.n	80027c4 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2201      	movs	r2, #1
 80027c0:	771a      	strb	r2, [r3, #28]
 80027c2:	e019      	b.n	80027f8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d103      	bne.n	80027d6 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2202      	movs	r2, #2
 80027d2:	771a      	strb	r2, [r3, #28]
 80027d4:	e010      	b.n	80027f8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d103      	bne.n	80027e8 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2204      	movs	r2, #4
 80027e4:	771a      	strb	r2, [r3, #28]
 80027e6:	e007      	b.n	80027f8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d102      	bne.n	80027f8 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2208      	movs	r2, #8
 80027f6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f7ff ff24 	bl	8002646 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	771a      	strb	r2, [r3, #28]
}
 8002804:	bf00      	nop
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a2f      	ldr	r2, [pc, #188]	@ (80028dc <TIM_Base_SetConfig+0xd0>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d00b      	beq.n	800283c <TIM_Base_SetConfig+0x30>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800282a:	d007      	beq.n	800283c <TIM_Base_SetConfig+0x30>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a2c      	ldr	r2, [pc, #176]	@ (80028e0 <TIM_Base_SetConfig+0xd4>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d003      	beq.n	800283c <TIM_Base_SetConfig+0x30>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a2b      	ldr	r2, [pc, #172]	@ (80028e4 <TIM_Base_SetConfig+0xd8>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d108      	bne.n	800284e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002842:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	4313      	orrs	r3, r2
 800284c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a22      	ldr	r2, [pc, #136]	@ (80028dc <TIM_Base_SetConfig+0xd0>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d00b      	beq.n	800286e <TIM_Base_SetConfig+0x62>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800285c:	d007      	beq.n	800286e <TIM_Base_SetConfig+0x62>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a1f      	ldr	r2, [pc, #124]	@ (80028e0 <TIM_Base_SetConfig+0xd4>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d003      	beq.n	800286e <TIM_Base_SetConfig+0x62>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a1e      	ldr	r2, [pc, #120]	@ (80028e4 <TIM_Base_SetConfig+0xd8>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d108      	bne.n	8002880 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002874:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	4313      	orrs	r3, r2
 800287e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	4313      	orrs	r3, r2
 800288c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a0d      	ldr	r2, [pc, #52]	@ (80028dc <TIM_Base_SetConfig+0xd0>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d103      	bne.n	80028b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	691a      	ldr	r2, [r3, #16]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d005      	beq.n	80028d2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	f023 0201 	bic.w	r2, r3, #1
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	611a      	str	r2, [r3, #16]
  }
}
 80028d2:	bf00      	nop
 80028d4:	3714      	adds	r7, #20
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr
 80028dc:	40012c00 	.word	0x40012c00
 80028e0:	40000400 	.word	0x40000400
 80028e4:	40000800 	.word	0x40000800

080028e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b087      	sub	sp, #28
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	f023 0201 	bic.w	r2, r3, #1
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f023 0303 	bic.w	r3, r3, #3
 800291e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	4313      	orrs	r3, r2
 8002928:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	f023 0302 	bic.w	r3, r3, #2
 8002930:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	4313      	orrs	r3, r2
 800293a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a1c      	ldr	r2, [pc, #112]	@ (80029b0 <TIM_OC1_SetConfig+0xc8>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d10c      	bne.n	800295e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	f023 0308 	bic.w	r3, r3, #8
 800294a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	4313      	orrs	r3, r2
 8002954:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	f023 0304 	bic.w	r3, r3, #4
 800295c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a13      	ldr	r2, [pc, #76]	@ (80029b0 <TIM_OC1_SetConfig+0xc8>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d111      	bne.n	800298a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800296c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002974:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	4313      	orrs	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	4313      	orrs	r3, r2
 8002988:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	697a      	ldr	r2, [r7, #20]
 80029a2:	621a      	str	r2, [r3, #32]
}
 80029a4:	bf00      	nop
 80029a6:	371c      	adds	r7, #28
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	40012c00 	.word	0x40012c00

080029b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b087      	sub	sp, #28
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	f023 0210 	bic.w	r2, r3, #16
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80029e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	021b      	lsls	r3, r3, #8
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	f023 0320 	bic.w	r3, r3, #32
 80029fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	011b      	lsls	r3, r3, #4
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a1d      	ldr	r2, [pc, #116]	@ (8002a84 <TIM_OC2_SetConfig+0xd0>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d10d      	bne.n	8002a30 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	011b      	lsls	r3, r3, #4
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a14      	ldr	r2, [pc, #80]	@ (8002a84 <TIM_OC2_SetConfig+0xd0>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d113      	bne.n	8002a60 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002a3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002a46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	695b      	ldr	r3, [r3, #20]
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	621a      	str	r2, [r3, #32]
}
 8002a7a:	bf00      	nop
 8002a7c:	371c      	adds	r7, #28
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bc80      	pop	{r7}
 8002a82:	4770      	bx	lr
 8002a84:	40012c00 	.word	0x40012c00

08002a88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b087      	sub	sp, #28
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f023 0303 	bic.w	r3, r3, #3
 8002abe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002ad0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	021b      	lsls	r3, r3, #8
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a1d      	ldr	r2, [pc, #116]	@ (8002b58 <TIM_OC3_SetConfig+0xd0>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d10d      	bne.n	8002b02 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002aec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	021b      	lsls	r3, r3, #8
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002b00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a14      	ldr	r2, [pc, #80]	@ (8002b58 <TIM_OC3_SetConfig+0xd0>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d113      	bne.n	8002b32 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002b10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002b18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	011b      	lsls	r3, r3, #4
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	011b      	lsls	r3, r3, #4
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	697a      	ldr	r2, [r7, #20]
 8002b4a:	621a      	str	r2, [r3, #32]
}
 8002b4c:	bf00      	nop
 8002b4e:	371c      	adds	r7, #28
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bc80      	pop	{r7}
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40012c00 	.word	0x40012c00

08002b5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b087      	sub	sp, #28
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	021b      	lsls	r3, r3, #8
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002ba6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	031b      	lsls	r3, r3, #12
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a0f      	ldr	r2, [pc, #60]	@ (8002bf4 <TIM_OC4_SetConfig+0x98>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d109      	bne.n	8002bd0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002bc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	019b      	lsls	r3, r3, #6
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	621a      	str	r2, [r3, #32]
}
 8002bea:	bf00      	nop
 8002bec:	371c      	adds	r7, #28
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bc80      	pop	{r7}
 8002bf2:	4770      	bx	lr
 8002bf4:	40012c00 	.word	0x40012c00

08002bf8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b087      	sub	sp, #28
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	f023 0201 	bic.w	r2, r3, #1
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	f023 030a 	bic.w	r3, r3, #10
 8002c34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	621a      	str	r2, [r3, #32]
}
 8002c4a:	bf00      	nop
 8002c4c:	371c      	adds	r7, #28
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bc80      	pop	{r7}
 8002c52:	4770      	bx	lr

08002c54 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b087      	sub	sp, #28
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	f023 0210 	bic.w	r2, r3, #16
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002c7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	031b      	lsls	r3, r3, #12
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002c90:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	011b      	lsls	r3, r3, #4
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	697a      	ldr	r2, [r7, #20]
 8002ca6:	621a      	str	r2, [r3, #32]
}
 8002ca8:	bf00      	nop
 8002caa:	371c      	adds	r7, #28
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bc80      	pop	{r7}
 8002cb0:	4770      	bx	lr

08002cb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b085      	sub	sp, #20
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
 8002cba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	f043 0307 	orr.w	r3, r3, #7
 8002cd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	609a      	str	r2, [r3, #8]
}
 8002cdc:	bf00      	nop
 8002cde:	3714      	adds	r7, #20
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bc80      	pop	{r7}
 8002ce4:	4770      	bx	lr

08002ce6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b087      	sub	sp, #28
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	60f8      	str	r0, [r7, #12]
 8002cee:	60b9      	str	r1, [r7, #8]
 8002cf0:	607a      	str	r2, [r7, #4]
 8002cf2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d00:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	021a      	lsls	r2, r3, #8
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	609a      	str	r2, [r3, #8]
}
 8002d1a:	bf00      	nop
 8002d1c:	371c      	adds	r7, #28
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr

08002d24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b087      	sub	sp, #28
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	f003 031f 	and.w	r3, r3, #31
 8002d36:	2201      	movs	r2, #1
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6a1a      	ldr	r2, [r3, #32]
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	43db      	mvns	r3, r3
 8002d46:	401a      	ands	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6a1a      	ldr	r2, [r3, #32]
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	f003 031f 	and.w	r3, r3, #31
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	621a      	str	r2, [r3, #32]
}
 8002d62:	bf00      	nop
 8002d64:	371c      	adds	r7, #28
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bc80      	pop	{r7}
 8002d6a:	4770      	bx	lr

08002d6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d101      	bne.n	8002d84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d80:	2302      	movs	r3, #2
 8002d82:	e046      	b.n	8002e12 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2202      	movs	r2, #2
 8002d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002daa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a16      	ldr	r2, [pc, #88]	@ (8002e1c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d00e      	beq.n	8002de6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dd0:	d009      	beq.n	8002de6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a12      	ldr	r2, [pc, #72]	@ (8002e20 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d004      	beq.n	8002de6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a10      	ldr	r2, [pc, #64]	@ (8002e24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d10c      	bne.n	8002e00 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002dec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	68ba      	ldr	r2, [r7, #8]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68ba      	ldr	r2, [r7, #8]
 8002dfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3714      	adds	r7, #20
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr
 8002e1c:	40012c00 	.word	0x40012c00
 8002e20:	40000400 	.word	0x40000400
 8002e24:	40000800 	.word	0x40000800

08002e28 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002e32:	2300      	movs	r3, #0
 8002e34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d101      	bne.n	8002e44 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002e40:	2302      	movs	r3, #2
 8002e42:	e03d      	b.n	8002ec0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3714      	adds	r7, #20
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bc80      	pop	{r7}
 8002ec8:	4770      	bx	lr

08002eca <memset>:
 8002eca:	4603      	mov	r3, r0
 8002ecc:	4402      	add	r2, r0
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d100      	bne.n	8002ed4 <memset+0xa>
 8002ed2:	4770      	bx	lr
 8002ed4:	f803 1b01 	strb.w	r1, [r3], #1
 8002ed8:	e7f9      	b.n	8002ece <memset+0x4>
	...

08002edc <__libc_init_array>:
 8002edc:	b570      	push	{r4, r5, r6, lr}
 8002ede:	2600      	movs	r6, #0
 8002ee0:	4d0c      	ldr	r5, [pc, #48]	@ (8002f14 <__libc_init_array+0x38>)
 8002ee2:	4c0d      	ldr	r4, [pc, #52]	@ (8002f18 <__libc_init_array+0x3c>)
 8002ee4:	1b64      	subs	r4, r4, r5
 8002ee6:	10a4      	asrs	r4, r4, #2
 8002ee8:	42a6      	cmp	r6, r4
 8002eea:	d109      	bne.n	8002f00 <__libc_init_array+0x24>
 8002eec:	f000 f81a 	bl	8002f24 <_init>
 8002ef0:	2600      	movs	r6, #0
 8002ef2:	4d0a      	ldr	r5, [pc, #40]	@ (8002f1c <__libc_init_array+0x40>)
 8002ef4:	4c0a      	ldr	r4, [pc, #40]	@ (8002f20 <__libc_init_array+0x44>)
 8002ef6:	1b64      	subs	r4, r4, r5
 8002ef8:	10a4      	asrs	r4, r4, #2
 8002efa:	42a6      	cmp	r6, r4
 8002efc:	d105      	bne.n	8002f0a <__libc_init_array+0x2e>
 8002efe:	bd70      	pop	{r4, r5, r6, pc}
 8002f00:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f04:	4798      	blx	r3
 8002f06:	3601      	adds	r6, #1
 8002f08:	e7ee      	b.n	8002ee8 <__libc_init_array+0xc>
 8002f0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f0e:	4798      	blx	r3
 8002f10:	3601      	adds	r6, #1
 8002f12:	e7f2      	b.n	8002efa <__libc_init_array+0x1e>
 8002f14:	08002f60 	.word	0x08002f60
 8002f18:	08002f60 	.word	0x08002f60
 8002f1c:	08002f60 	.word	0x08002f60
 8002f20:	08002f64 	.word	0x08002f64

08002f24 <_init>:
 8002f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f26:	bf00      	nop
 8002f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f2a:	bc08      	pop	{r3}
 8002f2c:	469e      	mov	lr, r3
 8002f2e:	4770      	bx	lr

08002f30 <_fini>:
 8002f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f32:	bf00      	nop
 8002f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f36:	bc08      	pop	{r3}
 8002f38:	469e      	mov	lr, r3
 8002f3a:	4770      	bx	lr
