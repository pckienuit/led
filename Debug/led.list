
led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ccc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002dd8  08002dd8  00003dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002dfc  08002dfc  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002dfc  08002dfc  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002dfc  08002dfc  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dfc  08002dfc  00003dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002e00  08002e00  00003e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002e04  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e34  2000000c  08002e10  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e40  08002e10  00004e40  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000086ac  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001865  00000000  00000000  0000c6e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a08  00000000  00000000  0000df48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007c4  00000000  00000000  0000e950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017280  00000000  00000000  0000f114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ae5e  00000000  00000000  00026394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087fa7  00000000  00000000  000311f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b9199  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002964  00000000  00000000  000b91dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000bbb40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002dc0 	.word	0x08002dc0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002dc0 	.word	0x08002dc0

0800014c <HAL_TIM_PWM_PulseFinishedCallback>:
uint8_t LED_Data[MAX_LED][4];
uint8_t LED_Mod[MAX_LED][4];

int datasentflag = 0;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8000154:	2100      	movs	r1, #0
 8000156:	4805      	ldr	r0, [pc, #20]	@ (800016c <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000158:	f001 ff74 	bl	8002044 <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;
 800015c:	4b04      	ldr	r3, [pc, #16]	@ (8000170 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 800015e:	2201      	movs	r2, #1
 8000160:	601a      	str	r2, [r3, #0]
}
 8000162:	bf00      	nop
 8000164:	3708      	adds	r7, #8
 8000166:	46bd      	mov	sp, r7
 8000168:	bd80      	pop	{r7, pc}
 800016a:	bf00      	nop
 800016c:	20000028 	.word	0x20000028
 8000170:	20000294 	.word	0x20000294

08000174 <Set_LED>:

void Set_LED (int LEDnum, int Red, int Green, int Blue) {
 8000174:	b480      	push	{r7}
 8000176:	b085      	sub	sp, #20
 8000178:	af00      	add	r7, sp, #0
 800017a:	60f8      	str	r0, [r7, #12]
 800017c:	60b9      	str	r1, [r7, #8]
 800017e:	607a      	str	r2, [r7, #4]
 8000180:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8000182:	68fb      	ldr	r3, [r7, #12]
 8000184:	b2d9      	uxtb	r1, r3
 8000186:	4a10      	ldr	r2, [pc, #64]	@ (80001c8 <Set_LED+0x54>)
 8000188:	68fb      	ldr	r3, [r7, #12]
 800018a:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	b2d9      	uxtb	r1, r3
 8000192:	4a0d      	ldr	r2, [pc, #52]	@ (80001c8 <Set_LED+0x54>)
 8000194:	68fb      	ldr	r3, [r7, #12]
 8000196:	009b      	lsls	r3, r3, #2
 8000198:	4413      	add	r3, r2
 800019a:	460a      	mov	r2, r1
 800019c:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 800019e:	68bb      	ldr	r3, [r7, #8]
 80001a0:	b2d9      	uxtb	r1, r3
 80001a2:	4a09      	ldr	r2, [pc, #36]	@ (80001c8 <Set_LED+0x54>)
 80001a4:	68fb      	ldr	r3, [r7, #12]
 80001a6:	009b      	lsls	r3, r3, #2
 80001a8:	4413      	add	r3, r2
 80001aa:	460a      	mov	r2, r1
 80001ac:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 80001ae:	683b      	ldr	r3, [r7, #0]
 80001b0:	b2d9      	uxtb	r1, r3
 80001b2:	4a05      	ldr	r2, [pc, #20]	@ (80001c8 <Set_LED+0x54>)
 80001b4:	68fb      	ldr	r3, [r7, #12]
 80001b6:	009b      	lsls	r3, r3, #2
 80001b8:	4413      	add	r3, r2
 80001ba:	460a      	mov	r2, r1
 80001bc:	70da      	strb	r2, [r3, #3]
}
 80001be:	bf00      	nop
 80001c0:	3714      	adds	r7, #20
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bc80      	pop	{r7}
 80001c6:	4770      	bx	lr
 80001c8:	200000b4 	.word	0x200000b4

080001cc <Set_Brightness>:
    }
}

#define PI 3.14159265

void Set_Brightness (int brightness) {
 80001cc:	b480      	push	{r7}
 80001ce:	b085      	sub	sp, #20
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if (brightness > 100) brightness = 100;
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	2b64      	cmp	r3, #100	@ 0x64
 80001d8:	dd01      	ble.n	80001de <Set_Brightness+0x12>
 80001da:	2364      	movs	r3, #100	@ 0x64
 80001dc:	607b      	str	r3, [r7, #4]
	if (brightness < 0) brightness = 0;
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	da01      	bge.n	80001e8 <Set_Brightness+0x1c>
 80001e4:	2300      	movs	r3, #0
 80001e6:	607b      	str	r3, [r7, #4]
	
	for (int i=0; i < MAX_LED; i++) {
 80001e8:	2300      	movs	r3, #0
 80001ea:	60fb      	str	r3, [r7, #12]
 80001ec:	e02d      	b.n	800024a <Set_Brightness+0x7e>
		LED_Mod[i][0] = LED_Data[i][0];
 80001ee:	4a1b      	ldr	r2, [pc, #108]	@ (800025c <Set_Brightness+0x90>)
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 80001f6:	4a1a      	ldr	r2, [pc, #104]	@ (8000260 <Set_Brightness+0x94>)
 80001f8:	68fb      	ldr	r3, [r7, #12]
 80001fa:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j = 1; j < 4; ++j) {
 80001fe:	2301      	movs	r3, #1
 8000200:	60bb      	str	r3, [r7, #8]
 8000202:	e01c      	b.n	800023e <Set_Brightness+0x72>
			// Simple percentage calculation: brightness from 0-100%
			LED_Mod[i][j] = (LED_Data[i][j] * brightness) / 100;
 8000204:	4a15      	ldr	r2, [pc, #84]	@ (800025c <Set_Brightness+0x90>)
 8000206:	68fb      	ldr	r3, [r7, #12]
 8000208:	009b      	lsls	r3, r3, #2
 800020a:	441a      	add	r2, r3
 800020c:	68bb      	ldr	r3, [r7, #8]
 800020e:	4413      	add	r3, r2
 8000210:	781b      	ldrb	r3, [r3, #0]
 8000212:	461a      	mov	r2, r3
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	fb02 f303 	mul.w	r3, r2, r3
 800021a:	4a12      	ldr	r2, [pc, #72]	@ (8000264 <Set_Brightness+0x98>)
 800021c:	fb82 1203 	smull	r1, r2, r2, r3
 8000220:	1152      	asrs	r2, r2, #5
 8000222:	17db      	asrs	r3, r3, #31
 8000224:	1ad3      	subs	r3, r2, r3
 8000226:	b2d9      	uxtb	r1, r3
 8000228:	4a0d      	ldr	r2, [pc, #52]	@ (8000260 <Set_Brightness+0x94>)
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	009b      	lsls	r3, r3, #2
 800022e:	441a      	add	r2, r3
 8000230:	68bb      	ldr	r3, [r7, #8]
 8000232:	4413      	add	r3, r2
 8000234:	460a      	mov	r2, r1
 8000236:	701a      	strb	r2, [r3, #0]
		for (int j = 1; j < 4; ++j) {
 8000238:	68bb      	ldr	r3, [r7, #8]
 800023a:	3301      	adds	r3, #1
 800023c:	60bb      	str	r3, [r7, #8]
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	2b03      	cmp	r3, #3
 8000242:	dddf      	ble.n	8000204 <Set_Brightness+0x38>
	for (int i=0; i < MAX_LED; i++) {
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	3301      	adds	r3, #1
 8000248:	60fb      	str	r3, [r7, #12]
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	2b3b      	cmp	r3, #59	@ 0x3b
 800024e:	ddce      	ble.n	80001ee <Set_Brightness+0x22>
		}
	}

#endif
}
 8000250:	bf00      	nop
 8000252:	bf00      	nop
 8000254:	3714      	adds	r7, #20
 8000256:	46bd      	mov	sp, r7
 8000258:	bc80      	pop	{r7}
 800025a:	4770      	bx	lr
 800025c:	200000b4 	.word	0x200000b4
 8000260:	200001a4 	.word	0x200001a4
 8000264:	51eb851f 	.word	0x51eb851f

08000268 <WS2812_Send>:
//
//	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, 24);
//}


void WS2812_Send (void) {
 8000268:	b580      	push	{r7, lr}
 800026a:	b086      	sub	sp, #24
 800026c:	af00      	add	r7, sp, #0
	uint32_t indx = 0;
 800026e:	2300      	movs	r3, #0
 8000270:	617b      	str	r3, [r7, #20]
	uint32_t color;

	for (int i = 0; i < MAX_LED; ++i) {
 8000272:	2300      	movs	r3, #0
 8000274:	613b      	str	r3, [r7, #16]
 8000276:	e036      	b.n	80002e6 <WS2812_Send+0x7e>
		color = ((LED_Mod[i][1] << 16) | (LED_Mod[i][2] << 8) | (LED_Mod[i][3]));
 8000278:	4a39      	ldr	r2, [pc, #228]	@ (8000360 <WS2812_Send+0xf8>)
 800027a:	693b      	ldr	r3, [r7, #16]
 800027c:	009b      	lsls	r3, r3, #2
 800027e:	4413      	add	r3, r2
 8000280:	785b      	ldrb	r3, [r3, #1]
 8000282:	041a      	lsls	r2, r3, #16
 8000284:	4936      	ldr	r1, [pc, #216]	@ (8000360 <WS2812_Send+0xf8>)
 8000286:	693b      	ldr	r3, [r7, #16]
 8000288:	009b      	lsls	r3, r3, #2
 800028a:	440b      	add	r3, r1
 800028c:	789b      	ldrb	r3, [r3, #2]
 800028e:	021b      	lsls	r3, r3, #8
 8000290:	431a      	orrs	r2, r3
 8000292:	4933      	ldr	r1, [pc, #204]	@ (8000360 <WS2812_Send+0xf8>)
 8000294:	693b      	ldr	r3, [r7, #16]
 8000296:	009b      	lsls	r3, r3, #2
 8000298:	440b      	add	r3, r1
 800029a:	78db      	ldrb	r3, [r3, #3]
 800029c:	4313      	orrs	r3, r2
 800029e:	603b      	str	r3, [r7, #0]

		for (int j = 23; j >= 0; j--) {
 80002a0:	2317      	movs	r3, #23
 80002a2:	60fb      	str	r3, [r7, #12]
 80002a4:	e019      	b.n	80002da <WS2812_Send+0x72>
			if (color&(1<<j)) {
 80002a6:	2201      	movs	r2, #1
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	fa02 f303 	lsl.w	r3, r2, r3
 80002ae:	461a      	mov	r2, r3
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	4013      	ands	r3, r2
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d005      	beq.n	80002c4 <WS2812_Send+0x5c>
				pwmData[indx] = 60;
 80002b8:	4a2a      	ldr	r2, [pc, #168]	@ (8000364 <WS2812_Send+0xfc>)
 80002ba:	697b      	ldr	r3, [r7, #20]
 80002bc:	213c      	movs	r1, #60	@ 0x3c
 80002be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80002c2:	e004      	b.n	80002ce <WS2812_Send+0x66>
			} else {
				pwmData[indx] = 30;
 80002c4:	4a27      	ldr	r2, [pc, #156]	@ (8000364 <WS2812_Send+0xfc>)
 80002c6:	697b      	ldr	r3, [r7, #20]
 80002c8:	211e      	movs	r1, #30
 80002ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}

			indx++;
 80002ce:	697b      	ldr	r3, [r7, #20]
 80002d0:	3301      	adds	r3, #1
 80002d2:	617b      	str	r3, [r7, #20]
		for (int j = 23; j >= 0; j--) {
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	3b01      	subs	r3, #1
 80002d8:	60fb      	str	r3, [r7, #12]
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	dae2      	bge.n	80002a6 <WS2812_Send+0x3e>
	for (int i = 0; i < MAX_LED; ++i) {
 80002e0:	693b      	ldr	r3, [r7, #16]
 80002e2:	3301      	adds	r3, #1
 80002e4:	613b      	str	r3, [r7, #16]
 80002e6:	693b      	ldr	r3, [r7, #16]
 80002e8:	2b3b      	cmp	r3, #59	@ 0x3b
 80002ea:	ddc5      	ble.n	8000278 <WS2812_Send+0x10>
		}
	}

	for (int i = 0; i < 50; ++i) {
 80002ec:	2300      	movs	r3, #0
 80002ee:	60bb      	str	r3, [r7, #8]
 80002f0:	e00a      	b.n	8000308 <WS2812_Send+0xa0>
		pwmData[indx] = 0;
 80002f2:	4a1c      	ldr	r2, [pc, #112]	@ (8000364 <WS2812_Send+0xfc>)
 80002f4:	697b      	ldr	r3, [r7, #20]
 80002f6:	2100      	movs	r1, #0
 80002f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 80002fc:	697b      	ldr	r3, [r7, #20]
 80002fe:	3301      	adds	r3, #1
 8000300:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 50; ++i) {
 8000302:	68bb      	ldr	r3, [r7, #8]
 8000304:	3301      	adds	r3, #1
 8000306:	60bb      	str	r3, [r7, #8]
 8000308:	68bb      	ldr	r3, [r7, #8]
 800030a:	2b31      	cmp	r3, #49	@ 0x31
 800030c:	ddf1      	ble.n	80002f2 <WS2812_Send+0x8a>
	}

	// Reset flag before starting DMA
	datasentflag = 0;
 800030e:	4b16      	ldr	r3, [pc, #88]	@ (8000368 <WS2812_Send+0x100>)
 8000310:	2200      	movs	r2, #0
 8000312:	601a      	str	r2, [r3, #0]
	
	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 8000314:	697b      	ldr	r3, [r7, #20]
 8000316:	b29b      	uxth	r3, r3
 8000318:	4a12      	ldr	r2, [pc, #72]	@ (8000364 <WS2812_Send+0xfc>)
 800031a:	2100      	movs	r1, #0
 800031c:	4813      	ldr	r0, [pc, #76]	@ (800036c <WS2812_Send+0x104>)
 800031e:	f001 fcef 	bl	8001d00 <HAL_TIM_PWM_Start_DMA>
	
	// Add timeout to prevent infinite loop
	uint32_t timeout = 1000000;  // Adjust timeout value
 8000322:	4b13      	ldr	r3, [pc, #76]	@ (8000370 <WS2812_Send+0x108>)
 8000324:	607b      	str	r3, [r7, #4]
	while(!datasentflag && timeout > 0) {
 8000326:	e002      	b.n	800032e <WS2812_Send+0xc6>
		timeout--;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	3b01      	subs	r3, #1
 800032c:	607b      	str	r3, [r7, #4]
	while(!datasentflag && timeout > 0) {
 800032e:	4b0e      	ldr	r3, [pc, #56]	@ (8000368 <WS2812_Send+0x100>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	2b00      	cmp	r3, #0
 8000334:	d102      	bne.n	800033c <WS2812_Send+0xd4>
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d1f5      	bne.n	8000328 <WS2812_Send+0xc0>
	}
	
	// Force stop if timeout occurred
	if (timeout == 0) {
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	2b00      	cmp	r3, #0
 8000340:	d106      	bne.n	8000350 <WS2812_Send+0xe8>
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8000342:	2100      	movs	r1, #0
 8000344:	4809      	ldr	r0, [pc, #36]	@ (800036c <WS2812_Send+0x104>)
 8000346:	f001 fe7d 	bl	8002044 <HAL_TIM_PWM_Stop_DMA>
		datasentflag = 1;
 800034a:	4b07      	ldr	r3, [pc, #28]	@ (8000368 <WS2812_Send+0x100>)
 800034c:	2201      	movs	r2, #1
 800034e:	601a      	str	r2, [r3, #0]
	}
	
	datasentflag = 0;
 8000350:	4b05      	ldr	r3, [pc, #20]	@ (8000368 <WS2812_Send+0x100>)
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
}
 8000356:	bf00      	nop
 8000358:	3718      	adds	r7, #24
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	200001a4 	.word	0x200001a4
 8000364:	20000298 	.word	0x20000298
 8000368:	20000294 	.word	0x20000294
 800036c:	20000028 	.word	0x20000028
 8000370:	000f4240 	.word	0x000f4240

08000374 <Rainbow_Effect>:
		WS2812_Send();
		HAL_Delay(LED_DELAY/speed);
	}
}

void Rainbow_Effect (int speed) {
 8000374:	b580      	push	{r7, lr}
 8000376:	b086      	sub	sp, #24
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
	for (int r = 0; r <= 255; r+=10) {
 800037c:	2300      	movs	r3, #0
 800037e:	617b      	str	r3, [r7, #20]
 8000380:	e022      	b.n	80003c8 <Rainbow_Effect+0x54>
		for (int g = 0; g <= 255; g+=10){
 8000382:	2300      	movs	r3, #0
 8000384:	613b      	str	r3, [r7, #16]
 8000386:	e019      	b.n	80003bc <Rainbow_Effect+0x48>
			for (int b = 0; b <= 255; b+=10) {
 8000388:	2300      	movs	r3, #0
 800038a:	60fb      	str	r3, [r7, #12]
 800038c:	e010      	b.n	80003b0 <Rainbow_Effect+0x3c>
				Set_LED(1, r, g, b);
 800038e:	68fb      	ldr	r3, [r7, #12]
 8000390:	693a      	ldr	r2, [r7, #16]
 8000392:	6979      	ldr	r1, [r7, #20]
 8000394:	2001      	movs	r0, #1
 8000396:	f7ff feed 	bl	8000174 <Set_LED>
				Set_Brightness(100);
 800039a:	2064      	movs	r0, #100	@ 0x64
 800039c:	f7ff ff16 	bl	80001cc <Set_Brightness>
				WS2812_Send();
 80003a0:	f7ff ff62 	bl	8000268 <WS2812_Send>
				HAL_Delay(10);
 80003a4:	200a      	movs	r0, #10
 80003a6:	f000 faf1 	bl	800098c <HAL_Delay>
			for (int b = 0; b <= 255; b+=10) {
 80003aa:	68fb      	ldr	r3, [r7, #12]
 80003ac:	330a      	adds	r3, #10
 80003ae:	60fb      	str	r3, [r7, #12]
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	2bff      	cmp	r3, #255	@ 0xff
 80003b4:	ddeb      	ble.n	800038e <Rainbow_Effect+0x1a>
		for (int g = 0; g <= 255; g+=10){
 80003b6:	693b      	ldr	r3, [r7, #16]
 80003b8:	330a      	adds	r3, #10
 80003ba:	613b      	str	r3, [r7, #16]
 80003bc:	693b      	ldr	r3, [r7, #16]
 80003be:	2bff      	cmp	r3, #255	@ 0xff
 80003c0:	dde2      	ble.n	8000388 <Rainbow_Effect+0x14>
	for (int r = 0; r <= 255; r+=10) {
 80003c2:	697b      	ldr	r3, [r7, #20]
 80003c4:	330a      	adds	r3, #10
 80003c6:	617b      	str	r3, [r7, #20]
 80003c8:	697b      	ldr	r3, [r7, #20]
 80003ca:	2bff      	cmp	r3, #255	@ 0xff
 80003cc:	ddd9      	ble.n	8000382 <Rainbow_Effect+0xe>
			}
		}
	}
}
 80003ce:	bf00      	nop
 80003d0:	bf00      	nop
 80003d2:	3718      	adds	r7, #24
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}

080003d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003dc:	f000 fa74 	bl	80008c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003e0:	f000 f80a 	bl	80003f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003e4:	f000 f90c 	bl	8000600 <MX_GPIO_Init>
  MX_DMA_Init();
 80003e8:	f000 f8ec 	bl	80005c4 <MX_DMA_Init>
  MX_TIM1_Init();
 80003ec:	f000 f84a 	bl	8000484 <MX_TIM1_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //Fade_Effect(255, 0, 0, 10);
	  Rainbow_Effect(10);
 80003f0:	200a      	movs	r0, #10
 80003f2:	f7ff ffbf 	bl	8000374 <Rainbow_Effect>
 80003f6:	e7fb      	b.n	80003f0 <main+0x18>

080003f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b090      	sub	sp, #64	@ 0x40
 80003fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003fe:	f107 0318 	add.w	r3, r7, #24
 8000402:	2228      	movs	r2, #40	@ 0x28
 8000404:	2100      	movs	r1, #0
 8000406:	4618      	mov	r0, r3
 8000408:	f002 fcad 	bl	8002d66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800040c:	1d3b      	adds	r3, r7, #4
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
 8000412:	605a      	str	r2, [r3, #4]
 8000414:	609a      	str	r2, [r3, #8]
 8000416:	60da      	str	r2, [r3, #12]
 8000418:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800041a:	2301      	movs	r3, #1
 800041c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800041e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000422:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000424:	2300      	movs	r3, #0
 8000426:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000428:	2301      	movs	r3, #1
 800042a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800042c:	2302      	movs	r3, #2
 800042e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000430:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000434:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000436:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800043a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800043c:	f107 0318 	add.w	r3, r7, #24
 8000440:	4618      	mov	r0, r3
 8000442:	f000 ffd7 	bl	80013f4 <HAL_RCC_OscConfig>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800044c:	f000 f924 	bl	8000698 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000450:	230f      	movs	r3, #15
 8000452:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000454:	2302      	movs	r3, #2
 8000456:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000458:	2300      	movs	r3, #0
 800045a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800045c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000460:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000462:	2300      	movs	r3, #0
 8000464:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000466:	1d3b      	adds	r3, r7, #4
 8000468:	2102      	movs	r1, #2
 800046a:	4618      	mov	r0, r3
 800046c:	f001 fa44 	bl	80018f8 <HAL_RCC_ClockConfig>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000476:	f000 f90f 	bl	8000698 <Error_Handler>
  }
}
 800047a:	bf00      	nop
 800047c:	3740      	adds	r7, #64	@ 0x40
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
	...

08000484 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b096      	sub	sp, #88	@ 0x58
 8000488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800048a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
 8000492:	605a      	str	r2, [r3, #4]
 8000494:	609a      	str	r2, [r3, #8]
 8000496:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000498:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800049c:	2200      	movs	r2, #0
 800049e:	601a      	str	r2, [r3, #0]
 80004a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
 80004aa:	605a      	str	r2, [r3, #4]
 80004ac:	609a      	str	r2, [r3, #8]
 80004ae:	60da      	str	r2, [r3, #12]
 80004b0:	611a      	str	r2, [r3, #16]
 80004b2:	615a      	str	r2, [r3, #20]
 80004b4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004b6:	1d3b      	adds	r3, r7, #4
 80004b8:	2220      	movs	r2, #32
 80004ba:	2100      	movs	r1, #0
 80004bc:	4618      	mov	r0, r3
 80004be:	f002 fc52 	bl	8002d66 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004c2:	4b3e      	ldr	r3, [pc, #248]	@ (80005bc <MX_TIM1_Init+0x138>)
 80004c4:	4a3e      	ldr	r2, [pc, #248]	@ (80005c0 <MX_TIM1_Init+0x13c>)
 80004c6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80004c8:	4b3c      	ldr	r3, [pc, #240]	@ (80005bc <MX_TIM1_Init+0x138>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ce:	4b3b      	ldr	r3, [pc, #236]	@ (80005bc <MX_TIM1_Init+0x138>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 80004d4:	4b39      	ldr	r3, [pc, #228]	@ (80005bc <MX_TIM1_Init+0x138>)
 80004d6:	2259      	movs	r2, #89	@ 0x59
 80004d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004da:	4b38      	ldr	r3, [pc, #224]	@ (80005bc <MX_TIM1_Init+0x138>)
 80004dc:	2200      	movs	r2, #0
 80004de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004e0:	4b36      	ldr	r3, [pc, #216]	@ (80005bc <MX_TIM1_Init+0x138>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004e6:	4b35      	ldr	r3, [pc, #212]	@ (80005bc <MX_TIM1_Init+0x138>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80004ec:	4833      	ldr	r0, [pc, #204]	@ (80005bc <MX_TIM1_Init+0x138>)
 80004ee:	f001 fb5f 	bl	8001bb0 <HAL_TIM_Base_Init>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80004f8:	f000 f8ce 	bl	8000698 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000500:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000502:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000506:	4619      	mov	r1, r3
 8000508:	482c      	ldr	r0, [pc, #176]	@ (80005bc <MX_TIM1_Init+0x138>)
 800050a:	f001 ff23 	bl	8002354 <HAL_TIM_ConfigClockSource>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000514:	f000 f8c0 	bl	8000698 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000518:	4828      	ldr	r0, [pc, #160]	@ (80005bc <MX_TIM1_Init+0x138>)
 800051a:	f001 fb98 	bl	8001c4e <HAL_TIM_PWM_Init>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000524:	f000 f8b8 	bl	8000698 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000528:	2300      	movs	r3, #0
 800052a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800052c:	2300      	movs	r3, #0
 800052e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000530:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000534:	4619      	mov	r1, r3
 8000536:	4821      	ldr	r0, [pc, #132]	@ (80005bc <MX_TIM1_Init+0x138>)
 8000538:	f002 fb66 	bl	8002c08 <HAL_TIMEx_MasterConfigSynchronization>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000542:	f000 f8a9 	bl	8000698 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000546:	2360      	movs	r3, #96	@ 0x60
 8000548:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800054a:	2300      	movs	r3, #0
 800054c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800054e:	2300      	movs	r3, #0
 8000550:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000552:	2300      	movs	r3, #0
 8000554:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000556:	2300      	movs	r3, #0
 8000558:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800055a:	2300      	movs	r3, #0
 800055c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800055e:	2300      	movs	r3, #0
 8000560:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000562:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000566:	2200      	movs	r2, #0
 8000568:	4619      	mov	r1, r3
 800056a:	4814      	ldr	r0, [pc, #80]	@ (80005bc <MX_TIM1_Init+0x138>)
 800056c:	f001 fe30 	bl	80021d0 <HAL_TIM_PWM_ConfigChannel>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000576:	f000 f88f 	bl	8000698 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800057a:	2300      	movs	r3, #0
 800057c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800057e:	2300      	movs	r3, #0
 8000580:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000582:	2300      	movs	r3, #0
 8000584:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000586:	2300      	movs	r3, #0
 8000588:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800058a:	2300      	movs	r3, #0
 800058c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800058e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000592:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000594:	2300      	movs	r3, #0
 8000596:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000598:	1d3b      	adds	r3, r7, #4
 800059a:	4619      	mov	r1, r3
 800059c:	4807      	ldr	r0, [pc, #28]	@ (80005bc <MX_TIM1_Init+0x138>)
 800059e:	f002 fb91 	bl	8002cc4 <HAL_TIMEx_ConfigBreakDeadTime>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80005a8:	f000 f876 	bl	8000698 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80005ac:	4803      	ldr	r0, [pc, #12]	@ (80005bc <MX_TIM1_Init+0x138>)
 80005ae:	f000 f8f5 	bl	800079c <HAL_TIM_MspPostInit>

}
 80005b2:	bf00      	nop
 80005b4:	3758      	adds	r7, #88	@ 0x58
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000028 	.word	0x20000028
 80005c0:	40012c00 	.word	0x40012c00

080005c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005ca:	4b0c      	ldr	r3, [pc, #48]	@ (80005fc <MX_DMA_Init+0x38>)
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	4a0b      	ldr	r2, [pc, #44]	@ (80005fc <MX_DMA_Init+0x38>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	6153      	str	r3, [r2, #20]
 80005d6:	4b09      	ldr	r3, [pc, #36]	@ (80005fc <MX_DMA_Init+0x38>)
 80005d8:	695b      	ldr	r3, [r3, #20]
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2100      	movs	r1, #0
 80005e6:	200c      	movs	r0, #12
 80005e8:	f000 facb 	bl	8000b82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80005ec:	200c      	movs	r0, #12
 80005ee:	f000 fae4 	bl	8000bba <HAL_NVIC_EnableIRQ>

}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40021000 	.word	0x40021000

08000600 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b088      	sub	sp, #32
 8000604:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000606:	f107 0310 	add.w	r3, r7, #16
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]
 8000610:	609a      	str	r2, [r3, #8]
 8000612:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000614:	4b1e      	ldr	r3, [pc, #120]	@ (8000690 <MX_GPIO_Init+0x90>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	4a1d      	ldr	r2, [pc, #116]	@ (8000690 <MX_GPIO_Init+0x90>)
 800061a:	f043 0310 	orr.w	r3, r3, #16
 800061e:	6193      	str	r3, [r2, #24]
 8000620:	4b1b      	ldr	r3, [pc, #108]	@ (8000690 <MX_GPIO_Init+0x90>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	f003 0310 	and.w	r3, r3, #16
 8000628:	60fb      	str	r3, [r7, #12]
 800062a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800062c:	4b18      	ldr	r3, [pc, #96]	@ (8000690 <MX_GPIO_Init+0x90>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	4a17      	ldr	r2, [pc, #92]	@ (8000690 <MX_GPIO_Init+0x90>)
 8000632:	f043 0320 	orr.w	r3, r3, #32
 8000636:	6193      	str	r3, [r2, #24]
 8000638:	4b15      	ldr	r3, [pc, #84]	@ (8000690 <MX_GPIO_Init+0x90>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	f003 0320 	and.w	r3, r3, #32
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000644:	4b12      	ldr	r3, [pc, #72]	@ (8000690 <MX_GPIO_Init+0x90>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	4a11      	ldr	r2, [pc, #68]	@ (8000690 <MX_GPIO_Init+0x90>)
 800064a:	f043 0304 	orr.w	r3, r3, #4
 800064e:	6193      	str	r3, [r2, #24]
 8000650:	4b0f      	ldr	r3, [pc, #60]	@ (8000690 <MX_GPIO_Init+0x90>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	f003 0304 	and.w	r3, r3, #4
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800065c:	2200      	movs	r2, #0
 800065e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000662:	480c      	ldr	r0, [pc, #48]	@ (8000694 <MX_GPIO_Init+0x94>)
 8000664:	f000 feae 	bl	80013c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000668:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800066c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066e:	2301      	movs	r3, #1
 8000670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000676:	2302      	movs	r3, #2
 8000678:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800067a:	f107 0310 	add.w	r3, r7, #16
 800067e:	4619      	mov	r1, r3
 8000680:	4804      	ldr	r0, [pc, #16]	@ (8000694 <MX_GPIO_Init+0x94>)
 8000682:	f000 fd1b 	bl	80010bc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000686:	bf00      	nop
 8000688:	3720      	adds	r7, #32
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40021000 	.word	0x40021000
 8000694:	40011000 	.word	0x40011000

08000698 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800069c:	b672      	cpsid	i
}
 800069e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a0:	bf00      	nop
 80006a2:	e7fd      	b.n	80006a0 <Error_Handler+0x8>

080006a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006aa:	4b15      	ldr	r3, [pc, #84]	@ (8000700 <HAL_MspInit+0x5c>)
 80006ac:	699b      	ldr	r3, [r3, #24]
 80006ae:	4a14      	ldr	r2, [pc, #80]	@ (8000700 <HAL_MspInit+0x5c>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	6193      	str	r3, [r2, #24]
 80006b6:	4b12      	ldr	r3, [pc, #72]	@ (8000700 <HAL_MspInit+0x5c>)
 80006b8:	699b      	ldr	r3, [r3, #24]
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000700 <HAL_MspInit+0x5c>)
 80006c4:	69db      	ldr	r3, [r3, #28]
 80006c6:	4a0e      	ldr	r2, [pc, #56]	@ (8000700 <HAL_MspInit+0x5c>)
 80006c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006cc:	61d3      	str	r3, [r2, #28]
 80006ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000700 <HAL_MspInit+0x5c>)
 80006d0:	69db      	ldr	r3, [r3, #28]
 80006d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006da:	4b0a      	ldr	r3, [pc, #40]	@ (8000704 <HAL_MspInit+0x60>)
 80006dc:	685b      	ldr	r3, [r3, #4]
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	4a04      	ldr	r2, [pc, #16]	@ (8000704 <HAL_MspInit+0x60>)
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006f6:	bf00      	nop
 80006f8:	3714      	adds	r7, #20
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr
 8000700:	40021000 	.word	0x40021000
 8000704:	40010000 	.word	0x40010000

08000708 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a1d      	ldr	r2, [pc, #116]	@ (800078c <HAL_TIM_Base_MspInit+0x84>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d133      	bne.n	8000782 <HAL_TIM_Base_MspInit+0x7a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800071a:	4b1d      	ldr	r3, [pc, #116]	@ (8000790 <HAL_TIM_Base_MspInit+0x88>)
 800071c:	699b      	ldr	r3, [r3, #24]
 800071e:	4a1c      	ldr	r2, [pc, #112]	@ (8000790 <HAL_TIM_Base_MspInit+0x88>)
 8000720:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000724:	6193      	str	r3, [r2, #24]
 8000726:	4b1a      	ldr	r3, [pc, #104]	@ (8000790 <HAL_TIM_Base_MspInit+0x88>)
 8000728:	699b      	ldr	r3, [r3, #24]
 800072a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8000732:	4b18      	ldr	r3, [pc, #96]	@ (8000794 <HAL_TIM_Base_MspInit+0x8c>)
 8000734:	4a18      	ldr	r2, [pc, #96]	@ (8000798 <HAL_TIM_Base_MspInit+0x90>)
 8000736:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000738:	4b16      	ldr	r3, [pc, #88]	@ (8000794 <HAL_TIM_Base_MspInit+0x8c>)
 800073a:	2210      	movs	r2, #16
 800073c:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800073e:	4b15      	ldr	r3, [pc, #84]	@ (8000794 <HAL_TIM_Base_MspInit+0x8c>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000744:	4b13      	ldr	r3, [pc, #76]	@ (8000794 <HAL_TIM_Base_MspInit+0x8c>)
 8000746:	2280      	movs	r2, #128	@ 0x80
 8000748:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800074a:	4b12      	ldr	r3, [pc, #72]	@ (8000794 <HAL_TIM_Base_MspInit+0x8c>)
 800074c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000750:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000752:	4b10      	ldr	r3, [pc, #64]	@ (8000794 <HAL_TIM_Base_MspInit+0x8c>)
 8000754:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000758:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 800075a:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <HAL_TIM_Base_MspInit+0x8c>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000760:	4b0c      	ldr	r3, [pc, #48]	@ (8000794 <HAL_TIM_Base_MspInit+0x8c>)
 8000762:	2200      	movs	r2, #0
 8000764:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000766:	480b      	ldr	r0, [pc, #44]	@ (8000794 <HAL_TIM_Base_MspInit+0x8c>)
 8000768:	f000 fa42 	bl	8000bf0 <HAL_DMA_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8000772:	f7ff ff91 	bl	8000698 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	4a06      	ldr	r2, [pc, #24]	@ (8000794 <HAL_TIM_Base_MspInit+0x8c>)
 800077a:	625a      	str	r2, [r3, #36]	@ 0x24
 800077c:	4a05      	ldr	r2, [pc, #20]	@ (8000794 <HAL_TIM_Base_MspInit+0x8c>)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000782:	bf00      	nop
 8000784:	3710      	adds	r7, #16
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40012c00 	.word	0x40012c00
 8000790:	40021000 	.word	0x40021000
 8000794:	20000070 	.word	0x20000070
 8000798:	4002001c 	.word	0x4002001c

0800079c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b088      	sub	sp, #32
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a4:	f107 0310 	add.w	r3, r7, #16
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a10      	ldr	r2, [pc, #64]	@ (80007f8 <HAL_TIM_MspPostInit+0x5c>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d118      	bne.n	80007ee <HAL_TIM_MspPostInit+0x52>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007bc:	4b0f      	ldr	r3, [pc, #60]	@ (80007fc <HAL_TIM_MspPostInit+0x60>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	4a0e      	ldr	r2, [pc, #56]	@ (80007fc <HAL_TIM_MspPostInit+0x60>)
 80007c2:	f043 0304 	orr.w	r3, r3, #4
 80007c6:	6193      	str	r3, [r2, #24]
 80007c8:	4b0c      	ldr	r3, [pc, #48]	@ (80007fc <HAL_TIM_MspPostInit+0x60>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	f003 0304 	and.w	r3, r3, #4
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80007d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007da:	2302      	movs	r3, #2
 80007dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007de:	2302      	movs	r3, #2
 80007e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e2:	f107 0310 	add.w	r3, r7, #16
 80007e6:	4619      	mov	r1, r3
 80007e8:	4805      	ldr	r0, [pc, #20]	@ (8000800 <HAL_TIM_MspPostInit+0x64>)
 80007ea:	f000 fc67 	bl	80010bc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80007ee:	bf00      	nop
 80007f0:	3720      	adds	r7, #32
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40012c00 	.word	0x40012c00
 80007fc:	40021000 	.word	0x40021000
 8000800:	40010800 	.word	0x40010800

08000804 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000808:	bf00      	nop
 800080a:	e7fd      	b.n	8000808 <NMI_Handler+0x4>

0800080c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000810:	bf00      	nop
 8000812:	e7fd      	b.n	8000810 <HardFault_Handler+0x4>

08000814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000818:	bf00      	nop
 800081a:	e7fd      	b.n	8000818 <MemManage_Handler+0x4>

0800081c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000820:	bf00      	nop
 8000822:	e7fd      	b.n	8000820 <BusFault_Handler+0x4>

08000824 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000828:	bf00      	nop
 800082a:	e7fd      	b.n	8000828 <UsageFault_Handler+0x4>

0800082c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr

08000838 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr

08000844 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr

08000850 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000854:	f000 f87e 	bl	8000954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}

0800085c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000860:	4802      	ldr	r0, [pc, #8]	@ (800086c <DMA1_Channel2_IRQHandler+0x10>)
 8000862:	f000 faf7 	bl	8000e54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000070 	.word	0x20000070

08000870 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr

0800087c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800087c:	f7ff fff8 	bl	8000870 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000880:	480b      	ldr	r0, [pc, #44]	@ (80008b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000882:	490c      	ldr	r1, [pc, #48]	@ (80008b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000884:	4a0c      	ldr	r2, [pc, #48]	@ (80008b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000888:	e002      	b.n	8000890 <LoopCopyDataInit>

0800088a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800088a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800088c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800088e:	3304      	adds	r3, #4

08000890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000894:	d3f9      	bcc.n	800088a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000896:	4a09      	ldr	r2, [pc, #36]	@ (80008bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000898:	4c09      	ldr	r4, [pc, #36]	@ (80008c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800089a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800089c:	e001      	b.n	80008a2 <LoopFillZerobss>

0800089e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800089e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a0:	3204      	adds	r2, #4

080008a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a4:	d3fb      	bcc.n	800089e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008a6:	f002 fa67 	bl	8002d78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008aa:	f7ff fd95 	bl	80003d8 <main>
  bx lr
 80008ae:	4770      	bx	lr
  ldr r0, =_sdata
 80008b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008b8:	08002e04 	.word	0x08002e04
  ldr r2, =_sbss
 80008bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008c0:	20000e40 	.word	0x20000e40

080008c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008c4:	e7fe      	b.n	80008c4 <ADC1_2_IRQHandler>
	...

080008c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008cc:	4b08      	ldr	r3, [pc, #32]	@ (80008f0 <HAL_Init+0x28>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a07      	ldr	r2, [pc, #28]	@ (80008f0 <HAL_Init+0x28>)
 80008d2:	f043 0310 	orr.w	r3, r3, #16
 80008d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008d8:	2003      	movs	r0, #3
 80008da:	f000 f947 	bl	8000b6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008de:	200f      	movs	r0, #15
 80008e0:	f000 f808 	bl	80008f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008e4:	f7ff fede 	bl	80006a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008e8:	2300      	movs	r3, #0
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40022000 	.word	0x40022000

080008f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008fc:	4b12      	ldr	r3, [pc, #72]	@ (8000948 <HAL_InitTick+0x54>)
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	4b12      	ldr	r3, [pc, #72]	@ (800094c <HAL_InitTick+0x58>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	4619      	mov	r1, r3
 8000906:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800090a:	fbb3 f3f1 	udiv	r3, r3, r1
 800090e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000912:	4618      	mov	r0, r3
 8000914:	f000 f95f 	bl	8000bd6 <HAL_SYSTICK_Config>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800091e:	2301      	movs	r3, #1
 8000920:	e00e      	b.n	8000940 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2b0f      	cmp	r3, #15
 8000926:	d80a      	bhi.n	800093e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000928:	2200      	movs	r2, #0
 800092a:	6879      	ldr	r1, [r7, #4]
 800092c:	f04f 30ff 	mov.w	r0, #4294967295
 8000930:	f000 f927 	bl	8000b82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000934:	4a06      	ldr	r2, [pc, #24]	@ (8000950 <HAL_InitTick+0x5c>)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800093a:	2300      	movs	r3, #0
 800093c:	e000      	b.n	8000940 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800093e:	2301      	movs	r3, #1
}
 8000940:	4618      	mov	r0, r3
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000000 	.word	0x20000000
 800094c:	20000008 	.word	0x20000008
 8000950:	20000004 	.word	0x20000004

08000954 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000958:	4b05      	ldr	r3, [pc, #20]	@ (8000970 <HAL_IncTick+0x1c>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	461a      	mov	r2, r3
 800095e:	4b05      	ldr	r3, [pc, #20]	@ (8000974 <HAL_IncTick+0x20>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4413      	add	r3, r2
 8000964:	4a03      	ldr	r2, [pc, #12]	@ (8000974 <HAL_IncTick+0x20>)
 8000966:	6013      	str	r3, [r2, #0]
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr
 8000970:	20000008 	.word	0x20000008
 8000974:	20000e3c 	.word	0x20000e3c

08000978 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  return uwTick;
 800097c:	4b02      	ldr	r3, [pc, #8]	@ (8000988 <HAL_GetTick+0x10>)
 800097e:	681b      	ldr	r3, [r3, #0]
}
 8000980:	4618      	mov	r0, r3
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr
 8000988:	20000e3c 	.word	0x20000e3c

0800098c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000994:	f7ff fff0 	bl	8000978 <HAL_GetTick>
 8000998:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009a4:	d005      	beq.n	80009b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009a6:	4b0a      	ldr	r3, [pc, #40]	@ (80009d0 <HAL_Delay+0x44>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	461a      	mov	r2, r3
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	4413      	add	r3, r2
 80009b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009b2:	bf00      	nop
 80009b4:	f7ff ffe0 	bl	8000978 <HAL_GetTick>
 80009b8:	4602      	mov	r2, r0
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	1ad3      	subs	r3, r2, r3
 80009be:	68fa      	ldr	r2, [r7, #12]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d8f7      	bhi.n	80009b4 <HAL_Delay+0x28>
  {
  }
}
 80009c4:	bf00      	nop
 80009c6:	bf00      	nop
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000008 	.word	0x20000008

080009d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	f003 0307 	and.w	r3, r3, #7
 80009e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a18 <__NVIC_SetPriorityGrouping+0x44>)
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ea:	68ba      	ldr	r2, [r7, #8]
 80009ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009f0:	4013      	ands	r3, r2
 80009f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a06:	4a04      	ldr	r2, [pc, #16]	@ (8000a18 <__NVIC_SetPriorityGrouping+0x44>)
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	60d3      	str	r3, [r2, #12]
}
 8000a0c:	bf00      	nop
 8000a0e:	3714      	adds	r7, #20
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a20:	4b04      	ldr	r3, [pc, #16]	@ (8000a34 <__NVIC_GetPriorityGrouping+0x18>)
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	0a1b      	lsrs	r3, r3, #8
 8000a26:	f003 0307 	and.w	r3, r3, #7
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bc80      	pop	{r7}
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	db0b      	blt.n	8000a62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	f003 021f 	and.w	r2, r3, #31
 8000a50:	4906      	ldr	r1, [pc, #24]	@ (8000a6c <__NVIC_EnableIRQ+0x34>)
 8000a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a56:	095b      	lsrs	r3, r3, #5
 8000a58:	2001      	movs	r0, #1
 8000a5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bc80      	pop	{r7}
 8000a6a:	4770      	bx	lr
 8000a6c:	e000e100 	.word	0xe000e100

08000a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	6039      	str	r1, [r7, #0]
 8000a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	db0a      	blt.n	8000a9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	490c      	ldr	r1, [pc, #48]	@ (8000abc <__NVIC_SetPriority+0x4c>)
 8000a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8e:	0112      	lsls	r2, r2, #4
 8000a90:	b2d2      	uxtb	r2, r2
 8000a92:	440b      	add	r3, r1
 8000a94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a98:	e00a      	b.n	8000ab0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	b2da      	uxtb	r2, r3
 8000a9e:	4908      	ldr	r1, [pc, #32]	@ (8000ac0 <__NVIC_SetPriority+0x50>)
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	f003 030f 	and.w	r3, r3, #15
 8000aa6:	3b04      	subs	r3, #4
 8000aa8:	0112      	lsls	r2, r2, #4
 8000aaa:	b2d2      	uxtb	r2, r2
 8000aac:	440b      	add	r3, r1
 8000aae:	761a      	strb	r2, [r3, #24]
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	e000e100 	.word	0xe000e100
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b089      	sub	sp, #36	@ 0x24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	f003 0307 	and.w	r3, r3, #7
 8000ad6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ad8:	69fb      	ldr	r3, [r7, #28]
 8000ada:	f1c3 0307 	rsb	r3, r3, #7
 8000ade:	2b04      	cmp	r3, #4
 8000ae0:	bf28      	it	cs
 8000ae2:	2304      	movcs	r3, #4
 8000ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	3304      	adds	r3, #4
 8000aea:	2b06      	cmp	r3, #6
 8000aec:	d902      	bls.n	8000af4 <NVIC_EncodePriority+0x30>
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	3b03      	subs	r3, #3
 8000af2:	e000      	b.n	8000af6 <NVIC_EncodePriority+0x32>
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af8:	f04f 32ff 	mov.w	r2, #4294967295
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	43da      	mvns	r2, r3
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	401a      	ands	r2, r3
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	fa01 f303 	lsl.w	r3, r1, r3
 8000b16:	43d9      	mvns	r1, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b1c:	4313      	orrs	r3, r2
         );
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3724      	adds	r7, #36	@ 0x24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr

08000b28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	3b01      	subs	r3, #1
 8000b34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b38:	d301      	bcc.n	8000b3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e00f      	b.n	8000b5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b68 <SysTick_Config+0x40>)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	3b01      	subs	r3, #1
 8000b44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b46:	210f      	movs	r1, #15
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	f7ff ff90 	bl	8000a70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b50:	4b05      	ldr	r3, [pc, #20]	@ (8000b68 <SysTick_Config+0x40>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b56:	4b04      	ldr	r3, [pc, #16]	@ (8000b68 <SysTick_Config+0x40>)
 8000b58:	2207      	movs	r2, #7
 8000b5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	e000e010 	.word	0xe000e010

08000b6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f7ff ff2d 	bl	80009d4 <__NVIC_SetPriorityGrouping>
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b086      	sub	sp, #24
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	4603      	mov	r3, r0
 8000b8a:	60b9      	str	r1, [r7, #8]
 8000b8c:	607a      	str	r2, [r7, #4]
 8000b8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b94:	f7ff ff42 	bl	8000a1c <__NVIC_GetPriorityGrouping>
 8000b98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	68b9      	ldr	r1, [r7, #8]
 8000b9e:	6978      	ldr	r0, [r7, #20]
 8000ba0:	f7ff ff90 	bl	8000ac4 <NVIC_EncodePriority>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000baa:	4611      	mov	r1, r2
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff ff5f 	bl	8000a70 <__NVIC_SetPriority>
}
 8000bb2:	bf00      	nop
 8000bb4:	3718      	adds	r7, #24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b082      	sub	sp, #8
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff ff35 	bl	8000a38 <__NVIC_EnableIRQ>
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b082      	sub	sp, #8
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f7ff ffa2 	bl	8000b28 <SysTick_Config>
 8000be4:	4603      	mov	r3, r0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d101      	bne.n	8000c06 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
 8000c04:	e043      	b.n	8000c8e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	4b22      	ldr	r3, [pc, #136]	@ (8000c98 <HAL_DMA_Init+0xa8>)
 8000c0e:	4413      	add	r3, r2
 8000c10:	4a22      	ldr	r2, [pc, #136]	@ (8000c9c <HAL_DMA_Init+0xac>)
 8000c12:	fba2 2303 	umull	r2, r3, r2, r3
 8000c16:	091b      	lsrs	r3, r3, #4
 8000c18:	009a      	lsls	r2, r3, #2
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4a1f      	ldr	r2, [pc, #124]	@ (8000ca0 <HAL_DMA_Init+0xb0>)
 8000c22:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2202      	movs	r2, #2
 8000c28:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000c3a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000c3e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000c48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	68db      	ldr	r3, [r3, #12]
 8000c4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	695b      	ldr	r3, [r3, #20]
 8000c5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	69db      	ldr	r3, [r3, #28]
 8000c66:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000c68:	68fa      	ldr	r2, [r7, #12]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	68fa      	ldr	r2, [r7, #12]
 8000c74:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2201      	movs	r2, #1
 8000c80:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2200      	movs	r2, #0
 8000c88:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3714      	adds	r7, #20
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr
 8000c98:	bffdfff8 	.word	0xbffdfff8
 8000c9c:	cccccccd 	.word	0xcccccccd
 8000ca0:	40020000 	.word	0x40020000

08000ca4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
 8000cb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d101      	bne.n	8000cc4 <HAL_DMA_Start_IT+0x20>
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	e04b      	b.n	8000d5c <HAL_DMA_Start_IT+0xb8>
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d13a      	bne.n	8000d4e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	2202      	movs	r2, #2
 8000cdc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f022 0201 	bic.w	r2, r2, #1
 8000cf4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	68b9      	ldr	r1, [r7, #8]
 8000cfc:	68f8      	ldr	r0, [r7, #12]
 8000cfe:	f000 f9af 	bl	8001060 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d008      	beq.n	8000d1c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f042 020e 	orr.w	r2, r2, #14
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	e00f      	b.n	8000d3c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f022 0204 	bic.w	r2, r2, #4
 8000d2a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f042 020a 	orr.w	r2, r2, #10
 8000d3a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f042 0201 	orr.w	r2, r2, #1
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	e005      	b.n	8000d5a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	2200      	movs	r2, #0
 8000d52:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000d56:	2302      	movs	r3, #2
 8000d58:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000d5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3718      	adds	r7, #24
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d005      	beq.n	8000d88 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2204      	movs	r2, #4
 8000d80:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	73fb      	strb	r3, [r7, #15]
 8000d86:	e051      	b.n	8000e2c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f022 020e 	bic.w	r2, r2, #14
 8000d96:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f022 0201 	bic.w	r2, r2, #1
 8000da6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a22      	ldr	r2, [pc, #136]	@ (8000e38 <HAL_DMA_Abort_IT+0xd4>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d029      	beq.n	8000e06 <HAL_DMA_Abort_IT+0xa2>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a21      	ldr	r2, [pc, #132]	@ (8000e3c <HAL_DMA_Abort_IT+0xd8>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d022      	beq.n	8000e02 <HAL_DMA_Abort_IT+0x9e>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a1f      	ldr	r2, [pc, #124]	@ (8000e40 <HAL_DMA_Abort_IT+0xdc>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d01a      	beq.n	8000dfc <HAL_DMA_Abort_IT+0x98>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a1e      	ldr	r2, [pc, #120]	@ (8000e44 <HAL_DMA_Abort_IT+0xe0>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d012      	beq.n	8000df6 <HAL_DMA_Abort_IT+0x92>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a1c      	ldr	r2, [pc, #112]	@ (8000e48 <HAL_DMA_Abort_IT+0xe4>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d00a      	beq.n	8000df0 <HAL_DMA_Abort_IT+0x8c>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a1b      	ldr	r2, [pc, #108]	@ (8000e4c <HAL_DMA_Abort_IT+0xe8>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d102      	bne.n	8000dea <HAL_DMA_Abort_IT+0x86>
 8000de4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000de8:	e00e      	b.n	8000e08 <HAL_DMA_Abort_IT+0xa4>
 8000dea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000dee:	e00b      	b.n	8000e08 <HAL_DMA_Abort_IT+0xa4>
 8000df0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000df4:	e008      	b.n	8000e08 <HAL_DMA_Abort_IT+0xa4>
 8000df6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dfa:	e005      	b.n	8000e08 <HAL_DMA_Abort_IT+0xa4>
 8000dfc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e00:	e002      	b.n	8000e08 <HAL_DMA_Abort_IT+0xa4>
 8000e02:	2310      	movs	r3, #16
 8000e04:	e000      	b.n	8000e08 <HAL_DMA_Abort_IT+0xa4>
 8000e06:	2301      	movs	r3, #1
 8000e08:	4a11      	ldr	r2, [pc, #68]	@ (8000e50 <HAL_DMA_Abort_IT+0xec>)
 8000e0a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2201      	movs	r2, #1
 8000e10:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2200      	movs	r2, #0
 8000e18:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d003      	beq.n	8000e2c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	4798      	blx	r3
    } 
  }
  return status;
 8000e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40020008 	.word	0x40020008
 8000e3c:	4002001c 	.word	0x4002001c
 8000e40:	40020030 	.word	0x40020030
 8000e44:	40020044 	.word	0x40020044
 8000e48:	40020058 	.word	0x40020058
 8000e4c:	4002006c 	.word	0x4002006c
 8000e50:	40020000 	.word	0x40020000

08000e54 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e70:	2204      	movs	r2, #4
 8000e72:	409a      	lsls	r2, r3
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	4013      	ands	r3, r2
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d04f      	beq.n	8000f1c <HAL_DMA_IRQHandler+0xc8>
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	f003 0304 	and.w	r3, r3, #4
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d04a      	beq.n	8000f1c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f003 0320 	and.w	r3, r3, #32
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d107      	bne.n	8000ea4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f022 0204 	bic.w	r2, r2, #4
 8000ea2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a66      	ldr	r2, [pc, #408]	@ (8001044 <HAL_DMA_IRQHandler+0x1f0>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d029      	beq.n	8000f02 <HAL_DMA_IRQHandler+0xae>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a65      	ldr	r2, [pc, #404]	@ (8001048 <HAL_DMA_IRQHandler+0x1f4>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d022      	beq.n	8000efe <HAL_DMA_IRQHandler+0xaa>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a63      	ldr	r2, [pc, #396]	@ (800104c <HAL_DMA_IRQHandler+0x1f8>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d01a      	beq.n	8000ef8 <HAL_DMA_IRQHandler+0xa4>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a62      	ldr	r2, [pc, #392]	@ (8001050 <HAL_DMA_IRQHandler+0x1fc>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d012      	beq.n	8000ef2 <HAL_DMA_IRQHandler+0x9e>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a60      	ldr	r2, [pc, #384]	@ (8001054 <HAL_DMA_IRQHandler+0x200>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d00a      	beq.n	8000eec <HAL_DMA_IRQHandler+0x98>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a5f      	ldr	r2, [pc, #380]	@ (8001058 <HAL_DMA_IRQHandler+0x204>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d102      	bne.n	8000ee6 <HAL_DMA_IRQHandler+0x92>
 8000ee0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ee4:	e00e      	b.n	8000f04 <HAL_DMA_IRQHandler+0xb0>
 8000ee6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000eea:	e00b      	b.n	8000f04 <HAL_DMA_IRQHandler+0xb0>
 8000eec:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000ef0:	e008      	b.n	8000f04 <HAL_DMA_IRQHandler+0xb0>
 8000ef2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000ef6:	e005      	b.n	8000f04 <HAL_DMA_IRQHandler+0xb0>
 8000ef8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000efc:	e002      	b.n	8000f04 <HAL_DMA_IRQHandler+0xb0>
 8000efe:	2340      	movs	r3, #64	@ 0x40
 8000f00:	e000      	b.n	8000f04 <HAL_DMA_IRQHandler+0xb0>
 8000f02:	2304      	movs	r3, #4
 8000f04:	4a55      	ldr	r2, [pc, #340]	@ (800105c <HAL_DMA_IRQHandler+0x208>)
 8000f06:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	f000 8094 	beq.w	800103a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000f1a:	e08e      	b.n	800103a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f20:	2202      	movs	r2, #2
 8000f22:	409a      	lsls	r2, r3
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	4013      	ands	r3, r2
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d056      	beq.n	8000fda <HAL_DMA_IRQHandler+0x186>
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d051      	beq.n	8000fda <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f003 0320 	and.w	r3, r3, #32
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d10b      	bne.n	8000f5c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f022 020a 	bic.w	r2, r2, #10
 8000f52:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2201      	movs	r2, #1
 8000f58:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a38      	ldr	r2, [pc, #224]	@ (8001044 <HAL_DMA_IRQHandler+0x1f0>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d029      	beq.n	8000fba <HAL_DMA_IRQHandler+0x166>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a37      	ldr	r2, [pc, #220]	@ (8001048 <HAL_DMA_IRQHandler+0x1f4>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d022      	beq.n	8000fb6 <HAL_DMA_IRQHandler+0x162>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a35      	ldr	r2, [pc, #212]	@ (800104c <HAL_DMA_IRQHandler+0x1f8>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d01a      	beq.n	8000fb0 <HAL_DMA_IRQHandler+0x15c>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a34      	ldr	r2, [pc, #208]	@ (8001050 <HAL_DMA_IRQHandler+0x1fc>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d012      	beq.n	8000faa <HAL_DMA_IRQHandler+0x156>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a32      	ldr	r2, [pc, #200]	@ (8001054 <HAL_DMA_IRQHandler+0x200>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d00a      	beq.n	8000fa4 <HAL_DMA_IRQHandler+0x150>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a31      	ldr	r2, [pc, #196]	@ (8001058 <HAL_DMA_IRQHandler+0x204>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d102      	bne.n	8000f9e <HAL_DMA_IRQHandler+0x14a>
 8000f98:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000f9c:	e00e      	b.n	8000fbc <HAL_DMA_IRQHandler+0x168>
 8000f9e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000fa2:	e00b      	b.n	8000fbc <HAL_DMA_IRQHandler+0x168>
 8000fa4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fa8:	e008      	b.n	8000fbc <HAL_DMA_IRQHandler+0x168>
 8000faa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fae:	e005      	b.n	8000fbc <HAL_DMA_IRQHandler+0x168>
 8000fb0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fb4:	e002      	b.n	8000fbc <HAL_DMA_IRQHandler+0x168>
 8000fb6:	2320      	movs	r3, #32
 8000fb8:	e000      	b.n	8000fbc <HAL_DMA_IRQHandler+0x168>
 8000fba:	2302      	movs	r3, #2
 8000fbc:	4a27      	ldr	r2, [pc, #156]	@ (800105c <HAL_DMA_IRQHandler+0x208>)
 8000fbe:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d034      	beq.n	800103a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000fd8:	e02f      	b.n	800103a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fde:	2208      	movs	r2, #8
 8000fe0:	409a      	lsls	r2, r3
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d028      	beq.n	800103c <HAL_DMA_IRQHandler+0x1e8>
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	f003 0308 	and.w	r3, r3, #8
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d023      	beq.n	800103c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f022 020e 	bic.w	r2, r2, #14
 8001002:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800100c:	2101      	movs	r1, #1
 800100e:	fa01 f202 	lsl.w	r2, r1, r2
 8001012:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2201      	movs	r2, #1
 8001018:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2201      	movs	r2, #1
 800101e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2200      	movs	r2, #0
 8001026:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	2b00      	cmp	r3, #0
 8001030:	d004      	beq.n	800103c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	4798      	blx	r3
    }
  }
  return;
 800103a:	bf00      	nop
 800103c:	bf00      	nop
}
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40020008 	.word	0x40020008
 8001048:	4002001c 	.word	0x4002001c
 800104c:	40020030 	.word	0x40020030
 8001050:	40020044 	.word	0x40020044
 8001054:	40020058 	.word	0x40020058
 8001058:	4002006c 	.word	0x4002006c
 800105c:	40020000 	.word	0x40020000

08001060 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
 800106c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001076:	2101      	movs	r1, #1
 8001078:	fa01 f202 	lsl.w	r2, r1, r2
 800107c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	683a      	ldr	r2, [r7, #0]
 8001084:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	2b10      	cmp	r3, #16
 800108c:	d108      	bne.n	80010a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	68ba      	ldr	r2, [r7, #8]
 800109c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800109e:	e007      	b.n	80010b0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	68ba      	ldr	r2, [r7, #8]
 80010a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	60da      	str	r2, [r3, #12]
}
 80010b0:	bf00      	nop
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr
	...

080010bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010bc:	b480      	push	{r7}
 80010be:	b08b      	sub	sp, #44	@ 0x2c
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010c6:	2300      	movs	r3, #0
 80010c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010ca:	2300      	movs	r3, #0
 80010cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ce:	e169      	b.n	80013a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010d0:	2201      	movs	r2, #1
 80010d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	69fa      	ldr	r2, [r7, #28]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	f040 8158 	bne.w	800139e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	4a9a      	ldr	r2, [pc, #616]	@ (800135c <HAL_GPIO_Init+0x2a0>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d05e      	beq.n	80011b6 <HAL_GPIO_Init+0xfa>
 80010f8:	4a98      	ldr	r2, [pc, #608]	@ (800135c <HAL_GPIO_Init+0x2a0>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d875      	bhi.n	80011ea <HAL_GPIO_Init+0x12e>
 80010fe:	4a98      	ldr	r2, [pc, #608]	@ (8001360 <HAL_GPIO_Init+0x2a4>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d058      	beq.n	80011b6 <HAL_GPIO_Init+0xfa>
 8001104:	4a96      	ldr	r2, [pc, #600]	@ (8001360 <HAL_GPIO_Init+0x2a4>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d86f      	bhi.n	80011ea <HAL_GPIO_Init+0x12e>
 800110a:	4a96      	ldr	r2, [pc, #600]	@ (8001364 <HAL_GPIO_Init+0x2a8>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d052      	beq.n	80011b6 <HAL_GPIO_Init+0xfa>
 8001110:	4a94      	ldr	r2, [pc, #592]	@ (8001364 <HAL_GPIO_Init+0x2a8>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d869      	bhi.n	80011ea <HAL_GPIO_Init+0x12e>
 8001116:	4a94      	ldr	r2, [pc, #592]	@ (8001368 <HAL_GPIO_Init+0x2ac>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d04c      	beq.n	80011b6 <HAL_GPIO_Init+0xfa>
 800111c:	4a92      	ldr	r2, [pc, #584]	@ (8001368 <HAL_GPIO_Init+0x2ac>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d863      	bhi.n	80011ea <HAL_GPIO_Init+0x12e>
 8001122:	4a92      	ldr	r2, [pc, #584]	@ (800136c <HAL_GPIO_Init+0x2b0>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d046      	beq.n	80011b6 <HAL_GPIO_Init+0xfa>
 8001128:	4a90      	ldr	r2, [pc, #576]	@ (800136c <HAL_GPIO_Init+0x2b0>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d85d      	bhi.n	80011ea <HAL_GPIO_Init+0x12e>
 800112e:	2b12      	cmp	r3, #18
 8001130:	d82a      	bhi.n	8001188 <HAL_GPIO_Init+0xcc>
 8001132:	2b12      	cmp	r3, #18
 8001134:	d859      	bhi.n	80011ea <HAL_GPIO_Init+0x12e>
 8001136:	a201      	add	r2, pc, #4	@ (adr r2, 800113c <HAL_GPIO_Init+0x80>)
 8001138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800113c:	080011b7 	.word	0x080011b7
 8001140:	08001191 	.word	0x08001191
 8001144:	080011a3 	.word	0x080011a3
 8001148:	080011e5 	.word	0x080011e5
 800114c:	080011eb 	.word	0x080011eb
 8001150:	080011eb 	.word	0x080011eb
 8001154:	080011eb 	.word	0x080011eb
 8001158:	080011eb 	.word	0x080011eb
 800115c:	080011eb 	.word	0x080011eb
 8001160:	080011eb 	.word	0x080011eb
 8001164:	080011eb 	.word	0x080011eb
 8001168:	080011eb 	.word	0x080011eb
 800116c:	080011eb 	.word	0x080011eb
 8001170:	080011eb 	.word	0x080011eb
 8001174:	080011eb 	.word	0x080011eb
 8001178:	080011eb 	.word	0x080011eb
 800117c:	080011eb 	.word	0x080011eb
 8001180:	08001199 	.word	0x08001199
 8001184:	080011ad 	.word	0x080011ad
 8001188:	4a79      	ldr	r2, [pc, #484]	@ (8001370 <HAL_GPIO_Init+0x2b4>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d013      	beq.n	80011b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800118e:	e02c      	b.n	80011ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	623b      	str	r3, [r7, #32]
          break;
 8001196:	e029      	b.n	80011ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	3304      	adds	r3, #4
 800119e:	623b      	str	r3, [r7, #32]
          break;
 80011a0:	e024      	b.n	80011ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	3308      	adds	r3, #8
 80011a8:	623b      	str	r3, [r7, #32]
          break;
 80011aa:	e01f      	b.n	80011ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	330c      	adds	r3, #12
 80011b2:	623b      	str	r3, [r7, #32]
          break;
 80011b4:	e01a      	b.n	80011ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d102      	bne.n	80011c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011be:	2304      	movs	r3, #4
 80011c0:	623b      	str	r3, [r7, #32]
          break;
 80011c2:	e013      	b.n	80011ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d105      	bne.n	80011d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011cc:	2308      	movs	r3, #8
 80011ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	69fa      	ldr	r2, [r7, #28]
 80011d4:	611a      	str	r2, [r3, #16]
          break;
 80011d6:	e009      	b.n	80011ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011d8:	2308      	movs	r3, #8
 80011da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	69fa      	ldr	r2, [r7, #28]
 80011e0:	615a      	str	r2, [r3, #20]
          break;
 80011e2:	e003      	b.n	80011ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011e4:	2300      	movs	r3, #0
 80011e6:	623b      	str	r3, [r7, #32]
          break;
 80011e8:	e000      	b.n	80011ec <HAL_GPIO_Init+0x130>
          break;
 80011ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	2bff      	cmp	r3, #255	@ 0xff
 80011f0:	d801      	bhi.n	80011f6 <HAL_GPIO_Init+0x13a>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	e001      	b.n	80011fa <HAL_GPIO_Init+0x13e>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3304      	adds	r3, #4
 80011fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	2bff      	cmp	r3, #255	@ 0xff
 8001200:	d802      	bhi.n	8001208 <HAL_GPIO_Init+0x14c>
 8001202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	e002      	b.n	800120e <HAL_GPIO_Init+0x152>
 8001208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800120a:	3b08      	subs	r3, #8
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	210f      	movs	r1, #15
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	fa01 f303 	lsl.w	r3, r1, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	401a      	ands	r2, r3
 8001220:	6a39      	ldr	r1, [r7, #32]
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	fa01 f303 	lsl.w	r3, r1, r3
 8001228:	431a      	orrs	r2, r3
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001236:	2b00      	cmp	r3, #0
 8001238:	f000 80b1 	beq.w	800139e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800123c:	4b4d      	ldr	r3, [pc, #308]	@ (8001374 <HAL_GPIO_Init+0x2b8>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	4a4c      	ldr	r2, [pc, #304]	@ (8001374 <HAL_GPIO_Init+0x2b8>)
 8001242:	f043 0301 	orr.w	r3, r3, #1
 8001246:	6193      	str	r3, [r2, #24]
 8001248:	4b4a      	ldr	r3, [pc, #296]	@ (8001374 <HAL_GPIO_Init+0x2b8>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001254:	4a48      	ldr	r2, [pc, #288]	@ (8001378 <HAL_GPIO_Init+0x2bc>)
 8001256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001258:	089b      	lsrs	r3, r3, #2
 800125a:	3302      	adds	r3, #2
 800125c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001260:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001264:	f003 0303 	and.w	r3, r3, #3
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	220f      	movs	r2, #15
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	4013      	ands	r3, r2
 8001276:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4a40      	ldr	r2, [pc, #256]	@ (800137c <HAL_GPIO_Init+0x2c0>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d013      	beq.n	80012a8 <HAL_GPIO_Init+0x1ec>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4a3f      	ldr	r2, [pc, #252]	@ (8001380 <HAL_GPIO_Init+0x2c4>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d00d      	beq.n	80012a4 <HAL_GPIO_Init+0x1e8>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4a3e      	ldr	r2, [pc, #248]	@ (8001384 <HAL_GPIO_Init+0x2c8>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d007      	beq.n	80012a0 <HAL_GPIO_Init+0x1e4>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4a3d      	ldr	r2, [pc, #244]	@ (8001388 <HAL_GPIO_Init+0x2cc>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d101      	bne.n	800129c <HAL_GPIO_Init+0x1e0>
 8001298:	2303      	movs	r3, #3
 800129a:	e006      	b.n	80012aa <HAL_GPIO_Init+0x1ee>
 800129c:	2304      	movs	r3, #4
 800129e:	e004      	b.n	80012aa <HAL_GPIO_Init+0x1ee>
 80012a0:	2302      	movs	r3, #2
 80012a2:	e002      	b.n	80012aa <HAL_GPIO_Init+0x1ee>
 80012a4:	2301      	movs	r3, #1
 80012a6:	e000      	b.n	80012aa <HAL_GPIO_Init+0x1ee>
 80012a8:	2300      	movs	r3, #0
 80012aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012ac:	f002 0203 	and.w	r2, r2, #3
 80012b0:	0092      	lsls	r2, r2, #2
 80012b2:	4093      	lsls	r3, r2
 80012b4:	68fa      	ldr	r2, [r7, #12]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012ba:	492f      	ldr	r1, [pc, #188]	@ (8001378 <HAL_GPIO_Init+0x2bc>)
 80012bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012be:	089b      	lsrs	r3, r3, #2
 80012c0:	3302      	adds	r3, #2
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d006      	beq.n	80012e2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012d4:	4b2d      	ldr	r3, [pc, #180]	@ (800138c <HAL_GPIO_Init+0x2d0>)
 80012d6:	689a      	ldr	r2, [r3, #8]
 80012d8:	492c      	ldr	r1, [pc, #176]	@ (800138c <HAL_GPIO_Init+0x2d0>)
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	4313      	orrs	r3, r2
 80012de:	608b      	str	r3, [r1, #8]
 80012e0:	e006      	b.n	80012f0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012e2:	4b2a      	ldr	r3, [pc, #168]	@ (800138c <HAL_GPIO_Init+0x2d0>)
 80012e4:	689a      	ldr	r2, [r3, #8]
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	43db      	mvns	r3, r3
 80012ea:	4928      	ldr	r1, [pc, #160]	@ (800138c <HAL_GPIO_Init+0x2d0>)
 80012ec:	4013      	ands	r3, r2
 80012ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d006      	beq.n	800130a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012fc:	4b23      	ldr	r3, [pc, #140]	@ (800138c <HAL_GPIO_Init+0x2d0>)
 80012fe:	68da      	ldr	r2, [r3, #12]
 8001300:	4922      	ldr	r1, [pc, #136]	@ (800138c <HAL_GPIO_Init+0x2d0>)
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	4313      	orrs	r3, r2
 8001306:	60cb      	str	r3, [r1, #12]
 8001308:	e006      	b.n	8001318 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800130a:	4b20      	ldr	r3, [pc, #128]	@ (800138c <HAL_GPIO_Init+0x2d0>)
 800130c:	68da      	ldr	r2, [r3, #12]
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	43db      	mvns	r3, r3
 8001312:	491e      	ldr	r1, [pc, #120]	@ (800138c <HAL_GPIO_Init+0x2d0>)
 8001314:	4013      	ands	r3, r2
 8001316:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d006      	beq.n	8001332 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001324:	4b19      	ldr	r3, [pc, #100]	@ (800138c <HAL_GPIO_Init+0x2d0>)
 8001326:	685a      	ldr	r2, [r3, #4]
 8001328:	4918      	ldr	r1, [pc, #96]	@ (800138c <HAL_GPIO_Init+0x2d0>)
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	4313      	orrs	r3, r2
 800132e:	604b      	str	r3, [r1, #4]
 8001330:	e006      	b.n	8001340 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001332:	4b16      	ldr	r3, [pc, #88]	@ (800138c <HAL_GPIO_Init+0x2d0>)
 8001334:	685a      	ldr	r2, [r3, #4]
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	43db      	mvns	r3, r3
 800133a:	4914      	ldr	r1, [pc, #80]	@ (800138c <HAL_GPIO_Init+0x2d0>)
 800133c:	4013      	ands	r3, r2
 800133e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d021      	beq.n	8001390 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800134c:	4b0f      	ldr	r3, [pc, #60]	@ (800138c <HAL_GPIO_Init+0x2d0>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	490e      	ldr	r1, [pc, #56]	@ (800138c <HAL_GPIO_Init+0x2d0>)
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	4313      	orrs	r3, r2
 8001356:	600b      	str	r3, [r1, #0]
 8001358:	e021      	b.n	800139e <HAL_GPIO_Init+0x2e2>
 800135a:	bf00      	nop
 800135c:	10320000 	.word	0x10320000
 8001360:	10310000 	.word	0x10310000
 8001364:	10220000 	.word	0x10220000
 8001368:	10210000 	.word	0x10210000
 800136c:	10120000 	.word	0x10120000
 8001370:	10110000 	.word	0x10110000
 8001374:	40021000 	.word	0x40021000
 8001378:	40010000 	.word	0x40010000
 800137c:	40010800 	.word	0x40010800
 8001380:	40010c00 	.word	0x40010c00
 8001384:	40011000 	.word	0x40011000
 8001388:	40011400 	.word	0x40011400
 800138c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001390:	4b0b      	ldr	r3, [pc, #44]	@ (80013c0 <HAL_GPIO_Init+0x304>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	43db      	mvns	r3, r3
 8001398:	4909      	ldr	r1, [pc, #36]	@ (80013c0 <HAL_GPIO_Init+0x304>)
 800139a:	4013      	ands	r3, r2
 800139c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800139e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a0:	3301      	adds	r3, #1
 80013a2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013aa:	fa22 f303 	lsr.w	r3, r2, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f47f ae8e 	bne.w	80010d0 <HAL_GPIO_Init+0x14>
  }
}
 80013b4:	bf00      	nop
 80013b6:	bf00      	nop
 80013b8:	372c      	adds	r7, #44	@ 0x2c
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr
 80013c0:	40010400 	.word	0x40010400

080013c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	460b      	mov	r3, r1
 80013ce:	807b      	strh	r3, [r7, #2]
 80013d0:	4613      	mov	r3, r2
 80013d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013d4:	787b      	ldrb	r3, [r7, #1]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013da:	887a      	ldrh	r2, [r7, #2]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013e0:	e003      	b.n	80013ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013e2:	887b      	ldrh	r3, [r7, #2]
 80013e4:	041a      	lsls	r2, r3, #16
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	611a      	str	r2, [r3, #16]
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr

080013f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d101      	bne.n	8001406 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e272      	b.n	80018ec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	2b00      	cmp	r3, #0
 8001410:	f000 8087 	beq.w	8001522 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001414:	4b92      	ldr	r3, [pc, #584]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f003 030c 	and.w	r3, r3, #12
 800141c:	2b04      	cmp	r3, #4
 800141e:	d00c      	beq.n	800143a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001420:	4b8f      	ldr	r3, [pc, #572]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f003 030c 	and.w	r3, r3, #12
 8001428:	2b08      	cmp	r3, #8
 800142a:	d112      	bne.n	8001452 <HAL_RCC_OscConfig+0x5e>
 800142c:	4b8c      	ldr	r3, [pc, #560]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001434:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001438:	d10b      	bne.n	8001452 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800143a:	4b89      	ldr	r3, [pc, #548]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d06c      	beq.n	8001520 <HAL_RCC_OscConfig+0x12c>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d168      	bne.n	8001520 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e24c      	b.n	80018ec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800145a:	d106      	bne.n	800146a <HAL_RCC_OscConfig+0x76>
 800145c:	4b80      	ldr	r3, [pc, #512]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a7f      	ldr	r2, [pc, #508]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 8001462:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001466:	6013      	str	r3, [r2, #0]
 8001468:	e02e      	b.n	80014c8 <HAL_RCC_OscConfig+0xd4>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d10c      	bne.n	800148c <HAL_RCC_OscConfig+0x98>
 8001472:	4b7b      	ldr	r3, [pc, #492]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a7a      	ldr	r2, [pc, #488]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 8001478:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800147c:	6013      	str	r3, [r2, #0]
 800147e:	4b78      	ldr	r3, [pc, #480]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a77      	ldr	r2, [pc, #476]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 8001484:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001488:	6013      	str	r3, [r2, #0]
 800148a:	e01d      	b.n	80014c8 <HAL_RCC_OscConfig+0xd4>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001494:	d10c      	bne.n	80014b0 <HAL_RCC_OscConfig+0xbc>
 8001496:	4b72      	ldr	r3, [pc, #456]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a71      	ldr	r2, [pc, #452]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 800149c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	4b6f      	ldr	r3, [pc, #444]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a6e      	ldr	r2, [pc, #440]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 80014a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	e00b      	b.n	80014c8 <HAL_RCC_OscConfig+0xd4>
 80014b0:	4b6b      	ldr	r3, [pc, #428]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a6a      	ldr	r2, [pc, #424]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 80014b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014ba:	6013      	str	r3, [r2, #0]
 80014bc:	4b68      	ldr	r3, [pc, #416]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a67      	ldr	r2, [pc, #412]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 80014c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d013      	beq.n	80014f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d0:	f7ff fa52 	bl	8000978 <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d8:	f7ff fa4e 	bl	8000978 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b64      	cmp	r3, #100	@ 0x64
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e200      	b.n	80018ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ea:	4b5d      	ldr	r3, [pc, #372]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d0f0      	beq.n	80014d8 <HAL_RCC_OscConfig+0xe4>
 80014f6:	e014      	b.n	8001522 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f8:	f7ff fa3e 	bl	8000978 <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001500:	f7ff fa3a 	bl	8000978 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b64      	cmp	r3, #100	@ 0x64
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e1ec      	b.n	80018ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001512:	4b53      	ldr	r3, [pc, #332]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1f0      	bne.n	8001500 <HAL_RCC_OscConfig+0x10c>
 800151e:	e000      	b.n	8001522 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001520:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d063      	beq.n	80015f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800152e:	4b4c      	ldr	r3, [pc, #304]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f003 030c 	and.w	r3, r3, #12
 8001536:	2b00      	cmp	r3, #0
 8001538:	d00b      	beq.n	8001552 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800153a:	4b49      	ldr	r3, [pc, #292]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f003 030c 	and.w	r3, r3, #12
 8001542:	2b08      	cmp	r3, #8
 8001544:	d11c      	bne.n	8001580 <HAL_RCC_OscConfig+0x18c>
 8001546:	4b46      	ldr	r3, [pc, #280]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d116      	bne.n	8001580 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001552:	4b43      	ldr	r3, [pc, #268]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d005      	beq.n	800156a <HAL_RCC_OscConfig+0x176>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d001      	beq.n	800156a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e1c0      	b.n	80018ec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800156a:	4b3d      	ldr	r3, [pc, #244]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	4939      	ldr	r1, [pc, #228]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 800157a:	4313      	orrs	r3, r2
 800157c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800157e:	e03a      	b.n	80015f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d020      	beq.n	80015ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001588:	4b36      	ldr	r3, [pc, #216]	@ (8001664 <HAL_RCC_OscConfig+0x270>)
 800158a:	2201      	movs	r2, #1
 800158c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158e:	f7ff f9f3 	bl	8000978 <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001596:	f7ff f9ef 	bl	8000978 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e1a1      	b.n	80018ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d0f0      	beq.n	8001596 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	695b      	ldr	r3, [r3, #20]
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	4927      	ldr	r1, [pc, #156]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 80015c4:	4313      	orrs	r3, r2
 80015c6:	600b      	str	r3, [r1, #0]
 80015c8:	e015      	b.n	80015f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ca:	4b26      	ldr	r3, [pc, #152]	@ (8001664 <HAL_RCC_OscConfig+0x270>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d0:	f7ff f9d2 	bl	8000978 <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015d8:	f7ff f9ce 	bl	8000978 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e180      	b.n	80018ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1f0      	bne.n	80015d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0308 	and.w	r3, r3, #8
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d03a      	beq.n	8001678 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d019      	beq.n	800163e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800160a:	4b17      	ldr	r3, [pc, #92]	@ (8001668 <HAL_RCC_OscConfig+0x274>)
 800160c:	2201      	movs	r2, #1
 800160e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001610:	f7ff f9b2 	bl	8000978 <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001618:	f7ff f9ae 	bl	8000978 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e160      	b.n	80018ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800162a:	4b0d      	ldr	r3, [pc, #52]	@ (8001660 <HAL_RCC_OscConfig+0x26c>)
 800162c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d0f0      	beq.n	8001618 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001636:	2001      	movs	r0, #1
 8001638:	f000 fa9c 	bl	8001b74 <RCC_Delay>
 800163c:	e01c      	b.n	8001678 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800163e:	4b0a      	ldr	r3, [pc, #40]	@ (8001668 <HAL_RCC_OscConfig+0x274>)
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001644:	f7ff f998 	bl	8000978 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800164a:	e00f      	b.n	800166c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800164c:	f7ff f994 	bl	8000978 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d908      	bls.n	800166c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e146      	b.n	80018ec <HAL_RCC_OscConfig+0x4f8>
 800165e:	bf00      	nop
 8001660:	40021000 	.word	0x40021000
 8001664:	42420000 	.word	0x42420000
 8001668:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800166c:	4b92      	ldr	r3, [pc, #584]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 800166e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1e9      	bne.n	800164c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	2b00      	cmp	r3, #0
 8001682:	f000 80a6 	beq.w	80017d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001686:	2300      	movs	r3, #0
 8001688:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800168a:	4b8b      	ldr	r3, [pc, #556]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d10d      	bne.n	80016b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001696:	4b88      	ldr	r3, [pc, #544]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001698:	69db      	ldr	r3, [r3, #28]
 800169a:	4a87      	ldr	r2, [pc, #540]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 800169c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016a0:	61d3      	str	r3, [r2, #28]
 80016a2:	4b85      	ldr	r3, [pc, #532]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016aa:	60bb      	str	r3, [r7, #8]
 80016ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ae:	2301      	movs	r3, #1
 80016b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b2:	4b82      	ldr	r3, [pc, #520]	@ (80018bc <HAL_RCC_OscConfig+0x4c8>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d118      	bne.n	80016f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016be:	4b7f      	ldr	r3, [pc, #508]	@ (80018bc <HAL_RCC_OscConfig+0x4c8>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a7e      	ldr	r2, [pc, #504]	@ (80018bc <HAL_RCC_OscConfig+0x4c8>)
 80016c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ca:	f7ff f955 	bl	8000978 <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016d2:	f7ff f951 	bl	8000978 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b64      	cmp	r3, #100	@ 0x64
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e103      	b.n	80018ec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e4:	4b75      	ldr	r3, [pc, #468]	@ (80018bc <HAL_RCC_OscConfig+0x4c8>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0f0      	beq.n	80016d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d106      	bne.n	8001706 <HAL_RCC_OscConfig+0x312>
 80016f8:	4b6f      	ldr	r3, [pc, #444]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 80016fa:	6a1b      	ldr	r3, [r3, #32]
 80016fc:	4a6e      	ldr	r2, [pc, #440]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 80016fe:	f043 0301 	orr.w	r3, r3, #1
 8001702:	6213      	str	r3, [r2, #32]
 8001704:	e02d      	b.n	8001762 <HAL_RCC_OscConfig+0x36e>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d10c      	bne.n	8001728 <HAL_RCC_OscConfig+0x334>
 800170e:	4b6a      	ldr	r3, [pc, #424]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	4a69      	ldr	r2, [pc, #420]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001714:	f023 0301 	bic.w	r3, r3, #1
 8001718:	6213      	str	r3, [r2, #32]
 800171a:	4b67      	ldr	r3, [pc, #412]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 800171c:	6a1b      	ldr	r3, [r3, #32]
 800171e:	4a66      	ldr	r2, [pc, #408]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001720:	f023 0304 	bic.w	r3, r3, #4
 8001724:	6213      	str	r3, [r2, #32]
 8001726:	e01c      	b.n	8001762 <HAL_RCC_OscConfig+0x36e>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	2b05      	cmp	r3, #5
 800172e:	d10c      	bne.n	800174a <HAL_RCC_OscConfig+0x356>
 8001730:	4b61      	ldr	r3, [pc, #388]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001732:	6a1b      	ldr	r3, [r3, #32]
 8001734:	4a60      	ldr	r2, [pc, #384]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001736:	f043 0304 	orr.w	r3, r3, #4
 800173a:	6213      	str	r3, [r2, #32]
 800173c:	4b5e      	ldr	r3, [pc, #376]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 800173e:	6a1b      	ldr	r3, [r3, #32]
 8001740:	4a5d      	ldr	r2, [pc, #372]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001742:	f043 0301 	orr.w	r3, r3, #1
 8001746:	6213      	str	r3, [r2, #32]
 8001748:	e00b      	b.n	8001762 <HAL_RCC_OscConfig+0x36e>
 800174a:	4b5b      	ldr	r3, [pc, #364]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 800174c:	6a1b      	ldr	r3, [r3, #32]
 800174e:	4a5a      	ldr	r2, [pc, #360]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001750:	f023 0301 	bic.w	r3, r3, #1
 8001754:	6213      	str	r3, [r2, #32]
 8001756:	4b58      	ldr	r3, [pc, #352]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001758:	6a1b      	ldr	r3, [r3, #32]
 800175a:	4a57      	ldr	r2, [pc, #348]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 800175c:	f023 0304 	bic.w	r3, r3, #4
 8001760:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d015      	beq.n	8001796 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800176a:	f7ff f905 	bl	8000978 <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001770:	e00a      	b.n	8001788 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001772:	f7ff f901 	bl	8000978 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001780:	4293      	cmp	r3, r2
 8001782:	d901      	bls.n	8001788 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e0b1      	b.n	80018ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001788:	4b4b      	ldr	r3, [pc, #300]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 800178a:	6a1b      	ldr	r3, [r3, #32]
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d0ee      	beq.n	8001772 <HAL_RCC_OscConfig+0x37e>
 8001794:	e014      	b.n	80017c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001796:	f7ff f8ef 	bl	8000978 <HAL_GetTick>
 800179a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800179c:	e00a      	b.n	80017b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800179e:	f7ff f8eb 	bl	8000978 <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e09b      	b.n	80018ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017b4:	4b40      	ldr	r3, [pc, #256]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d1ee      	bne.n	800179e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017c0:	7dfb      	ldrb	r3, [r7, #23]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d105      	bne.n	80017d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017c6:	4b3c      	ldr	r3, [pc, #240]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	4a3b      	ldr	r2, [pc, #236]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 80017cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f000 8087 	beq.w	80018ea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017dc:	4b36      	ldr	r3, [pc, #216]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 030c 	and.w	r3, r3, #12
 80017e4:	2b08      	cmp	r3, #8
 80017e6:	d061      	beq.n	80018ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	69db      	ldr	r3, [r3, #28]
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d146      	bne.n	800187e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f0:	4b33      	ldr	r3, [pc, #204]	@ (80018c0 <HAL_RCC_OscConfig+0x4cc>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f6:	f7ff f8bf 	bl	8000978 <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017fc:	e008      	b.n	8001810 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017fe:	f7ff f8bb 	bl	8000978 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e06d      	b.n	80018ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001810:	4b29      	ldr	r3, [pc, #164]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1f0      	bne.n	80017fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a1b      	ldr	r3, [r3, #32]
 8001820:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001824:	d108      	bne.n	8001838 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001826:	4b24      	ldr	r3, [pc, #144]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	4921      	ldr	r1, [pc, #132]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001834:	4313      	orrs	r3, r2
 8001836:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001838:	4b1f      	ldr	r3, [pc, #124]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a19      	ldr	r1, [r3, #32]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001848:	430b      	orrs	r3, r1
 800184a:	491b      	ldr	r1, [pc, #108]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 800184c:	4313      	orrs	r3, r2
 800184e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001850:	4b1b      	ldr	r3, [pc, #108]	@ (80018c0 <HAL_RCC_OscConfig+0x4cc>)
 8001852:	2201      	movs	r2, #1
 8001854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001856:	f7ff f88f 	bl	8000978 <HAL_GetTick>
 800185a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800185c:	e008      	b.n	8001870 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800185e:	f7ff f88b 	bl	8000978 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e03d      	b.n	80018ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001870:	4b11      	ldr	r3, [pc, #68]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d0f0      	beq.n	800185e <HAL_RCC_OscConfig+0x46a>
 800187c:	e035      	b.n	80018ea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800187e:	4b10      	ldr	r3, [pc, #64]	@ (80018c0 <HAL_RCC_OscConfig+0x4cc>)
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001884:	f7ff f878 	bl	8000978 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800188c:	f7ff f874 	bl	8000978 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e026      	b.n	80018ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800189e:	4b06      	ldr	r3, [pc, #24]	@ (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1f0      	bne.n	800188c <HAL_RCC_OscConfig+0x498>
 80018aa:	e01e      	b.n	80018ea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	69db      	ldr	r3, [r3, #28]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d107      	bne.n	80018c4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e019      	b.n	80018ec <HAL_RCC_OscConfig+0x4f8>
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40007000 	.word	0x40007000
 80018c0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018c4:	4b0b      	ldr	r3, [pc, #44]	@ (80018f4 <HAL_RCC_OscConfig+0x500>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a1b      	ldr	r3, [r3, #32]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d106      	bne.n	80018e6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d001      	beq.n	80018ea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e000      	b.n	80018ec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3718      	adds	r7, #24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40021000 	.word	0x40021000

080018f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d101      	bne.n	800190c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e0d0      	b.n	8001aae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800190c:	4b6a      	ldr	r3, [pc, #424]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c0>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0307 	and.w	r3, r3, #7
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	429a      	cmp	r2, r3
 8001918:	d910      	bls.n	800193c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800191a:	4b67      	ldr	r3, [pc, #412]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c0>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f023 0207 	bic.w	r2, r3, #7
 8001922:	4965      	ldr	r1, [pc, #404]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	4313      	orrs	r3, r2
 8001928:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800192a:	4b63      	ldr	r3, [pc, #396]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c0>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	429a      	cmp	r2, r3
 8001936:	d001      	beq.n	800193c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e0b8      	b.n	8001aae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d020      	beq.n	800198a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	2b00      	cmp	r3, #0
 8001952:	d005      	beq.n	8001960 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001954:	4b59      	ldr	r3, [pc, #356]	@ (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	4a58      	ldr	r2, [pc, #352]	@ (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 800195a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800195e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0308 	and.w	r3, r3, #8
 8001968:	2b00      	cmp	r3, #0
 800196a:	d005      	beq.n	8001978 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800196c:	4b53      	ldr	r3, [pc, #332]	@ (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	4a52      	ldr	r2, [pc, #328]	@ (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 8001972:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001976:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001978:	4b50      	ldr	r3, [pc, #320]	@ (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	494d      	ldr	r1, [pc, #308]	@ (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 8001986:	4313      	orrs	r3, r2
 8001988:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	2b00      	cmp	r3, #0
 8001994:	d040      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d107      	bne.n	80019ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800199e:	4b47      	ldr	r3, [pc, #284]	@ (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d115      	bne.n	80019d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e07f      	b.n	8001aae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d107      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b6:	4b41      	ldr	r3, [pc, #260]	@ (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d109      	bne.n	80019d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e073      	b.n	8001aae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c6:	4b3d      	ldr	r3, [pc, #244]	@ (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e06b      	b.n	8001aae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019d6:	4b39      	ldr	r3, [pc, #228]	@ (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f023 0203 	bic.w	r2, r3, #3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	4936      	ldr	r1, [pc, #216]	@ (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019e8:	f7fe ffc6 	bl	8000978 <HAL_GetTick>
 80019ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ee:	e00a      	b.n	8001a06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f0:	f7fe ffc2 	bl	8000978 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e053      	b.n	8001aae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a06:	4b2d      	ldr	r3, [pc, #180]	@ (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f003 020c 	and.w	r2, r3, #12
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d1eb      	bne.n	80019f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a18:	4b27      	ldr	r3, [pc, #156]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0307 	and.w	r3, r3, #7
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d210      	bcs.n	8001a48 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a26:	4b24      	ldr	r3, [pc, #144]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f023 0207 	bic.w	r2, r3, #7
 8001a2e:	4922      	ldr	r1, [pc, #136]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a36:	4b20      	ldr	r3, [pc, #128]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d001      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e032      	b.n	8001aae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0304 	and.w	r3, r3, #4
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d008      	beq.n	8001a66 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a54:	4b19      	ldr	r3, [pc, #100]	@ (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	4916      	ldr	r1, [pc, #88]	@ (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0308 	and.w	r3, r3, #8
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d009      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a72:	4b12      	ldr	r3, [pc, #72]	@ (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	490e      	ldr	r1, [pc, #56]	@ (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a86:	f000 f821 	bl	8001acc <HAL_RCC_GetSysClockFreq>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	091b      	lsrs	r3, r3, #4
 8001a92:	f003 030f 	and.w	r3, r3, #15
 8001a96:	490a      	ldr	r1, [pc, #40]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a98:	5ccb      	ldrb	r3, [r1, r3]
 8001a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a9e:	4a09      	ldr	r2, [pc, #36]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1cc>)
 8001aa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001aa2:	4b09      	ldr	r3, [pc, #36]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1d0>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7fe ff24 	bl	80008f4 <HAL_InitTick>

  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40022000 	.word	0x40022000
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	08002dd8 	.word	0x08002dd8
 8001ac4:	20000000 	.word	0x20000000
 8001ac8:	20000004 	.word	0x20000004

08001acc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b087      	sub	sp, #28
 8001ad0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	2300      	movs	r3, #0
 8001adc:	617b      	str	r3, [r7, #20]
 8001ade:	2300      	movs	r3, #0
 8001ae0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ae6:	4b1e      	ldr	r3, [pc, #120]	@ (8001b60 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f003 030c 	and.w	r3, r3, #12
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	d002      	beq.n	8001afc <HAL_RCC_GetSysClockFreq+0x30>
 8001af6:	2b08      	cmp	r3, #8
 8001af8:	d003      	beq.n	8001b02 <HAL_RCC_GetSysClockFreq+0x36>
 8001afa:	e027      	b.n	8001b4c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001afc:	4b19      	ldr	r3, [pc, #100]	@ (8001b64 <HAL_RCC_GetSysClockFreq+0x98>)
 8001afe:	613b      	str	r3, [r7, #16]
      break;
 8001b00:	e027      	b.n	8001b52 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	0c9b      	lsrs	r3, r3, #18
 8001b06:	f003 030f 	and.w	r3, r3, #15
 8001b0a:	4a17      	ldr	r2, [pc, #92]	@ (8001b68 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b0c:	5cd3      	ldrb	r3, [r2, r3]
 8001b0e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d010      	beq.n	8001b3c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b1a:	4b11      	ldr	r3, [pc, #68]	@ (8001b60 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	0c5b      	lsrs	r3, r3, #17
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	4a11      	ldr	r2, [pc, #68]	@ (8001b6c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b26:	5cd3      	ldrb	r3, [r2, r3]
 8001b28:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b64 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b2e:	fb03 f202 	mul.w	r2, r3, r2
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b38:	617b      	str	r3, [r7, #20]
 8001b3a:	e004      	b.n	8001b46 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a0c      	ldr	r2, [pc, #48]	@ (8001b70 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b40:	fb02 f303 	mul.w	r3, r2, r3
 8001b44:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	613b      	str	r3, [r7, #16]
      break;
 8001b4a:	e002      	b.n	8001b52 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b4c:	4b05      	ldr	r3, [pc, #20]	@ (8001b64 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b4e:	613b      	str	r3, [r7, #16]
      break;
 8001b50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b52:	693b      	ldr	r3, [r7, #16]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	371c      	adds	r7, #28
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	40021000 	.word	0x40021000
 8001b64:	007a1200 	.word	0x007a1200
 8001b68:	08002de8 	.word	0x08002de8
 8001b6c:	08002df8 	.word	0x08002df8
 8001b70:	003d0900 	.word	0x003d0900

08001b74 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba8 <RCC_Delay+0x34>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a0a      	ldr	r2, [pc, #40]	@ (8001bac <RCC_Delay+0x38>)
 8001b82:	fba2 2303 	umull	r2, r3, r2, r3
 8001b86:	0a5b      	lsrs	r3, r3, #9
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	fb02 f303 	mul.w	r3, r2, r3
 8001b8e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b90:	bf00      	nop
  }
  while (Delay --);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	1e5a      	subs	r2, r3, #1
 8001b96:	60fa      	str	r2, [r7, #12]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1f9      	bne.n	8001b90 <RCC_Delay+0x1c>
}
 8001b9c:	bf00      	nop
 8001b9e:	bf00      	nop
 8001ba0:	3714      	adds	r7, #20
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr
 8001ba8:	20000000 	.word	0x20000000
 8001bac:	10624dd3 	.word	0x10624dd3

08001bb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e041      	b.n	8001c46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d106      	bne.n	8001bdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7fe fd96 	bl	8000708 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2202      	movs	r2, #2
 8001be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3304      	adds	r3, #4
 8001bec:	4619      	mov	r1, r3
 8001bee:	4610      	mov	r0, r2
 8001bf0:	f000 fd5a 	bl	80026a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b082      	sub	sp, #8
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d101      	bne.n	8001c60 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e041      	b.n	8001ce4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d106      	bne.n	8001c7a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f000 f839 	bl	8001cec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2202      	movs	r2, #2
 8001c7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	3304      	adds	r3, #4
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4610      	mov	r0, r2
 8001c8e:	f000 fd0b 	bl	80026a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2201      	movs	r2, #1
 8001cae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bc80      	pop	{r7}
 8001cfc:	4770      	bx	lr
	...

08001d00 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
 8001d0c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d109      	bne.n	8001d2c <HAL_TIM_PWM_Start_DMA+0x2c>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	bf0c      	ite	eq
 8001d24:	2301      	moveq	r3, #1
 8001d26:	2300      	movne	r3, #0
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	e022      	b.n	8001d72 <HAL_TIM_PWM_Start_DMA+0x72>
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	d109      	bne.n	8001d46 <HAL_TIM_PWM_Start_DMA+0x46>
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	bf0c      	ite	eq
 8001d3e:	2301      	moveq	r3, #1
 8001d40:	2300      	movne	r3, #0
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	e015      	b.n	8001d72 <HAL_TIM_PWM_Start_DMA+0x72>
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	2b08      	cmp	r3, #8
 8001d4a:	d109      	bne.n	8001d60 <HAL_TIM_PWM_Start_DMA+0x60>
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	bf0c      	ite	eq
 8001d58:	2301      	moveq	r3, #1
 8001d5a:	2300      	movne	r3, #0
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	e008      	b.n	8001d72 <HAL_TIM_PWM_Start_DMA+0x72>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	bf0c      	ite	eq
 8001d6c:	2301      	moveq	r3, #1
 8001d6e:	2300      	movne	r3, #0
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8001d76:	2302      	movs	r3, #2
 8001d78:	e153      	b.n	8002022 <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d109      	bne.n	8001d94 <HAL_TIM_PWM_Start_DMA+0x94>
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	bf0c      	ite	eq
 8001d8c:	2301      	moveq	r3, #1
 8001d8e:	2300      	movne	r3, #0
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	e022      	b.n	8001dda <HAL_TIM_PWM_Start_DMA+0xda>
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	d109      	bne.n	8001dae <HAL_TIM_PWM_Start_DMA+0xae>
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	bf0c      	ite	eq
 8001da6:	2301      	moveq	r3, #1
 8001da8:	2300      	movne	r3, #0
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	e015      	b.n	8001dda <HAL_TIM_PWM_Start_DMA+0xda>
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	2b08      	cmp	r3, #8
 8001db2:	d109      	bne.n	8001dc8 <HAL_TIM_PWM_Start_DMA+0xc8>
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	bf0c      	ite	eq
 8001dc0:	2301      	moveq	r3, #1
 8001dc2:	2300      	movne	r3, #0
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	e008      	b.n	8001dda <HAL_TIM_PWM_Start_DMA+0xda>
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	bf0c      	ite	eq
 8001dd4:	2301      	moveq	r3, #1
 8001dd6:	2300      	movne	r3, #0
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d024      	beq.n	8001e28 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d002      	beq.n	8001dea <HAL_TIM_PWM_Start_DMA+0xea>
 8001de4:	887b      	ldrh	r3, [r7, #2]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e119      	b.n	8002022 <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d104      	bne.n	8001dfe <HAL_TIM_PWM_Start_DMA+0xfe>
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2202      	movs	r2, #2
 8001df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001dfc:	e016      	b.n	8001e2c <HAL_TIM_PWM_Start_DMA+0x12c>
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	2b04      	cmp	r3, #4
 8001e02:	d104      	bne.n	8001e0e <HAL_TIM_PWM_Start_DMA+0x10e>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2202      	movs	r2, #2
 8001e08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e0c:	e00e      	b.n	8001e2c <HAL_TIM_PWM_Start_DMA+0x12c>
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	d104      	bne.n	8001e1e <HAL_TIM_PWM_Start_DMA+0x11e>
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2202      	movs	r2, #2
 8001e18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e1c:	e006      	b.n	8001e2c <HAL_TIM_PWM_Start_DMA+0x12c>
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2202      	movs	r2, #2
 8001e22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001e26:	e001      	b.n	8001e2c <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e0fa      	b.n	8002022 <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	2b0c      	cmp	r3, #12
 8001e30:	f200 80ae 	bhi.w	8001f90 <HAL_TIM_PWM_Start_DMA+0x290>
 8001e34:	a201      	add	r2, pc, #4	@ (adr r2, 8001e3c <HAL_TIM_PWM_Start_DMA+0x13c>)
 8001e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e3a:	bf00      	nop
 8001e3c:	08001e71 	.word	0x08001e71
 8001e40:	08001f91 	.word	0x08001f91
 8001e44:	08001f91 	.word	0x08001f91
 8001e48:	08001f91 	.word	0x08001f91
 8001e4c:	08001eb9 	.word	0x08001eb9
 8001e50:	08001f91 	.word	0x08001f91
 8001e54:	08001f91 	.word	0x08001f91
 8001e58:	08001f91 	.word	0x08001f91
 8001e5c:	08001f01 	.word	0x08001f01
 8001e60:	08001f91 	.word	0x08001f91
 8001e64:	08001f91 	.word	0x08001f91
 8001e68:	08001f91 	.word	0x08001f91
 8001e6c:	08001f49 	.word	0x08001f49
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e74:	4a6d      	ldr	r2, [pc, #436]	@ (800202c <HAL_TIM_PWM_Start_DMA+0x32c>)
 8001e76:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e7c:	4a6c      	ldr	r2, [pc, #432]	@ (8002030 <HAL_TIM_PWM_Start_DMA+0x330>)
 8001e7e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e84:	4a6b      	ldr	r2, [pc, #428]	@ (8002034 <HAL_TIM_PWM_Start_DMA+0x334>)
 8001e86:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8001e8c:	6879      	ldr	r1, [r7, #4]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	3334      	adds	r3, #52	@ 0x34
 8001e94:	461a      	mov	r2, r3
 8001e96:	887b      	ldrh	r3, [r7, #2]
 8001e98:	f7fe ff04 	bl	8000ca4 <HAL_DMA_Start_IT>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e0bd      	b.n	8002022 <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68da      	ldr	r2, [r3, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001eb4:	60da      	str	r2, [r3, #12]
      break;
 8001eb6:	e06e      	b.n	8001f96 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ebc:	4a5b      	ldr	r2, [pc, #364]	@ (800202c <HAL_TIM_PWM_Start_DMA+0x32c>)
 8001ebe:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec4:	4a5a      	ldr	r2, [pc, #360]	@ (8002030 <HAL_TIM_PWM_Start_DMA+0x330>)
 8001ec6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ecc:	4a59      	ldr	r2, [pc, #356]	@ (8002034 <HAL_TIM_PWM_Start_DMA+0x334>)
 8001ece:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001ed4:	6879      	ldr	r1, [r7, #4]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	3338      	adds	r3, #56	@ 0x38
 8001edc:	461a      	mov	r2, r3
 8001ede:	887b      	ldrh	r3, [r7, #2]
 8001ee0:	f7fe fee0 	bl	8000ca4 <HAL_DMA_Start_IT>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e099      	b.n	8002022 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68da      	ldr	r2, [r3, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001efc:	60da      	str	r2, [r3, #12]
      break;
 8001efe:	e04a      	b.n	8001f96 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f04:	4a49      	ldr	r2, [pc, #292]	@ (800202c <HAL_TIM_PWM_Start_DMA+0x32c>)
 8001f06:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f0c:	4a48      	ldr	r2, [pc, #288]	@ (8002030 <HAL_TIM_PWM_Start_DMA+0x330>)
 8001f0e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f14:	4a47      	ldr	r2, [pc, #284]	@ (8002034 <HAL_TIM_PWM_Start_DMA+0x334>)
 8001f16:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8001f1c:	6879      	ldr	r1, [r7, #4]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	333c      	adds	r3, #60	@ 0x3c
 8001f24:	461a      	mov	r2, r3
 8001f26:	887b      	ldrh	r3, [r7, #2]
 8001f28:	f7fe febc 	bl	8000ca4 <HAL_DMA_Start_IT>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e075      	b.n	8002022 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68da      	ldr	r2, [r3, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f44:	60da      	str	r2, [r3, #12]
      break;
 8001f46:	e026      	b.n	8001f96 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4c:	4a37      	ldr	r2, [pc, #220]	@ (800202c <HAL_TIM_PWM_Start_DMA+0x32c>)
 8001f4e:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f54:	4a36      	ldr	r2, [pc, #216]	@ (8002030 <HAL_TIM_PWM_Start_DMA+0x330>)
 8001f56:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5c:	4a35      	ldr	r2, [pc, #212]	@ (8002034 <HAL_TIM_PWM_Start_DMA+0x334>)
 8001f5e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	3340      	adds	r3, #64	@ 0x40
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	887b      	ldrh	r3, [r7, #2]
 8001f70:	f7fe fe98 	bl	8000ca4 <HAL_DMA_Start_IT>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e051      	b.n	8002022 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68da      	ldr	r2, [r3, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001f8c:	60da      	str	r2, [r3, #12]
      break;
 8001f8e:	e002      	b.n	8001f96 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	75fb      	strb	r3, [r7, #23]
      break;
 8001f94:	bf00      	nop
  }

  if (status == HAL_OK)
 8001f96:	7dfb      	ldrb	r3, [r7, #23]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d141      	bne.n	8002020 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	68b9      	ldr	r1, [r7, #8]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f000 fe0b 	bl	8002bc0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a22      	ldr	r2, [pc, #136]	@ (8002038 <HAL_TIM_PWM_Start_DMA+0x338>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d107      	bne.n	8001fc4 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001fc2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a1b      	ldr	r2, [pc, #108]	@ (8002038 <HAL_TIM_PWM_Start_DMA+0x338>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d00e      	beq.n	8001fec <HAL_TIM_PWM_Start_DMA+0x2ec>
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fd6:	d009      	beq.n	8001fec <HAL_TIM_PWM_Start_DMA+0x2ec>
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a17      	ldr	r2, [pc, #92]	@ (800203c <HAL_TIM_PWM_Start_DMA+0x33c>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d004      	beq.n	8001fec <HAL_TIM_PWM_Start_DMA+0x2ec>
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a16      	ldr	r2, [pc, #88]	@ (8002040 <HAL_TIM_PWM_Start_DMA+0x340>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d111      	bne.n	8002010 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	2b06      	cmp	r3, #6
 8001ffc:	d010      	beq.n	8002020 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f042 0201 	orr.w	r2, r2, #1
 800200c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800200e:	e007      	b.n	8002020 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f042 0201 	orr.w	r2, r2, #1
 800201e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002020:	7dfb      	ldrb	r3, [r7, #23]
}
 8002022:	4618      	mov	r0, r3
 8002024:	3718      	adds	r7, #24
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	08002599 	.word	0x08002599
 8002030:	08002641 	.word	0x08002641
 8002034:	08002507 	.word	0x08002507
 8002038:	40012c00 	.word	0x40012c00
 800203c:	40000400 	.word	0x40000400
 8002040:	40000800 	.word	0x40000800

08002044 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800204e:	2300      	movs	r3, #0
 8002050:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	2b0c      	cmp	r3, #12
 8002056:	d855      	bhi.n	8002104 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8002058:	a201      	add	r2, pc, #4	@ (adr r2, 8002060 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800205a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800205e:	bf00      	nop
 8002060:	08002095 	.word	0x08002095
 8002064:	08002105 	.word	0x08002105
 8002068:	08002105 	.word	0x08002105
 800206c:	08002105 	.word	0x08002105
 8002070:	080020b1 	.word	0x080020b1
 8002074:	08002105 	.word	0x08002105
 8002078:	08002105 	.word	0x08002105
 800207c:	08002105 	.word	0x08002105
 8002080:	080020cd 	.word	0x080020cd
 8002084:	08002105 	.word	0x08002105
 8002088:	08002105 	.word	0x08002105
 800208c:	08002105 	.word	0x08002105
 8002090:	080020e9 	.word	0x080020e9
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68da      	ldr	r2, [r3, #12]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80020a2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7fe fe5b 	bl	8000d64 <HAL_DMA_Abort_IT>
      break;
 80020ae:	e02c      	b.n	800210a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68da      	ldr	r2, [r3, #12]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020be:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7fe fe4d 	bl	8000d64 <HAL_DMA_Abort_IT>
      break;
 80020ca:	e01e      	b.n	800210a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68da      	ldr	r2, [r3, #12]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020da:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7fe fe3f 	bl	8000d64 <HAL_DMA_Abort_IT>
      break;
 80020e6:	e010      	b.n	800210a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68da      	ldr	r2, [r3, #12]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80020f6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7fe fe31 	bl	8000d64 <HAL_DMA_Abort_IT>
      break;
 8002102:	e002      	b.n	800210a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	73fb      	strb	r3, [r7, #15]
      break;
 8002108:	bf00      	nop
  }

  if (status == HAL_OK)
 800210a:	7bfb      	ldrb	r3, [r7, #15]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d157      	bne.n	80021c0 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2200      	movs	r2, #0
 8002116:	6839      	ldr	r1, [r7, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f000 fd51 	bl	8002bc0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a2a      	ldr	r2, [pc, #168]	@ (80021cc <HAL_TIM_PWM_Stop_DMA+0x188>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d117      	bne.n	8002158 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6a1a      	ldr	r2, [r3, #32]
 800212e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002132:	4013      	ands	r3, r2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d10f      	bne.n	8002158 <HAL_TIM_PWM_Stop_DMA+0x114>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6a1a      	ldr	r2, [r3, #32]
 800213e:	f240 4344 	movw	r3, #1092	@ 0x444
 8002142:	4013      	ands	r3, r2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d107      	bne.n	8002158 <HAL_TIM_PWM_Stop_DMA+0x114>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002156:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6a1a      	ldr	r2, [r3, #32]
 800215e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002162:	4013      	ands	r3, r2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d10f      	bne.n	8002188 <HAL_TIM_PWM_Stop_DMA+0x144>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6a1a      	ldr	r2, [r3, #32]
 800216e:	f240 4344 	movw	r3, #1092	@ 0x444
 8002172:	4013      	ands	r3, r2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d107      	bne.n	8002188 <HAL_TIM_PWM_Stop_DMA+0x144>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 0201 	bic.w	r2, r2, #1
 8002186:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d104      	bne.n	8002198 <HAL_TIM_PWM_Stop_DMA+0x154>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002196:	e013      	b.n	80021c0 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	2b04      	cmp	r3, #4
 800219c:	d104      	bne.n	80021a8 <HAL_TIM_PWM_Stop_DMA+0x164>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80021a6:	e00b      	b.n	80021c0 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	2b08      	cmp	r3, #8
 80021ac:	d104      	bne.n	80021b8 <HAL_TIM_PWM_Stop_DMA+0x174>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2201      	movs	r2, #1
 80021b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80021b6:	e003      	b.n	80021c0 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 80021c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40012c00 	.word	0x40012c00

080021d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021dc:	2300      	movs	r3, #0
 80021de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d101      	bne.n	80021ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80021ea:	2302      	movs	r3, #2
 80021ec:	e0ae      	b.n	800234c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b0c      	cmp	r3, #12
 80021fa:	f200 809f 	bhi.w	800233c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80021fe:	a201      	add	r2, pc, #4	@ (adr r2, 8002204 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002204:	08002239 	.word	0x08002239
 8002208:	0800233d 	.word	0x0800233d
 800220c:	0800233d 	.word	0x0800233d
 8002210:	0800233d 	.word	0x0800233d
 8002214:	08002279 	.word	0x08002279
 8002218:	0800233d 	.word	0x0800233d
 800221c:	0800233d 	.word	0x0800233d
 8002220:	0800233d 	.word	0x0800233d
 8002224:	080022bb 	.word	0x080022bb
 8002228:	0800233d 	.word	0x0800233d
 800222c:	0800233d 	.word	0x0800233d
 8002230:	0800233d 	.word	0x0800233d
 8002234:	080022fb 	.word	0x080022fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68b9      	ldr	r1, [r7, #8]
 800223e:	4618      	mov	r0, r3
 8002240:	f000 faa0 	bl	8002784 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	699a      	ldr	r2, [r3, #24]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f042 0208 	orr.w	r2, r2, #8
 8002252:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	699a      	ldr	r2, [r3, #24]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 0204 	bic.w	r2, r2, #4
 8002262:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6999      	ldr	r1, [r3, #24]
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	691a      	ldr	r2, [r3, #16]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	430a      	orrs	r2, r1
 8002274:	619a      	str	r2, [r3, #24]
      break;
 8002276:	e064      	b.n	8002342 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68b9      	ldr	r1, [r7, #8]
 800227e:	4618      	mov	r0, r3
 8002280:	f000 fae6 	bl	8002850 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	699a      	ldr	r2, [r3, #24]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002292:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	699a      	ldr	r2, [r3, #24]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6999      	ldr	r1, [r3, #24]
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	021a      	lsls	r2, r3, #8
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	430a      	orrs	r2, r1
 80022b6:	619a      	str	r2, [r3, #24]
      break;
 80022b8:	e043      	b.n	8002342 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68b9      	ldr	r1, [r7, #8]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f000 fb2f 	bl	8002924 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	69da      	ldr	r2, [r3, #28]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f042 0208 	orr.w	r2, r2, #8
 80022d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	69da      	ldr	r2, [r3, #28]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 0204 	bic.w	r2, r2, #4
 80022e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	69d9      	ldr	r1, [r3, #28]
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	691a      	ldr	r2, [r3, #16]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	430a      	orrs	r2, r1
 80022f6:	61da      	str	r2, [r3, #28]
      break;
 80022f8:	e023      	b.n	8002342 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68b9      	ldr	r1, [r7, #8]
 8002300:	4618      	mov	r0, r3
 8002302:	f000 fb79 	bl	80029f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	69da      	ldr	r2, [r3, #28]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002314:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	69da      	ldr	r2, [r3, #28]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002324:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	69d9      	ldr	r1, [r3, #28]
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	021a      	lsls	r2, r3, #8
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	430a      	orrs	r2, r1
 8002338:	61da      	str	r2, [r3, #28]
      break;
 800233a:	e002      	b.n	8002342 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	75fb      	strb	r3, [r7, #23]
      break;
 8002340:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800234a:	7dfb      	ldrb	r3, [r7, #23]
}
 800234c:	4618      	mov	r0, r3
 800234e:	3718      	adds	r7, #24
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800235e:	2300      	movs	r3, #0
 8002360:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002368:	2b01      	cmp	r3, #1
 800236a:	d101      	bne.n	8002370 <HAL_TIM_ConfigClockSource+0x1c>
 800236c:	2302      	movs	r3, #2
 800236e:	e0b4      	b.n	80024da <HAL_TIM_ConfigClockSource+0x186>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2202      	movs	r2, #2
 800237c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800238e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002396:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68ba      	ldr	r2, [r7, #8]
 800239e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023a8:	d03e      	beq.n	8002428 <HAL_TIM_ConfigClockSource+0xd4>
 80023aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023ae:	f200 8087 	bhi.w	80024c0 <HAL_TIM_ConfigClockSource+0x16c>
 80023b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023b6:	f000 8086 	beq.w	80024c6 <HAL_TIM_ConfigClockSource+0x172>
 80023ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023be:	d87f      	bhi.n	80024c0 <HAL_TIM_ConfigClockSource+0x16c>
 80023c0:	2b70      	cmp	r3, #112	@ 0x70
 80023c2:	d01a      	beq.n	80023fa <HAL_TIM_ConfigClockSource+0xa6>
 80023c4:	2b70      	cmp	r3, #112	@ 0x70
 80023c6:	d87b      	bhi.n	80024c0 <HAL_TIM_ConfigClockSource+0x16c>
 80023c8:	2b60      	cmp	r3, #96	@ 0x60
 80023ca:	d050      	beq.n	800246e <HAL_TIM_ConfigClockSource+0x11a>
 80023cc:	2b60      	cmp	r3, #96	@ 0x60
 80023ce:	d877      	bhi.n	80024c0 <HAL_TIM_ConfigClockSource+0x16c>
 80023d0:	2b50      	cmp	r3, #80	@ 0x50
 80023d2:	d03c      	beq.n	800244e <HAL_TIM_ConfigClockSource+0xfa>
 80023d4:	2b50      	cmp	r3, #80	@ 0x50
 80023d6:	d873      	bhi.n	80024c0 <HAL_TIM_ConfigClockSource+0x16c>
 80023d8:	2b40      	cmp	r3, #64	@ 0x40
 80023da:	d058      	beq.n	800248e <HAL_TIM_ConfigClockSource+0x13a>
 80023dc:	2b40      	cmp	r3, #64	@ 0x40
 80023de:	d86f      	bhi.n	80024c0 <HAL_TIM_ConfigClockSource+0x16c>
 80023e0:	2b30      	cmp	r3, #48	@ 0x30
 80023e2:	d064      	beq.n	80024ae <HAL_TIM_ConfigClockSource+0x15a>
 80023e4:	2b30      	cmp	r3, #48	@ 0x30
 80023e6:	d86b      	bhi.n	80024c0 <HAL_TIM_ConfigClockSource+0x16c>
 80023e8:	2b20      	cmp	r3, #32
 80023ea:	d060      	beq.n	80024ae <HAL_TIM_ConfigClockSource+0x15a>
 80023ec:	2b20      	cmp	r3, #32
 80023ee:	d867      	bhi.n	80024c0 <HAL_TIM_ConfigClockSource+0x16c>
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d05c      	beq.n	80024ae <HAL_TIM_ConfigClockSource+0x15a>
 80023f4:	2b10      	cmp	r3, #16
 80023f6:	d05a      	beq.n	80024ae <HAL_TIM_ConfigClockSource+0x15a>
 80023f8:	e062      	b.n	80024c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800240a:	f000 fbba 	bl	8002b82 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800241c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	609a      	str	r2, [r3, #8]
      break;
 8002426:	e04f      	b.n	80024c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002438:	f000 fba3 	bl	8002b82 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689a      	ldr	r2, [r3, #8]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800244a:	609a      	str	r2, [r3, #8]
      break;
 800244c:	e03c      	b.n	80024c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800245a:	461a      	mov	r2, r3
 800245c:	f000 fb1a 	bl	8002a94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2150      	movs	r1, #80	@ 0x50
 8002466:	4618      	mov	r0, r3
 8002468:	f000 fb71 	bl	8002b4e <TIM_ITRx_SetConfig>
      break;
 800246c:	e02c      	b.n	80024c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800247a:	461a      	mov	r2, r3
 800247c:	f000 fb38 	bl	8002af0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2160      	movs	r1, #96	@ 0x60
 8002486:	4618      	mov	r0, r3
 8002488:	f000 fb61 	bl	8002b4e <TIM_ITRx_SetConfig>
      break;
 800248c:	e01c      	b.n	80024c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800249a:	461a      	mov	r2, r3
 800249c:	f000 fafa 	bl	8002a94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2140      	movs	r1, #64	@ 0x40
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 fb51 	bl	8002b4e <TIM_ITRx_SetConfig>
      break;
 80024ac:	e00c      	b.n	80024c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4619      	mov	r1, r3
 80024b8:	4610      	mov	r0, r2
 80024ba:	f000 fb48 	bl	8002b4e <TIM_ITRx_SetConfig>
      break;
 80024be:	e003      	b.n	80024c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	73fb      	strb	r3, [r7, #15]
      break;
 80024c4:	e000      	b.n	80024c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80024c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80024d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80024e2:	b480      	push	{r7}
 80024e4:	b083      	sub	sp, #12
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bc80      	pop	{r7}
 80024f2:	4770      	bx	lr

080024f4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	bc80      	pop	{r7}
 8002504:	4770      	bx	lr

08002506 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b084      	sub	sp, #16
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002512:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	429a      	cmp	r2, r3
 800251c:	d107      	bne.n	800252e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2201      	movs	r2, #1
 8002522:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800252c:	e02a      	b.n	8002584 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	429a      	cmp	r2, r3
 8002536:	d107      	bne.n	8002548 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2202      	movs	r2, #2
 800253c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002546:	e01d      	b.n	8002584 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	429a      	cmp	r2, r3
 8002550:	d107      	bne.n	8002562 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2204      	movs	r2, #4
 8002556:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002560:	e010      	b.n	8002584 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	429a      	cmp	r2, r3
 800256a:	d107      	bne.n	800257c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2208      	movs	r2, #8
 8002570:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800257a:	e003      	b.n	8002584 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f7ff ffb5 	bl	80024f4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	771a      	strb	r2, [r3, #28]
}
 8002590:	bf00      	nop
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d10b      	bne.n	80025c8 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2201      	movs	r2, #1
 80025b4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d136      	bne.n	800262c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80025c6:	e031      	b.n	800262c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d10b      	bne.n	80025ea <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2202      	movs	r2, #2
 80025d6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d125      	bne.n	800262c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80025e8:	e020      	b.n	800262c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d10b      	bne.n	800260c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2204      	movs	r2, #4
 80025f8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d114      	bne.n	800262c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800260a:	e00f      	b.n	800262c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	429a      	cmp	r2, r3
 8002614:	d10a      	bne.n	800262c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2208      	movs	r2, #8
 800261a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d103      	bne.n	800262c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f7fd fd8d 	bl	800014c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	771a      	strb	r2, [r3, #28]
}
 8002638:	bf00      	nop
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	429a      	cmp	r2, r3
 8002656:	d103      	bne.n	8002660 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2201      	movs	r2, #1
 800265c:	771a      	strb	r2, [r3, #28]
 800265e:	e019      	b.n	8002694 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	429a      	cmp	r2, r3
 8002668:	d103      	bne.n	8002672 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2202      	movs	r2, #2
 800266e:	771a      	strb	r2, [r3, #28]
 8002670:	e010      	b.n	8002694 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	429a      	cmp	r2, r3
 800267a:	d103      	bne.n	8002684 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2204      	movs	r2, #4
 8002680:	771a      	strb	r2, [r3, #28]
 8002682:	e007      	b.n	8002694 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	429a      	cmp	r2, r3
 800268c:	d102      	bne.n	8002694 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2208      	movs	r2, #8
 8002692:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f7ff ff24 	bl	80024e2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2200      	movs	r2, #0
 800269e:	771a      	strb	r2, [r3, #28]
}
 80026a0:	bf00      	nop
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a2f      	ldr	r2, [pc, #188]	@ (8002778 <TIM_Base_SetConfig+0xd0>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d00b      	beq.n	80026d8 <TIM_Base_SetConfig+0x30>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026c6:	d007      	beq.n	80026d8 <TIM_Base_SetConfig+0x30>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a2c      	ldr	r2, [pc, #176]	@ (800277c <TIM_Base_SetConfig+0xd4>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d003      	beq.n	80026d8 <TIM_Base_SetConfig+0x30>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a2b      	ldr	r2, [pc, #172]	@ (8002780 <TIM_Base_SetConfig+0xd8>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d108      	bne.n	80026ea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a22      	ldr	r2, [pc, #136]	@ (8002778 <TIM_Base_SetConfig+0xd0>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d00b      	beq.n	800270a <TIM_Base_SetConfig+0x62>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026f8:	d007      	beq.n	800270a <TIM_Base_SetConfig+0x62>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a1f      	ldr	r2, [pc, #124]	@ (800277c <TIM_Base_SetConfig+0xd4>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d003      	beq.n	800270a <TIM_Base_SetConfig+0x62>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a1e      	ldr	r2, [pc, #120]	@ (8002780 <TIM_Base_SetConfig+0xd8>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d108      	bne.n	800271c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002710:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	4313      	orrs	r3, r2
 800271a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	4313      	orrs	r3, r2
 8002728:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a0d      	ldr	r2, [pc, #52]	@ (8002778 <TIM_Base_SetConfig+0xd0>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d103      	bne.n	8002750 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	691a      	ldr	r2, [r3, #16]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d005      	beq.n	800276e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	f023 0201 	bic.w	r2, r3, #1
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	611a      	str	r2, [r3, #16]
  }
}
 800276e:	bf00      	nop
 8002770:	3714      	adds	r7, #20
 8002772:	46bd      	mov	sp, r7
 8002774:	bc80      	pop	{r7}
 8002776:	4770      	bx	lr
 8002778:	40012c00 	.word	0x40012c00
 800277c:	40000400 	.word	0x40000400
 8002780:	40000800 	.word	0x40000800

08002784 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002784:	b480      	push	{r7}
 8002786:	b087      	sub	sp, #28
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	f023 0201 	bic.w	r2, r3, #1
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f023 0303 	bic.w	r3, r3, #3
 80027ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f023 0302 	bic.w	r3, r3, #2
 80027cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a1c      	ldr	r2, [pc, #112]	@ (800284c <TIM_OC1_SetConfig+0xc8>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d10c      	bne.n	80027fa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	f023 0308 	bic.w	r3, r3, #8
 80027e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	697a      	ldr	r2, [r7, #20]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	f023 0304 	bic.w	r3, r3, #4
 80027f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a13      	ldr	r2, [pc, #76]	@ (800284c <TIM_OC1_SetConfig+0xc8>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d111      	bne.n	8002826 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002808:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002810:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	4313      	orrs	r3, r2
 800281a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	4313      	orrs	r3, r2
 8002824:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685a      	ldr	r2, [r3, #4]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	697a      	ldr	r2, [r7, #20]
 800283e:	621a      	str	r2, [r3, #32]
}
 8002840:	bf00      	nop
 8002842:	371c      	adds	r7, #28
 8002844:	46bd      	mov	sp, r7
 8002846:	bc80      	pop	{r7}
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	40012c00 	.word	0x40012c00

08002850 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002850:	b480      	push	{r7}
 8002852:	b087      	sub	sp, #28
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	f023 0210 	bic.w	r2, r3, #16
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800287e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002886:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	021b      	lsls	r3, r3, #8
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	4313      	orrs	r3, r2
 8002892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	f023 0320 	bic.w	r3, r3, #32
 800289a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	011b      	lsls	r3, r3, #4
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a1d      	ldr	r2, [pc, #116]	@ (8002920 <TIM_OC2_SetConfig+0xd0>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d10d      	bne.n	80028cc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80028b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	011b      	lsls	r3, r3, #4
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80028ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a14      	ldr	r2, [pc, #80]	@ (8002920 <TIM_OC2_SetConfig+0xd0>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d113      	bne.n	80028fc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80028da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80028e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	621a      	str	r2, [r3, #32]
}
 8002916:	bf00      	nop
 8002918:	371c      	adds	r7, #28
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr
 8002920:	40012c00 	.word	0x40012c00

08002924 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002924:	b480      	push	{r7}
 8002926:	b087      	sub	sp, #28
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	69db      	ldr	r3, [r3, #28]
 800294a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f023 0303 	bic.w	r3, r3, #3
 800295a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	4313      	orrs	r3, r2
 8002964:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800296c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	021b      	lsls	r3, r3, #8
 8002974:	697a      	ldr	r2, [r7, #20]
 8002976:	4313      	orrs	r3, r2
 8002978:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a1d      	ldr	r2, [pc, #116]	@ (80029f4 <TIM_OC3_SetConfig+0xd0>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d10d      	bne.n	800299e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002988:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	021b      	lsls	r3, r3, #8
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	4313      	orrs	r3, r2
 8002994:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800299c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a14      	ldr	r2, [pc, #80]	@ (80029f4 <TIM_OC3_SetConfig+0xd0>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d113      	bne.n	80029ce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80029ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80029b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	011b      	lsls	r3, r3, #4
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	4313      	orrs	r3, r2
 80029c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	011b      	lsls	r3, r3, #4
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685a      	ldr	r2, [r3, #4]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	621a      	str	r2, [r3, #32]
}
 80029e8:	bf00      	nop
 80029ea:	371c      	adds	r7, #28
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bc80      	pop	{r7}
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	40012c00 	.word	0x40012c00

080029f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b087      	sub	sp, #28
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	021b      	lsls	r3, r3, #8
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002a42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	031b      	lsls	r3, r3, #12
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a0f      	ldr	r2, [pc, #60]	@ (8002a90 <TIM_OC4_SetConfig+0x98>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d109      	bne.n	8002a6c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002a5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	695b      	ldr	r3, [r3, #20]
 8002a64:	019b      	lsls	r3, r3, #6
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	621a      	str	r2, [r3, #32]
}
 8002a86:	bf00      	nop
 8002a88:	371c      	adds	r7, #28
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr
 8002a90:	40012c00 	.word	0x40012c00

08002a94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b087      	sub	sp, #28
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	f023 0201 	bic.w	r2, r3, #1
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002abe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	011b      	lsls	r3, r3, #4
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	f023 030a 	bic.w	r3, r3, #10
 8002ad0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	621a      	str	r2, [r3, #32]
}
 8002ae6:	bf00      	nop
 8002ae8:	371c      	adds	r7, #28
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bc80      	pop	{r7}
 8002aee:	4770      	bx	lr

08002af0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b087      	sub	sp, #28
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	f023 0210 	bic.w	r2, r3, #16
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002b1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	031b      	lsls	r3, r3, #12
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002b2c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	011b      	lsls	r3, r3, #4
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	621a      	str	r2, [r3, #32]
}
 8002b44:	bf00      	nop
 8002b46:	371c      	adds	r7, #28
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bc80      	pop	{r7}
 8002b4c:	4770      	bx	lr

08002b4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b085      	sub	sp, #20
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
 8002b56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	f043 0307 	orr.w	r3, r3, #7
 8002b70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	609a      	str	r2, [r3, #8]
}
 8002b78:	bf00      	nop
 8002b7a:	3714      	adds	r7, #20
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bc80      	pop	{r7}
 8002b80:	4770      	bx	lr

08002b82 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b087      	sub	sp, #28
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	60f8      	str	r0, [r7, #12]
 8002b8a:	60b9      	str	r1, [r7, #8]
 8002b8c:	607a      	str	r2, [r7, #4]
 8002b8e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b9c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	021a      	lsls	r2, r3, #8
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	609a      	str	r2, [r3, #8]
}
 8002bb6:	bf00      	nop
 8002bb8:	371c      	adds	r7, #28
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bc80      	pop	{r7}
 8002bbe:	4770      	bx	lr

08002bc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b087      	sub	sp, #28
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	f003 031f 	and.w	r3, r3, #31
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6a1a      	ldr	r2, [r3, #32]
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	43db      	mvns	r3, r3
 8002be2:	401a      	ands	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6a1a      	ldr	r2, [r3, #32]
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	f003 031f 	and.w	r3, r3, #31
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf8:	431a      	orrs	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	621a      	str	r2, [r3, #32]
}
 8002bfe:	bf00      	nop
 8002c00:	371c      	adds	r7, #28
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr

08002c08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d101      	bne.n	8002c20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	e046      	b.n	8002cae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a16      	ldr	r2, [pc, #88]	@ (8002cb8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d00e      	beq.n	8002c82 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c6c:	d009      	beq.n	8002c82 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a12      	ldr	r2, [pc, #72]	@ (8002cbc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d004      	beq.n	8002c82 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a10      	ldr	r2, [pc, #64]	@ (8002cc0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d10c      	bne.n	8002c9c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68ba      	ldr	r2, [r7, #8]
 8002c9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3714      	adds	r7, #20
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bc80      	pop	{r7}
 8002cb6:	4770      	bx	lr
 8002cb8:	40012c00 	.word	0x40012c00
 8002cbc:	40000400 	.word	0x40000400
 8002cc0:	40000800 	.word	0x40000800

08002cc4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d101      	bne.n	8002ce0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002cdc:	2302      	movs	r3, #2
 8002cde:	e03d      	b.n	8002d5c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3714      	adds	r7, #20
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bc80      	pop	{r7}
 8002d64:	4770      	bx	lr

08002d66 <memset>:
 8002d66:	4603      	mov	r3, r0
 8002d68:	4402      	add	r2, r0
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d100      	bne.n	8002d70 <memset+0xa>
 8002d6e:	4770      	bx	lr
 8002d70:	f803 1b01 	strb.w	r1, [r3], #1
 8002d74:	e7f9      	b.n	8002d6a <memset+0x4>
	...

08002d78 <__libc_init_array>:
 8002d78:	b570      	push	{r4, r5, r6, lr}
 8002d7a:	2600      	movs	r6, #0
 8002d7c:	4d0c      	ldr	r5, [pc, #48]	@ (8002db0 <__libc_init_array+0x38>)
 8002d7e:	4c0d      	ldr	r4, [pc, #52]	@ (8002db4 <__libc_init_array+0x3c>)
 8002d80:	1b64      	subs	r4, r4, r5
 8002d82:	10a4      	asrs	r4, r4, #2
 8002d84:	42a6      	cmp	r6, r4
 8002d86:	d109      	bne.n	8002d9c <__libc_init_array+0x24>
 8002d88:	f000 f81a 	bl	8002dc0 <_init>
 8002d8c:	2600      	movs	r6, #0
 8002d8e:	4d0a      	ldr	r5, [pc, #40]	@ (8002db8 <__libc_init_array+0x40>)
 8002d90:	4c0a      	ldr	r4, [pc, #40]	@ (8002dbc <__libc_init_array+0x44>)
 8002d92:	1b64      	subs	r4, r4, r5
 8002d94:	10a4      	asrs	r4, r4, #2
 8002d96:	42a6      	cmp	r6, r4
 8002d98:	d105      	bne.n	8002da6 <__libc_init_array+0x2e>
 8002d9a:	bd70      	pop	{r4, r5, r6, pc}
 8002d9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002da0:	4798      	blx	r3
 8002da2:	3601      	adds	r6, #1
 8002da4:	e7ee      	b.n	8002d84 <__libc_init_array+0xc>
 8002da6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002daa:	4798      	blx	r3
 8002dac:	3601      	adds	r6, #1
 8002dae:	e7f2      	b.n	8002d96 <__libc_init_array+0x1e>
 8002db0:	08002dfc 	.word	0x08002dfc
 8002db4:	08002dfc 	.word	0x08002dfc
 8002db8:	08002dfc 	.word	0x08002dfc
 8002dbc:	08002e00 	.word	0x08002e00

08002dc0 <_init>:
 8002dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dc2:	bf00      	nop
 8002dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dc6:	bc08      	pop	{r3}
 8002dc8:	469e      	mov	lr, r3
 8002dca:	4770      	bx	lr

08002dcc <_fini>:
 8002dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dce:	bf00      	nop
 8002dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dd2:	bc08      	pop	{r3}
 8002dd4:	469e      	mov	lr, r3
 8002dd6:	4770      	bx	lr
