
led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004678  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08004784  08004784  00005784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004920  08004920  000060e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004920  08004920  00005920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004928  08004928  000060e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004928  08004928  00005928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800492c  0800492c  0000592c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e0  20000000  08004930  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f98  200000e0  08004a10  000060e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001078  08004a10  00007078  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000060e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000959c  00000000  00000000  00006109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ba7  00000000  00000000  0000f6a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b20  00000000  00000000  00011250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000898  00000000  00000000  00011d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d1e  00000000  00000000  00012608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c432  00000000  00000000  0002a326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008941a  00000000  00000000  00036758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bfb72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003300  00000000  00000000  000bfbb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000c2eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000e0 	.word	0x200000e0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800476c 	.word	0x0800476c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000e4 	.word	0x200000e4
 8000148:	0800476c 	.word	0x0800476c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <LCD_Parallel_Init>:
#include "lcd_parallel.h"
#include <string.h>
#include <stdio.h>

void LCD_Parallel_Init(void) {
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
    // Initialize GPIO pins
    LCD_Parallel_GPIO_Init();
 8000160:	f000 f840 	bl	80001e4 <LCD_Parallel_GPIO_Init>
    
    // Wait for LCD to power up completely
    HAL_Delay(100);
 8000164:	2064      	movs	r0, #100	@ 0x64
 8000166:	f001 fc37 	bl	80019d8 <HAL_Delay>
    
    // Set RS = 0 (command mode)
    HAL_GPIO_WritePin(LCD_RS_PORT, LCD_RS_PIN, GPIO_PIN_RESET);
 800016a:	2200      	movs	r2, #0
 800016c:	2101      	movs	r1, #1
 800016e:	481c      	ldr	r0, [pc, #112]	@ (80001e0 <LCD_Parallel_Init+0x84>)
 8000170:	f002 f965 	bl	800243e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_E_PORT, LCD_E_PIN, GPIO_PIN_RESET);
 8000174:	2200      	movs	r2, #0
 8000176:	2102      	movs	r1, #2
 8000178:	4819      	ldr	r0, [pc, #100]	@ (80001e0 <LCD_Parallel_Init+0x84>)
 800017a:	f002 f960 	bl	800243e <HAL_GPIO_WritePin>
    
    // Initialize LCD in 4-bit mode according to datasheet timing
    // First: Send 0x3 three times to establish 8-bit communication
    LCD_Parallel_Write4Bits(0x03);
 800017e:	2003      	movs	r0, #3
 8000180:	f000 f916 	bl	80003b0 <LCD_Parallel_Write4Bits>
    HAL_Delay(10);  // Wait > 4.1ms
 8000184:	200a      	movs	r0, #10
 8000186:	f001 fc27 	bl	80019d8 <HAL_Delay>
    
    LCD_Parallel_Write4Bits(0x03);
 800018a:	2003      	movs	r0, #3
 800018c:	f000 f910 	bl	80003b0 <LCD_Parallel_Write4Bits>
    HAL_Delay(5);   // Wait > 100us
 8000190:	2005      	movs	r0, #5
 8000192:	f001 fc21 	bl	80019d8 <HAL_Delay>
    
    LCD_Parallel_Write4Bits(0x03);
 8000196:	2003      	movs	r0, #3
 8000198:	f000 f90a 	bl	80003b0 <LCD_Parallel_Write4Bits>
    HAL_Delay(5);   // Wait > 100us
 800019c:	2005      	movs	r0, #5
 800019e:	f001 fc1b 	bl	80019d8 <HAL_Delay>
    
    // Switch to 4-bit mode
    LCD_Parallel_Write4Bits(0x02);
 80001a2:	2002      	movs	r0, #2
 80001a4:	f000 f904 	bl	80003b0 <LCD_Parallel_Write4Bits>
    HAL_Delay(5);
 80001a8:	2005      	movs	r0, #5
 80001aa:	f001 fc15 	bl	80019d8 <HAL_Delay>
    
    // Function set: 4-bit, 2 line, 5x8 dots
    LCD_Parallel_SendCommand(LCD_FUNCTION_SET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
 80001ae:	2028      	movs	r0, #40	@ 0x28
 80001b0:	f000 f8bc 	bl	800032c <LCD_Parallel_SendCommand>
    HAL_Delay(5);
 80001b4:	2005      	movs	r0, #5
 80001b6:	f001 fc0f 	bl	80019d8 <HAL_Delay>
    
    // Display control: display on, cursor off, blink off
    LCD_Parallel_SendCommand(LCD_DISPLAY_CONTROL | LCD_DISPLAY_ON | LCD_CURSOR_OFF | LCD_BLINK_OFF);
 80001ba:	200c      	movs	r0, #12
 80001bc:	f000 f8b6 	bl	800032c <LCD_Parallel_SendCommand>
    HAL_Delay(5);
 80001c0:	2005      	movs	r0, #5
 80001c2:	f001 fc09 	bl	80019d8 <HAL_Delay>
    
    // Clear display
    LCD_Parallel_Clear();
 80001c6:	f000 f85b 	bl	8000280 <LCD_Parallel_Clear>
    HAL_Delay(5);
 80001ca:	2005      	movs	r0, #5
 80001cc:	f001 fc04 	bl	80019d8 <HAL_Delay>
    
    // Entry mode: left to right, no shift
    LCD_Parallel_SendCommand(LCD_ENTRY_MODE_SET | LCD_ENTRY_LEFT | LCD_ENTRY_SHIFT_DECREMENT);
 80001d0:	2006      	movs	r0, #6
 80001d2:	f000 f8ab 	bl	800032c <LCD_Parallel_SendCommand>
    HAL_Delay(5);
 80001d6:	2005      	movs	r0, #5
 80001d8:	f001 fbfe 	bl	80019d8 <HAL_Delay>
}
 80001dc:	bf00      	nop
 80001de:	bd80      	pop	{r7, pc}
 80001e0:	40010c00 	.word	0x40010c00

080001e4 <LCD_Parallel_GPIO_Init>:

void LCD_Parallel_GPIO_Init(void) {
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b086      	sub	sp, #24
 80001e8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ea:	f107 0308 	add.w	r3, r7, #8
 80001ee:	2200      	movs	r2, #0
 80001f0:	601a      	str	r2, [r3, #0]
 80001f2:	605a      	str	r2, [r3, #4]
 80001f4:	609a      	str	r2, [r3, #8]
 80001f6:	60da      	str	r2, [r3, #12]
    
    // Enable GPIOB clock
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80001f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000278 <LCD_Parallel_GPIO_Init+0x94>)
 80001fa:	699b      	ldr	r3, [r3, #24]
 80001fc:	4a1e      	ldr	r2, [pc, #120]	@ (8000278 <LCD_Parallel_GPIO_Init+0x94>)
 80001fe:	f043 0308 	orr.w	r3, r3, #8
 8000202:	6193      	str	r3, [r2, #24]
 8000204:	4b1c      	ldr	r3, [pc, #112]	@ (8000278 <LCD_Parallel_GPIO_Init+0x94>)
 8000206:	699b      	ldr	r3, [r3, #24]
 8000208:	f003 0308 	and.w	r3, r3, #8
 800020c:	607b      	str	r3, [r7, #4]
 800020e:	687b      	ldr	r3, [r7, #4]
    
    // Configure RS pin (PB0)
    GPIO_InitStruct.Pin = LCD_RS_PIN;
 8000210:	2301      	movs	r3, #1
 8000212:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000214:	2301      	movs	r3, #1
 8000216:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000218:	2300      	movs	r3, #0
 800021a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800021c:	2302      	movs	r3, #2
 800021e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LCD_RS_PORT, &GPIO_InitStruct);
 8000220:	f107 0308 	add.w	r3, r7, #8
 8000224:	4619      	mov	r1, r3
 8000226:	4815      	ldr	r0, [pc, #84]	@ (800027c <LCD_Parallel_GPIO_Init+0x98>)
 8000228:	f001 ff6e 	bl	8002108 <HAL_GPIO_Init>
    
    // Configure E pin (PB1)
    GPIO_InitStruct.Pin = LCD_E_PIN;
 800022c:	2302      	movs	r3, #2
 800022e:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(LCD_E_PORT, &GPIO_InitStruct);
 8000230:	f107 0308 	add.w	r3, r7, #8
 8000234:	4619      	mov	r1, r3
 8000236:	4811      	ldr	r0, [pc, #68]	@ (800027c <LCD_Parallel_GPIO_Init+0x98>)
 8000238:	f001 ff66 	bl	8002108 <HAL_GPIO_Init>
    
    // Configure Data pins (PB12, PB13, PB14, PB15)
    GPIO_InitStruct.Pin = LCD_D4_PIN | LCD_D5_PIN | LCD_D6_PIN | LCD_D7_PIN;
 800023c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000240:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(LCD_D4_PORT, &GPIO_InitStruct);
 8000242:	f107 0308 	add.w	r3, r7, #8
 8000246:	4619      	mov	r1, r3
 8000248:	480c      	ldr	r0, [pc, #48]	@ (800027c <LCD_Parallel_GPIO_Init+0x98>)
 800024a:	f001 ff5d 	bl	8002108 <HAL_GPIO_Init>
    
    // Initialize all pins to LOW
    HAL_GPIO_WritePin(LCD_RS_PORT, LCD_RS_PIN, GPIO_PIN_RESET);
 800024e:	2200      	movs	r2, #0
 8000250:	2101      	movs	r1, #1
 8000252:	480a      	ldr	r0, [pc, #40]	@ (800027c <LCD_Parallel_GPIO_Init+0x98>)
 8000254:	f002 f8f3 	bl	800243e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_E_PORT, LCD_E_PIN, GPIO_PIN_RESET);
 8000258:	2200      	movs	r2, #0
 800025a:	2102      	movs	r1, #2
 800025c:	4807      	ldr	r0, [pc, #28]	@ (800027c <LCD_Parallel_GPIO_Init+0x98>)
 800025e:	f002 f8ee 	bl	800243e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D4_PORT, LCD_D4_PIN | LCD_D5_PIN | LCD_D6_PIN | LCD_D7_PIN, GPIO_PIN_RESET);
 8000262:	2200      	movs	r2, #0
 8000264:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000268:	4804      	ldr	r0, [pc, #16]	@ (800027c <LCD_Parallel_GPIO_Init+0x98>)
 800026a:	f002 f8e8 	bl	800243e <HAL_GPIO_WritePin>
}
 800026e:	bf00      	nop
 8000270:	3718      	adds	r7, #24
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	40021000 	.word	0x40021000
 800027c:	40010c00 	.word	0x40010c00

08000280 <LCD_Parallel_Clear>:

void LCD_Parallel_Clear(void) {
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
    LCD_Parallel_SendCommand(LCD_CLEAR_DISPLAY);
 8000284:	2001      	movs	r0, #1
 8000286:	f000 f851 	bl	800032c <LCD_Parallel_SendCommand>
    HAL_Delay(2);
 800028a:	2002      	movs	r0, #2
 800028c:	f001 fba4 	bl	80019d8 <HAL_Delay>
}
 8000290:	bf00      	nop
 8000292:	bd80      	pop	{r7, pc}

08000294 <LCD_Parallel_SetCursor>:

void LCD_Parallel_SetCursor(uint8_t row, uint8_t col) {
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
 800029a:	4603      	mov	r3, r0
 800029c:	460a      	mov	r2, r1
 800029e:	71fb      	strb	r3, [r7, #7]
 80002a0:	4613      	mov	r3, r2
 80002a2:	71bb      	strb	r3, [r7, #6]
    uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 80002a4:	4b0f      	ldr	r3, [pc, #60]	@ (80002e4 <LCD_Parallel_SetCursor+0x50>)
 80002a6:	60fb      	str	r3, [r7, #12]
    if (row >= LCD_ROWS) {
 80002a8:	79fb      	ldrb	r3, [r7, #7]
 80002aa:	2b01      	cmp	r3, #1
 80002ac:	d901      	bls.n	80002b2 <LCD_Parallel_SetCursor+0x1e>
        row = LCD_ROWS - 1;
 80002ae:	2301      	movs	r3, #1
 80002b0:	71fb      	strb	r3, [r7, #7]
    }
    if (col >= LCD_COLS) {
 80002b2:	79bb      	ldrb	r3, [r7, #6]
 80002b4:	2b0f      	cmp	r3, #15
 80002b6:	d901      	bls.n	80002bc <LCD_Parallel_SetCursor+0x28>
        col = LCD_COLS - 1;
 80002b8:	230f      	movs	r3, #15
 80002ba:	71bb      	strb	r3, [r7, #6]
    }
    LCD_Parallel_SendCommand(LCD_SET_DDRAM_ADDR | (col + row_offsets[row]));
 80002bc:	79fb      	ldrb	r3, [r7, #7]
 80002be:	3310      	adds	r3, #16
 80002c0:	443b      	add	r3, r7
 80002c2:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 80002c6:	79bb      	ldrb	r3, [r7, #6]
 80002c8:	4413      	add	r3, r2
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	b25b      	sxtb	r3, r3
 80002ce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80002d2:	b25b      	sxtb	r3, r3
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	4618      	mov	r0, r3
 80002d8:	f000 f828 	bl	800032c <LCD_Parallel_SendCommand>
}
 80002dc:	bf00      	nop
 80002de:	3710      	adds	r7, #16
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	54144000 	.word	0x54144000

080002e8 <LCD_Parallel_Print>:

void LCD_Parallel_Print(char *str) {
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
    while (*str) {
 80002f0:	e006      	b.n	8000300 <LCD_Parallel_Print+0x18>
        LCD_Parallel_SendData(*str++);
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	1c5a      	adds	r2, r3, #1
 80002f6:	607a      	str	r2, [r7, #4]
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	4618      	mov	r0, r3
 80002fc:	f000 f824 	bl	8000348 <LCD_Parallel_SendData>
    while (*str) {
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d1f4      	bne.n	80002f2 <LCD_Parallel_Print+0xa>
    }
}
 8000308:	bf00      	nop
 800030a:	bf00      	nop
 800030c:	3708      	adds	r7, #8
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}

08000312 <LCD_Parallel_PrintChar>:

void LCD_Parallel_PrintChar(char c) {
 8000312:	b580      	push	{r7, lr}
 8000314:	b082      	sub	sp, #8
 8000316:	af00      	add	r7, sp, #0
 8000318:	4603      	mov	r3, r0
 800031a:	71fb      	strb	r3, [r7, #7]
    LCD_Parallel_SendData(c);
 800031c:	79fb      	ldrb	r3, [r7, #7]
 800031e:	4618      	mov	r0, r3
 8000320:	f000 f812 	bl	8000348 <LCD_Parallel_SendData>
}
 8000324:	bf00      	nop
 8000326:	3708      	adds	r7, #8
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}

0800032c <LCD_Parallel_SendCommand>:

void LCD_Parallel_WriteCustomChar(uint8_t location) {
    LCD_Parallel_SendData(location);
}

void LCD_Parallel_SendCommand(uint8_t cmd) {
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	4603      	mov	r3, r0
 8000334:	71fb      	strb	r3, [r7, #7]
    LCD_Parallel_Send(cmd, 0);
 8000336:	79fb      	ldrb	r3, [r7, #7]
 8000338:	2100      	movs	r1, #0
 800033a:	4618      	mov	r0, r3
 800033c:	f000 f812 	bl	8000364 <LCD_Parallel_Send>
}
 8000340:	bf00      	nop
 8000342:	3708      	adds	r7, #8
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}

08000348 <LCD_Parallel_SendData>:

void LCD_Parallel_SendData(uint8_t data) {
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	4603      	mov	r3, r0
 8000350:	71fb      	strb	r3, [r7, #7]
    LCD_Parallel_Send(data, 1);
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	2101      	movs	r1, #1
 8000356:	4618      	mov	r0, r3
 8000358:	f000 f804 	bl	8000364 <LCD_Parallel_Send>
}
 800035c:	bf00      	nop
 800035e:	3708      	adds	r7, #8
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}

08000364 <LCD_Parallel_Send>:

void LCD_Parallel_Send(uint8_t data, uint8_t rs) {
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	460a      	mov	r2, r1
 800036e:	71fb      	strb	r3, [r7, #7]
 8000370:	4613      	mov	r3, r2
 8000372:	71bb      	strb	r3, [r7, #6]
    // Set RS pin (0 = command, 1 = data)
    HAL_GPIO_WritePin(LCD_RS_PORT, LCD_RS_PIN, rs ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000374:	79bb      	ldrb	r3, [r7, #6]
 8000376:	2b00      	cmp	r3, #0
 8000378:	bf14      	ite	ne
 800037a:	2301      	movne	r3, #1
 800037c:	2300      	moveq	r3, #0
 800037e:	b2db      	uxtb	r3, r3
 8000380:	461a      	mov	r2, r3
 8000382:	2101      	movs	r1, #1
 8000384:	4809      	ldr	r0, [pc, #36]	@ (80003ac <LCD_Parallel_Send+0x48>)
 8000386:	f002 f85a 	bl	800243e <HAL_GPIO_WritePin>
    
    // Send upper 4 bits
    LCD_Parallel_Write4Bits(data >> 4);
 800038a:	79fb      	ldrb	r3, [r7, #7]
 800038c:	091b      	lsrs	r3, r3, #4
 800038e:	b2db      	uxtb	r3, r3
 8000390:	4618      	mov	r0, r3
 8000392:	f000 f80d 	bl	80003b0 <LCD_Parallel_Write4Bits>
    
    // Send lower 4 bits
    LCD_Parallel_Write4Bits(data & 0x0F);
 8000396:	79fb      	ldrb	r3, [r7, #7]
 8000398:	f003 030f 	and.w	r3, r3, #15
 800039c:	b2db      	uxtb	r3, r3
 800039e:	4618      	mov	r0, r3
 80003a0:	f000 f806 	bl	80003b0 <LCD_Parallel_Write4Bits>
}
 80003a4:	bf00      	nop
 80003a6:	3708      	adds	r7, #8
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	40010c00 	.word	0x40010c00

080003b0 <LCD_Parallel_Write4Bits>:

void LCD_Parallel_Write4Bits(uint8_t data) {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	71fb      	strb	r3, [r7, #7]
    // Set data on D4-D7 pins (PB12-PB15)
    HAL_GPIO_WritePin(LCD_D4_PORT, LCD_D4_PIN, (data & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80003ba:	79fb      	ldrb	r3, [r7, #7]
 80003bc:	f003 0301 	and.w	r3, r3, #1
 80003c0:	b2db      	uxtb	r3, r3
 80003c2:	461a      	mov	r2, r3
 80003c4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80003c8:	4816      	ldr	r0, [pc, #88]	@ (8000424 <LCD_Parallel_Write4Bits+0x74>)
 80003ca:	f002 f838 	bl	800243e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_PORT, LCD_D5_PIN, (data & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80003ce:	79fb      	ldrb	r3, [r7, #7]
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	b2db      	uxtb	r3, r3
 80003d4:	f003 0301 	and.w	r3, r3, #1
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	461a      	mov	r2, r3
 80003dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003e0:	4810      	ldr	r0, [pc, #64]	@ (8000424 <LCD_Parallel_Write4Bits+0x74>)
 80003e2:	f002 f82c 	bl	800243e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_PORT, LCD_D6_PIN, (data & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80003e6:	79fb      	ldrb	r3, [r7, #7]
 80003e8:	109b      	asrs	r3, r3, #2
 80003ea:	b2db      	uxtb	r3, r3
 80003ec:	f003 0301 	and.w	r3, r3, #1
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	461a      	mov	r2, r3
 80003f4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80003f8:	480a      	ldr	r0, [pc, #40]	@ (8000424 <LCD_Parallel_Write4Bits+0x74>)
 80003fa:	f002 f820 	bl	800243e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_PORT, LCD_D7_PIN, (data & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80003fe:	79fb      	ldrb	r3, [r7, #7]
 8000400:	10db      	asrs	r3, r3, #3
 8000402:	b2db      	uxtb	r3, r3
 8000404:	f003 0301 	and.w	r3, r3, #1
 8000408:	b2db      	uxtb	r3, r3
 800040a:	461a      	mov	r2, r3
 800040c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000410:	4804      	ldr	r0, [pc, #16]	@ (8000424 <LCD_Parallel_Write4Bits+0x74>)
 8000412:	f002 f814 	bl	800243e <HAL_GPIO_WritePin>
    
    // Pulse Enable pin
    LCD_Parallel_EnablePulse();
 8000416:	f000 f807 	bl	8000428 <LCD_Parallel_EnablePulse>
}
 800041a:	bf00      	nop
 800041c:	3708      	adds	r7, #8
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	40010c00 	.word	0x40010c00

08000428 <LCD_Parallel_EnablePulse>:

void LCD_Parallel_EnablePulse(void) {
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LCD_E_PORT, LCD_E_PIN, GPIO_PIN_SET);
 800042e:	2201      	movs	r2, #1
 8000430:	2102      	movs	r1, #2
 8000432:	4810      	ldr	r0, [pc, #64]	@ (8000474 <LCD_Parallel_EnablePulse+0x4c>)
 8000434:	f002 f803 	bl	800243e <HAL_GPIO_WritePin>
    
    // Enable pulse width (minimum 450ns, dùng loop delay)
    for(volatile int i = 0; i < 50; i++);
 8000438:	2300      	movs	r3, #0
 800043a:	607b      	str	r3, [r7, #4]
 800043c:	e002      	b.n	8000444 <LCD_Parallel_EnablePulse+0x1c>
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	3301      	adds	r3, #1
 8000442:	607b      	str	r3, [r7, #4]
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	2b31      	cmp	r3, #49	@ 0x31
 8000448:	ddf9      	ble.n	800043e <LCD_Parallel_EnablePulse+0x16>
    
    HAL_GPIO_WritePin(LCD_E_PORT, LCD_E_PIN, GPIO_PIN_RESET);
 800044a:	2200      	movs	r2, #0
 800044c:	2102      	movs	r1, #2
 800044e:	4809      	ldr	r0, [pc, #36]	@ (8000474 <LCD_Parallel_EnablePulse+0x4c>)
 8000450:	f001 fff5 	bl	800243e <HAL_GPIO_WritePin>
    
    // Commands need > 37us to settle  
    for(volatile int i = 0; i < 1000; i++);
 8000454:	2300      	movs	r3, #0
 8000456:	603b      	str	r3, [r7, #0]
 8000458:	e002      	b.n	8000460 <LCD_Parallel_EnablePulse+0x38>
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	3301      	adds	r3, #1
 800045e:	603b      	str	r3, [r7, #0]
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000466:	dbf8      	blt.n	800045a <LCD_Parallel_EnablePulse+0x32>
}
 8000468:	bf00      	nop
 800046a:	bf00      	nop
 800046c:	3708      	adds	r7, #8
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	40010c00 	.word	0x40010c00

08000478 <LCD_Parallel_DisplayEffect>:

// Utility functions for displaying LED status
void LCD_Parallel_DisplayEffect(const char* effect_name) {
 8000478:	b580      	push	{r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
    LCD_Parallel_SetCursor(0, 0);
 8000480:	2100      	movs	r1, #0
 8000482:	2000      	movs	r0, #0
 8000484:	f7ff ff06 	bl	8000294 <LCD_Parallel_SetCursor>
    LCD_Parallel_Print("Mode: ");
 8000488:	480d      	ldr	r0, [pc, #52]	@ (80004c0 <LCD_Parallel_DisplayEffect+0x48>)
 800048a:	f7ff ff2d 	bl	80002e8 <LCD_Parallel_Print>
    LCD_Parallel_Print((char*)effect_name);
 800048e:	6878      	ldr	r0, [r7, #4]
 8000490:	f7ff ff2a 	bl	80002e8 <LCD_Parallel_Print>
    
    // Clear remaining characters on first line
    for(int i = strlen("Mode: ") + strlen(effect_name); i < LCD_COLS; i++) {
 8000494:	6878      	ldr	r0, [r7, #4]
 8000496:	f7ff fe59 	bl	800014c <strlen>
 800049a:	4603      	mov	r3, r0
 800049c:	3306      	adds	r3, #6
 800049e:	60fb      	str	r3, [r7, #12]
 80004a0:	e005      	b.n	80004ae <LCD_Parallel_DisplayEffect+0x36>
        LCD_Parallel_PrintChar(' ');
 80004a2:	2020      	movs	r0, #32
 80004a4:	f7ff ff35 	bl	8000312 <LCD_Parallel_PrintChar>
    for(int i = strlen("Mode: ") + strlen(effect_name); i < LCD_COLS; i++) {
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	3301      	adds	r3, #1
 80004ac:	60fb      	str	r3, [r7, #12]
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	2b0f      	cmp	r3, #15
 80004b2:	ddf6      	ble.n	80004a2 <LCD_Parallel_DisplayEffect+0x2a>
    }
}
 80004b4:	bf00      	nop
 80004b6:	bf00      	nop
 80004b8:	3710      	adds	r7, #16
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	08004784 	.word	0x08004784

080004c4 <LCD_Parallel_DisplayStatus>:

void LCD_Parallel_DisplayStatus(const char* color, int speed, int brightness) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b08c      	sub	sp, #48	@ 0x30
 80004c8:	af02      	add	r7, sp, #8
 80004ca:	60f8      	str	r0, [r7, #12]
 80004cc:	60b9      	str	r1, [r7, #8]
 80004ce:	607a      	str	r2, [r7, #4]
    char buffer[17];
    
    LCD_Parallel_SetCursor(1, 0);
 80004d0:	2100      	movs	r1, #0
 80004d2:	2001      	movs	r0, #1
 80004d4:	f7ff fede 	bl	8000294 <LCD_Parallel_SetCursor>
    snprintf(buffer, sizeof(buffer), "%s S:%d B:%d%%", color, speed, brightness);
 80004d8:	f107 0010 	add.w	r0, r7, #16
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	9301      	str	r3, [sp, #4]
 80004e0:	68bb      	ldr	r3, [r7, #8]
 80004e2:	9300      	str	r3, [sp, #0]
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	4a0f      	ldr	r2, [pc, #60]	@ (8000524 <LCD_Parallel_DisplayStatus+0x60>)
 80004e8:	2111      	movs	r1, #17
 80004ea:	f003 fc7b 	bl	8003de4 <sniprintf>
    LCD_Parallel_Print(buffer);
 80004ee:	f107 0310 	add.w	r3, r7, #16
 80004f2:	4618      	mov	r0, r3
 80004f4:	f7ff fef8 	bl	80002e8 <LCD_Parallel_Print>
    
    // Clear remaining characters on second line
    for(int i = strlen(buffer); i < LCD_COLS; i++) {
 80004f8:	f107 0310 	add.w	r3, r7, #16
 80004fc:	4618      	mov	r0, r3
 80004fe:	f7ff fe25 	bl	800014c <strlen>
 8000502:	4603      	mov	r3, r0
 8000504:	627b      	str	r3, [r7, #36]	@ 0x24
 8000506:	e005      	b.n	8000514 <LCD_Parallel_DisplayStatus+0x50>
        LCD_Parallel_PrintChar(' ');
 8000508:	2020      	movs	r0, #32
 800050a:	f7ff ff02 	bl	8000312 <LCD_Parallel_PrintChar>
    for(int i = strlen(buffer); i < LCD_COLS; i++) {
 800050e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000510:	3301      	adds	r3, #1
 8000512:	627b      	str	r3, [r7, #36]	@ 0x24
 8000514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000516:	2b0f      	cmp	r3, #15
 8000518:	ddf6      	ble.n	8000508 <LCD_Parallel_DisplayStatus+0x44>
    }
}
 800051a:	bf00      	nop
 800051c:	bf00      	nop
 800051e:	3728      	adds	r7, #40	@ 0x28
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	0800478c 	.word	0x0800478c

08000528 <HAL_TIM_PWM_PulseFinishedCallback>:
// Color and speed control
volatile int current_color = COLOR_BLUE;  // Start with blue
volatile int current_speed = 5;           // Speed from 1 (slow) to 10 (fast)
volatile int current_brightness = 50;     // Brightness from 1 (dim) to 100 (bright)

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8000530:	2100      	movs	r1, #0
 8000532:	4805      	ldr	r0, [pc, #20]	@ (8000548 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000534:	f002 fdc4 	bl	80030c0 <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;
 8000538:	4b04      	ldr	r3, [pc, #16]	@ (800054c <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 800053a:	2201      	movs	r2, #1
 800053c:	601a      	str	r2, [r3, #0]
}
 800053e:	bf00      	nop
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	2000010c 	.word	0x2000010c
 800054c:	2000037c 	.word	0x2000037c

08000550 <Keypad_Init>:

// Keypad functions
void Keypad_Init(void) {
 8000550:	b580      	push	{r7, lr}
 8000552:	b088      	sub	sp, #32
 8000554:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000556:	f107 0308 	add.w	r3, r7, #8
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
 8000562:	60da      	str	r2, [r3, #12]
    
    // Enable GPIOA clock (changed from GPIOB)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000564:	4b2b      	ldr	r3, [pc, #172]	@ (8000614 <Keypad_Init+0xc4>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	4a2a      	ldr	r2, [pc, #168]	@ (8000614 <Keypad_Init+0xc4>)
 800056a:	f043 0304 	orr.w	r3, r3, #4
 800056e:	6193      	str	r3, [r2, #24]
 8000570:	4b28      	ldr	r3, [pc, #160]	@ (8000614 <Keypad_Init+0xc4>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	f003 0304 	and.w	r3, r3, #4
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]
    
    // Configure row pins as output
    for(int i = 0; i < KEYPAD_ROWS; i++) {
 800057c:	2300      	movs	r3, #0
 800057e:	61fb      	str	r3, [r7, #28]
 8000580:	e023      	b.n	80005ca <Keypad_Init+0x7a>
        GPIO_InitStruct.Pin = keypad_row_pins[i];
 8000582:	4a25      	ldr	r2, [pc, #148]	@ (8000618 <Keypad_Init+0xc8>)
 8000584:	69fb      	ldr	r3, [r7, #28]
 8000586:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800058a:	60bb      	str	r3, [r7, #8]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058c:	2301      	movs	r3, #1
 800058e:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000590:	2300      	movs	r3, #0
 8000592:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000594:	2302      	movs	r3, #2
 8000596:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(keypad_row_ports[i], &GPIO_InitStruct);
 8000598:	4a20      	ldr	r2, [pc, #128]	@ (800061c <Keypad_Init+0xcc>)
 800059a:	69fb      	ldr	r3, [r7, #28]
 800059c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005a0:	f107 0208 	add.w	r2, r7, #8
 80005a4:	4611      	mov	r1, r2
 80005a6:	4618      	mov	r0, r3
 80005a8:	f001 fdae 	bl	8002108 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(keypad_row_ports[i], keypad_row_pins[i], GPIO_PIN_SET);
 80005ac:	4a1b      	ldr	r2, [pc, #108]	@ (800061c <Keypad_Init+0xcc>)
 80005ae:	69fb      	ldr	r3, [r7, #28]
 80005b0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005b4:	4a18      	ldr	r2, [pc, #96]	@ (8000618 <Keypad_Init+0xc8>)
 80005b6:	69fb      	ldr	r3, [r7, #28]
 80005b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005bc:	2201      	movs	r2, #1
 80005be:	4619      	mov	r1, r3
 80005c0:	f001 ff3d 	bl	800243e <HAL_GPIO_WritePin>
    for(int i = 0; i < KEYPAD_ROWS; i++) {
 80005c4:	69fb      	ldr	r3, [r7, #28]
 80005c6:	3301      	adds	r3, #1
 80005c8:	61fb      	str	r3, [r7, #28]
 80005ca:	69fb      	ldr	r3, [r7, #28]
 80005cc:	2b03      	cmp	r3, #3
 80005ce:	ddd8      	ble.n	8000582 <Keypad_Init+0x32>
    }
    
    // Configure column pins as input with pull-up
    for(int i = 0; i < KEYPAD_COLS; i++) {
 80005d0:	2300      	movs	r3, #0
 80005d2:	61bb      	str	r3, [r7, #24]
 80005d4:	e015      	b.n	8000602 <Keypad_Init+0xb2>
        GPIO_InitStruct.Pin = keypad_col_pins[i];
 80005d6:	4a12      	ldr	r2, [pc, #72]	@ (8000620 <Keypad_Init+0xd0>)
 80005d8:	69bb      	ldr	r3, [r7, #24]
 80005da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005de:	60bb      	str	r3, [r7, #8]
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005e0:	2300      	movs	r3, #0
 80005e2:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005e4:	2301      	movs	r3, #1
 80005e6:	613b      	str	r3, [r7, #16]
        HAL_GPIO_Init(keypad_col_ports[i], &GPIO_InitStruct);
 80005e8:	4a0e      	ldr	r2, [pc, #56]	@ (8000624 <Keypad_Init+0xd4>)
 80005ea:	69bb      	ldr	r3, [r7, #24]
 80005ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005f0:	f107 0208 	add.w	r2, r7, #8
 80005f4:	4611      	mov	r1, r2
 80005f6:	4618      	mov	r0, r3
 80005f8:	f001 fd86 	bl	8002108 <HAL_GPIO_Init>
    for(int i = 0; i < KEYPAD_COLS; i++) {
 80005fc:	69bb      	ldr	r3, [r7, #24]
 80005fe:	3301      	adds	r3, #1
 8000600:	61bb      	str	r3, [r7, #24]
 8000602:	69bb      	ldr	r3, [r7, #24]
 8000604:	2b03      	cmp	r3, #3
 8000606:	dde6      	ble.n	80005d6 <Keypad_Init+0x86>
    }
}
 8000608:	bf00      	nop
 800060a:	bf00      	nop
 800060c:	3720      	adds	r7, #32
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40021000 	.word	0x40021000
 8000618:	20000044 	.word	0x20000044
 800061c:	20000034 	.word	0x20000034
 8000620:	2000005c 	.word	0x2000005c
 8000624:	2000004c 	.word	0x2000004c

08000628 <Update_LCD_Display>:

void Update_LCD_Display(void) {
 8000628:	b5b0      	push	{r4, r5, r7, lr}
 800062a:	b08a      	sub	sp, #40	@ 0x28
 800062c:	af00      	add	r7, sp, #0
    // Effect names
    const char* effect_names[] = {"Fade", "Rainbow", "Run", "Flash", "Off", "Music"};
 800062e:	4b25      	ldr	r3, [pc, #148]	@ (80006c4 <Update_LCD_Display+0x9c>)
 8000630:	f107 0410 	add.w	r4, r7, #16
 8000634:	461d      	mov	r5, r3
 8000636:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000638:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800063a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800063e:	e884 0003 	stmia.w	r4, {r0, r1}
    const char* color_names[] = {"Blue", "Red", "Pink", "Green"};
 8000642:	4b21      	ldr	r3, [pc, #132]	@ (80006c8 <Update_LCD_Display+0xa0>)
 8000644:	463c      	mov	r4, r7
 8000646:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000648:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Display current effect
    if(current_effect < MAX_EFFECTS) {
 800064c:	4b1f      	ldr	r3, [pc, #124]	@ (80006cc <Update_LCD_Display+0xa4>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b05      	cmp	r3, #5
 8000652:	dc09      	bgt.n	8000668 <Update_LCD_Display+0x40>
        LCD_Parallel_DisplayEffect(effect_names[current_effect]);
 8000654:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <Update_LCD_Display+0xa4>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	009b      	lsls	r3, r3, #2
 800065a:	3328      	adds	r3, #40	@ 0x28
 800065c:	443b      	add	r3, r7
 800065e:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8000662:	4618      	mov	r0, r3
 8000664:	f7ff ff08 	bl	8000478 <LCD_Parallel_DisplayEffect>
    }

    // Display status (color, speed, brightness)
    if(current_effect == EFFECT_RAINBOW) {
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <Update_LCD_Display+0xa4>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2b01      	cmp	r3, #1
 800066e:	d108      	bne.n	8000682 <Update_LCD_Display+0x5a>
        LCD_Parallel_DisplayStatus("Rainbow", current_speed, current_brightness);
 8000670:	4b17      	ldr	r3, [pc, #92]	@ (80006d0 <Update_LCD_Display+0xa8>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a17      	ldr	r2, [pc, #92]	@ (80006d4 <Update_LCD_Display+0xac>)
 8000676:	6812      	ldr	r2, [r2, #0]
 8000678:	4619      	mov	r1, r3
 800067a:	4817      	ldr	r0, [pc, #92]	@ (80006d8 <Update_LCD_Display+0xb0>)
 800067c:	f7ff ff22 	bl	80004c4 <LCD_Parallel_DisplayStatus>
    } else if(current_effect == EFFECT_OFF) {
        LCD_Parallel_DisplayStatus("OFF", 0, 0);
    } else if(current_color < MAX_COLORS) {
        LCD_Parallel_DisplayStatus(color_names[current_color], current_speed, current_brightness);
    }
}
 8000680:	e01b      	b.n	80006ba <Update_LCD_Display+0x92>
    } else if(current_effect == EFFECT_OFF) {
 8000682:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <Update_LCD_Display+0xa4>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	2b04      	cmp	r3, #4
 8000688:	d105      	bne.n	8000696 <Update_LCD_Display+0x6e>
        LCD_Parallel_DisplayStatus("OFF", 0, 0);
 800068a:	2200      	movs	r2, #0
 800068c:	2100      	movs	r1, #0
 800068e:	4813      	ldr	r0, [pc, #76]	@ (80006dc <Update_LCD_Display+0xb4>)
 8000690:	f7ff ff18 	bl	80004c4 <LCD_Parallel_DisplayStatus>
}
 8000694:	e011      	b.n	80006ba <Update_LCD_Display+0x92>
    } else if(current_color < MAX_COLORS) {
 8000696:	4b12      	ldr	r3, [pc, #72]	@ (80006e0 <Update_LCD_Display+0xb8>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	2b03      	cmp	r3, #3
 800069c:	dc0d      	bgt.n	80006ba <Update_LCD_Display+0x92>
        LCD_Parallel_DisplayStatus(color_names[current_color], current_speed, current_brightness);
 800069e:	4b10      	ldr	r3, [pc, #64]	@ (80006e0 <Update_LCD_Display+0xb8>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	009b      	lsls	r3, r3, #2
 80006a4:	3328      	adds	r3, #40	@ 0x28
 80006a6:	443b      	add	r3, r7
 80006a8:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80006ac:	4a08      	ldr	r2, [pc, #32]	@ (80006d0 <Update_LCD_Display+0xa8>)
 80006ae:	6811      	ldr	r1, [r2, #0]
 80006b0:	4a08      	ldr	r2, [pc, #32]	@ (80006d4 <Update_LCD_Display+0xac>)
 80006b2:	6812      	ldr	r2, [r2, #0]
 80006b4:	4618      	mov	r0, r3
 80006b6:	f7ff ff05 	bl	80004c4 <LCD_Parallel_DisplayStatus>
}
 80006ba:	bf00      	nop
 80006bc:	3728      	adds	r7, #40	@ 0x28
 80006be:	46bd      	mov	sp, r7
 80006c0:	bdb0      	pop	{r4, r5, r7, pc}
 80006c2:	bf00      	nop
 80006c4:	08004814 	.word	0x08004814
 80006c8:	08004848 	.word	0x08004848
 80006cc:	20000074 	.word	0x20000074
 80006d0:	2000007c 	.word	0x2000007c
 80006d4:	20000080 	.word	0x20000080
 80006d8:	080047e8 	.word	0x080047e8
 80006dc:	080047f0 	.word	0x080047f0
 80006e0:	20000380 	.word	0x20000380

080006e4 <Keypad_Read>:

char Keypad_Read(void) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
    for(int row = 0; row < KEYPAD_ROWS; row++) {
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	e061      	b.n	80007b4 <Keypad_Read+0xd0>
        // Set current row LOW, others HIGH
        for(int i = 0; i < KEYPAD_ROWS; i++) {
 80006f0:	2300      	movs	r3, #0
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	e01f      	b.n	8000736 <Keypad_Read+0x52>
            if(i == row) {
 80006f6:	68ba      	ldr	r2, [r7, #8]
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	429a      	cmp	r2, r3
 80006fc:	d10c      	bne.n	8000718 <Keypad_Read+0x34>
                HAL_GPIO_WritePin(keypad_row_ports[i], keypad_row_pins[i], GPIO_PIN_RESET);
 80006fe:	4a31      	ldr	r2, [pc, #196]	@ (80007c4 <Keypad_Read+0xe0>)
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000706:	4a30      	ldr	r2, [pc, #192]	@ (80007c8 <Keypad_Read+0xe4>)
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800070e:	2200      	movs	r2, #0
 8000710:	4619      	mov	r1, r3
 8000712:	f001 fe94 	bl	800243e <HAL_GPIO_WritePin>
 8000716:	e00b      	b.n	8000730 <Keypad_Read+0x4c>
            } else {
                HAL_GPIO_WritePin(keypad_row_ports[i], keypad_row_pins[i], GPIO_PIN_SET);
 8000718:	4a2a      	ldr	r2, [pc, #168]	@ (80007c4 <Keypad_Read+0xe0>)
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000720:	4a29      	ldr	r2, [pc, #164]	@ (80007c8 <Keypad_Read+0xe4>)
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000728:	2201      	movs	r2, #1
 800072a:	4619      	mov	r1, r3
 800072c:	f001 fe87 	bl	800243e <HAL_GPIO_WritePin>
        for(int i = 0; i < KEYPAD_ROWS; i++) {
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	3301      	adds	r3, #1
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	2b03      	cmp	r3, #3
 800073a:	dddc      	ble.n	80006f6 <Keypad_Read+0x12>
            }
        }
        
        HAL_Delay(2); // Small delay for stabilization
 800073c:	2002      	movs	r0, #2
 800073e:	f001 f94b 	bl	80019d8 <HAL_Delay>
        
        // Read columns
        for(int col = 0; col < KEYPAD_COLS; col++) {
 8000742:	2300      	movs	r3, #0
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	e02f      	b.n	80007a8 <Keypad_Read+0xc4>
            if(HAL_GPIO_ReadPin(keypad_col_ports[col], keypad_col_pins[col]) == GPIO_PIN_RESET) {
 8000748:	4a20      	ldr	r2, [pc, #128]	@ (80007cc <Keypad_Read+0xe8>)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000750:	491f      	ldr	r1, [pc, #124]	@ (80007d0 <Keypad_Read+0xec>)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000758:	4619      	mov	r1, r3
 800075a:	4610      	mov	r0, r2
 800075c:	f001 fe58 	bl	8002410 <HAL_GPIO_ReadPin>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d11d      	bne.n	80007a2 <Keypad_Read+0xbe>
                // Button pressed, wait for release
                while(HAL_GPIO_ReadPin(keypad_col_ports[col], keypad_col_pins[col]) == GPIO_PIN_RESET) {
 8000766:	e002      	b.n	800076e <Keypad_Read+0x8a>
                    HAL_Delay(10);
 8000768:	200a      	movs	r0, #10
 800076a:	f001 f935 	bl	80019d8 <HAL_Delay>
                while(HAL_GPIO_ReadPin(keypad_col_ports[col], keypad_col_pins[col]) == GPIO_PIN_RESET) {
 800076e:	4a17      	ldr	r2, [pc, #92]	@ (80007cc <Keypad_Read+0xe8>)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000776:	4916      	ldr	r1, [pc, #88]	@ (80007d0 <Keypad_Read+0xec>)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800077e:	4619      	mov	r1, r3
 8000780:	4610      	mov	r0, r2
 8000782:	f001 fe45 	bl	8002410 <HAL_GPIO_ReadPin>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d0ed      	beq.n	8000768 <Keypad_Read+0x84>
                }
                HAL_Delay(50); // Debounce delay
 800078c:	2032      	movs	r0, #50	@ 0x32
 800078e:	f001 f923 	bl	80019d8 <HAL_Delay>
                return keypad_layout[row][col];
 8000792:	4a10      	ldr	r2, [pc, #64]	@ (80007d4 <Keypad_Read+0xf0>)
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	009b      	lsls	r3, r3, #2
 8000798:	441a      	add	r2, r3
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4413      	add	r3, r2
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	e00c      	b.n	80007bc <Keypad_Read+0xd8>
        for(int col = 0; col < KEYPAD_COLS; col++) {
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	3301      	adds	r3, #1
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2b03      	cmp	r3, #3
 80007ac:	ddcc      	ble.n	8000748 <Keypad_Read+0x64>
    for(int row = 0; row < KEYPAD_ROWS; row++) {
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	3301      	adds	r3, #1
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	2b03      	cmp	r3, #3
 80007b8:	dd9a      	ble.n	80006f0 <Keypad_Read+0xc>
            }
        }
    }
    return 0; // No key pressed
 80007ba:	2300      	movs	r3, #0
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3710      	adds	r7, #16
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000034 	.word	0x20000034
 80007c8:	20000044 	.word	0x20000044
 80007cc:	2000004c 	.word	0x2000004c
 80007d0:	2000005c 	.word	0x2000005c
 80007d4:	20000064 	.word	0x20000064

080007d8 <Process_Keypad_Input>:

void Process_Keypad_Input(char key) {
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
    switch(key) {
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	3b31      	subs	r3, #49	@ 0x31
 80007e6:	2b15      	cmp	r3, #21
 80007e8:	f200 80bd 	bhi.w	8000966 <Process_Keypad_Input+0x18e>
 80007ec:	a201      	add	r2, pc, #4	@ (adr r2, 80007f4 <Process_Keypad_Input+0x1c>)
 80007ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007f2:	bf00      	nop
 80007f4:	0800084d 	.word	0x0800084d
 80007f8:	0800089d 	.word	0x0800089d
 80007fc:	080008b7 	.word	0x080008b7
 8000800:	08000967 	.word	0x08000967
 8000804:	08000861 	.word	0x08000861
 8000808:	080008d1 	.word	0x080008d1
 800080c:	080008f1 	.word	0x080008f1
 8000810:	08000967 	.word	0x08000967
 8000814:	08000875 	.word	0x08000875
 8000818:	08000967 	.word	0x08000967
 800081c:	08000967 	.word	0x08000967
 8000820:	08000967 	.word	0x08000967
 8000824:	08000967 	.word	0x08000967
 8000828:	08000967 	.word	0x08000967
 800082c:	08000967 	.word	0x08000967
 8000830:	08000967 	.word	0x08000967
 8000834:	08000911 	.word	0x08000911
 8000838:	08000967 	.word	0x08000967
 800083c:	08000967 	.word	0x08000967
 8000840:	08000889 	.word	0x08000889
 8000844:	08000939 	.word	0x08000939
 8000848:	08000953 	.word	0x08000953
        // Effects
        case '1':  // S1 - Fade effect
            current_effect = EFFECT_FADE;
 800084c:	4b4a      	ldr	r3, [pc, #296]	@ (8000978 <Process_Keypad_Input+0x1a0>)
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
            effect_changed = 1;
 8000852:	4b4a      	ldr	r3, [pc, #296]	@ (800097c <Process_Keypad_Input+0x1a4>)
 8000854:	2201      	movs	r2, #1
 8000856:	601a      	str	r2, [r3, #0]
            lcd_update_needed = 1;
 8000858:	4b49      	ldr	r3, [pc, #292]	@ (8000980 <Process_Keypad_Input+0x1a8>)
 800085a:	2201      	movs	r2, #1
 800085c:	601a      	str	r2, [r3, #0]
            break;
 800085e:	e085      	b.n	800096c <Process_Keypad_Input+0x194>
        case '5':  // S5 - Rainbow effect  
            current_effect = EFFECT_RAINBOW;
 8000860:	4b45      	ldr	r3, [pc, #276]	@ (8000978 <Process_Keypad_Input+0x1a0>)
 8000862:	2201      	movs	r2, #1
 8000864:	601a      	str	r2, [r3, #0]
            effect_changed = 1;
 8000866:	4b45      	ldr	r3, [pc, #276]	@ (800097c <Process_Keypad_Input+0x1a4>)
 8000868:	2201      	movs	r2, #1
 800086a:	601a      	str	r2, [r3, #0]
            lcd_update_needed = 1;
 800086c:	4b44      	ldr	r3, [pc, #272]	@ (8000980 <Process_Keypad_Input+0x1a8>)
 800086e:	2201      	movs	r2, #1
 8000870:	601a      	str	r2, [r3, #0]
            break;
 8000872:	e07b      	b.n	800096c <Process_Keypad_Input+0x194>
        case '9':  // S9 - Run effect
            current_effect = EFFECT_RUN;
 8000874:	4b40      	ldr	r3, [pc, #256]	@ (8000978 <Process_Keypad_Input+0x1a0>)
 8000876:	2202      	movs	r2, #2
 8000878:	601a      	str	r2, [r3, #0]
            effect_changed = 1;
 800087a:	4b40      	ldr	r3, [pc, #256]	@ (800097c <Process_Keypad_Input+0x1a4>)
 800087c:	2201      	movs	r2, #1
 800087e:	601a      	str	r2, [r3, #0]
            lcd_update_needed = 1;
 8000880:	4b3f      	ldr	r3, [pc, #252]	@ (8000980 <Process_Keypad_Input+0x1a8>)
 8000882:	2201      	movs	r2, #1
 8000884:	601a      	str	r2, [r3, #0]
            break;
 8000886:	e071      	b.n	800096c <Process_Keypad_Input+0x194>
        case 'D':  // S13 - Flashing effect
            current_effect = EFFECT_FLASHING;
 8000888:	4b3b      	ldr	r3, [pc, #236]	@ (8000978 <Process_Keypad_Input+0x1a0>)
 800088a:	2203      	movs	r2, #3
 800088c:	601a      	str	r2, [r3, #0]
            effect_changed = 1;
 800088e:	4b3b      	ldr	r3, [pc, #236]	@ (800097c <Process_Keypad_Input+0x1a4>)
 8000890:	2201      	movs	r2, #1
 8000892:	601a      	str	r2, [r3, #0]
            lcd_update_needed = 1;
 8000894:	4b3a      	ldr	r3, [pc, #232]	@ (8000980 <Process_Keypad_Input+0x1a8>)
 8000896:	2201      	movs	r2, #1
 8000898:	601a      	str	r2, [r3, #0]
            break;
 800089a:	e067      	b.n	800096c <Process_Keypad_Input+0x194>
            
        // Speed control
        case '2':  // S2 - Decrease speed
            if(current_speed > 1) current_speed--;
 800089c:	4b39      	ldr	r3, [pc, #228]	@ (8000984 <Process_Keypad_Input+0x1ac>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	dd04      	ble.n	80008ae <Process_Keypad_Input+0xd6>
 80008a4:	4b37      	ldr	r3, [pc, #220]	@ (8000984 <Process_Keypad_Input+0x1ac>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	3b01      	subs	r3, #1
 80008aa:	4a36      	ldr	r2, [pc, #216]	@ (8000984 <Process_Keypad_Input+0x1ac>)
 80008ac:	6013      	str	r3, [r2, #0]
            lcd_update_needed = 1;
 80008ae:	4b34      	ldr	r3, [pc, #208]	@ (8000980 <Process_Keypad_Input+0x1a8>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	601a      	str	r2, [r3, #0]
            break;
 80008b4:	e05a      	b.n	800096c <Process_Keypad_Input+0x194>
        case '3':  // S3 - Increase speed
            if(current_speed < 10) current_speed++;
 80008b6:	4b33      	ldr	r3, [pc, #204]	@ (8000984 <Process_Keypad_Input+0x1ac>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2b09      	cmp	r3, #9
 80008bc:	dc04      	bgt.n	80008c8 <Process_Keypad_Input+0xf0>
 80008be:	4b31      	ldr	r3, [pc, #196]	@ (8000984 <Process_Keypad_Input+0x1ac>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	3301      	adds	r3, #1
 80008c4:	4a2f      	ldr	r2, [pc, #188]	@ (8000984 <Process_Keypad_Input+0x1ac>)
 80008c6:	6013      	str	r3, [r2, #0]
            lcd_update_needed = 1;
 80008c8:	4b2d      	ldr	r3, [pc, #180]	@ (8000980 <Process_Keypad_Input+0x1a8>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	601a      	str	r2, [r3, #0]
            break;
 80008ce:	e04d      	b.n	800096c <Process_Keypad_Input+0x194>
            
        // Brightness control
        case '6':  // S6 - Decrease brightness
            current_brightness -= 10;
 80008d0:	4b2d      	ldr	r3, [pc, #180]	@ (8000988 <Process_Keypad_Input+0x1b0>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	3b0a      	subs	r3, #10
 80008d6:	4a2c      	ldr	r2, [pc, #176]	@ (8000988 <Process_Keypad_Input+0x1b0>)
 80008d8:	6013      	str	r3, [r2, #0]
            if(current_brightness < 1) current_brightness = 1;
 80008da:	4b2b      	ldr	r3, [pc, #172]	@ (8000988 <Process_Keypad_Input+0x1b0>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	dc02      	bgt.n	80008e8 <Process_Keypad_Input+0x110>
 80008e2:	4b29      	ldr	r3, [pc, #164]	@ (8000988 <Process_Keypad_Input+0x1b0>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	601a      	str	r2, [r3, #0]
            lcd_update_needed = 1;
 80008e8:	4b25      	ldr	r3, [pc, #148]	@ (8000980 <Process_Keypad_Input+0x1a8>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	601a      	str	r2, [r3, #0]
            break;
 80008ee:	e03d      	b.n	800096c <Process_Keypad_Input+0x194>
        case '7':  // S7 - Increase brightness
            current_brightness += 10;
 80008f0:	4b25      	ldr	r3, [pc, #148]	@ (8000988 <Process_Keypad_Input+0x1b0>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	330a      	adds	r3, #10
 80008f6:	4a24      	ldr	r2, [pc, #144]	@ (8000988 <Process_Keypad_Input+0x1b0>)
 80008f8:	6013      	str	r3, [r2, #0]
            if(current_brightness > 100) current_brightness = 100;
 80008fa:	4b23      	ldr	r3, [pc, #140]	@ (8000988 <Process_Keypad_Input+0x1b0>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	2b64      	cmp	r3, #100	@ 0x64
 8000900:	dd02      	ble.n	8000908 <Process_Keypad_Input+0x130>
 8000902:	4b21      	ldr	r3, [pc, #132]	@ (8000988 <Process_Keypad_Input+0x1b0>)
 8000904:	2264      	movs	r2, #100	@ 0x64
 8000906:	601a      	str	r2, [r3, #0]
            lcd_update_needed = 1;
 8000908:	4b1d      	ldr	r3, [pc, #116]	@ (8000980 <Process_Keypad_Input+0x1a8>)
 800090a:	2201      	movs	r2, #1
 800090c:	601a      	str	r2, [r3, #0]
            break;
 800090e:	e02d      	b.n	800096c <Process_Keypad_Input+0x194>
            
        // Color and control
        case 'A':  // S10 - Change color (not for Rainbow)
            if(current_effect != EFFECT_RAINBOW) {
 8000910:	4b19      	ldr	r3, [pc, #100]	@ (8000978 <Process_Keypad_Input+0x1a0>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2b01      	cmp	r3, #1
 8000916:	d028      	beq.n	800096a <Process_Keypad_Input+0x192>
                current_color = (current_color + 1) % MAX_COLORS;
 8000918:	4b1c      	ldr	r3, [pc, #112]	@ (800098c <Process_Keypad_Input+0x1b4>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	3301      	adds	r3, #1
 800091e:	425a      	negs	r2, r3
 8000920:	f003 0303 	and.w	r3, r3, #3
 8000924:	f002 0203 	and.w	r2, r2, #3
 8000928:	bf58      	it	pl
 800092a:	4253      	negpl	r3, r2
 800092c:	4a17      	ldr	r2, [pc, #92]	@ (800098c <Process_Keypad_Input+0x1b4>)
 800092e:	6013      	str	r3, [r2, #0]
                lcd_update_needed = 1;
 8000930:	4b13      	ldr	r3, [pc, #76]	@ (8000980 <Process_Keypad_Input+0x1a8>)
 8000932:	2201      	movs	r2, #1
 8000934:	601a      	str	r2, [r3, #0]
            }
            break;
 8000936:	e018      	b.n	800096a <Process_Keypad_Input+0x192>
        case 'E':  // S14 - Music mode
            current_effect = EFFECT_MUSIC;
 8000938:	4b0f      	ldr	r3, [pc, #60]	@ (8000978 <Process_Keypad_Input+0x1a0>)
 800093a:	2205      	movs	r2, #5
 800093c:	601a      	str	r2, [r3, #0]
            effect_changed = 1;
 800093e:	4b0f      	ldr	r3, [pc, #60]	@ (800097c <Process_Keypad_Input+0x1a4>)
 8000940:	2201      	movs	r2, #1
 8000942:	601a      	str	r2, [r3, #0]
            music_mode_active = 1;
 8000944:	4b12      	ldr	r3, [pc, #72]	@ (8000990 <Process_Keypad_Input+0x1b8>)
 8000946:	2201      	movs	r2, #1
 8000948:	601a      	str	r2, [r3, #0]
            lcd_update_needed = 1;
 800094a:	4b0d      	ldr	r3, [pc, #52]	@ (8000980 <Process_Keypad_Input+0x1a8>)
 800094c:	2201      	movs	r2, #1
 800094e:	601a      	str	r2, [r3, #0]
            break;
 8000950:	e00c      	b.n	800096c <Process_Keypad_Input+0x194>
        case 'F':  // S15 - Turn off
            current_effect = EFFECT_OFF;
 8000952:	4b09      	ldr	r3, [pc, #36]	@ (8000978 <Process_Keypad_Input+0x1a0>)
 8000954:	2204      	movs	r2, #4
 8000956:	601a      	str	r2, [r3, #0]
            effect_changed = 1;
 8000958:	4b08      	ldr	r3, [pc, #32]	@ (800097c <Process_Keypad_Input+0x1a4>)
 800095a:	2201      	movs	r2, #1
 800095c:	601a      	str	r2, [r3, #0]
            lcd_update_needed = 1;
 800095e:	4b08      	ldr	r3, [pc, #32]	@ (8000980 <Process_Keypad_Input+0x1a8>)
 8000960:	2201      	movs	r2, #1
 8000962:	601a      	str	r2, [r3, #0]
            break;
 8000964:	e002      	b.n	800096c <Process_Keypad_Input+0x194>
        case '4':  // S4 - Disabled (problematic) 
        case '8':  // S8 - Disabled (problematic)
        case 'C':  // S12 - Disabled (problematic)
        default:
            // Do nothing for problematic keys and others
            break;
 8000966:	bf00      	nop
 8000968:	e000      	b.n	800096c <Process_Keypad_Input+0x194>
            break;
 800096a:	bf00      	nop
    }
}
 800096c:	bf00      	nop
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	bc80      	pop	{r7}
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	20000074 	.word	0x20000074
 800097c:	20000078 	.word	0x20000078
 8000980:	20000030 	.word	0x20000030
 8000984:	2000007c 	.word	0x2000007c
 8000988:	20000080 	.word	0x20000080
 800098c:	20000380 	.word	0x20000380
 8000990:	200000fc 	.word	0x200000fc

08000994 <Set_LED>:

void Set_LED (int LEDnum, int Red, int Green, int Blue) {
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
 80009a0:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	b2d9      	uxtb	r1, r3
 80009a6:	4a10      	ldr	r2, [pc, #64]	@ (80009e8 <Set_LED+0x54>)
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	b2d9      	uxtb	r1, r3
 80009b2:	4a0d      	ldr	r2, [pc, #52]	@ (80009e8 <Set_LED+0x54>)
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	4413      	add	r3, r2
 80009ba:	460a      	mov	r2, r1
 80009bc:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	b2d9      	uxtb	r1, r3
 80009c2:	4a09      	ldr	r2, [pc, #36]	@ (80009e8 <Set_LED+0x54>)
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	4413      	add	r3, r2
 80009ca:	460a      	mov	r2, r1
 80009cc:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	b2d9      	uxtb	r1, r3
 80009d2:	4a05      	ldr	r2, [pc, #20]	@ (80009e8 <Set_LED+0x54>)
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	4413      	add	r3, r2
 80009da:	460a      	mov	r2, r1
 80009dc:	70da      	strb	r2, [r3, #3]
}
 80009de:	bf00      	nop
 80009e0:	3714      	adds	r7, #20
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr
 80009e8:	2000019c 	.word	0x2000019c

080009ec <Set_All_LEDs_Same_Color>:

// Function to set all LEDs to the same color
void Set_All_LEDs_Same_Color(int Red, int Green, int Blue) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	60b9      	str	r1, [r7, #8]
 80009f6:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < MAX_LED; i++) {
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]
 80009fc:	e008      	b.n	8000a10 <Set_All_LEDs_Same_Color+0x24>
        Set_LED(i, Red, Green, Blue);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	68ba      	ldr	r2, [r7, #8]
 8000a02:	68f9      	ldr	r1, [r7, #12]
 8000a04:	6978      	ldr	r0, [r7, #20]
 8000a06:	f7ff ffc5 	bl	8000994 <Set_LED>
    for (int i = 0; i < MAX_LED; i++) {
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	617b      	str	r3, [r7, #20]
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	2b3b      	cmp	r3, #59	@ 0x3b
 8000a14:	ddf3      	ble.n	80009fe <Set_All_LEDs_Same_Color+0x12>
    }
}
 8000a16:	bf00      	nop
 8000a18:	bf00      	nop
 8000a1a:	3718      	adds	r7, #24
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <Set_Brightness>:

#define PI 3.14159265

void Set_Brightness (int brightness) {
 8000a20:	b480      	push	{r7}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if (brightness > 100) brightness = 100;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2b64      	cmp	r3, #100	@ 0x64
 8000a2c:	dd01      	ble.n	8000a32 <Set_Brightness+0x12>
 8000a2e:	2364      	movs	r3, #100	@ 0x64
 8000a30:	607b      	str	r3, [r7, #4]
	if (brightness < 0) brightness = 0;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	da01      	bge.n	8000a3c <Set_Brightness+0x1c>
 8000a38:	2300      	movs	r3, #0
 8000a3a:	607b      	str	r3, [r7, #4]
	
	for (int i=0; i < MAX_LED; i++) {
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	e02d      	b.n	8000a9e <Set_Brightness+0x7e>
		LED_Mod[i][0] = LED_Data[i][0];
 8000a42:	4a1b      	ldr	r2, [pc, #108]	@ (8000ab0 <Set_Brightness+0x90>)
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8000a4a:	4a1a      	ldr	r2, [pc, #104]	@ (8000ab4 <Set_Brightness+0x94>)
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j = 1; j < 4; ++j) {
 8000a52:	2301      	movs	r3, #1
 8000a54:	60bb      	str	r3, [r7, #8]
 8000a56:	e01c      	b.n	8000a92 <Set_Brightness+0x72>
			// Simple percentage calculation: brightness from 0-100%
			LED_Mod[i][j] = (LED_Data[i][j] * brightness) / 100;
 8000a58:	4a15      	ldr	r2, [pc, #84]	@ (8000ab0 <Set_Brightness+0x90>)
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	441a      	add	r2, r3
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	4413      	add	r3, r2
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	461a      	mov	r2, r3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	fb02 f303 	mul.w	r3, r2, r3
 8000a6e:	4a12      	ldr	r2, [pc, #72]	@ (8000ab8 <Set_Brightness+0x98>)
 8000a70:	fb82 1203 	smull	r1, r2, r2, r3
 8000a74:	1152      	asrs	r2, r2, #5
 8000a76:	17db      	asrs	r3, r3, #31
 8000a78:	1ad3      	subs	r3, r2, r3
 8000a7a:	b2d9      	uxtb	r1, r3
 8000a7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ab4 <Set_Brightness+0x94>)
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	441a      	add	r2, r3
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	4413      	add	r3, r2
 8000a88:	460a      	mov	r2, r1
 8000a8a:	701a      	strb	r2, [r3, #0]
		for (int j = 1; j < 4; ++j) {
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	2b03      	cmp	r3, #3
 8000a96:	dddf      	ble.n	8000a58 <Set_Brightness+0x38>
	for (int i=0; i < MAX_LED; i++) {
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	2b3b      	cmp	r3, #59	@ 0x3b
 8000aa2:	ddce      	ble.n	8000a42 <Set_Brightness+0x22>
		}
	}

#endif
}
 8000aa4:	bf00      	nop
 8000aa6:	bf00      	nop
 8000aa8:	3714      	adds	r7, #20
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr
 8000ab0:	2000019c 	.word	0x2000019c
 8000ab4:	2000028c 	.word	0x2000028c
 8000ab8:	51eb851f 	.word	0x51eb851f

08000abc <WS2812_Send>:
//
//	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, 24);
//}


void WS2812_Send (void) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af00      	add	r7, sp, #0
	uint32_t indx = 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	617b      	str	r3, [r7, #20]
	uint32_t color;

	for (int i = 0; i < MAX_LED; ++i) {
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	613b      	str	r3, [r7, #16]
 8000aca:	e036      	b.n	8000b3a <WS2812_Send+0x7e>
		color = ((LED_Mod[i][1] << 16) | (LED_Mod[i][2] << 8) | (LED_Mod[i][3]));
 8000acc:	4a39      	ldr	r2, [pc, #228]	@ (8000bb4 <WS2812_Send+0xf8>)
 8000ace:	693b      	ldr	r3, [r7, #16]
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	4413      	add	r3, r2
 8000ad4:	785b      	ldrb	r3, [r3, #1]
 8000ad6:	041a      	lsls	r2, r3, #16
 8000ad8:	4936      	ldr	r1, [pc, #216]	@ (8000bb4 <WS2812_Send+0xf8>)
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	440b      	add	r3, r1
 8000ae0:	789b      	ldrb	r3, [r3, #2]
 8000ae2:	021b      	lsls	r3, r3, #8
 8000ae4:	431a      	orrs	r2, r3
 8000ae6:	4933      	ldr	r1, [pc, #204]	@ (8000bb4 <WS2812_Send+0xf8>)
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	440b      	add	r3, r1
 8000aee:	78db      	ldrb	r3, [r3, #3]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	603b      	str	r3, [r7, #0]

		for (int j = 23; j >= 0; j--) {
 8000af4:	2317      	movs	r3, #23
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	e019      	b.n	8000b2e <WS2812_Send+0x72>
			if (color&(1<<j)) {
 8000afa:	2201      	movs	r2, #1
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	461a      	mov	r2, r3
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	4013      	ands	r3, r2
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d005      	beq.n	8000b18 <WS2812_Send+0x5c>
				pwmData[indx] = 60;
 8000b0c:	4a2a      	ldr	r2, [pc, #168]	@ (8000bb8 <WS2812_Send+0xfc>)
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	213c      	movs	r1, #60	@ 0x3c
 8000b12:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000b16:	e004      	b.n	8000b22 <WS2812_Send+0x66>
			} else {
				pwmData[indx] = 30;
 8000b18:	4a27      	ldr	r2, [pc, #156]	@ (8000bb8 <WS2812_Send+0xfc>)
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	211e      	movs	r1, #30
 8000b1e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}

			indx++;
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	3301      	adds	r3, #1
 8000b26:	617b      	str	r3, [r7, #20]
		for (int j = 23; j >= 0; j--) {
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	dae2      	bge.n	8000afa <WS2812_Send+0x3e>
	for (int i = 0; i < MAX_LED; ++i) {
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	3301      	adds	r3, #1
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	2b3b      	cmp	r3, #59	@ 0x3b
 8000b3e:	ddc5      	ble.n	8000acc <WS2812_Send+0x10>
		}
	}

	for (int i = 0; i < 50; ++i) {
 8000b40:	2300      	movs	r3, #0
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	e00a      	b.n	8000b5c <WS2812_Send+0xa0>
		pwmData[indx] = 0;
 8000b46:	4a1c      	ldr	r2, [pc, #112]	@ (8000bb8 <WS2812_Send+0xfc>)
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	3301      	adds	r3, #1
 8000b54:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 50; ++i) {
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	2b31      	cmp	r3, #49	@ 0x31
 8000b60:	ddf1      	ble.n	8000b46 <WS2812_Send+0x8a>
	}

	// Reset flag before starting DMA
	datasentflag = 0;
 8000b62:	4b16      	ldr	r3, [pc, #88]	@ (8000bbc <WS2812_Send+0x100>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
	
	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	b29b      	uxth	r3, r3
 8000b6c:	4a12      	ldr	r2, [pc, #72]	@ (8000bb8 <WS2812_Send+0xfc>)
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4813      	ldr	r0, [pc, #76]	@ (8000bc0 <WS2812_Send+0x104>)
 8000b72:	f002 f903 	bl	8002d7c <HAL_TIM_PWM_Start_DMA>
	
	// Add timeout to prevent infinite loop
	uint32_t timeout = 1000000;  // Adjust timeout value
 8000b76:	4b13      	ldr	r3, [pc, #76]	@ (8000bc4 <WS2812_Send+0x108>)
 8000b78:	607b      	str	r3, [r7, #4]
	while(!datasentflag && timeout > 0) {
 8000b7a:	e002      	b.n	8000b82 <WS2812_Send+0xc6>
		timeout--;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	607b      	str	r3, [r7, #4]
	while(!datasentflag && timeout > 0) {
 8000b82:	4b0e      	ldr	r3, [pc, #56]	@ (8000bbc <WS2812_Send+0x100>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d102      	bne.n	8000b90 <WS2812_Send+0xd4>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d1f5      	bne.n	8000b7c <WS2812_Send+0xc0>
	}
	
	// Force stop if timeout occurred
	if (timeout == 0) {
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d106      	bne.n	8000ba4 <WS2812_Send+0xe8>
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8000b96:	2100      	movs	r1, #0
 8000b98:	4809      	ldr	r0, [pc, #36]	@ (8000bc0 <WS2812_Send+0x104>)
 8000b9a:	f002 fa91 	bl	80030c0 <HAL_TIM_PWM_Stop_DMA>
		datasentflag = 1;
 8000b9e:	4b07      	ldr	r3, [pc, #28]	@ (8000bbc <WS2812_Send+0x100>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	601a      	str	r2, [r3, #0]
	}
	
	datasentflag = 0;
 8000ba4:	4b05      	ldr	r3, [pc, #20]	@ (8000bbc <WS2812_Send+0x100>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
}
 8000baa:	bf00      	nop
 8000bac:	3718      	adds	r7, #24
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	2000028c 	.word	0x2000028c
 8000bb8:	20000384 	.word	0x20000384
 8000bbc:	2000037c 	.word	0x2000037c
 8000bc0:	2000010c 	.word	0x2000010c
 8000bc4:	000f4240 	.word	0x000f4240

08000bc8 <Rainbow_Effect>:
		WS2812_Send();
		HAL_Delay(LED_DELAY/speed);
	}
}

void Rainbow_Effect (int speed) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	@ 0x28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
	if (speed > 10) speed = 10;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2b0a      	cmp	r3, #10
 8000bd4:	dd01      	ble.n	8000bda <Rainbow_Effect+0x12>
 8000bd6:	230a      	movs	r3, #10
 8000bd8:	607b      	str	r3, [r7, #4]
	if (speed < 1)	speed = 1;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	dc01      	bgt.n	8000be4 <Rainbow_Effect+0x1c>
 8000be0:	2301      	movs	r3, #1
 8000be2:	607b      	str	r3, [r7, #4]

	for (int hue = 0; hue < 360; hue += 36) {
 8000be4:	2300      	movs	r3, #0
 8000be6:	627b      	str	r3, [r7, #36]	@ 0x24
 8000be8:	e0d4      	b.n	8000d94 <Rainbow_Effect+0x1cc>
		int red, green, blue;

		for (int led_num = 0; led_num < MAX_LED; ++led_num) {
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]
 8000bee:	e0af      	b.n	8000d50 <Rainbow_Effect+0x188>
			if (hue > 359) hue = 0;
 8000bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bf2:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8000bf6:	db01      	blt.n	8000bfc <Rainbow_Effect+0x34>
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	627b      	str	r3, [r7, #36]	@ 0x24
			hue += led_num;
 8000bfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	4413      	add	r3, r2
 8000c02:	627b      	str	r3, [r7, #36]	@ 0x24
			int sector = hue / 60;
 8000c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c06:	4a68      	ldr	r2, [pc, #416]	@ (8000da8 <Rainbow_Effect+0x1e0>)
 8000c08:	fb82 1203 	smull	r1, r2, r2, r3
 8000c0c:	441a      	add	r2, r3
 8000c0e:	1152      	asrs	r2, r2, #5
 8000c10:	17db      	asrs	r3, r3, #31
 8000c12:	1ad3      	subs	r3, r2, r3
 8000c14:	60fb      	str	r3, [r7, #12]
			int remainder = hue % 60;
 8000c16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c18:	4b63      	ldr	r3, [pc, #396]	@ (8000da8 <Rainbow_Effect+0x1e0>)
 8000c1a:	fb83 1302 	smull	r1, r3, r3, r2
 8000c1e:	4413      	add	r3, r2
 8000c20:	1159      	asrs	r1, r3, #5
 8000c22:	17d3      	asrs	r3, r2, #31
 8000c24:	1ac9      	subs	r1, r1, r3
 8000c26:	460b      	mov	r3, r1
 8000c28:	011b      	lsls	r3, r3, #4
 8000c2a:	1a5b      	subs	r3, r3, r1
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	1ad3      	subs	r3, r2, r3
 8000c30:	60bb      	str	r3, [r7, #8]

			switch(sector) {
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	2b05      	cmp	r3, #5
 8000c36:	d878      	bhi.n	8000d2a <Rainbow_Effect+0x162>
 8000c38:	a201      	add	r2, pc, #4	@ (adr r2, 8000c40 <Rainbow_Effect+0x78>)
 8000c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c3e:	bf00      	nop
 8000c40:	08000c59 	.word	0x08000c59
 8000c44:	08000c7b 	.word	0x08000c7b
 8000c48:	08000c9f 	.word	0x08000c9f
 8000c4c:	08000cc1 	.word	0x08000cc1
 8000c50:	08000ce5 	.word	0x08000ce5
 8000c54:	08000d07 	.word	0x08000d07
				case 0: red = 255; green = (remainder * 255) / 60; blue = 0; break;
 8000c58:	23ff      	movs	r3, #255	@ 0xff
 8000c5a:	623b      	str	r3, [r7, #32]
 8000c5c:	68ba      	ldr	r2, [r7, #8]
 8000c5e:	4613      	mov	r3, r2
 8000c60:	021b      	lsls	r3, r3, #8
 8000c62:	1a9b      	subs	r3, r3, r2
 8000c64:	4a50      	ldr	r2, [pc, #320]	@ (8000da8 <Rainbow_Effect+0x1e0>)
 8000c66:	fb82 1203 	smull	r1, r2, r2, r3
 8000c6a:	441a      	add	r2, r3
 8000c6c:	1152      	asrs	r2, r2, #5
 8000c6e:	17db      	asrs	r3, r3, #31
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	61fb      	str	r3, [r7, #28]
 8000c74:	2300      	movs	r3, #0
 8000c76:	61bb      	str	r3, [r7, #24]
 8000c78:	e05e      	b.n	8000d38 <Rainbow_Effect+0x170>
				case 1: red = 255 - ((remainder * 255) / 60); green = 255; blue = 0; break;
 8000c7a:	68ba      	ldr	r2, [r7, #8]
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	021b      	lsls	r3, r3, #8
 8000c80:	1a9b      	subs	r3, r3, r2
 8000c82:	4a49      	ldr	r2, [pc, #292]	@ (8000da8 <Rainbow_Effect+0x1e0>)
 8000c84:	fb82 1203 	smull	r1, r2, r2, r3
 8000c88:	441a      	add	r2, r3
 8000c8a:	1152      	asrs	r2, r2, #5
 8000c8c:	17db      	asrs	r3, r3, #31
 8000c8e:	1a9b      	subs	r3, r3, r2
 8000c90:	33ff      	adds	r3, #255	@ 0xff
 8000c92:	623b      	str	r3, [r7, #32]
 8000c94:	23ff      	movs	r3, #255	@ 0xff
 8000c96:	61fb      	str	r3, [r7, #28]
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61bb      	str	r3, [r7, #24]
 8000c9c:	e04c      	b.n	8000d38 <Rainbow_Effect+0x170>
				case 2: red = 0; green = 255; blue = (remainder * 255) / 60; break;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	623b      	str	r3, [r7, #32]
 8000ca2:	23ff      	movs	r3, #255	@ 0xff
 8000ca4:	61fb      	str	r3, [r7, #28]
 8000ca6:	68ba      	ldr	r2, [r7, #8]
 8000ca8:	4613      	mov	r3, r2
 8000caa:	021b      	lsls	r3, r3, #8
 8000cac:	1a9b      	subs	r3, r3, r2
 8000cae:	4a3e      	ldr	r2, [pc, #248]	@ (8000da8 <Rainbow_Effect+0x1e0>)
 8000cb0:	fb82 1203 	smull	r1, r2, r2, r3
 8000cb4:	441a      	add	r2, r3
 8000cb6:	1152      	asrs	r2, r2, #5
 8000cb8:	17db      	asrs	r3, r3, #31
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	61bb      	str	r3, [r7, #24]
 8000cbe:	e03b      	b.n	8000d38 <Rainbow_Effect+0x170>
				case 3: red = 0; green = 255 - ((remainder * 255) / 60); blue = 255; break;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	623b      	str	r3, [r7, #32]
 8000cc4:	68ba      	ldr	r2, [r7, #8]
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	021b      	lsls	r3, r3, #8
 8000cca:	1a9b      	subs	r3, r3, r2
 8000ccc:	4a36      	ldr	r2, [pc, #216]	@ (8000da8 <Rainbow_Effect+0x1e0>)
 8000cce:	fb82 1203 	smull	r1, r2, r2, r3
 8000cd2:	441a      	add	r2, r3
 8000cd4:	1152      	asrs	r2, r2, #5
 8000cd6:	17db      	asrs	r3, r3, #31
 8000cd8:	1a9b      	subs	r3, r3, r2
 8000cda:	33ff      	adds	r3, #255	@ 0xff
 8000cdc:	61fb      	str	r3, [r7, #28]
 8000cde:	23ff      	movs	r3, #255	@ 0xff
 8000ce0:	61bb      	str	r3, [r7, #24]
 8000ce2:	e029      	b.n	8000d38 <Rainbow_Effect+0x170>
				case 4: red = (remainder * 255) / 60; green = 0; blue = 255; break;
 8000ce4:	68ba      	ldr	r2, [r7, #8]
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	021b      	lsls	r3, r3, #8
 8000cea:	1a9b      	subs	r3, r3, r2
 8000cec:	4a2e      	ldr	r2, [pc, #184]	@ (8000da8 <Rainbow_Effect+0x1e0>)
 8000cee:	fb82 1203 	smull	r1, r2, r2, r3
 8000cf2:	441a      	add	r2, r3
 8000cf4:	1152      	asrs	r2, r2, #5
 8000cf6:	17db      	asrs	r3, r3, #31
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	623b      	str	r3, [r7, #32]
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61fb      	str	r3, [r7, #28]
 8000d00:	23ff      	movs	r3, #255	@ 0xff
 8000d02:	61bb      	str	r3, [r7, #24]
 8000d04:	e018      	b.n	8000d38 <Rainbow_Effect+0x170>
				case 5: red = 255; green = 0; blue = 255 - ((remainder * 255) / 60); break;
 8000d06:	23ff      	movs	r3, #255	@ 0xff
 8000d08:	623b      	str	r3, [r7, #32]
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61fb      	str	r3, [r7, #28]
 8000d0e:	68ba      	ldr	r2, [r7, #8]
 8000d10:	4613      	mov	r3, r2
 8000d12:	021b      	lsls	r3, r3, #8
 8000d14:	1a9b      	subs	r3, r3, r2
 8000d16:	4a24      	ldr	r2, [pc, #144]	@ (8000da8 <Rainbow_Effect+0x1e0>)
 8000d18:	fb82 1203 	smull	r1, r2, r2, r3
 8000d1c:	441a      	add	r2, r3
 8000d1e:	1152      	asrs	r2, r2, #5
 8000d20:	17db      	asrs	r3, r3, #31
 8000d22:	1a9b      	subs	r3, r3, r2
 8000d24:	33ff      	adds	r3, #255	@ 0xff
 8000d26:	61bb      	str	r3, [r7, #24]
 8000d28:	e006      	b.n	8000d38 <Rainbow_Effect+0x170>
				default: red = 255; green = 0; blue = 0; break;
 8000d2a:	23ff      	movs	r3, #255	@ 0xff
 8000d2c:	623b      	str	r3, [r7, #32]
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61fb      	str	r3, [r7, #28]
 8000d32:	2300      	movs	r3, #0
 8000d34:	61bb      	str	r3, [r7, #24]
 8000d36:	bf00      	nop
			}

			//Set_All_LEDs_Same_Color(red, green, blue);

			Set_LED(led_num, red, green, blue);
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	69fa      	ldr	r2, [r7, #28]
 8000d3c:	6a39      	ldr	r1, [r7, #32]
 8000d3e:	6978      	ldr	r0, [r7, #20]
 8000d40:	f7ff fe28 	bl	8000994 <Set_LED>
			HAL_Delay(1);
 8000d44:	2001      	movs	r0, #1
 8000d46:	f000 fe47 	bl	80019d8 <HAL_Delay>
		for (int led_num = 0; led_num < MAX_LED; ++led_num) {
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	617b      	str	r3, [r7, #20]
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	2b3b      	cmp	r3, #59	@ 0x3b
 8000d54:	f77f af4c 	ble.w	8000bf0 <Rainbow_Effect+0x28>
		}

		Set_Brightness(current_brightness);
 8000d58:	4b14      	ldr	r3, [pc, #80]	@ (8000dac <Rainbow_Effect+0x1e4>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fe5f 	bl	8000a20 <Set_Brightness>
		WS2812_Send();
 8000d62:	f7ff feab 	bl	8000abc <WS2812_Send>
		HAL_Delay(LED_DELAY/speed);
 8000d66:	220a      	movs	r2, #10
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f000 fe32 	bl	80019d8 <HAL_Delay>
		
		// Check keypad during rainbow effect
		char key_rainbow = Keypad_Read();
 8000d74:	f7ff fcb6 	bl	80006e4 <Keypad_Read>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	74fb      	strb	r3, [r7, #19]
		if(key_rainbow != 0) {
 8000d7c:	7cfb      	ldrb	r3, [r7, #19]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d005      	beq.n	8000d8e <Rainbow_Effect+0x1c6>
			Process_Keypad_Input(key_rainbow);
 8000d82:	7cfb      	ldrb	r3, [r7, #19]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff fd27 	bl	80007d8 <Process_Keypad_Input>
			Update_LCD_Display();
 8000d8a:	f7ff fc4d 	bl	8000628 <Update_LCD_Display>
	for (int hue = 0; hue < 360; hue += 36) {
 8000d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d90:	3324      	adds	r3, #36	@ 0x24
 8000d92:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d96:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8000d9a:	f6ff af26 	blt.w	8000bea <Rainbow_Effect+0x22>
		}
	}
}
 8000d9e:	bf00      	nop
 8000da0:	bf00      	nop
 8000da2:	3728      	adds	r7, #40	@ 0x28
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	88888889 	.word	0x88888889
 8000dac:	20000080 	.word	0x20000080

08000db0 <Pixel_Run_Effect>:

void Pixel_Run_Effect (int speed, int red, int green, int blue) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
 8000dbc:	603b      	str	r3, [r7, #0]
	if (speed > 10) speed = 10;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	2b0a      	cmp	r3, #10
 8000dc2:	dd01      	ble.n	8000dc8 <Pixel_Run_Effect+0x18>
 8000dc4:	230a      	movs	r3, #10
 8000dc6:	60fb      	str	r3, [r7, #12]
	if (speed < 1)	speed = 1;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	dc01      	bgt.n	8000dd2 <Pixel_Run_Effect+0x22>
 8000dce:	2301      	movs	r3, #1
 8000dd0:	60fb      	str	r3, [r7, #12]

	Set_LED(MAX_LED-1, 0, 0 , 0);
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	203b      	movs	r0, #59	@ 0x3b
 8000dda:	f7ff fddb 	bl	8000994 <Set_LED>
	for (int i = 1; i < MAX_LED; ++i) {
 8000dde:	2301      	movs	r3, #1
 8000de0:	617b      	str	r3, [r7, #20]
 8000de2:	e02a      	b.n	8000e3a <Pixel_Run_Effect+0x8a>
		Set_LED(i, red, green, blue);
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	68b9      	ldr	r1, [r7, #8]
 8000dea:	6978      	ldr	r0, [r7, #20]
 8000dec:	f7ff fdd2 	bl	8000994 <Set_LED>
		Set_LED(i-1, 0, 0 , 0);
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	1e58      	subs	r0, r3, #1
 8000df4:	2300      	movs	r3, #0
 8000df6:	2200      	movs	r2, #0
 8000df8:	2100      	movs	r1, #0
 8000dfa:	f7ff fdcb 	bl	8000994 <Set_LED>
		Set_Brightness(current_brightness);
 8000dfe:	4b13      	ldr	r3, [pc, #76]	@ (8000e4c <Pixel_Run_Effect+0x9c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff fe0c 	bl	8000a20 <Set_Brightness>
		WS2812_Send();
 8000e08:	f7ff fe58 	bl	8000abc <WS2812_Send>
		HAL_Delay((LED_DELAY*3)/speed);
 8000e0c:	221e      	movs	r2, #30
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e14:	4618      	mov	r0, r3
 8000e16:	f000 fddf 	bl	80019d8 <HAL_Delay>
		
		// Check keypad during run effect
		char key_run = Keypad_Read();
 8000e1a:	f7ff fc63 	bl	80006e4 <Keypad_Read>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	74fb      	strb	r3, [r7, #19]
		if(key_run != 0) {
 8000e22:	7cfb      	ldrb	r3, [r7, #19]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d005      	beq.n	8000e34 <Pixel_Run_Effect+0x84>
			Process_Keypad_Input(key_run);
 8000e28:	7cfb      	ldrb	r3, [r7, #19]
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff fcd4 	bl	80007d8 <Process_Keypad_Input>
			Update_LCD_Display();
 8000e30:	f7ff fbfa 	bl	8000628 <Update_LCD_Display>
	for (int i = 1; i < MAX_LED; ++i) {
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	3301      	adds	r3, #1
 8000e38:	617b      	str	r3, [r7, #20]
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	2b3b      	cmp	r3, #59	@ 0x3b
 8000e3e:	ddd1      	ble.n	8000de4 <Pixel_Run_Effect+0x34>
		}
	}
}
 8000e40:	bf00      	nop
 8000e42:	bf00      	nop
 8000e44:	3718      	adds	r7, #24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000080 	.word	0x20000080

08000e50 <All_LEDs_Off>:
    LCD_Parallel_Print("LCD Working!");
    HAL_Delay(2000);
}

// All LEDs off (effect OFF)
void All_LEDs_Off(void) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
    for(int i = 0; i < MAX_LED; i++) {
 8000e56:	2300      	movs	r3, #0
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	e008      	b.n	8000e6e <All_LEDs_Off+0x1e>
        Set_LED(i, 0, 0, 0);
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2100      	movs	r1, #0
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f7ff fd96 	bl	8000994 <Set_LED>
    for(int i = 0; i < MAX_LED; i++) {
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	607b      	str	r3, [r7, #4]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2b3b      	cmp	r3, #59	@ 0x3b
 8000e72:	ddf3      	ble.n	8000e5c <All_LEDs_Off+0xc>
    }
    WS2812_Send();
 8000e74:	f7ff fe22 	bl	8000abc <WS2812_Send>
}
 8000e78:	bf00      	nop
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <Read_Sound_Detection>:

// Read sound detection from GYMAX4466
uint8_t Read_Sound_Detection(void) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(MUSIC_OUT_PORT, MUSIC_OUT_PIN);
 8000e84:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e88:	4802      	ldr	r0, [pc, #8]	@ (8000e94 <Read_Sound_Detection+0x14>)
 8000e8a:	f001 fac1 	bl	8002410 <HAL_GPIO_ReadPin>
 8000e8e:	4603      	mov	r3, r0
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40011000 	.word	0x40011000

08000e98 <Music_Effect>:

// Music-reactive LED effect - Beat Detection Style
void Music_Effect(void) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b088      	sub	sp, #32
 8000e9c:	af00      	add	r7, sp, #0
    uint8_t sound_detected = Read_Sound_Detection();
 8000e9e:	f7ff ffef 	bl	8000e80 <Read_Sound_Detection>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	75fb      	strb	r3, [r7, #23]
    uint32_t current_time = HAL_GetTick();
 8000ea6:	f000 fd8d 	bl	80019c4 <HAL_GetTick>
 8000eaa:	6138      	str	r0, [r7, #16]
    
    if(sound_detected) {
 8000eac:	7dfb      	ldrb	r3, [r7, #23]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d024      	beq.n	8000efc <Music_Effect+0x64>
        sound_active = 1;
 8000eb2:	4b24      	ldr	r3, [pc, #144]	@ (8000f44 <Music_Effect+0xac>)
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	701a      	strb	r2, [r3, #0]
        last_sound_time = current_time;
 8000eb8:	4a23      	ldr	r2, [pc, #140]	@ (8000f48 <Music_Effect+0xb0>)
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	6013      	str	r3, [r2, #0]
        
        // Random color khi có beat
        int red = (current_time % 256);
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	60fb      	str	r3, [r7, #12]
        int green = ((current_time * 3) % 256);
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	4413      	add	r3, r2
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	60bb      	str	r3, [r7, #8]
        int blue = ((current_time * 7) % 256);
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	00db      	lsls	r3, r3, #3
 8000ed6:	1a9b      	subs	r3, r3, r2
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	607b      	str	r3, [r7, #4]
        
        // Hiệu ứng flash toàn bộ strip
        for(int i = 0; i < MAX_LED; i++) {
 8000edc:	2300      	movs	r3, #0
 8000ede:	61fb      	str	r3, [r7, #28]
 8000ee0:	e008      	b.n	8000ef4 <Music_Effect+0x5c>
            Set_LED(i, red, green, blue);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	68ba      	ldr	r2, [r7, #8]
 8000ee6:	68f9      	ldr	r1, [r7, #12]
 8000ee8:	69f8      	ldr	r0, [r7, #28]
 8000eea:	f7ff fd53 	bl	8000994 <Set_LED>
        for(int i = 0; i < MAX_LED; i++) {
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	61fb      	str	r3, [r7, #28]
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	2b3b      	cmp	r3, #59	@ 0x3b
 8000ef8:	ddf3      	ble.n	8000ee2 <Music_Effect+0x4a>
 8000efa:	e017      	b.n	8000f2c <Music_Effect+0x94>
        }
    } else {
        // Fade out nếu không còn âm thanh
        if(current_time - last_sound_time > SOUND_TIMEOUT) {
 8000efc:	4b12      	ldr	r3, [pc, #72]	@ (8000f48 <Music_Effect+0xb0>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	2bc8      	cmp	r3, #200	@ 0xc8
 8000f06:	d911      	bls.n	8000f2c <Music_Effect+0x94>
            sound_active = 0;
 8000f08:	4b0e      	ldr	r3, [pc, #56]	@ (8000f44 <Music_Effect+0xac>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < MAX_LED; i++) {
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61bb      	str	r3, [r7, #24]
 8000f12:	e008      	b.n	8000f26 <Music_Effect+0x8e>
                Set_LED(i, 0, 0, 0);
 8000f14:	2300      	movs	r3, #0
 8000f16:	2200      	movs	r2, #0
 8000f18:	2100      	movs	r1, #0
 8000f1a:	69b8      	ldr	r0, [r7, #24]
 8000f1c:	f7ff fd3a 	bl	8000994 <Set_LED>
            for(int i = 0; i < MAX_LED; i++) {
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	3301      	adds	r3, #1
 8000f24:	61bb      	str	r3, [r7, #24]
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	2b3b      	cmp	r3, #59	@ 0x3b
 8000f2a:	ddf3      	ble.n	8000f14 <Music_Effect+0x7c>
            }
        }
    }
    
    Set_Brightness(current_brightness);
 8000f2c:	4b07      	ldr	r3, [pc, #28]	@ (8000f4c <Music_Effect+0xb4>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fd75 	bl	8000a20 <Set_Brightness>
    WS2812_Send();
 8000f36:	f7ff fdc1 	bl	8000abc <WS2812_Send>
}
 8000f3a:	bf00      	nop
 8000f3c:	3720      	adds	r7, #32
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000108 	.word	0x20000108
 8000f48:	20000104 	.word	0x20000104
 8000f4c:	20000080 	.word	0x20000080

08000f50 <Debug_Music_GPIO>:
    Set_Brightness(current_brightness);
    WS2812_Send();
}

// Debug function - Test GYMAX4466 GPIO
void Debug_Music_GPIO(void) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
    uint8_t gpio_state = HAL_GPIO_ReadPin(MUSIC_OUT_PORT, MUSIC_OUT_PIN);
 8000f56:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f5a:	480c      	ldr	r0, [pc, #48]	@ (8000f8c <Debug_Music_GPIO+0x3c>)
 8000f5c:	f001 fa58 	bl	8002410 <HAL_GPIO_ReadPin>
 8000f60:	4603      	mov	r3, r0
 8000f62:	71fb      	strb	r3, [r7, #7]
    
    // Blink built-in LED (PC13) theo GPIO state
    if(gpio_state) {
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d006      	beq.n	8000f78 <Debug_Music_GPIO+0x28>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);   // LED ON khi có signal
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f70:	4806      	ldr	r0, [pc, #24]	@ (8000f8c <Debug_Music_GPIO+0x3c>)
 8000f72:	f001 fa64 	bl	800243e <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); // LED OFF khi không có signal
    }
}
 8000f76:	e005      	b.n	8000f84 <Debug_Music_GPIO+0x34>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); // LED OFF khi không có signal
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f7e:	4803      	ldr	r0, [pc, #12]	@ (8000f8c <Debug_Music_GPIO+0x3c>)
 8000f80:	f001 fa5d 	bl	800243e <HAL_GPIO_WritePin>
}
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40011000 	.word	0x40011000

08000f90 <Debug_Music_Mode>:

// Debug Music Mode - hiển thị thông tin trên LCD
void Debug_Music_Mode(void) {
 8000f90:	b590      	push	{r4, r7, lr}
 8000f92:	b08b      	sub	sp, #44	@ 0x2c
 8000f94:	af02      	add	r7, sp, #8
    if(current_effect == EFFECT_MUSIC) {
 8000f96:	4b1e      	ldr	r3, [pc, #120]	@ (8001010 <Debug_Music_Mode+0x80>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2b05      	cmp	r3, #5
 8000f9c:	d133      	bne.n	8001006 <Debug_Music_Mode+0x76>
        uint8_t sound_detected = Read_Sound_Detection();
 8000f9e:	f7ff ff6f 	bl	8000e80 <Read_Sound_Detection>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	76fb      	strb	r3, [r7, #27]
        char debug_msg[20];
        
        // Line 1: Music mode status
        LCD_Parallel_SetCursor(0, 0);
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	2000      	movs	r0, #0
 8000faa:	f7ff f973 	bl	8000294 <LCD_Parallel_SetCursor>
        LCD_Parallel_Print("Music Mode ACTIVE");
 8000fae:	4819      	ldr	r0, [pc, #100]	@ (8001014 <Debug_Music_Mode+0x84>)
 8000fb0:	f7ff f99a 	bl	80002e8 <LCD_Parallel_Print>
        
        // Line 2: GPIO state và time
        LCD_Parallel_SetCursor(1, 0);
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f7ff f96c 	bl	8000294 <LCD_Parallel_SetCursor>
        snprintf(debug_msg, sizeof(debug_msg), "GPIO:%d T:%lu", 
 8000fbc:	7efc      	ldrb	r4, [r7, #27]
                sound_detected, (HAL_GetTick()/1000));
 8000fbe:	f000 fd01 	bl	80019c4 <HAL_GetTick>
 8000fc2:	4603      	mov	r3, r0
        snprintf(debug_msg, sizeof(debug_msg), "GPIO:%d T:%lu", 
 8000fc4:	4a14      	ldr	r2, [pc, #80]	@ (8001018 <Debug_Music_Mode+0x88>)
 8000fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fca:	099b      	lsrs	r3, r3, #6
 8000fcc:	4638      	mov	r0, r7
 8000fce:	9300      	str	r3, [sp, #0]
 8000fd0:	4623      	mov	r3, r4
 8000fd2:	4a12      	ldr	r2, [pc, #72]	@ (800101c <Debug_Music_Mode+0x8c>)
 8000fd4:	2114      	movs	r1, #20
 8000fd6:	f002 ff05 	bl	8003de4 <sniprintf>
        LCD_Parallel_Print(debug_msg);
 8000fda:	463b      	mov	r3, r7
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff f983 	bl	80002e8 <LCD_Parallel_Print>
        
        // Clear remaining chars
        int msg_len = strlen(debug_msg);
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff f8b1 	bl	800014c <strlen>
 8000fea:	4603      	mov	r3, r0
 8000fec:	617b      	str	r3, [r7, #20]
        for(int i = msg_len; i < LCD_COLS; i++) {
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	61fb      	str	r3, [r7, #28]
 8000ff2:	e005      	b.n	8001000 <Debug_Music_Mode+0x70>
            LCD_Parallel_PrintChar(' ');
 8000ff4:	2020      	movs	r0, #32
 8000ff6:	f7ff f98c 	bl	8000312 <LCD_Parallel_PrintChar>
        for(int i = msg_len; i < LCD_COLS; i++) {
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	61fb      	str	r3, [r7, #28]
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	2b0f      	cmp	r3, #15
 8001004:	ddf6      	ble.n	8000ff4 <Debug_Music_Mode+0x64>
        }
    }
}
 8001006:	bf00      	nop
 8001008:	3724      	adds	r7, #36	@ 0x24
 800100a:	46bd      	mov	sp, r7
 800100c:	bd90      	pop	{r4, r7, pc}
 800100e:	bf00      	nop
 8001010:	20000074 	.word	0x20000074
 8001014:	08004878 	.word	0x08004878
 8001018:	10624dd3 	.word	0x10624dd3
 800101c:	0800488c 	.word	0x0800488c

08001020 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001020:	b5b0      	push	{r4, r5, r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001026:	f000 fc75 	bl	8001914 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800102a:	f000 f9c9 	bl	80013c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800102e:	f000 facb 	bl	80015c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001032:	f000 faab 	bl	800158c <MX_DMA_Init>
  MX_TIM1_Init();
 8001036:	f000 fa09 	bl	800144c <MX_TIM1_Init>
  
  /* USER CODE BEGIN 2 */
  
  // Initialize keypad
  Keypad_Init();
 800103a:	f7ff fa89 	bl	8000550 <Keypad_Init>
  
  // Initialize LCD Parallel
  LCD_Parallel_Init();
 800103e:	f7ff f88d 	bl	800015c <LCD_Parallel_Init>
  
  // Test LCD first
  LCD_Parallel_Clear();
 8001042:	f7ff f91d 	bl	8000280 <LCD_Parallel_Clear>
  LCD_Parallel_SetCursor(0, 0);
 8001046:	2100      	movs	r1, #0
 8001048:	2000      	movs	r0, #0
 800104a:	f7ff f923 	bl	8000294 <LCD_Parallel_SetCursor>
  LCD_Parallel_Print("STM32 LCD Test");
 800104e:	48b8      	ldr	r0, [pc, #736]	@ (8001330 <main+0x310>)
 8001050:	f7ff f94a 	bl	80002e8 <LCD_Parallel_Print>
  LCD_Parallel_SetCursor(1, 0);
 8001054:	2100      	movs	r1, #0
 8001056:	2001      	movs	r0, #1
 8001058:	f7ff f91c 	bl	8000294 <LCD_Parallel_SetCursor>
  LCD_Parallel_Print("Initializing...");
 800105c:	48b5      	ldr	r0, [pc, #724]	@ (8001334 <main+0x314>)
 800105e:	f7ff f943 	bl	80002e8 <LCD_Parallel_Print>
  HAL_Delay(3000);  // Show test message for 3 seconds
 8001062:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001066:	f000 fcb7 	bl	80019d8 <HAL_Delay>
  
  // Show welcome message
  LCD_Parallel_Clear();
 800106a:	f7ff f909 	bl	8000280 <LCD_Parallel_Clear>
  LCD_Parallel_DisplayEffect("LED Control");
 800106e:	48b2      	ldr	r0, [pc, #712]	@ (8001338 <main+0x318>)
 8001070:	f7ff fa02 	bl	8000478 <LCD_Parallel_DisplayEffect>
  HAL_Delay(2000);
 8001074:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001078:	f000 fcae 	bl	80019d8 <HAL_Delay>
  
  // Turn off all LEDs initially
  Set_All_LEDs_Same_Color(0, 0, 0);
 800107c:	2200      	movs	r2, #0
 800107e:	2100      	movs	r1, #0
 8001080:	2000      	movs	r0, #0
 8001082:	f7ff fcb3 	bl	80009ec <Set_All_LEDs_Same_Color>
  Set_Brightness(0);
 8001086:	2000      	movs	r0, #0
 8001088:	f7ff fcca 	bl	8000a20 <Set_Brightness>
  WS2812_Send();
 800108c:	f7ff fd16 	bl	8000abc <WS2812_Send>
  
  // Update LCD with initial status
  Update_LCD_Display();
 8001090:	f7ff faca 	bl	8000628 <Update_LCD_Display>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // Check for keypad input
    char key = Keypad_Read();
 8001094:	f7ff fb26 	bl	80006e4 <Keypad_Read>
 8001098:	4603      	mov	r3, r0
 800109a:	71fb      	strb	r3, [r7, #7]
    if(key != 0) {
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d00a      	beq.n	80010b8 <main+0x98>
        Process_Keypad_Input(key);
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fb97 	bl	80007d8 <Process_Keypad_Input>
        // Update LCD immediately when key is pressed
        Update_LCD_Display();
 80010aa:	f7ff fabd 	bl	8000628 <Update_LCD_Display>
        last_lcd_update = HAL_GetTick();
 80010ae:	f000 fc89 	bl	80019c4 <HAL_GetTick>
 80010b2:	4603      	mov	r3, r0
 80010b4:	4aa1      	ldr	r2, [pc, #644]	@ (800133c <main+0x31c>)
 80010b6:	6013      	str	r3, [r2, #0]
    }
    
    // Update LCD display periodically (independent of LED effects)
    if(HAL_GetTick() - last_lcd_update > LCD_UPDATE_INTERVAL) {
 80010b8:	f000 fc84 	bl	80019c4 <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	4b9f      	ldr	r3, [pc, #636]	@ (800133c <main+0x31c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80010c8:	d906      	bls.n	80010d8 <main+0xb8>
        Update_LCD_Display();
 80010ca:	f7ff faad 	bl	8000628 <Update_LCD_Display>
        last_lcd_update = HAL_GetTick();
 80010ce:	f000 fc79 	bl	80019c4 <HAL_GetTick>
 80010d2:	4603      	mov	r3, r0
 80010d4:	4a99      	ldr	r2, [pc, #612]	@ (800133c <main+0x31c>)
 80010d6:	6013      	str	r3, [r2, #0]
    }
    
    // Run current effect based on state
    switch(current_effect) {
 80010d8:	4b99      	ldr	r3, [pc, #612]	@ (8001340 <main+0x320>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2b05      	cmp	r3, #5
 80010de:	f200 815f 	bhi.w	80013a0 <main+0x380>
 80010e2:	a201      	add	r2, pc, #4	@ (adr r2, 80010e8 <main+0xc8>)
 80010e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e8:	08001101 	.word	0x08001101
 80010ec:	080011e9 	.word	0x080011e9
 80010f0:	080011f5 	.word	0x080011f5
 80010f4:	0800123b 	.word	0x0800123b
 80010f8:	08001301 	.word	0x08001301
 80010fc:	08001355 	.word	0x08001355
        case EFFECT_FADE:
            Set_All_LEDs_Same_Color(color_values[current_color][0], 
 8001100:	4b90      	ldr	r3, [pc, #576]	@ (8001344 <main+0x324>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	4990      	ldr	r1, [pc, #576]	@ (8001348 <main+0x328>)
 8001106:	4613      	mov	r3, r2
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	4413      	add	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	440b      	add	r3, r1
 8001110:	6818      	ldr	r0, [r3, #0]
 8001112:	4b8c      	ldr	r3, [pc, #560]	@ (8001344 <main+0x324>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	498c      	ldr	r1, [pc, #560]	@ (8001348 <main+0x328>)
 8001118:	4613      	mov	r3, r2
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	4413      	add	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	440b      	add	r3, r1
 8001122:	3304      	adds	r3, #4
 8001124:	6819      	ldr	r1, [r3, #0]
 8001126:	4b87      	ldr	r3, [pc, #540]	@ (8001344 <main+0x324>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	4c87      	ldr	r4, [pc, #540]	@ (8001348 <main+0x328>)
 800112c:	4613      	mov	r3, r2
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	4413      	add	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4423      	add	r3, r4
 8001136:	3308      	adds	r3, #8
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	461a      	mov	r2, r3
 800113c:	f7ff fc56 	bl	80009ec <Set_All_LEDs_Same_Color>
                                  color_values[current_color][1], 
                                  color_values[current_color][2]);
            // Apply fade with current brightness
            for (int brightness = 0; brightness <= current_brightness; brightness += 2) {
 8001140:	2300      	movs	r3, #0
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	e021      	b.n	800118a <main+0x16a>
                Set_Brightness(brightness);
 8001146:	68f8      	ldr	r0, [r7, #12]
 8001148:	f7ff fc6a 	bl	8000a20 <Set_Brightness>
                WS2812_Send();
 800114c:	f7ff fcb6 	bl	8000abc <WS2812_Send>
                HAL_Delay((LED_DELAY * 5) / current_speed);
 8001150:	4b7e      	ldr	r3, [pc, #504]	@ (800134c <main+0x32c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2232      	movs	r2, #50	@ 0x32
 8001156:	fb92 f3f3 	sdiv	r3, r2, r3
 800115a:	4618      	mov	r0, r3
 800115c:	f000 fc3c 	bl	80019d8 <HAL_Delay>
                
                // Check keypad during effect
                char key_during_effect = Keypad_Read();
 8001160:	f7ff fac0 	bl	80006e4 <Keypad_Read>
 8001164:	4603      	mov	r3, r0
 8001166:	707b      	strb	r3, [r7, #1]
                if(key_during_effect != 0) {
 8001168:	787b      	ldrb	r3, [r7, #1]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d00a      	beq.n	8001184 <main+0x164>
                    Process_Keypad_Input(key_during_effect);
 800116e:	787b      	ldrb	r3, [r7, #1]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff fb31 	bl	80007d8 <Process_Keypad_Input>
                    Update_LCD_Display();
 8001176:	f7ff fa57 	bl	8000628 <Update_LCD_Display>
                    last_lcd_update = HAL_GetTick();
 800117a:	f000 fc23 	bl	80019c4 <HAL_GetTick>
 800117e:	4603      	mov	r3, r0
 8001180:	4a6e      	ldr	r2, [pc, #440]	@ (800133c <main+0x31c>)
 8001182:	6013      	str	r3, [r2, #0]
            for (int brightness = 0; brightness <= current_brightness; brightness += 2) {
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	3302      	adds	r3, #2
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	4b71      	ldr	r3, [pc, #452]	@ (8001350 <main+0x330>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	68fa      	ldr	r2, [r7, #12]
 8001190:	429a      	cmp	r2, r3
 8001192:	ddd8      	ble.n	8001146 <main+0x126>
                }
            }
            for (int brightness = current_brightness; brightness >= 0; brightness -= 2) {
 8001194:	4b6e      	ldr	r3, [pc, #440]	@ (8001350 <main+0x330>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	e021      	b.n	80011e0 <main+0x1c0>
                Set_Brightness(brightness);
 800119c:	68b8      	ldr	r0, [r7, #8]
 800119e:	f7ff fc3f 	bl	8000a20 <Set_Brightness>
                WS2812_Send();
 80011a2:	f7ff fc8b 	bl	8000abc <WS2812_Send>
                HAL_Delay((LED_DELAY * 5) / current_speed);
 80011a6:	4b69      	ldr	r3, [pc, #420]	@ (800134c <main+0x32c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2232      	movs	r2, #50	@ 0x32
 80011ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80011b0:	4618      	mov	r0, r3
 80011b2:	f000 fc11 	bl	80019d8 <HAL_Delay>
                
                // Check keypad during effect
                char key_during_effect = Keypad_Read();
 80011b6:	f7ff fa95 	bl	80006e4 <Keypad_Read>
 80011ba:	4603      	mov	r3, r0
 80011bc:	70bb      	strb	r3, [r7, #2]
                if(key_during_effect != 0) {
 80011be:	78bb      	ldrb	r3, [r7, #2]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d00a      	beq.n	80011da <main+0x1ba>
                    Process_Keypad_Input(key_during_effect);
 80011c4:	78bb      	ldrb	r3, [r7, #2]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff fb06 	bl	80007d8 <Process_Keypad_Input>
                    Update_LCD_Display();
 80011cc:	f7ff fa2c 	bl	8000628 <Update_LCD_Display>
                    last_lcd_update = HAL_GetTick();
 80011d0:	f000 fbf8 	bl	80019c4 <HAL_GetTick>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4a59      	ldr	r2, [pc, #356]	@ (800133c <main+0x31c>)
 80011d8:	6013      	str	r3, [r2, #0]
            for (int brightness = current_brightness; brightness >= 0; brightness -= 2) {
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	3b02      	subs	r3, #2
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	dada      	bge.n	800119c <main+0x17c>
                }
            }
            break;
 80011e6:	e0e6      	b.n	80013b6 <main+0x396>
            
        case EFFECT_RAINBOW:
            Rainbow_Effect(current_speed);
 80011e8:	4b58      	ldr	r3, [pc, #352]	@ (800134c <main+0x32c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff fceb 	bl	8000bc8 <Rainbow_Effect>
            // Rainbow effect handles its own brightness, but we can limit it
            break;
 80011f2:	e0e0      	b.n	80013b6 <main+0x396>
            
        case EFFECT_RUN:
            Pixel_Run_Effect(current_speed, color_values[current_color][0], 
 80011f4:	4b55      	ldr	r3, [pc, #340]	@ (800134c <main+0x32c>)
 80011f6:	6818      	ldr	r0, [r3, #0]
 80011f8:	4b52      	ldr	r3, [pc, #328]	@ (8001344 <main+0x324>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	4952      	ldr	r1, [pc, #328]	@ (8001348 <main+0x328>)
 80011fe:	4613      	mov	r3, r2
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	4413      	add	r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	440b      	add	r3, r1
 8001208:	6819      	ldr	r1, [r3, #0]
 800120a:	4b4e      	ldr	r3, [pc, #312]	@ (8001344 <main+0x324>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	4c4e      	ldr	r4, [pc, #312]	@ (8001348 <main+0x328>)
 8001210:	4613      	mov	r3, r2
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	4413      	add	r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	4423      	add	r3, r4
 800121a:	3304      	adds	r3, #4
 800121c:	681c      	ldr	r4, [r3, #0]
 800121e:	4b49      	ldr	r3, [pc, #292]	@ (8001344 <main+0x324>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	4d49      	ldr	r5, [pc, #292]	@ (8001348 <main+0x328>)
 8001224:	4613      	mov	r3, r2
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	4413      	add	r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	442b      	add	r3, r5
 800122e:	3308      	adds	r3, #8
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4622      	mov	r2, r4
 8001234:	f7ff fdbc 	bl	8000db0 <Pixel_Run_Effect>
                           color_values[current_color][1], 
                           color_values[current_color][2]);
            break;
 8001238:	e0bd      	b.n	80013b6 <main+0x396>
            
        case EFFECT_FLASHING:
            Set_All_LEDs_Same_Color(color_values[current_color][0], 
 800123a:	4b42      	ldr	r3, [pc, #264]	@ (8001344 <main+0x324>)
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	4942      	ldr	r1, [pc, #264]	@ (8001348 <main+0x328>)
 8001240:	4613      	mov	r3, r2
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	4413      	add	r3, r2
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	440b      	add	r3, r1
 800124a:	6818      	ldr	r0, [r3, #0]
 800124c:	4b3d      	ldr	r3, [pc, #244]	@ (8001344 <main+0x324>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	493d      	ldr	r1, [pc, #244]	@ (8001348 <main+0x328>)
 8001252:	4613      	mov	r3, r2
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	4413      	add	r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	440b      	add	r3, r1
 800125c:	3304      	adds	r3, #4
 800125e:	6819      	ldr	r1, [r3, #0]
 8001260:	4b38      	ldr	r3, [pc, #224]	@ (8001344 <main+0x324>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	4c38      	ldr	r4, [pc, #224]	@ (8001348 <main+0x328>)
 8001266:	4613      	mov	r3, r2
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	4413      	add	r3, r2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	4423      	add	r3, r4
 8001270:	3308      	adds	r3, #8
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	461a      	mov	r2, r3
 8001276:	f7ff fbb9 	bl	80009ec <Set_All_LEDs_Same_Color>
                                  color_values[current_color][1], 
                                  color_values[current_color][2]);
            Set_Brightness(current_brightness);
 800127a:	4b35      	ldr	r3, [pc, #212]	@ (8001350 <main+0x330>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fbce 	bl	8000a20 <Set_Brightness>
            WS2812_Send();
 8001284:	f7ff fc1a 	bl	8000abc <WS2812_Send>
            HAL_Delay((LED_DELAY * 30) / current_speed);
 8001288:	4b30      	ldr	r3, [pc, #192]	@ (800134c <main+0x32c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001290:	fb92 f3f3 	sdiv	r3, r2, r3
 8001294:	4618      	mov	r0, r3
 8001296:	f000 fb9f 	bl	80019d8 <HAL_Delay>
            
            // Check keypad during flash ON
            char key_flash_on = Keypad_Read();
 800129a:	f7ff fa23 	bl	80006e4 <Keypad_Read>
 800129e:	4603      	mov	r3, r0
 80012a0:	713b      	strb	r3, [r7, #4]
            if(key_flash_on != 0) {
 80012a2:	793b      	ldrb	r3, [r7, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d00a      	beq.n	80012be <main+0x29e>
                Process_Keypad_Input(key_flash_on);
 80012a8:	793b      	ldrb	r3, [r7, #4]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fa94 	bl	80007d8 <Process_Keypad_Input>
                Update_LCD_Display();
 80012b0:	f7ff f9ba 	bl	8000628 <Update_LCD_Display>
                last_lcd_update = HAL_GetTick();
 80012b4:	f000 fb86 	bl	80019c4 <HAL_GetTick>
 80012b8:	4603      	mov	r3, r0
 80012ba:	4a20      	ldr	r2, [pc, #128]	@ (800133c <main+0x31c>)
 80012bc:	6013      	str	r3, [r2, #0]
            }
            
            Set_Brightness(0);
 80012be:	2000      	movs	r0, #0
 80012c0:	f7ff fbae 	bl	8000a20 <Set_Brightness>
            WS2812_Send();
 80012c4:	f7ff fbfa 	bl	8000abc <WS2812_Send>
            HAL_Delay((LED_DELAY * 30) / current_speed);
 80012c8:	4b20      	ldr	r3, [pc, #128]	@ (800134c <main+0x32c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80012d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80012d4:	4618      	mov	r0, r3
 80012d6:	f000 fb7f 	bl	80019d8 <HAL_Delay>
            
            // Check keypad during flash OFF
            char key_flash_off = Keypad_Read();
 80012da:	f7ff fa03 	bl	80006e4 <Keypad_Read>
 80012de:	4603      	mov	r3, r0
 80012e0:	70fb      	strb	r3, [r7, #3]
            if(key_flash_off != 0) {
 80012e2:	78fb      	ldrb	r3, [r7, #3]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d061      	beq.n	80013ac <main+0x38c>
                Process_Keypad_Input(key_flash_off);
 80012e8:	78fb      	ldrb	r3, [r7, #3]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff fa74 	bl	80007d8 <Process_Keypad_Input>
                Update_LCD_Display();
 80012f0:	f7ff f99a 	bl	8000628 <Update_LCD_Display>
                last_lcd_update = HAL_GetTick();
 80012f4:	f000 fb66 	bl	80019c4 <HAL_GetTick>
 80012f8:	4603      	mov	r3, r0
 80012fa:	4a10      	ldr	r2, [pc, #64]	@ (800133c <main+0x31c>)
 80012fc:	6013      	str	r3, [r2, #0]
            }
            break;
 80012fe:	e055      	b.n	80013ac <main+0x38c>
            
        case EFFECT_OFF:
            All_LEDs_Off();
 8001300:	f7ff fda6 	bl	8000e50 <All_LEDs_Off>
            HAL_Delay(100);
 8001304:	2064      	movs	r0, #100	@ 0x64
 8001306:	f000 fb67 	bl	80019d8 <HAL_Delay>
            
            // Check keypad when OFF
            char key_off = Keypad_Read();
 800130a:	f7ff f9eb 	bl	80006e4 <Keypad_Read>
 800130e:	4603      	mov	r3, r0
 8001310:	717b      	strb	r3, [r7, #5]
            if(key_off != 0) {
 8001312:	797b      	ldrb	r3, [r7, #5]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d04b      	beq.n	80013b0 <main+0x390>
                Process_Keypad_Input(key_off);
 8001318:	797b      	ldrb	r3, [r7, #5]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff fa5c 	bl	80007d8 <Process_Keypad_Input>
                Update_LCD_Display();
 8001320:	f7ff f982 	bl	8000628 <Update_LCD_Display>
                last_lcd_update = HAL_GetTick();
 8001324:	f000 fb4e 	bl	80019c4 <HAL_GetTick>
 8001328:	4603      	mov	r3, r0
 800132a:	4a04      	ldr	r2, [pc, #16]	@ (800133c <main+0x31c>)
 800132c:	6013      	str	r3, [r2, #0]
            }
            break;
 800132e:	e03f      	b.n	80013b0 <main+0x390>
 8001330:	0800489c 	.word	0x0800489c
 8001334:	080048ac 	.word	0x080048ac
 8001338:	080048bc 	.word	0x080048bc
 800133c:	20000198 	.word	0x20000198
 8001340:	20000074 	.word	0x20000074
 8001344:	20000380 	.word	0x20000380
 8001348:	20000000 	.word	0x20000000
 800134c:	2000007c 	.word	0x2000007c
 8001350:	20000080 	.word	0x20000080
            
        case EFFECT_MUSIC:
            if(HAL_GetTick() - last_music_update > MUSIC_UPDATE_INTERVAL) {
 8001354:	f000 fb36 	bl	80019c4 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	4b17      	ldr	r3, [pc, #92]	@ (80013b8 <main+0x398>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b32      	cmp	r3, #50	@ 0x32
 8001362:	d90a      	bls.n	800137a <main+0x35a>
                // Debug: Show music status on LCD
                Debug_Music_Mode();
 8001364:	f7ff fe14 	bl	8000f90 <Debug_Music_Mode>
                
                // Debug: Built-in LED follows GPIO state
                Debug_Music_GPIO();
 8001368:	f7ff fdf2 	bl	8000f50 <Debug_Music_GPIO>
                
                // Main music effect
                Music_Effect();         // Beat flash style
 800136c:	f7ff fd94 	bl	8000e98 <Music_Effect>
                // Music_VU_Effect();   // VU meter style (uncomment để dùng)
                // Test_Music_Mode_Fake(); // Fake test (uncomment để test không cần audio)
                
                last_music_update = HAL_GetTick();
 8001370:	f000 fb28 	bl	80019c4 <HAL_GetTick>
 8001374:	4603      	mov	r3, r0
 8001376:	4a10      	ldr	r2, [pc, #64]	@ (80013b8 <main+0x398>)
 8001378:	6013      	str	r3, [r2, #0]
            }
            
            // Check keypad during music effect
            char key_music = Keypad_Read();
 800137a:	f7ff f9b3 	bl	80006e4 <Keypad_Read>
 800137e:	4603      	mov	r3, r0
 8001380:	71bb      	strb	r3, [r7, #6]
            if(key_music != 0) {
 8001382:	79bb      	ldrb	r3, [r7, #6]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d015      	beq.n	80013b4 <main+0x394>
                Process_Keypad_Input(key_music);
 8001388:	79bb      	ldrb	r3, [r7, #6]
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fa24 	bl	80007d8 <Process_Keypad_Input>
                Update_LCD_Display();
 8001390:	f7ff f94a 	bl	8000628 <Update_LCD_Display>
                last_lcd_update = HAL_GetTick();
 8001394:	f000 fb16 	bl	80019c4 <HAL_GetTick>
 8001398:	4603      	mov	r3, r0
 800139a:	4a08      	ldr	r2, [pc, #32]	@ (80013bc <main+0x39c>)
 800139c:	6013      	str	r3, [r2, #0]
            }
            break;
 800139e:	e009      	b.n	80013b4 <main+0x394>
            
        default:
            All_LEDs_Off();
 80013a0:	f7ff fd56 	bl	8000e50 <All_LEDs_Off>
            HAL_Delay(100);
 80013a4:	2064      	movs	r0, #100	@ 0x64
 80013a6:	f000 fb17 	bl	80019d8 <HAL_Delay>
            break;
 80013aa:	e004      	b.n	80013b6 <main+0x396>
            break;
 80013ac:	bf00      	nop
 80013ae:	e671      	b.n	8001094 <main+0x74>
            break;
 80013b0:	bf00      	nop
 80013b2:	e66f      	b.n	8001094 <main+0x74>
            break;
 80013b4:	bf00      	nop
  {
 80013b6:	e66d      	b.n	8001094 <main+0x74>
 80013b8:	20000100 	.word	0x20000100
 80013bc:	20000198 	.word	0x20000198

080013c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b090      	sub	sp, #64	@ 0x40
 80013c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013c6:	f107 0318 	add.w	r3, r7, #24
 80013ca:	2228      	movs	r2, #40	@ 0x28
 80013cc:	2100      	movs	r1, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f002 fd3e 	bl	8003e50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]
 80013e0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013e2:	2301      	movs	r3, #1
 80013e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013ec:	2300      	movs	r3, #0
 80013ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013f0:	2301      	movs	r3, #1
 80013f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013f4:	2302      	movs	r3, #2
 80013f6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013fe:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001402:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001404:	f107 0318 	add.w	r3, r7, #24
 8001408:	4618      	mov	r0, r3
 800140a:	f001 f831 	bl	8002470 <HAL_RCC_OscConfig>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001414:	f000 f930 	bl	8001678 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001418:	230f      	movs	r3, #15
 800141a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800141c:	2302      	movs	r3, #2
 800141e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001424:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001428:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800142a:	2300      	movs	r3, #0
 800142c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800142e:	1d3b      	adds	r3, r7, #4
 8001430:	2102      	movs	r1, #2
 8001432:	4618      	mov	r0, r3
 8001434:	f001 fa9e 	bl	8002974 <HAL_RCC_ClockConfig>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800143e:	f000 f91b 	bl	8001678 <Error_Handler>
  }
}
 8001442:	bf00      	nop
 8001444:	3740      	adds	r7, #64	@ 0x40
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b096      	sub	sp, #88	@ 0x58
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001452:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001460:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800146a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
 8001478:	611a      	str	r2, [r3, #16]
 800147a:	615a      	str	r2, [r3, #20]
 800147c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	2220      	movs	r2, #32
 8001482:	2100      	movs	r1, #0
 8001484:	4618      	mov	r0, r3
 8001486:	f002 fce3 	bl	8003e50 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800148a:	4b3e      	ldr	r3, [pc, #248]	@ (8001584 <MX_TIM1_Init+0x138>)
 800148c:	4a3e      	ldr	r2, [pc, #248]	@ (8001588 <MX_TIM1_Init+0x13c>)
 800148e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001490:	4b3c      	ldr	r3, [pc, #240]	@ (8001584 <MX_TIM1_Init+0x138>)
 8001492:	2200      	movs	r2, #0
 8001494:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001496:	4b3b      	ldr	r3, [pc, #236]	@ (8001584 <MX_TIM1_Init+0x138>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 800149c:	4b39      	ldr	r3, [pc, #228]	@ (8001584 <MX_TIM1_Init+0x138>)
 800149e:	2259      	movs	r2, #89	@ 0x59
 80014a0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a2:	4b38      	ldr	r3, [pc, #224]	@ (8001584 <MX_TIM1_Init+0x138>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014a8:	4b36      	ldr	r3, [pc, #216]	@ (8001584 <MX_TIM1_Init+0x138>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ae:	4b35      	ldr	r3, [pc, #212]	@ (8001584 <MX_TIM1_Init+0x138>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014b4:	4833      	ldr	r0, [pc, #204]	@ (8001584 <MX_TIM1_Init+0x138>)
 80014b6:	f001 fbb9 	bl	8002c2c <HAL_TIM_Base_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80014c0:	f000 f8da 	bl	8001678 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014ca:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80014ce:	4619      	mov	r1, r3
 80014d0:	482c      	ldr	r0, [pc, #176]	@ (8001584 <MX_TIM1_Init+0x138>)
 80014d2:	f001 ff7d 	bl	80033d0 <HAL_TIM_ConfigClockSource>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80014dc:	f000 f8cc 	bl	8001678 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014e0:	4828      	ldr	r0, [pc, #160]	@ (8001584 <MX_TIM1_Init+0x138>)
 80014e2:	f001 fbf2 	bl	8002cca <HAL_TIM_PWM_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80014ec:	f000 f8c4 	bl	8001678 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f0:	2300      	movs	r3, #0
 80014f2:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f4:	2300      	movs	r3, #0
 80014f6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014f8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80014fc:	4619      	mov	r1, r3
 80014fe:	4821      	ldr	r0, [pc, #132]	@ (8001584 <MX_TIM1_Init+0x138>)
 8001500:	f002 fbc0 	bl	8003c84 <HAL_TIMEx_MasterConfigSynchronization>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800150a:	f000 f8b5 	bl	8001678 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800150e:	2360      	movs	r3, #96	@ 0x60
 8001510:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001512:	2300      	movs	r3, #0
 8001514:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001516:	2300      	movs	r3, #0
 8001518:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800151a:	2300      	movs	r3, #0
 800151c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800151e:	2300      	movs	r3, #0
 8001520:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001522:	2300      	movs	r3, #0
 8001524:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001526:	2300      	movs	r3, #0
 8001528:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800152a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800152e:	2200      	movs	r2, #0
 8001530:	4619      	mov	r1, r3
 8001532:	4814      	ldr	r0, [pc, #80]	@ (8001584 <MX_TIM1_Init+0x138>)
 8001534:	f001 fe8a 	bl	800324c <HAL_TIM_PWM_ConfigChannel>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800153e:	f000 f89b 	bl	8001678 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001542:	2300      	movs	r3, #0
 8001544:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001546:	2300      	movs	r3, #0
 8001548:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800154e:	2300      	movs	r3, #0
 8001550:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001556:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800155a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800155c:	2300      	movs	r3, #0
 800155e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	4619      	mov	r1, r3
 8001564:	4807      	ldr	r0, [pc, #28]	@ (8001584 <MX_TIM1_Init+0x138>)
 8001566:	f002 fbeb 	bl	8003d40 <HAL_TIMEx_ConfigBreakDeadTime>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001570:	f000 f882 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001574:	4803      	ldr	r0, [pc, #12]	@ (8001584 <MX_TIM1_Init+0x138>)
 8001576:	f000 f901 	bl	800177c <HAL_TIM_MspPostInit>

}
 800157a:	bf00      	nop
 800157c:	3758      	adds	r7, #88	@ 0x58
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	2000010c 	.word	0x2000010c
 8001588:	40012c00 	.word	0x40012c00

0800158c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001592:	4b0c      	ldr	r3, [pc, #48]	@ (80015c4 <MX_DMA_Init+0x38>)
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	4a0b      	ldr	r2, [pc, #44]	@ (80015c4 <MX_DMA_Init+0x38>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	6153      	str	r3, [r2, #20]
 800159e:	4b09      	ldr	r3, [pc, #36]	@ (80015c4 <MX_DMA_Init+0x38>)
 80015a0:	695b      	ldr	r3, [r3, #20]
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80015aa:	2200      	movs	r2, #0
 80015ac:	2100      	movs	r1, #0
 80015ae:	200c      	movs	r0, #12
 80015b0:	f000 fb0d 	bl	8001bce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80015b4:	200c      	movs	r0, #12
 80015b6:	f000 fb26 	bl	8001c06 <HAL_NVIC_EnableIRQ>

}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40021000 	.word	0x40021000

080015c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b088      	sub	sp, #32
 80015cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ce:	f107 0310 	add.w	r3, r7, #16
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	609a      	str	r2, [r3, #8]
 80015da:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015dc:	4b24      	ldr	r3, [pc, #144]	@ (8001670 <MX_GPIO_Init+0xa8>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	4a23      	ldr	r2, [pc, #140]	@ (8001670 <MX_GPIO_Init+0xa8>)
 80015e2:	f043 0310 	orr.w	r3, r3, #16
 80015e6:	6193      	str	r3, [r2, #24]
 80015e8:	4b21      	ldr	r3, [pc, #132]	@ (8001670 <MX_GPIO_Init+0xa8>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	f003 0310 	and.w	r3, r3, #16
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001670 <MX_GPIO_Init+0xa8>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001670 <MX_GPIO_Init+0xa8>)
 80015fa:	f043 0320 	orr.w	r3, r3, #32
 80015fe:	6193      	str	r3, [r2, #24]
 8001600:	4b1b      	ldr	r3, [pc, #108]	@ (8001670 <MX_GPIO_Init+0xa8>)
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	f003 0320 	and.w	r3, r3, #32
 8001608:	60bb      	str	r3, [r7, #8]
 800160a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800160c:	4b18      	ldr	r3, [pc, #96]	@ (8001670 <MX_GPIO_Init+0xa8>)
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	4a17      	ldr	r2, [pc, #92]	@ (8001670 <MX_GPIO_Init+0xa8>)
 8001612:	f043 0304 	orr.w	r3, r3, #4
 8001616:	6193      	str	r3, [r2, #24]
 8001618:	4b15      	ldr	r3, [pc, #84]	@ (8001670 <MX_GPIO_Init+0xa8>)
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	607b      	str	r3, [r7, #4]
 8001622:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001624:	2200      	movs	r2, #0
 8001626:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800162a:	4812      	ldr	r0, [pc, #72]	@ (8001674 <MX_GPIO_Init+0xac>)
 800162c:	f000 ff07 	bl	800243e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001630:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001634:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001636:	2301      	movs	r3, #1
 8001638:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163e:	2302      	movs	r3, #2
 8001640:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001642:	f107 0310 	add.w	r3, r7, #16
 8001646:	4619      	mov	r1, r3
 8001648:	480a      	ldr	r0, [pc, #40]	@ (8001674 <MX_GPIO_Init+0xac>)
 800164a:	f000 fd5d 	bl	8002108 <HAL_GPIO_Init>
  
  /*Configure GPIO pin PC15 for GYMAX4466 sound detection */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800164e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001652:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001658:	2302      	movs	r3, #2
 800165a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800165c:	f107 0310 	add.w	r3, r7, #16
 8001660:	4619      	mov	r1, r3
 8001662:	4804      	ldr	r0, [pc, #16]	@ (8001674 <MX_GPIO_Init+0xac>)
 8001664:	f000 fd50 	bl	8002108 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001668:	bf00      	nop
 800166a:	3720      	adds	r7, #32
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40021000 	.word	0x40021000
 8001674:	40011000 	.word	0x40011000

08001678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800167c:	b672      	cpsid	i
}
 800167e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001680:	bf00      	nop
 8001682:	e7fd      	b.n	8001680 <Error_Handler+0x8>

08001684 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800168a:	4b15      	ldr	r3, [pc, #84]	@ (80016e0 <HAL_MspInit+0x5c>)
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	4a14      	ldr	r2, [pc, #80]	@ (80016e0 <HAL_MspInit+0x5c>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6193      	str	r3, [r2, #24]
 8001696:	4b12      	ldr	r3, [pc, #72]	@ (80016e0 <HAL_MspInit+0x5c>)
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a2:	4b0f      	ldr	r3, [pc, #60]	@ (80016e0 <HAL_MspInit+0x5c>)
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	4a0e      	ldr	r2, [pc, #56]	@ (80016e0 <HAL_MspInit+0x5c>)
 80016a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016ac:	61d3      	str	r3, [r2, #28]
 80016ae:	4b0c      	ldr	r3, [pc, #48]	@ (80016e0 <HAL_MspInit+0x5c>)
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016b6:	607b      	str	r3, [r7, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016ba:	4b0a      	ldr	r3, [pc, #40]	@ (80016e4 <HAL_MspInit+0x60>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	4a04      	ldr	r2, [pc, #16]	@ (80016e4 <HAL_MspInit+0x60>)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016d6:	bf00      	nop
 80016d8:	3714      	adds	r7, #20
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr
 80016e0:	40021000 	.word	0x40021000
 80016e4:	40010000 	.word	0x40010000

080016e8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a1d      	ldr	r2, [pc, #116]	@ (800176c <HAL_TIM_Base_MspInit+0x84>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d133      	bne.n	8001762 <HAL_TIM_Base_MspInit+0x7a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001770 <HAL_TIM_Base_MspInit+0x88>)
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001770 <HAL_TIM_Base_MspInit+0x88>)
 8001700:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001704:	6193      	str	r3, [r2, #24]
 8001706:	4b1a      	ldr	r3, [pc, #104]	@ (8001770 <HAL_TIM_Base_MspInit+0x88>)
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8001712:	4b18      	ldr	r3, [pc, #96]	@ (8001774 <HAL_TIM_Base_MspInit+0x8c>)
 8001714:	4a18      	ldr	r2, [pc, #96]	@ (8001778 <HAL_TIM_Base_MspInit+0x90>)
 8001716:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001718:	4b16      	ldr	r3, [pc, #88]	@ (8001774 <HAL_TIM_Base_MspInit+0x8c>)
 800171a:	2210      	movs	r2, #16
 800171c:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800171e:	4b15      	ldr	r3, [pc, #84]	@ (8001774 <HAL_TIM_Base_MspInit+0x8c>)
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001724:	4b13      	ldr	r3, [pc, #76]	@ (8001774 <HAL_TIM_Base_MspInit+0x8c>)
 8001726:	2280      	movs	r2, #128	@ 0x80
 8001728:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800172a:	4b12      	ldr	r3, [pc, #72]	@ (8001774 <HAL_TIM_Base_MspInit+0x8c>)
 800172c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001730:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001732:	4b10      	ldr	r3, [pc, #64]	@ (8001774 <HAL_TIM_Base_MspInit+0x8c>)
 8001734:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001738:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 800173a:	4b0e      	ldr	r3, [pc, #56]	@ (8001774 <HAL_TIM_Base_MspInit+0x8c>)
 800173c:	2200      	movs	r2, #0
 800173e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001740:	4b0c      	ldr	r3, [pc, #48]	@ (8001774 <HAL_TIM_Base_MspInit+0x8c>)
 8001742:	2200      	movs	r2, #0
 8001744:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001746:	480b      	ldr	r0, [pc, #44]	@ (8001774 <HAL_TIM_Base_MspInit+0x8c>)
 8001748:	f000 fa78 	bl	8001c3c <HAL_DMA_Init>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8001752:	f7ff ff91 	bl	8001678 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a06      	ldr	r2, [pc, #24]	@ (8001774 <HAL_TIM_Base_MspInit+0x8c>)
 800175a:	625a      	str	r2, [r3, #36]	@ 0x24
 800175c:	4a05      	ldr	r2, [pc, #20]	@ (8001774 <HAL_TIM_Base_MspInit+0x8c>)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001762:	bf00      	nop
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40012c00 	.word	0x40012c00
 8001770:	40021000 	.word	0x40021000
 8001774:	20000154 	.word	0x20000154
 8001778:	4002001c 	.word	0x4002001c

0800177c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b088      	sub	sp, #32
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001784:	f107 0310 	add.w	r3, r7, #16
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a10      	ldr	r2, [pc, #64]	@ (80017d8 <HAL_TIM_MspPostInit+0x5c>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d118      	bne.n	80017ce <HAL_TIM_MspPostInit+0x52>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179c:	4b0f      	ldr	r3, [pc, #60]	@ (80017dc <HAL_TIM_MspPostInit+0x60>)
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	4a0e      	ldr	r2, [pc, #56]	@ (80017dc <HAL_TIM_MspPostInit+0x60>)
 80017a2:	f043 0304 	orr.w	r3, r3, #4
 80017a6:	6193      	str	r3, [r2, #24]
 80017a8:	4b0c      	ldr	r3, [pc, #48]	@ (80017dc <HAL_TIM_MspPostInit+0x60>)
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80017b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ba:	2302      	movs	r3, #2
 80017bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017be:	2302      	movs	r3, #2
 80017c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c2:	f107 0310 	add.w	r3, r7, #16
 80017c6:	4619      	mov	r1, r3
 80017c8:	4805      	ldr	r0, [pc, #20]	@ (80017e0 <HAL_TIM_MspPostInit+0x64>)
 80017ca:	f000 fc9d 	bl	8002108 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80017ce:	bf00      	nop
 80017d0:	3720      	adds	r7, #32
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40012c00 	.word	0x40012c00
 80017dc:	40021000 	.word	0x40021000
 80017e0:	40010800 	.word	0x40010800

080017e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017e8:	bf00      	nop
 80017ea:	e7fd      	b.n	80017e8 <NMI_Handler+0x4>

080017ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017f0:	bf00      	nop
 80017f2:	e7fd      	b.n	80017f0 <HardFault_Handler+0x4>

080017f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f8:	bf00      	nop
 80017fa:	e7fd      	b.n	80017f8 <MemManage_Handler+0x4>

080017fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001800:	bf00      	nop
 8001802:	e7fd      	b.n	8001800 <BusFault_Handler+0x4>

08001804 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001808:	bf00      	nop
 800180a:	e7fd      	b.n	8001808 <UsageFault_Handler+0x4>

0800180c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr

08001818 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr

08001824 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr

08001830 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001834:	f000 f8b4 	bl	80019a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}

0800183c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001840:	4802      	ldr	r0, [pc, #8]	@ (800184c <DMA1_Channel2_IRQHandler+0x10>)
 8001842:	f000 fb2d 	bl	8001ea0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000154 	.word	0x20000154

08001850 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001858:	4a14      	ldr	r2, [pc, #80]	@ (80018ac <_sbrk+0x5c>)
 800185a:	4b15      	ldr	r3, [pc, #84]	@ (80018b0 <_sbrk+0x60>)
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001864:	4b13      	ldr	r3, [pc, #76]	@ (80018b4 <_sbrk+0x64>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d102      	bne.n	8001872 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800186c:	4b11      	ldr	r3, [pc, #68]	@ (80018b4 <_sbrk+0x64>)
 800186e:	4a12      	ldr	r2, [pc, #72]	@ (80018b8 <_sbrk+0x68>)
 8001870:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001872:	4b10      	ldr	r3, [pc, #64]	@ (80018b4 <_sbrk+0x64>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	429a      	cmp	r2, r3
 800187e:	d207      	bcs.n	8001890 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001880:	f002 faee 	bl	8003e60 <__errno>
 8001884:	4603      	mov	r3, r0
 8001886:	220c      	movs	r2, #12
 8001888:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800188a:	f04f 33ff 	mov.w	r3, #4294967295
 800188e:	e009      	b.n	80018a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001890:	4b08      	ldr	r3, [pc, #32]	@ (80018b4 <_sbrk+0x64>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001896:	4b07      	ldr	r3, [pc, #28]	@ (80018b4 <_sbrk+0x64>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4413      	add	r3, r2
 800189e:	4a05      	ldr	r2, [pc, #20]	@ (80018b4 <_sbrk+0x64>)
 80018a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018a2:	68fb      	ldr	r3, [r7, #12]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20005000 	.word	0x20005000
 80018b0:	00000400 	.word	0x00000400
 80018b4:	20000f28 	.word	0x20000f28
 80018b8:	20001078 	.word	0x20001078

080018bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr

080018c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018c8:	f7ff fff8 	bl	80018bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018cc:	480b      	ldr	r0, [pc, #44]	@ (80018fc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80018ce:	490c      	ldr	r1, [pc, #48]	@ (8001900 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80018d0:	4a0c      	ldr	r2, [pc, #48]	@ (8001904 <LoopFillZerobss+0x16>)
  movs r3, #0
 80018d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018d4:	e002      	b.n	80018dc <LoopCopyDataInit>

080018d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018da:	3304      	adds	r3, #4

080018dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e0:	d3f9      	bcc.n	80018d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018e2:	4a09      	ldr	r2, [pc, #36]	@ (8001908 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80018e4:	4c09      	ldr	r4, [pc, #36]	@ (800190c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018e8:	e001      	b.n	80018ee <LoopFillZerobss>

080018ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018ec:	3204      	adds	r2, #4

080018ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f0:	d3fb      	bcc.n	80018ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018f2:	f002 fabb 	bl	8003e6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018f6:	f7ff fb93 	bl	8001020 <main>
  bx lr
 80018fa:	4770      	bx	lr
  ldr r0, =_sdata
 80018fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001900:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 8001904:	08004930 	.word	0x08004930
  ldr r2, =_sbss
 8001908:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 800190c:	20001078 	.word	0x20001078

08001910 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001910:	e7fe      	b.n	8001910 <ADC1_2_IRQHandler>
	...

08001914 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001918:	4b08      	ldr	r3, [pc, #32]	@ (800193c <HAL_Init+0x28>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a07      	ldr	r2, [pc, #28]	@ (800193c <HAL_Init+0x28>)
 800191e:	f043 0310 	orr.w	r3, r3, #16
 8001922:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001924:	2003      	movs	r0, #3
 8001926:	f000 f947 	bl	8001bb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800192a:	200f      	movs	r0, #15
 800192c:	f000 f808 	bl	8001940 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001930:	f7ff fea8 	bl	8001684 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40022000 	.word	0x40022000

08001940 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001948:	4b12      	ldr	r3, [pc, #72]	@ (8001994 <HAL_InitTick+0x54>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	4b12      	ldr	r3, [pc, #72]	@ (8001998 <HAL_InitTick+0x58>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	4619      	mov	r1, r3
 8001952:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001956:	fbb3 f3f1 	udiv	r3, r3, r1
 800195a:	fbb2 f3f3 	udiv	r3, r2, r3
 800195e:	4618      	mov	r0, r3
 8001960:	f000 f95f 	bl	8001c22 <HAL_SYSTICK_Config>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e00e      	b.n	800198c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2b0f      	cmp	r3, #15
 8001972:	d80a      	bhi.n	800198a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001974:	2200      	movs	r2, #0
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	f04f 30ff 	mov.w	r0, #4294967295
 800197c:	f000 f927 	bl	8001bce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001980:	4a06      	ldr	r2, [pc, #24]	@ (800199c <HAL_InitTick+0x5c>)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001986:	2300      	movs	r3, #0
 8001988:	e000      	b.n	800198c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
}
 800198c:	4618      	mov	r0, r3
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20000084 	.word	0x20000084
 8001998:	2000008c 	.word	0x2000008c
 800199c:	20000088 	.word	0x20000088

080019a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019a4:	4b05      	ldr	r3, [pc, #20]	@ (80019bc <HAL_IncTick+0x1c>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	461a      	mov	r2, r3
 80019aa:	4b05      	ldr	r3, [pc, #20]	@ (80019c0 <HAL_IncTick+0x20>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4413      	add	r3, r2
 80019b0:	4a03      	ldr	r2, [pc, #12]	@ (80019c0 <HAL_IncTick+0x20>)
 80019b2:	6013      	str	r3, [r2, #0]
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr
 80019bc:	2000008c 	.word	0x2000008c
 80019c0:	20000f2c 	.word	0x20000f2c

080019c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  return uwTick;
 80019c8:	4b02      	ldr	r3, [pc, #8]	@ (80019d4 <HAL_GetTick+0x10>)
 80019ca:	681b      	ldr	r3, [r3, #0]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr
 80019d4:	20000f2c 	.word	0x20000f2c

080019d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019e0:	f7ff fff0 	bl	80019c4 <HAL_GetTick>
 80019e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019f0:	d005      	beq.n	80019fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019f2:	4b0a      	ldr	r3, [pc, #40]	@ (8001a1c <HAL_Delay+0x44>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	461a      	mov	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	4413      	add	r3, r2
 80019fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019fe:	bf00      	nop
 8001a00:	f7ff ffe0 	bl	80019c4 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d8f7      	bhi.n	8001a00 <HAL_Delay+0x28>
  {
  }
}
 8001a10:	bf00      	nop
 8001a12:	bf00      	nop
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	2000008c 	.word	0x2000008c

08001a20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a30:	4b0c      	ldr	r3, [pc, #48]	@ (8001a64 <__NVIC_SetPriorityGrouping+0x44>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a36:	68ba      	ldr	r2, [r7, #8]
 8001a38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a52:	4a04      	ldr	r2, [pc, #16]	@ (8001a64 <__NVIC_SetPriorityGrouping+0x44>)
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	60d3      	str	r3, [r2, #12]
}
 8001a58:	bf00      	nop
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a6c:	4b04      	ldr	r3, [pc, #16]	@ (8001a80 <__NVIC_GetPriorityGrouping+0x18>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	0a1b      	lsrs	r3, r3, #8
 8001a72:	f003 0307 	and.w	r3, r3, #7
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc80      	pop	{r7}
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	db0b      	blt.n	8001aae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	f003 021f 	and.w	r2, r3, #31
 8001a9c:	4906      	ldr	r1, [pc, #24]	@ (8001ab8 <__NVIC_EnableIRQ+0x34>)
 8001a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa2:	095b      	lsrs	r3, r3, #5
 8001aa4:	2001      	movs	r0, #1
 8001aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr
 8001ab8:	e000e100 	.word	0xe000e100

08001abc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	6039      	str	r1, [r7, #0]
 8001ac6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	db0a      	blt.n	8001ae6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	490c      	ldr	r1, [pc, #48]	@ (8001b08 <__NVIC_SetPriority+0x4c>)
 8001ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ada:	0112      	lsls	r2, r2, #4
 8001adc:	b2d2      	uxtb	r2, r2
 8001ade:	440b      	add	r3, r1
 8001ae0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ae4:	e00a      	b.n	8001afc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	4908      	ldr	r1, [pc, #32]	@ (8001b0c <__NVIC_SetPriority+0x50>)
 8001aec:	79fb      	ldrb	r3, [r7, #7]
 8001aee:	f003 030f 	and.w	r3, r3, #15
 8001af2:	3b04      	subs	r3, #4
 8001af4:	0112      	lsls	r2, r2, #4
 8001af6:	b2d2      	uxtb	r2, r2
 8001af8:	440b      	add	r3, r1
 8001afa:	761a      	strb	r2, [r3, #24]
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bc80      	pop	{r7}
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	e000e100 	.word	0xe000e100
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b089      	sub	sp, #36	@ 0x24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	f1c3 0307 	rsb	r3, r3, #7
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	bf28      	it	cs
 8001b2e:	2304      	movcs	r3, #4
 8001b30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	3304      	adds	r3, #4
 8001b36:	2b06      	cmp	r3, #6
 8001b38:	d902      	bls.n	8001b40 <NVIC_EncodePriority+0x30>
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	3b03      	subs	r3, #3
 8001b3e:	e000      	b.n	8001b42 <NVIC_EncodePriority+0x32>
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b44:	f04f 32ff 	mov.w	r2, #4294967295
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	43da      	mvns	r2, r3
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	401a      	ands	r2, r3
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b58:	f04f 31ff 	mov.w	r1, #4294967295
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b62:	43d9      	mvns	r1, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b68:	4313      	orrs	r3, r2
         );
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3724      	adds	r7, #36	@ 0x24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr

08001b74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b84:	d301      	bcc.n	8001b8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b86:	2301      	movs	r3, #1
 8001b88:	e00f      	b.n	8001baa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001bb4 <SysTick_Config+0x40>)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b92:	210f      	movs	r1, #15
 8001b94:	f04f 30ff 	mov.w	r0, #4294967295
 8001b98:	f7ff ff90 	bl	8001abc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b9c:	4b05      	ldr	r3, [pc, #20]	@ (8001bb4 <SysTick_Config+0x40>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ba2:	4b04      	ldr	r3, [pc, #16]	@ (8001bb4 <SysTick_Config+0x40>)
 8001ba4:	2207      	movs	r2, #7
 8001ba6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	e000e010 	.word	0xe000e010

08001bb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f7ff ff2d 	bl	8001a20 <__NVIC_SetPriorityGrouping>
}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b086      	sub	sp, #24
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	60b9      	str	r1, [r7, #8]
 8001bd8:	607a      	str	r2, [r7, #4]
 8001bda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001be0:	f7ff ff42 	bl	8001a68 <__NVIC_GetPriorityGrouping>
 8001be4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	68b9      	ldr	r1, [r7, #8]
 8001bea:	6978      	ldr	r0, [r7, #20]
 8001bec:	f7ff ff90 	bl	8001b10 <NVIC_EncodePriority>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bf6:	4611      	mov	r1, r2
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff ff5f 	bl	8001abc <__NVIC_SetPriority>
}
 8001bfe:	bf00      	nop
 8001c00:	3718      	adds	r7, #24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b082      	sub	sp, #8
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff ff35 	bl	8001a84 <__NVIC_EnableIRQ>
}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b082      	sub	sp, #8
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7ff ffa2 	bl	8001b74 <SysTick_Config>
 8001c30:	4603      	mov	r3, r0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
	...

08001c3c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c44:	2300      	movs	r3, #0
 8001c46:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e043      	b.n	8001cda <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	461a      	mov	r2, r3
 8001c58:	4b22      	ldr	r3, [pc, #136]	@ (8001ce4 <HAL_DMA_Init+0xa8>)
 8001c5a:	4413      	add	r3, r2
 8001c5c:	4a22      	ldr	r2, [pc, #136]	@ (8001ce8 <HAL_DMA_Init+0xac>)
 8001c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c62:	091b      	lsrs	r3, r3, #4
 8001c64:	009a      	lsls	r2, r3, #2
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a1f      	ldr	r2, [pc, #124]	@ (8001cec <HAL_DMA_Init+0xb0>)
 8001c6e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2202      	movs	r2, #2
 8001c74:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001c86:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001c8a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001c94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ca0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3714      	adds	r7, #20
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr
 8001ce4:	bffdfff8 	.word	0xbffdfff8
 8001ce8:	cccccccd 	.word	0xcccccccd
 8001cec:	40020000 	.word	0x40020000

08001cf0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
 8001cfc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d101      	bne.n	8001d10 <HAL_DMA_Start_IT+0x20>
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	e04b      	b.n	8001da8 <HAL_DMA_Start_IT+0xb8>
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d13a      	bne.n	8001d9a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2202      	movs	r2, #2
 8001d28:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 0201 	bic.w	r2, r2, #1
 8001d40:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	68b9      	ldr	r1, [r7, #8]
 8001d48:	68f8      	ldr	r0, [r7, #12]
 8001d4a:	f000 f9af 	bl	80020ac <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d008      	beq.n	8001d68 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f042 020e 	orr.w	r2, r2, #14
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	e00f      	b.n	8001d88 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 0204 	bic.w	r2, r2, #4
 8001d76:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f042 020a 	orr.w	r2, r2, #10
 8001d86:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f042 0201 	orr.w	r2, r2, #1
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	e005      	b.n	8001da6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001da2:	2302      	movs	r3, #2
 8001da4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3718      	adds	r7, #24
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001db8:	2300      	movs	r3, #0
 8001dba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d005      	beq.n	8001dd4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2204      	movs	r2, #4
 8001dcc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	73fb      	strb	r3, [r7, #15]
 8001dd2:	e051      	b.n	8001e78 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 020e 	bic.w	r2, r2, #14
 8001de2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f022 0201 	bic.w	r2, r2, #1
 8001df2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a22      	ldr	r2, [pc, #136]	@ (8001e84 <HAL_DMA_Abort_IT+0xd4>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d029      	beq.n	8001e52 <HAL_DMA_Abort_IT+0xa2>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a21      	ldr	r2, [pc, #132]	@ (8001e88 <HAL_DMA_Abort_IT+0xd8>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d022      	beq.n	8001e4e <HAL_DMA_Abort_IT+0x9e>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a1f      	ldr	r2, [pc, #124]	@ (8001e8c <HAL_DMA_Abort_IT+0xdc>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d01a      	beq.n	8001e48 <HAL_DMA_Abort_IT+0x98>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a1e      	ldr	r2, [pc, #120]	@ (8001e90 <HAL_DMA_Abort_IT+0xe0>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d012      	beq.n	8001e42 <HAL_DMA_Abort_IT+0x92>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a1c      	ldr	r2, [pc, #112]	@ (8001e94 <HAL_DMA_Abort_IT+0xe4>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d00a      	beq.n	8001e3c <HAL_DMA_Abort_IT+0x8c>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a1b      	ldr	r2, [pc, #108]	@ (8001e98 <HAL_DMA_Abort_IT+0xe8>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d102      	bne.n	8001e36 <HAL_DMA_Abort_IT+0x86>
 8001e30:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001e34:	e00e      	b.n	8001e54 <HAL_DMA_Abort_IT+0xa4>
 8001e36:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e3a:	e00b      	b.n	8001e54 <HAL_DMA_Abort_IT+0xa4>
 8001e3c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e40:	e008      	b.n	8001e54 <HAL_DMA_Abort_IT+0xa4>
 8001e42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e46:	e005      	b.n	8001e54 <HAL_DMA_Abort_IT+0xa4>
 8001e48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e4c:	e002      	b.n	8001e54 <HAL_DMA_Abort_IT+0xa4>
 8001e4e:	2310      	movs	r3, #16
 8001e50:	e000      	b.n	8001e54 <HAL_DMA_Abort_IT+0xa4>
 8001e52:	2301      	movs	r3, #1
 8001e54:	4a11      	ldr	r2, [pc, #68]	@ (8001e9c <HAL_DMA_Abort_IT+0xec>)
 8001e56:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	4798      	blx	r3
    } 
  }
  return status;
 8001e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40020008 	.word	0x40020008
 8001e88:	4002001c 	.word	0x4002001c
 8001e8c:	40020030 	.word	0x40020030
 8001e90:	40020044 	.word	0x40020044
 8001e94:	40020058 	.word	0x40020058
 8001e98:	4002006c 	.word	0x4002006c
 8001e9c:	40020000 	.word	0x40020000

08001ea0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ebc:	2204      	movs	r2, #4
 8001ebe:	409a      	lsls	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d04f      	beq.n	8001f68 <HAL_DMA_IRQHandler+0xc8>
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	f003 0304 	and.w	r3, r3, #4
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d04a      	beq.n	8001f68 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0320 	and.w	r3, r3, #32
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d107      	bne.n	8001ef0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f022 0204 	bic.w	r2, r2, #4
 8001eee:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a66      	ldr	r2, [pc, #408]	@ (8002090 <HAL_DMA_IRQHandler+0x1f0>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d029      	beq.n	8001f4e <HAL_DMA_IRQHandler+0xae>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a65      	ldr	r2, [pc, #404]	@ (8002094 <HAL_DMA_IRQHandler+0x1f4>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d022      	beq.n	8001f4a <HAL_DMA_IRQHandler+0xaa>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a63      	ldr	r2, [pc, #396]	@ (8002098 <HAL_DMA_IRQHandler+0x1f8>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d01a      	beq.n	8001f44 <HAL_DMA_IRQHandler+0xa4>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a62      	ldr	r2, [pc, #392]	@ (800209c <HAL_DMA_IRQHandler+0x1fc>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d012      	beq.n	8001f3e <HAL_DMA_IRQHandler+0x9e>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a60      	ldr	r2, [pc, #384]	@ (80020a0 <HAL_DMA_IRQHandler+0x200>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d00a      	beq.n	8001f38 <HAL_DMA_IRQHandler+0x98>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a5f      	ldr	r2, [pc, #380]	@ (80020a4 <HAL_DMA_IRQHandler+0x204>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d102      	bne.n	8001f32 <HAL_DMA_IRQHandler+0x92>
 8001f2c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001f30:	e00e      	b.n	8001f50 <HAL_DMA_IRQHandler+0xb0>
 8001f32:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001f36:	e00b      	b.n	8001f50 <HAL_DMA_IRQHandler+0xb0>
 8001f38:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001f3c:	e008      	b.n	8001f50 <HAL_DMA_IRQHandler+0xb0>
 8001f3e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001f42:	e005      	b.n	8001f50 <HAL_DMA_IRQHandler+0xb0>
 8001f44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f48:	e002      	b.n	8001f50 <HAL_DMA_IRQHandler+0xb0>
 8001f4a:	2340      	movs	r3, #64	@ 0x40
 8001f4c:	e000      	b.n	8001f50 <HAL_DMA_IRQHandler+0xb0>
 8001f4e:	2304      	movs	r3, #4
 8001f50:	4a55      	ldr	r2, [pc, #340]	@ (80020a8 <HAL_DMA_IRQHandler+0x208>)
 8001f52:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f000 8094 	beq.w	8002086 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001f66:	e08e      	b.n	8002086 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	409a      	lsls	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4013      	ands	r3, r2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d056      	beq.n	8002026 <HAL_DMA_IRQHandler+0x186>
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d051      	beq.n	8002026 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0320 	and.w	r3, r3, #32
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d10b      	bne.n	8001fa8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f022 020a 	bic.w	r2, r2, #10
 8001f9e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a38      	ldr	r2, [pc, #224]	@ (8002090 <HAL_DMA_IRQHandler+0x1f0>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d029      	beq.n	8002006 <HAL_DMA_IRQHandler+0x166>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a37      	ldr	r2, [pc, #220]	@ (8002094 <HAL_DMA_IRQHandler+0x1f4>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d022      	beq.n	8002002 <HAL_DMA_IRQHandler+0x162>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a35      	ldr	r2, [pc, #212]	@ (8002098 <HAL_DMA_IRQHandler+0x1f8>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d01a      	beq.n	8001ffc <HAL_DMA_IRQHandler+0x15c>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a34      	ldr	r2, [pc, #208]	@ (800209c <HAL_DMA_IRQHandler+0x1fc>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d012      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0x156>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a32      	ldr	r2, [pc, #200]	@ (80020a0 <HAL_DMA_IRQHandler+0x200>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d00a      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0x150>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a31      	ldr	r2, [pc, #196]	@ (80020a4 <HAL_DMA_IRQHandler+0x204>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d102      	bne.n	8001fea <HAL_DMA_IRQHandler+0x14a>
 8001fe4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001fe8:	e00e      	b.n	8002008 <HAL_DMA_IRQHandler+0x168>
 8001fea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001fee:	e00b      	b.n	8002008 <HAL_DMA_IRQHandler+0x168>
 8001ff0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ff4:	e008      	b.n	8002008 <HAL_DMA_IRQHandler+0x168>
 8001ff6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ffa:	e005      	b.n	8002008 <HAL_DMA_IRQHandler+0x168>
 8001ffc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002000:	e002      	b.n	8002008 <HAL_DMA_IRQHandler+0x168>
 8002002:	2320      	movs	r3, #32
 8002004:	e000      	b.n	8002008 <HAL_DMA_IRQHandler+0x168>
 8002006:	2302      	movs	r3, #2
 8002008:	4a27      	ldr	r2, [pc, #156]	@ (80020a8 <HAL_DMA_IRQHandler+0x208>)
 800200a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002018:	2b00      	cmp	r3, #0
 800201a:	d034      	beq.n	8002086 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002024:	e02f      	b.n	8002086 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202a:	2208      	movs	r2, #8
 800202c:	409a      	lsls	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	4013      	ands	r3, r2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d028      	beq.n	8002088 <HAL_DMA_IRQHandler+0x1e8>
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	f003 0308 	and.w	r3, r3, #8
 800203c:	2b00      	cmp	r3, #0
 800203e:	d023      	beq.n	8002088 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 020e 	bic.w	r2, r2, #14
 800204e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002058:	2101      	movs	r1, #1
 800205a:	fa01 f202 	lsl.w	r2, r1, r2
 800205e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207a:	2b00      	cmp	r3, #0
 800207c:	d004      	beq.n	8002088 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	4798      	blx	r3
    }
  }
  return;
 8002086:	bf00      	nop
 8002088:	bf00      	nop
}
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40020008 	.word	0x40020008
 8002094:	4002001c 	.word	0x4002001c
 8002098:	40020030 	.word	0x40020030
 800209c:	40020044 	.word	0x40020044
 80020a0:	40020058 	.word	0x40020058
 80020a4:	4002006c 	.word	0x4002006c
 80020a8:	40020000 	.word	0x40020000

080020ac <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
 80020b8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020c2:	2101      	movs	r1, #1
 80020c4:	fa01 f202 	lsl.w	r2, r1, r2
 80020c8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	2b10      	cmp	r3, #16
 80020d8:	d108      	bne.n	80020ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68ba      	ldr	r2, [r7, #8]
 80020e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80020ea:	e007      	b.n	80020fc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68ba      	ldr	r2, [r7, #8]
 80020f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	60da      	str	r2, [r3, #12]
}
 80020fc:	bf00      	nop
 80020fe:	3714      	adds	r7, #20
 8002100:	46bd      	mov	sp, r7
 8002102:	bc80      	pop	{r7}
 8002104:	4770      	bx	lr
	...

08002108 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002108:	b480      	push	{r7}
 800210a:	b08b      	sub	sp, #44	@ 0x2c
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002112:	2300      	movs	r3, #0
 8002114:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002116:	2300      	movs	r3, #0
 8002118:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800211a:	e169      	b.n	80023f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800211c:	2201      	movs	r2, #1
 800211e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	69fa      	ldr	r2, [r7, #28]
 800212c:	4013      	ands	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	429a      	cmp	r2, r3
 8002136:	f040 8158 	bne.w	80023ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	4a9a      	ldr	r2, [pc, #616]	@ (80023a8 <HAL_GPIO_Init+0x2a0>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d05e      	beq.n	8002202 <HAL_GPIO_Init+0xfa>
 8002144:	4a98      	ldr	r2, [pc, #608]	@ (80023a8 <HAL_GPIO_Init+0x2a0>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d875      	bhi.n	8002236 <HAL_GPIO_Init+0x12e>
 800214a:	4a98      	ldr	r2, [pc, #608]	@ (80023ac <HAL_GPIO_Init+0x2a4>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d058      	beq.n	8002202 <HAL_GPIO_Init+0xfa>
 8002150:	4a96      	ldr	r2, [pc, #600]	@ (80023ac <HAL_GPIO_Init+0x2a4>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d86f      	bhi.n	8002236 <HAL_GPIO_Init+0x12e>
 8002156:	4a96      	ldr	r2, [pc, #600]	@ (80023b0 <HAL_GPIO_Init+0x2a8>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d052      	beq.n	8002202 <HAL_GPIO_Init+0xfa>
 800215c:	4a94      	ldr	r2, [pc, #592]	@ (80023b0 <HAL_GPIO_Init+0x2a8>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d869      	bhi.n	8002236 <HAL_GPIO_Init+0x12e>
 8002162:	4a94      	ldr	r2, [pc, #592]	@ (80023b4 <HAL_GPIO_Init+0x2ac>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d04c      	beq.n	8002202 <HAL_GPIO_Init+0xfa>
 8002168:	4a92      	ldr	r2, [pc, #584]	@ (80023b4 <HAL_GPIO_Init+0x2ac>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d863      	bhi.n	8002236 <HAL_GPIO_Init+0x12e>
 800216e:	4a92      	ldr	r2, [pc, #584]	@ (80023b8 <HAL_GPIO_Init+0x2b0>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d046      	beq.n	8002202 <HAL_GPIO_Init+0xfa>
 8002174:	4a90      	ldr	r2, [pc, #576]	@ (80023b8 <HAL_GPIO_Init+0x2b0>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d85d      	bhi.n	8002236 <HAL_GPIO_Init+0x12e>
 800217a:	2b12      	cmp	r3, #18
 800217c:	d82a      	bhi.n	80021d4 <HAL_GPIO_Init+0xcc>
 800217e:	2b12      	cmp	r3, #18
 8002180:	d859      	bhi.n	8002236 <HAL_GPIO_Init+0x12e>
 8002182:	a201      	add	r2, pc, #4	@ (adr r2, 8002188 <HAL_GPIO_Init+0x80>)
 8002184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002188:	08002203 	.word	0x08002203
 800218c:	080021dd 	.word	0x080021dd
 8002190:	080021ef 	.word	0x080021ef
 8002194:	08002231 	.word	0x08002231
 8002198:	08002237 	.word	0x08002237
 800219c:	08002237 	.word	0x08002237
 80021a0:	08002237 	.word	0x08002237
 80021a4:	08002237 	.word	0x08002237
 80021a8:	08002237 	.word	0x08002237
 80021ac:	08002237 	.word	0x08002237
 80021b0:	08002237 	.word	0x08002237
 80021b4:	08002237 	.word	0x08002237
 80021b8:	08002237 	.word	0x08002237
 80021bc:	08002237 	.word	0x08002237
 80021c0:	08002237 	.word	0x08002237
 80021c4:	08002237 	.word	0x08002237
 80021c8:	08002237 	.word	0x08002237
 80021cc:	080021e5 	.word	0x080021e5
 80021d0:	080021f9 	.word	0x080021f9
 80021d4:	4a79      	ldr	r2, [pc, #484]	@ (80023bc <HAL_GPIO_Init+0x2b4>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d013      	beq.n	8002202 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021da:	e02c      	b.n	8002236 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	623b      	str	r3, [r7, #32]
          break;
 80021e2:	e029      	b.n	8002238 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	3304      	adds	r3, #4
 80021ea:	623b      	str	r3, [r7, #32]
          break;
 80021ec:	e024      	b.n	8002238 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	3308      	adds	r3, #8
 80021f4:	623b      	str	r3, [r7, #32]
          break;
 80021f6:	e01f      	b.n	8002238 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	330c      	adds	r3, #12
 80021fe:	623b      	str	r3, [r7, #32]
          break;
 8002200:	e01a      	b.n	8002238 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d102      	bne.n	8002210 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800220a:	2304      	movs	r3, #4
 800220c:	623b      	str	r3, [r7, #32]
          break;
 800220e:	e013      	b.n	8002238 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d105      	bne.n	8002224 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002218:	2308      	movs	r3, #8
 800221a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	69fa      	ldr	r2, [r7, #28]
 8002220:	611a      	str	r2, [r3, #16]
          break;
 8002222:	e009      	b.n	8002238 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002224:	2308      	movs	r3, #8
 8002226:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	69fa      	ldr	r2, [r7, #28]
 800222c:	615a      	str	r2, [r3, #20]
          break;
 800222e:	e003      	b.n	8002238 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002230:	2300      	movs	r3, #0
 8002232:	623b      	str	r3, [r7, #32]
          break;
 8002234:	e000      	b.n	8002238 <HAL_GPIO_Init+0x130>
          break;
 8002236:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	2bff      	cmp	r3, #255	@ 0xff
 800223c:	d801      	bhi.n	8002242 <HAL_GPIO_Init+0x13a>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	e001      	b.n	8002246 <HAL_GPIO_Init+0x13e>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	3304      	adds	r3, #4
 8002246:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	2bff      	cmp	r3, #255	@ 0xff
 800224c:	d802      	bhi.n	8002254 <HAL_GPIO_Init+0x14c>
 800224e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	e002      	b.n	800225a <HAL_GPIO_Init+0x152>
 8002254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002256:	3b08      	subs	r3, #8
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	210f      	movs	r1, #15
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	fa01 f303 	lsl.w	r3, r1, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	401a      	ands	r2, r3
 800226c:	6a39      	ldr	r1, [r7, #32]
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	fa01 f303 	lsl.w	r3, r1, r3
 8002274:	431a      	orrs	r2, r3
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002282:	2b00      	cmp	r3, #0
 8002284:	f000 80b1 	beq.w	80023ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002288:	4b4d      	ldr	r3, [pc, #308]	@ (80023c0 <HAL_GPIO_Init+0x2b8>)
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	4a4c      	ldr	r2, [pc, #304]	@ (80023c0 <HAL_GPIO_Init+0x2b8>)
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	6193      	str	r3, [r2, #24]
 8002294:	4b4a      	ldr	r3, [pc, #296]	@ (80023c0 <HAL_GPIO_Init+0x2b8>)
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	60bb      	str	r3, [r7, #8]
 800229e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022a0:	4a48      	ldr	r2, [pc, #288]	@ (80023c4 <HAL_GPIO_Init+0x2bc>)
 80022a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a4:	089b      	lsrs	r3, r3, #2
 80022a6:	3302      	adds	r3, #2
 80022a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b0:	f003 0303 	and.w	r3, r3, #3
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	220f      	movs	r2, #15
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	4013      	ands	r3, r2
 80022c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a40      	ldr	r2, [pc, #256]	@ (80023c8 <HAL_GPIO_Init+0x2c0>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d013      	beq.n	80022f4 <HAL_GPIO_Init+0x1ec>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a3f      	ldr	r2, [pc, #252]	@ (80023cc <HAL_GPIO_Init+0x2c4>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d00d      	beq.n	80022f0 <HAL_GPIO_Init+0x1e8>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a3e      	ldr	r2, [pc, #248]	@ (80023d0 <HAL_GPIO_Init+0x2c8>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d007      	beq.n	80022ec <HAL_GPIO_Init+0x1e4>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a3d      	ldr	r2, [pc, #244]	@ (80023d4 <HAL_GPIO_Init+0x2cc>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d101      	bne.n	80022e8 <HAL_GPIO_Init+0x1e0>
 80022e4:	2303      	movs	r3, #3
 80022e6:	e006      	b.n	80022f6 <HAL_GPIO_Init+0x1ee>
 80022e8:	2304      	movs	r3, #4
 80022ea:	e004      	b.n	80022f6 <HAL_GPIO_Init+0x1ee>
 80022ec:	2302      	movs	r3, #2
 80022ee:	e002      	b.n	80022f6 <HAL_GPIO_Init+0x1ee>
 80022f0:	2301      	movs	r3, #1
 80022f2:	e000      	b.n	80022f6 <HAL_GPIO_Init+0x1ee>
 80022f4:	2300      	movs	r3, #0
 80022f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022f8:	f002 0203 	and.w	r2, r2, #3
 80022fc:	0092      	lsls	r2, r2, #2
 80022fe:	4093      	lsls	r3, r2
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	4313      	orrs	r3, r2
 8002304:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002306:	492f      	ldr	r1, [pc, #188]	@ (80023c4 <HAL_GPIO_Init+0x2bc>)
 8002308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230a:	089b      	lsrs	r3, r3, #2
 800230c:	3302      	adds	r3, #2
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d006      	beq.n	800232e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002320:	4b2d      	ldr	r3, [pc, #180]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	492c      	ldr	r1, [pc, #176]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	4313      	orrs	r3, r2
 800232a:	608b      	str	r3, [r1, #8]
 800232c:	e006      	b.n	800233c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800232e:	4b2a      	ldr	r3, [pc, #168]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 8002330:	689a      	ldr	r2, [r3, #8]
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	43db      	mvns	r3, r3
 8002336:	4928      	ldr	r1, [pc, #160]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 8002338:	4013      	ands	r3, r2
 800233a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d006      	beq.n	8002356 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002348:	4b23      	ldr	r3, [pc, #140]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 800234a:	68da      	ldr	r2, [r3, #12]
 800234c:	4922      	ldr	r1, [pc, #136]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	4313      	orrs	r3, r2
 8002352:	60cb      	str	r3, [r1, #12]
 8002354:	e006      	b.n	8002364 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002356:	4b20      	ldr	r3, [pc, #128]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 8002358:	68da      	ldr	r2, [r3, #12]
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	43db      	mvns	r3, r3
 800235e:	491e      	ldr	r1, [pc, #120]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 8002360:	4013      	ands	r3, r2
 8002362:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d006      	beq.n	800237e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002370:	4b19      	ldr	r3, [pc, #100]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	4918      	ldr	r1, [pc, #96]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	4313      	orrs	r3, r2
 800237a:	604b      	str	r3, [r1, #4]
 800237c:	e006      	b.n	800238c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800237e:	4b16      	ldr	r3, [pc, #88]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 8002380:	685a      	ldr	r2, [r3, #4]
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	43db      	mvns	r3, r3
 8002386:	4914      	ldr	r1, [pc, #80]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 8002388:	4013      	ands	r3, r2
 800238a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d021      	beq.n	80023dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002398:	4b0f      	ldr	r3, [pc, #60]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	490e      	ldr	r1, [pc, #56]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	600b      	str	r3, [r1, #0]
 80023a4:	e021      	b.n	80023ea <HAL_GPIO_Init+0x2e2>
 80023a6:	bf00      	nop
 80023a8:	10320000 	.word	0x10320000
 80023ac:	10310000 	.word	0x10310000
 80023b0:	10220000 	.word	0x10220000
 80023b4:	10210000 	.word	0x10210000
 80023b8:	10120000 	.word	0x10120000
 80023bc:	10110000 	.word	0x10110000
 80023c0:	40021000 	.word	0x40021000
 80023c4:	40010000 	.word	0x40010000
 80023c8:	40010800 	.word	0x40010800
 80023cc:	40010c00 	.word	0x40010c00
 80023d0:	40011000 	.word	0x40011000
 80023d4:	40011400 	.word	0x40011400
 80023d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023dc:	4b0b      	ldr	r3, [pc, #44]	@ (800240c <HAL_GPIO_Init+0x304>)
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	43db      	mvns	r3, r3
 80023e4:	4909      	ldr	r1, [pc, #36]	@ (800240c <HAL_GPIO_Init+0x304>)
 80023e6:	4013      	ands	r3, r2
 80023e8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80023ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ec:	3301      	adds	r3, #1
 80023ee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f6:	fa22 f303 	lsr.w	r3, r2, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f47f ae8e 	bne.w	800211c <HAL_GPIO_Init+0x14>
  }
}
 8002400:	bf00      	nop
 8002402:	bf00      	nop
 8002404:	372c      	adds	r7, #44	@ 0x2c
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr
 800240c:	40010400 	.word	0x40010400

08002410 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	460b      	mov	r3, r1
 800241a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	887b      	ldrh	r3, [r7, #2]
 8002422:	4013      	ands	r3, r2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d002      	beq.n	800242e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002428:	2301      	movs	r3, #1
 800242a:	73fb      	strb	r3, [r7, #15]
 800242c:	e001      	b.n	8002432 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800242e:	2300      	movs	r3, #0
 8002430:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002432:	7bfb      	ldrb	r3, [r7, #15]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3714      	adds	r7, #20
 8002438:	46bd      	mov	sp, r7
 800243a:	bc80      	pop	{r7}
 800243c:	4770      	bx	lr

0800243e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800243e:	b480      	push	{r7}
 8002440:	b083      	sub	sp, #12
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
 8002446:	460b      	mov	r3, r1
 8002448:	807b      	strh	r3, [r7, #2]
 800244a:	4613      	mov	r3, r2
 800244c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800244e:	787b      	ldrb	r3, [r7, #1]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d003      	beq.n	800245c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002454:	887a      	ldrh	r2, [r7, #2]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800245a:	e003      	b.n	8002464 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800245c:	887b      	ldrh	r3, [r7, #2]
 800245e:	041a      	lsls	r2, r3, #16
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	611a      	str	r2, [r3, #16]
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	bc80      	pop	{r7}
 800246c:	4770      	bx	lr
	...

08002470 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e272      	b.n	8002968 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 8087 	beq.w	800259e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002490:	4b92      	ldr	r3, [pc, #584]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f003 030c 	and.w	r3, r3, #12
 8002498:	2b04      	cmp	r3, #4
 800249a:	d00c      	beq.n	80024b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800249c:	4b8f      	ldr	r3, [pc, #572]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 030c 	and.w	r3, r3, #12
 80024a4:	2b08      	cmp	r3, #8
 80024a6:	d112      	bne.n	80024ce <HAL_RCC_OscConfig+0x5e>
 80024a8:	4b8c      	ldr	r3, [pc, #560]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024b4:	d10b      	bne.n	80024ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b6:	4b89      	ldr	r3, [pc, #548]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d06c      	beq.n	800259c <HAL_RCC_OscConfig+0x12c>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d168      	bne.n	800259c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e24c      	b.n	8002968 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024d6:	d106      	bne.n	80024e6 <HAL_RCC_OscConfig+0x76>
 80024d8:	4b80      	ldr	r3, [pc, #512]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a7f      	ldr	r2, [pc, #508]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 80024de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024e2:	6013      	str	r3, [r2, #0]
 80024e4:	e02e      	b.n	8002544 <HAL_RCC_OscConfig+0xd4>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10c      	bne.n	8002508 <HAL_RCC_OscConfig+0x98>
 80024ee:	4b7b      	ldr	r3, [pc, #492]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a7a      	ldr	r2, [pc, #488]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 80024f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	4b78      	ldr	r3, [pc, #480]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a77      	ldr	r2, [pc, #476]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 8002500:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	e01d      	b.n	8002544 <HAL_RCC_OscConfig+0xd4>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002510:	d10c      	bne.n	800252c <HAL_RCC_OscConfig+0xbc>
 8002512:	4b72      	ldr	r3, [pc, #456]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a71      	ldr	r2, [pc, #452]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 8002518:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800251c:	6013      	str	r3, [r2, #0]
 800251e:	4b6f      	ldr	r3, [pc, #444]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a6e      	ldr	r2, [pc, #440]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 8002524:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	e00b      	b.n	8002544 <HAL_RCC_OscConfig+0xd4>
 800252c:	4b6b      	ldr	r3, [pc, #428]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a6a      	ldr	r2, [pc, #424]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 8002532:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002536:	6013      	str	r3, [r2, #0]
 8002538:	4b68      	ldr	r3, [pc, #416]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a67      	ldr	r2, [pc, #412]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 800253e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002542:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d013      	beq.n	8002574 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254c:	f7ff fa3a 	bl	80019c4 <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002554:	f7ff fa36 	bl	80019c4 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b64      	cmp	r3, #100	@ 0x64
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e200      	b.n	8002968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002566:	4b5d      	ldr	r3, [pc, #372]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0f0      	beq.n	8002554 <HAL_RCC_OscConfig+0xe4>
 8002572:	e014      	b.n	800259e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002574:	f7ff fa26 	bl	80019c4 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800257c:	f7ff fa22 	bl	80019c4 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b64      	cmp	r3, #100	@ 0x64
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e1ec      	b.n	8002968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800258e:	4b53      	ldr	r3, [pc, #332]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1f0      	bne.n	800257c <HAL_RCC_OscConfig+0x10c>
 800259a:	e000      	b.n	800259e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800259c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d063      	beq.n	8002672 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025aa:	4b4c      	ldr	r3, [pc, #304]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f003 030c 	and.w	r3, r3, #12
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00b      	beq.n	80025ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025b6:	4b49      	ldr	r3, [pc, #292]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f003 030c 	and.w	r3, r3, #12
 80025be:	2b08      	cmp	r3, #8
 80025c0:	d11c      	bne.n	80025fc <HAL_RCC_OscConfig+0x18c>
 80025c2:	4b46      	ldr	r3, [pc, #280]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d116      	bne.n	80025fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ce:	4b43      	ldr	r3, [pc, #268]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d005      	beq.n	80025e6 <HAL_RCC_OscConfig+0x176>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d001      	beq.n	80025e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e1c0      	b.n	8002968 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e6:	4b3d      	ldr	r3, [pc, #244]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	4939      	ldr	r1, [pc, #228]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025fa:	e03a      	b.n	8002672 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d020      	beq.n	8002646 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002604:	4b36      	ldr	r3, [pc, #216]	@ (80026e0 <HAL_RCC_OscConfig+0x270>)
 8002606:	2201      	movs	r2, #1
 8002608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260a:	f7ff f9db 	bl	80019c4 <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002610:	e008      	b.n	8002624 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002612:	f7ff f9d7 	bl	80019c4 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e1a1      	b.n	8002968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002624:	4b2d      	ldr	r3, [pc, #180]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d0f0      	beq.n	8002612 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002630:	4b2a      	ldr	r3, [pc, #168]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	695b      	ldr	r3, [r3, #20]
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	4927      	ldr	r1, [pc, #156]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 8002640:	4313      	orrs	r3, r2
 8002642:	600b      	str	r3, [r1, #0]
 8002644:	e015      	b.n	8002672 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002646:	4b26      	ldr	r3, [pc, #152]	@ (80026e0 <HAL_RCC_OscConfig+0x270>)
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800264c:	f7ff f9ba 	bl	80019c4 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002654:	f7ff f9b6 	bl	80019c4 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e180      	b.n	8002968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002666:	4b1d      	ldr	r3, [pc, #116]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1f0      	bne.n	8002654 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0308 	and.w	r3, r3, #8
 800267a:	2b00      	cmp	r3, #0
 800267c:	d03a      	beq.n	80026f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d019      	beq.n	80026ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002686:	4b17      	ldr	r3, [pc, #92]	@ (80026e4 <HAL_RCC_OscConfig+0x274>)
 8002688:	2201      	movs	r2, #1
 800268a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800268c:	f7ff f99a 	bl	80019c4 <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002694:	f7ff f996 	bl	80019c4 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e160      	b.n	8002968 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026a6:	4b0d      	ldr	r3, [pc, #52]	@ (80026dc <HAL_RCC_OscConfig+0x26c>)
 80026a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d0f0      	beq.n	8002694 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026b2:	2001      	movs	r0, #1
 80026b4:	f000 fa9c 	bl	8002bf0 <RCC_Delay>
 80026b8:	e01c      	b.n	80026f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026ba:	4b0a      	ldr	r3, [pc, #40]	@ (80026e4 <HAL_RCC_OscConfig+0x274>)
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c0:	f7ff f980 	bl	80019c4 <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026c6:	e00f      	b.n	80026e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026c8:	f7ff f97c 	bl	80019c4 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d908      	bls.n	80026e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e146      	b.n	8002968 <HAL_RCC_OscConfig+0x4f8>
 80026da:	bf00      	nop
 80026dc:	40021000 	.word	0x40021000
 80026e0:	42420000 	.word	0x42420000
 80026e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e8:	4b92      	ldr	r3, [pc, #584]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 80026ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1e9      	bne.n	80026c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 80a6 	beq.w	800284e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002702:	2300      	movs	r3, #0
 8002704:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002706:	4b8b      	ldr	r3, [pc, #556]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10d      	bne.n	800272e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002712:	4b88      	ldr	r3, [pc, #544]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	4a87      	ldr	r2, [pc, #540]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 8002718:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800271c:	61d3      	str	r3, [r2, #28]
 800271e:	4b85      	ldr	r3, [pc, #532]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002726:	60bb      	str	r3, [r7, #8]
 8002728:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800272a:	2301      	movs	r3, #1
 800272c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800272e:	4b82      	ldr	r3, [pc, #520]	@ (8002938 <HAL_RCC_OscConfig+0x4c8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002736:	2b00      	cmp	r3, #0
 8002738:	d118      	bne.n	800276c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800273a:	4b7f      	ldr	r3, [pc, #508]	@ (8002938 <HAL_RCC_OscConfig+0x4c8>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a7e      	ldr	r2, [pc, #504]	@ (8002938 <HAL_RCC_OscConfig+0x4c8>)
 8002740:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002744:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002746:	f7ff f93d 	bl	80019c4 <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800274c:	e008      	b.n	8002760 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800274e:	f7ff f939 	bl	80019c4 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b64      	cmp	r3, #100	@ 0x64
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e103      	b.n	8002968 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002760:	4b75      	ldr	r3, [pc, #468]	@ (8002938 <HAL_RCC_OscConfig+0x4c8>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0f0      	beq.n	800274e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d106      	bne.n	8002782 <HAL_RCC_OscConfig+0x312>
 8002774:	4b6f      	ldr	r3, [pc, #444]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	4a6e      	ldr	r2, [pc, #440]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 800277a:	f043 0301 	orr.w	r3, r3, #1
 800277e:	6213      	str	r3, [r2, #32]
 8002780:	e02d      	b.n	80027de <HAL_RCC_OscConfig+0x36e>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10c      	bne.n	80027a4 <HAL_RCC_OscConfig+0x334>
 800278a:	4b6a      	ldr	r3, [pc, #424]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	4a69      	ldr	r2, [pc, #420]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 8002790:	f023 0301 	bic.w	r3, r3, #1
 8002794:	6213      	str	r3, [r2, #32]
 8002796:	4b67      	ldr	r3, [pc, #412]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	4a66      	ldr	r2, [pc, #408]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 800279c:	f023 0304 	bic.w	r3, r3, #4
 80027a0:	6213      	str	r3, [r2, #32]
 80027a2:	e01c      	b.n	80027de <HAL_RCC_OscConfig+0x36e>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	2b05      	cmp	r3, #5
 80027aa:	d10c      	bne.n	80027c6 <HAL_RCC_OscConfig+0x356>
 80027ac:	4b61      	ldr	r3, [pc, #388]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	4a60      	ldr	r2, [pc, #384]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 80027b2:	f043 0304 	orr.w	r3, r3, #4
 80027b6:	6213      	str	r3, [r2, #32]
 80027b8:	4b5e      	ldr	r3, [pc, #376]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	4a5d      	ldr	r2, [pc, #372]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 80027be:	f043 0301 	orr.w	r3, r3, #1
 80027c2:	6213      	str	r3, [r2, #32]
 80027c4:	e00b      	b.n	80027de <HAL_RCC_OscConfig+0x36e>
 80027c6:	4b5b      	ldr	r3, [pc, #364]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	4a5a      	ldr	r2, [pc, #360]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 80027cc:	f023 0301 	bic.w	r3, r3, #1
 80027d0:	6213      	str	r3, [r2, #32]
 80027d2:	4b58      	ldr	r3, [pc, #352]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	4a57      	ldr	r2, [pc, #348]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 80027d8:	f023 0304 	bic.w	r3, r3, #4
 80027dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d015      	beq.n	8002812 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027e6:	f7ff f8ed 	bl	80019c4 <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ec:	e00a      	b.n	8002804 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ee:	f7ff f8e9 	bl	80019c4 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e0b1      	b.n	8002968 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002804:	4b4b      	ldr	r3, [pc, #300]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d0ee      	beq.n	80027ee <HAL_RCC_OscConfig+0x37e>
 8002810:	e014      	b.n	800283c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002812:	f7ff f8d7 	bl	80019c4 <HAL_GetTick>
 8002816:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002818:	e00a      	b.n	8002830 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800281a:	f7ff f8d3 	bl	80019c4 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002828:	4293      	cmp	r3, r2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e09b      	b.n	8002968 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002830:	4b40      	ldr	r3, [pc, #256]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1ee      	bne.n	800281a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800283c:	7dfb      	ldrb	r3, [r7, #23]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d105      	bne.n	800284e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002842:	4b3c      	ldr	r3, [pc, #240]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	4a3b      	ldr	r2, [pc, #236]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 8002848:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800284c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	2b00      	cmp	r3, #0
 8002854:	f000 8087 	beq.w	8002966 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002858:	4b36      	ldr	r3, [pc, #216]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f003 030c 	and.w	r3, r3, #12
 8002860:	2b08      	cmp	r3, #8
 8002862:	d061      	beq.n	8002928 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	69db      	ldr	r3, [r3, #28]
 8002868:	2b02      	cmp	r3, #2
 800286a:	d146      	bne.n	80028fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800286c:	4b33      	ldr	r3, [pc, #204]	@ (800293c <HAL_RCC_OscConfig+0x4cc>)
 800286e:	2200      	movs	r2, #0
 8002870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002872:	f7ff f8a7 	bl	80019c4 <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002878:	e008      	b.n	800288c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800287a:	f7ff f8a3 	bl	80019c4 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e06d      	b.n	8002968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800288c:	4b29      	ldr	r3, [pc, #164]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1f0      	bne.n	800287a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028a0:	d108      	bne.n	80028b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028a2:	4b24      	ldr	r3, [pc, #144]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	4921      	ldr	r1, [pc, #132]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a19      	ldr	r1, [r3, #32]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c4:	430b      	orrs	r3, r1
 80028c6:	491b      	ldr	r1, [pc, #108]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028cc:	4b1b      	ldr	r3, [pc, #108]	@ (800293c <HAL_RCC_OscConfig+0x4cc>)
 80028ce:	2201      	movs	r2, #1
 80028d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d2:	f7ff f877 	bl	80019c4 <HAL_GetTick>
 80028d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028d8:	e008      	b.n	80028ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028da:	f7ff f873 	bl	80019c4 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e03d      	b.n	8002968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028ec:	4b11      	ldr	r3, [pc, #68]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d0f0      	beq.n	80028da <HAL_RCC_OscConfig+0x46a>
 80028f8:	e035      	b.n	8002966 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028fa:	4b10      	ldr	r3, [pc, #64]	@ (800293c <HAL_RCC_OscConfig+0x4cc>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002900:	f7ff f860 	bl	80019c4 <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002908:	f7ff f85c 	bl	80019c4 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e026      	b.n	8002968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800291a:	4b06      	ldr	r3, [pc, #24]	@ (8002934 <HAL_RCC_OscConfig+0x4c4>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1f0      	bne.n	8002908 <HAL_RCC_OscConfig+0x498>
 8002926:	e01e      	b.n	8002966 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	69db      	ldr	r3, [r3, #28]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d107      	bne.n	8002940 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e019      	b.n	8002968 <HAL_RCC_OscConfig+0x4f8>
 8002934:	40021000 	.word	0x40021000
 8002938:	40007000 	.word	0x40007000
 800293c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002940:	4b0b      	ldr	r3, [pc, #44]	@ (8002970 <HAL_RCC_OscConfig+0x500>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	429a      	cmp	r2, r3
 8002952:	d106      	bne.n	8002962 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800295e:	429a      	cmp	r2, r3
 8002960:	d001      	beq.n	8002966 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e000      	b.n	8002968 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3718      	adds	r7, #24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40021000 	.word	0x40021000

08002974 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e0d0      	b.n	8002b2a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002988:	4b6a      	ldr	r3, [pc, #424]	@ (8002b34 <HAL_RCC_ClockConfig+0x1c0>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0307 	and.w	r3, r3, #7
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	429a      	cmp	r2, r3
 8002994:	d910      	bls.n	80029b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002996:	4b67      	ldr	r3, [pc, #412]	@ (8002b34 <HAL_RCC_ClockConfig+0x1c0>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f023 0207 	bic.w	r2, r3, #7
 800299e:	4965      	ldr	r1, [pc, #404]	@ (8002b34 <HAL_RCC_ClockConfig+0x1c0>)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a6:	4b63      	ldr	r3, [pc, #396]	@ (8002b34 <HAL_RCC_ClockConfig+0x1c0>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d001      	beq.n	80029b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e0b8      	b.n	8002b2a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d020      	beq.n	8002a06 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d005      	beq.n	80029dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029d0:	4b59      	ldr	r3, [pc, #356]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	4a58      	ldr	r2, [pc, #352]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 80029d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80029da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0308 	and.w	r3, r3, #8
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d005      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029e8:	4b53      	ldr	r3, [pc, #332]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	4a52      	ldr	r2, [pc, #328]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 80029ee:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80029f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029f4:	4b50      	ldr	r3, [pc, #320]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	494d      	ldr	r1, [pc, #308]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d040      	beq.n	8002a94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d107      	bne.n	8002a2a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1a:	4b47      	ldr	r3, [pc, #284]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d115      	bne.n	8002a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e07f      	b.n	8002b2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d107      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a32:	4b41      	ldr	r3, [pc, #260]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d109      	bne.n	8002a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e073      	b.n	8002b2a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a42:	4b3d      	ldr	r3, [pc, #244]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e06b      	b.n	8002b2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a52:	4b39      	ldr	r3, [pc, #228]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f023 0203 	bic.w	r2, r3, #3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	4936      	ldr	r1, [pc, #216]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a64:	f7fe ffae 	bl	80019c4 <HAL_GetTick>
 8002a68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a6a:	e00a      	b.n	8002a82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a6c:	f7fe ffaa 	bl	80019c4 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e053      	b.n	8002b2a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a82:	4b2d      	ldr	r3, [pc, #180]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f003 020c 	and.w	r2, r3, #12
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d1eb      	bne.n	8002a6c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a94:	4b27      	ldr	r3, [pc, #156]	@ (8002b34 <HAL_RCC_ClockConfig+0x1c0>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0307 	and.w	r3, r3, #7
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d210      	bcs.n	8002ac4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aa2:	4b24      	ldr	r3, [pc, #144]	@ (8002b34 <HAL_RCC_ClockConfig+0x1c0>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f023 0207 	bic.w	r2, r3, #7
 8002aaa:	4922      	ldr	r1, [pc, #136]	@ (8002b34 <HAL_RCC_ClockConfig+0x1c0>)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ab2:	4b20      	ldr	r3, [pc, #128]	@ (8002b34 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d001      	beq.n	8002ac4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e032      	b.n	8002b2a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0304 	and.w	r3, r3, #4
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d008      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ad0:	4b19      	ldr	r3, [pc, #100]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	4916      	ldr	r1, [pc, #88]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0308 	and.w	r3, r3, #8
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d009      	beq.n	8002b02 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002aee:	4b12      	ldr	r3, [pc, #72]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	490e      	ldr	r1, [pc, #56]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b02:	f000 f821 	bl	8002b48 <HAL_RCC_GetSysClockFreq>
 8002b06:	4602      	mov	r2, r0
 8002b08:	4b0b      	ldr	r3, [pc, #44]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	091b      	lsrs	r3, r3, #4
 8002b0e:	f003 030f 	and.w	r3, r3, #15
 8002b12:	490a      	ldr	r1, [pc, #40]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c8>)
 8002b14:	5ccb      	ldrb	r3, [r1, r3]
 8002b16:	fa22 f303 	lsr.w	r3, r2, r3
 8002b1a:	4a09      	ldr	r2, [pc, #36]	@ (8002b40 <HAL_RCC_ClockConfig+0x1cc>)
 8002b1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b1e:	4b09      	ldr	r3, [pc, #36]	@ (8002b44 <HAL_RCC_ClockConfig+0x1d0>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7fe ff0c 	bl	8001940 <HAL_InitTick>

  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	40022000 	.word	0x40022000
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	080048c8 	.word	0x080048c8
 8002b40:	20000084 	.word	0x20000084
 8002b44:	20000088 	.word	0x20000088

08002b48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b087      	sub	sp, #28
 8002b4c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60fb      	str	r3, [r7, #12]
 8002b52:	2300      	movs	r3, #0
 8002b54:	60bb      	str	r3, [r7, #8]
 8002b56:	2300      	movs	r3, #0
 8002b58:	617b      	str	r3, [r7, #20]
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b62:	4b1e      	ldr	r3, [pc, #120]	@ (8002bdc <HAL_RCC_GetSysClockFreq+0x94>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f003 030c 	and.w	r3, r3, #12
 8002b6e:	2b04      	cmp	r3, #4
 8002b70:	d002      	beq.n	8002b78 <HAL_RCC_GetSysClockFreq+0x30>
 8002b72:	2b08      	cmp	r3, #8
 8002b74:	d003      	beq.n	8002b7e <HAL_RCC_GetSysClockFreq+0x36>
 8002b76:	e027      	b.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b78:	4b19      	ldr	r3, [pc, #100]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b7a:	613b      	str	r3, [r7, #16]
      break;
 8002b7c:	e027      	b.n	8002bce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	0c9b      	lsrs	r3, r3, #18
 8002b82:	f003 030f 	and.w	r3, r3, #15
 8002b86:	4a17      	ldr	r2, [pc, #92]	@ (8002be4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b88:	5cd3      	ldrb	r3, [r2, r3]
 8002b8a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d010      	beq.n	8002bb8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b96:	4b11      	ldr	r3, [pc, #68]	@ (8002bdc <HAL_RCC_GetSysClockFreq+0x94>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	0c5b      	lsrs	r3, r3, #17
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	4a11      	ldr	r2, [pc, #68]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ba2:	5cd3      	ldrb	r3, [r2, r3]
 8002ba4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a0d      	ldr	r2, [pc, #52]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002baa:	fb03 f202 	mul.w	r2, r3, r2
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb4:	617b      	str	r3, [r7, #20]
 8002bb6:	e004      	b.n	8002bc2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a0c      	ldr	r2, [pc, #48]	@ (8002bec <HAL_RCC_GetSysClockFreq+0xa4>)
 8002bbc:	fb02 f303 	mul.w	r3, r2, r3
 8002bc0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	613b      	str	r3, [r7, #16]
      break;
 8002bc6:	e002      	b.n	8002bce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bc8:	4b05      	ldr	r3, [pc, #20]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bca:	613b      	str	r3, [r7, #16]
      break;
 8002bcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bce:	693b      	ldr	r3, [r7, #16]
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	371c      	adds	r7, #28
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bc80      	pop	{r7}
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	007a1200 	.word	0x007a1200
 8002be4:	080048d8 	.word	0x080048d8
 8002be8:	080048e8 	.word	0x080048e8
 8002bec:	003d0900 	.word	0x003d0900

08002bf0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8002c24 <RCC_Delay+0x34>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a0a      	ldr	r2, [pc, #40]	@ (8002c28 <RCC_Delay+0x38>)
 8002bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002c02:	0a5b      	lsrs	r3, r3, #9
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	fb02 f303 	mul.w	r3, r2, r3
 8002c0a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c0c:	bf00      	nop
  }
  while (Delay --);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	1e5a      	subs	r2, r3, #1
 8002c12:	60fa      	str	r2, [r7, #12]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1f9      	bne.n	8002c0c <RCC_Delay+0x1c>
}
 8002c18:	bf00      	nop
 8002c1a:	bf00      	nop
 8002c1c:	3714      	adds	r7, #20
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc80      	pop	{r7}
 8002c22:	4770      	bx	lr
 8002c24:	20000084 	.word	0x20000084
 8002c28:	10624dd3 	.word	0x10624dd3

08002c2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e041      	b.n	8002cc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d106      	bne.n	8002c58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f7fe fd48 	bl	80016e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3304      	adds	r3, #4
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4610      	mov	r0, r2
 8002c6c:	f000 fd5a 	bl	8003724 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b082      	sub	sp, #8
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d101      	bne.n	8002cdc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e041      	b.n	8002d60 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d106      	bne.n	8002cf6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 f839 	bl	8002d68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	3304      	adds	r3, #4
 8002d06:	4619      	mov	r1, r3
 8002d08:	4610      	mov	r0, r2
 8002d0a:	f000 fd0b 	bl	8003724 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bc80      	pop	{r7}
 8002d78:	4770      	bx	lr
	...

08002d7c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
 8002d88:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d109      	bne.n	8002da8 <HAL_TIM_PWM_Start_DMA+0x2c>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	bf0c      	ite	eq
 8002da0:	2301      	moveq	r3, #1
 8002da2:	2300      	movne	r3, #0
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	e022      	b.n	8002dee <HAL_TIM_PWM_Start_DMA+0x72>
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	d109      	bne.n	8002dc2 <HAL_TIM_PWM_Start_DMA+0x46>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	bf0c      	ite	eq
 8002dba:	2301      	moveq	r3, #1
 8002dbc:	2300      	movne	r3, #0
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	e015      	b.n	8002dee <HAL_TIM_PWM_Start_DMA+0x72>
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	2b08      	cmp	r3, #8
 8002dc6:	d109      	bne.n	8002ddc <HAL_TIM_PWM_Start_DMA+0x60>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	bf0c      	ite	eq
 8002dd4:	2301      	moveq	r3, #1
 8002dd6:	2300      	movne	r3, #0
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	e008      	b.n	8002dee <HAL_TIM_PWM_Start_DMA+0x72>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	bf0c      	ite	eq
 8002de8:	2301      	moveq	r3, #1
 8002dea:	2300      	movne	r3, #0
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8002df2:	2302      	movs	r3, #2
 8002df4:	e153      	b.n	800309e <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d109      	bne.n	8002e10 <HAL_TIM_PWM_Start_DMA+0x94>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	bf0c      	ite	eq
 8002e08:	2301      	moveq	r3, #1
 8002e0a:	2300      	movne	r3, #0
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	e022      	b.n	8002e56 <HAL_TIM_PWM_Start_DMA+0xda>
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	2b04      	cmp	r3, #4
 8002e14:	d109      	bne.n	8002e2a <HAL_TIM_PWM_Start_DMA+0xae>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	bf0c      	ite	eq
 8002e22:	2301      	moveq	r3, #1
 8002e24:	2300      	movne	r3, #0
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	e015      	b.n	8002e56 <HAL_TIM_PWM_Start_DMA+0xda>
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	2b08      	cmp	r3, #8
 8002e2e:	d109      	bne.n	8002e44 <HAL_TIM_PWM_Start_DMA+0xc8>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	bf0c      	ite	eq
 8002e3c:	2301      	moveq	r3, #1
 8002e3e:	2300      	movne	r3, #0
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	e008      	b.n	8002e56 <HAL_TIM_PWM_Start_DMA+0xda>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	bf0c      	ite	eq
 8002e50:	2301      	moveq	r3, #1
 8002e52:	2300      	movne	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d024      	beq.n	8002ea4 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d002      	beq.n	8002e66 <HAL_TIM_PWM_Start_DMA+0xea>
 8002e60:	887b      	ldrh	r3, [r7, #2]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e119      	b.n	800309e <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d104      	bne.n	8002e7a <HAL_TIM_PWM_Start_DMA+0xfe>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2202      	movs	r2, #2
 8002e74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e78:	e016      	b.n	8002ea8 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	2b04      	cmp	r3, #4
 8002e7e:	d104      	bne.n	8002e8a <HAL_TIM_PWM_Start_DMA+0x10e>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2202      	movs	r2, #2
 8002e84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e88:	e00e      	b.n	8002ea8 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	2b08      	cmp	r3, #8
 8002e8e:	d104      	bne.n	8002e9a <HAL_TIM_PWM_Start_DMA+0x11e>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2202      	movs	r2, #2
 8002e94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e98:	e006      	b.n	8002ea8 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2202      	movs	r2, #2
 8002e9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002ea2:	e001      	b.n	8002ea8 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e0fa      	b.n	800309e <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	2b0c      	cmp	r3, #12
 8002eac:	f200 80ae 	bhi.w	800300c <HAL_TIM_PWM_Start_DMA+0x290>
 8002eb0:	a201      	add	r2, pc, #4	@ (adr r2, 8002eb8 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8002eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb6:	bf00      	nop
 8002eb8:	08002eed 	.word	0x08002eed
 8002ebc:	0800300d 	.word	0x0800300d
 8002ec0:	0800300d 	.word	0x0800300d
 8002ec4:	0800300d 	.word	0x0800300d
 8002ec8:	08002f35 	.word	0x08002f35
 8002ecc:	0800300d 	.word	0x0800300d
 8002ed0:	0800300d 	.word	0x0800300d
 8002ed4:	0800300d 	.word	0x0800300d
 8002ed8:	08002f7d 	.word	0x08002f7d
 8002edc:	0800300d 	.word	0x0800300d
 8002ee0:	0800300d 	.word	0x0800300d
 8002ee4:	0800300d 	.word	0x0800300d
 8002ee8:	08002fc5 	.word	0x08002fc5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef0:	4a6d      	ldr	r2, [pc, #436]	@ (80030a8 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002ef2:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef8:	4a6c      	ldr	r2, [pc, #432]	@ (80030ac <HAL_TIM_PWM_Start_DMA+0x330>)
 8002efa:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f00:	4a6b      	ldr	r2, [pc, #428]	@ (80030b0 <HAL_TIM_PWM_Start_DMA+0x334>)
 8002f02:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002f08:	6879      	ldr	r1, [r7, #4]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	3334      	adds	r3, #52	@ 0x34
 8002f10:	461a      	mov	r2, r3
 8002f12:	887b      	ldrh	r3, [r7, #2]
 8002f14:	f7fe feec 	bl	8001cf0 <HAL_DMA_Start_IT>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e0bd      	b.n	800309e <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68da      	ldr	r2, [r3, #12]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f30:	60da      	str	r2, [r3, #12]
      break;
 8002f32:	e06e      	b.n	8003012 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f38:	4a5b      	ldr	r2, [pc, #364]	@ (80030a8 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002f3a:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f40:	4a5a      	ldr	r2, [pc, #360]	@ (80030ac <HAL_TIM_PWM_Start_DMA+0x330>)
 8002f42:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f48:	4a59      	ldr	r2, [pc, #356]	@ (80030b0 <HAL_TIM_PWM_Start_DMA+0x334>)
 8002f4a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	3338      	adds	r3, #56	@ 0x38
 8002f58:	461a      	mov	r2, r3
 8002f5a:	887b      	ldrh	r3, [r7, #2]
 8002f5c:	f7fe fec8 	bl	8001cf0 <HAL_DMA_Start_IT>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e099      	b.n	800309e <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68da      	ldr	r2, [r3, #12]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002f78:	60da      	str	r2, [r3, #12]
      break;
 8002f7a:	e04a      	b.n	8003012 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f80:	4a49      	ldr	r2, [pc, #292]	@ (80030a8 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002f82:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f88:	4a48      	ldr	r2, [pc, #288]	@ (80030ac <HAL_TIM_PWM_Start_DMA+0x330>)
 8002f8a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f90:	4a47      	ldr	r2, [pc, #284]	@ (80030b0 <HAL_TIM_PWM_Start_DMA+0x334>)
 8002f92:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002f98:	6879      	ldr	r1, [r7, #4]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	333c      	adds	r3, #60	@ 0x3c
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	887b      	ldrh	r3, [r7, #2]
 8002fa4:	f7fe fea4 	bl	8001cf0 <HAL_DMA_Start_IT>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e075      	b.n	800309e <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68da      	ldr	r2, [r3, #12]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fc0:	60da      	str	r2, [r3, #12]
      break;
 8002fc2:	e026      	b.n	8003012 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc8:	4a37      	ldr	r2, [pc, #220]	@ (80030a8 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002fca:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd0:	4a36      	ldr	r2, [pc, #216]	@ (80030ac <HAL_TIM_PWM_Start_DMA+0x330>)
 8002fd2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd8:	4a35      	ldr	r2, [pc, #212]	@ (80030b0 <HAL_TIM_PWM_Start_DMA+0x334>)
 8002fda:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002fe0:	6879      	ldr	r1, [r7, #4]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	3340      	adds	r3, #64	@ 0x40
 8002fe8:	461a      	mov	r2, r3
 8002fea:	887b      	ldrh	r3, [r7, #2]
 8002fec:	f7fe fe80 	bl	8001cf0 <HAL_DMA_Start_IT>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e051      	b.n	800309e <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68da      	ldr	r2, [r3, #12]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003008:	60da      	str	r2, [r3, #12]
      break;
 800300a:	e002      	b.n	8003012 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	75fb      	strb	r3, [r7, #23]
      break;
 8003010:	bf00      	nop
  }

  if (status == HAL_OK)
 8003012:	7dfb      	ldrb	r3, [r7, #23]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d141      	bne.n	800309c <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2201      	movs	r2, #1
 800301e:	68b9      	ldr	r1, [r7, #8]
 8003020:	4618      	mov	r0, r3
 8003022:	f000 fe0b 	bl	8003c3c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a22      	ldr	r2, [pc, #136]	@ (80030b4 <HAL_TIM_PWM_Start_DMA+0x338>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d107      	bne.n	8003040 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800303e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a1b      	ldr	r2, [pc, #108]	@ (80030b4 <HAL_TIM_PWM_Start_DMA+0x338>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d00e      	beq.n	8003068 <HAL_TIM_PWM_Start_DMA+0x2ec>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003052:	d009      	beq.n	8003068 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a17      	ldr	r2, [pc, #92]	@ (80030b8 <HAL_TIM_PWM_Start_DMA+0x33c>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d004      	beq.n	8003068 <HAL_TIM_PWM_Start_DMA+0x2ec>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a16      	ldr	r2, [pc, #88]	@ (80030bc <HAL_TIM_PWM_Start_DMA+0x340>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d111      	bne.n	800308c <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	2b06      	cmp	r3, #6
 8003078:	d010      	beq.n	800309c <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f042 0201 	orr.w	r2, r2, #1
 8003088:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800308a:	e007      	b.n	800309c <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f042 0201 	orr.w	r2, r2, #1
 800309a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800309c:	7dfb      	ldrb	r3, [r7, #23]
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3718      	adds	r7, #24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	08003615 	.word	0x08003615
 80030ac:	080036bd 	.word	0x080036bd
 80030b0:	08003583 	.word	0x08003583
 80030b4:	40012c00 	.word	0x40012c00
 80030b8:	40000400 	.word	0x40000400
 80030bc:	40000800 	.word	0x40000800

080030c0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ca:	2300      	movs	r3, #0
 80030cc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	2b0c      	cmp	r3, #12
 80030d2:	d855      	bhi.n	8003180 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80030d4:	a201      	add	r2, pc, #4	@ (adr r2, 80030dc <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80030d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030da:	bf00      	nop
 80030dc:	08003111 	.word	0x08003111
 80030e0:	08003181 	.word	0x08003181
 80030e4:	08003181 	.word	0x08003181
 80030e8:	08003181 	.word	0x08003181
 80030ec:	0800312d 	.word	0x0800312d
 80030f0:	08003181 	.word	0x08003181
 80030f4:	08003181 	.word	0x08003181
 80030f8:	08003181 	.word	0x08003181
 80030fc:	08003149 	.word	0x08003149
 8003100:	08003181 	.word	0x08003181
 8003104:	08003181 	.word	0x08003181
 8003108:	08003181 	.word	0x08003181
 800310c:	08003165 	.word	0x08003165
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68da      	ldr	r2, [r3, #12]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800311e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003124:	4618      	mov	r0, r3
 8003126:	f7fe fe43 	bl	8001db0 <HAL_DMA_Abort_IT>
      break;
 800312a:	e02c      	b.n	8003186 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68da      	ldr	r2, [r3, #12]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800313a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003140:	4618      	mov	r0, r3
 8003142:	f7fe fe35 	bl	8001db0 <HAL_DMA_Abort_IT>
      break;
 8003146:	e01e      	b.n	8003186 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68da      	ldr	r2, [r3, #12]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003156:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800315c:	4618      	mov	r0, r3
 800315e:	f7fe fe27 	bl	8001db0 <HAL_DMA_Abort_IT>
      break;
 8003162:	e010      	b.n	8003186 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68da      	ldr	r2, [r3, #12]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003172:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003178:	4618      	mov	r0, r3
 800317a:	f7fe fe19 	bl	8001db0 <HAL_DMA_Abort_IT>
      break;
 800317e:	e002      	b.n	8003186 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	73fb      	strb	r3, [r7, #15]
      break;
 8003184:	bf00      	nop
  }

  if (status == HAL_OK)
 8003186:	7bfb      	ldrb	r3, [r7, #15]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d157      	bne.n	800323c <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2200      	movs	r2, #0
 8003192:	6839      	ldr	r1, [r7, #0]
 8003194:	4618      	mov	r0, r3
 8003196:	f000 fd51 	bl	8003c3c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a2a      	ldr	r2, [pc, #168]	@ (8003248 <HAL_TIM_PWM_Stop_DMA+0x188>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d117      	bne.n	80031d4 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6a1a      	ldr	r2, [r3, #32]
 80031aa:	f241 1311 	movw	r3, #4369	@ 0x1111
 80031ae:	4013      	ands	r3, r2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d10f      	bne.n	80031d4 <HAL_TIM_PWM_Stop_DMA+0x114>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6a1a      	ldr	r2, [r3, #32]
 80031ba:	f240 4344 	movw	r3, #1092	@ 0x444
 80031be:	4013      	ands	r3, r2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d107      	bne.n	80031d4 <HAL_TIM_PWM_Stop_DMA+0x114>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80031d2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6a1a      	ldr	r2, [r3, #32]
 80031da:	f241 1311 	movw	r3, #4369	@ 0x1111
 80031de:	4013      	ands	r3, r2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10f      	bne.n	8003204 <HAL_TIM_PWM_Stop_DMA+0x144>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6a1a      	ldr	r2, [r3, #32]
 80031ea:	f240 4344 	movw	r3, #1092	@ 0x444
 80031ee:	4013      	ands	r3, r2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d107      	bne.n	8003204 <HAL_TIM_PWM_Stop_DMA+0x144>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 0201 	bic.w	r2, r2, #1
 8003202:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d104      	bne.n	8003214 <HAL_TIM_PWM_Stop_DMA+0x154>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003212:	e013      	b.n	800323c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	2b04      	cmp	r3, #4
 8003218:	d104      	bne.n	8003224 <HAL_TIM_PWM_Stop_DMA+0x164>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003222:	e00b      	b.n	800323c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	2b08      	cmp	r3, #8
 8003228:	d104      	bne.n	8003234 <HAL_TIM_PWM_Stop_DMA+0x174>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003232:	e003      	b.n	800323c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 800323c:	7bfb      	ldrb	r3, [r7, #15]
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	40012c00 	.word	0x40012c00

0800324c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003258:	2300      	movs	r3, #0
 800325a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003262:	2b01      	cmp	r3, #1
 8003264:	d101      	bne.n	800326a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003266:	2302      	movs	r3, #2
 8003268:	e0ae      	b.n	80033c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2b0c      	cmp	r3, #12
 8003276:	f200 809f 	bhi.w	80033b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800327a:	a201      	add	r2, pc, #4	@ (adr r2, 8003280 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800327c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003280:	080032b5 	.word	0x080032b5
 8003284:	080033b9 	.word	0x080033b9
 8003288:	080033b9 	.word	0x080033b9
 800328c:	080033b9 	.word	0x080033b9
 8003290:	080032f5 	.word	0x080032f5
 8003294:	080033b9 	.word	0x080033b9
 8003298:	080033b9 	.word	0x080033b9
 800329c:	080033b9 	.word	0x080033b9
 80032a0:	08003337 	.word	0x08003337
 80032a4:	080033b9 	.word	0x080033b9
 80032a8:	080033b9 	.word	0x080033b9
 80032ac:	080033b9 	.word	0x080033b9
 80032b0:	08003377 	.word	0x08003377
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68b9      	ldr	r1, [r7, #8]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 faa0 	bl	8003800 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	699a      	ldr	r2, [r3, #24]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0208 	orr.w	r2, r2, #8
 80032ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	699a      	ldr	r2, [r3, #24]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0204 	bic.w	r2, r2, #4
 80032de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6999      	ldr	r1, [r3, #24]
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	691a      	ldr	r2, [r3, #16]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	619a      	str	r2, [r3, #24]
      break;
 80032f2:	e064      	b.n	80033be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68b9      	ldr	r1, [r7, #8]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 fae6 	bl	80038cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699a      	ldr	r2, [r3, #24]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800330e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	699a      	ldr	r2, [r3, #24]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800331e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6999      	ldr	r1, [r3, #24]
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	021a      	lsls	r2, r3, #8
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	430a      	orrs	r2, r1
 8003332:	619a      	str	r2, [r3, #24]
      break;
 8003334:	e043      	b.n	80033be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68b9      	ldr	r1, [r7, #8]
 800333c:	4618      	mov	r0, r3
 800333e:	f000 fb2f 	bl	80039a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	69da      	ldr	r2, [r3, #28]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f042 0208 	orr.w	r2, r2, #8
 8003350:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	69da      	ldr	r2, [r3, #28]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 0204 	bic.w	r2, r2, #4
 8003360:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	69d9      	ldr	r1, [r3, #28]
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	691a      	ldr	r2, [r3, #16]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	61da      	str	r2, [r3, #28]
      break;
 8003374:	e023      	b.n	80033be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68b9      	ldr	r1, [r7, #8]
 800337c:	4618      	mov	r0, r3
 800337e:	f000 fb79 	bl	8003a74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	69da      	ldr	r2, [r3, #28]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003390:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	69da      	ldr	r2, [r3, #28]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	69d9      	ldr	r1, [r3, #28]
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	021a      	lsls	r2, r3, #8
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	61da      	str	r2, [r3, #28]
      break;
 80033b6:	e002      	b.n	80033be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	75fb      	strb	r3, [r7, #23]
      break;
 80033bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80033c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3718      	adds	r7, #24
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033da:	2300      	movs	r3, #0
 80033dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d101      	bne.n	80033ec <HAL_TIM_ConfigClockSource+0x1c>
 80033e8:	2302      	movs	r3, #2
 80033ea:	e0b4      	b.n	8003556 <HAL_TIM_ConfigClockSource+0x186>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2202      	movs	r2, #2
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800340a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003412:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68ba      	ldr	r2, [r7, #8]
 800341a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003424:	d03e      	beq.n	80034a4 <HAL_TIM_ConfigClockSource+0xd4>
 8003426:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800342a:	f200 8087 	bhi.w	800353c <HAL_TIM_ConfigClockSource+0x16c>
 800342e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003432:	f000 8086 	beq.w	8003542 <HAL_TIM_ConfigClockSource+0x172>
 8003436:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800343a:	d87f      	bhi.n	800353c <HAL_TIM_ConfigClockSource+0x16c>
 800343c:	2b70      	cmp	r3, #112	@ 0x70
 800343e:	d01a      	beq.n	8003476 <HAL_TIM_ConfigClockSource+0xa6>
 8003440:	2b70      	cmp	r3, #112	@ 0x70
 8003442:	d87b      	bhi.n	800353c <HAL_TIM_ConfigClockSource+0x16c>
 8003444:	2b60      	cmp	r3, #96	@ 0x60
 8003446:	d050      	beq.n	80034ea <HAL_TIM_ConfigClockSource+0x11a>
 8003448:	2b60      	cmp	r3, #96	@ 0x60
 800344a:	d877      	bhi.n	800353c <HAL_TIM_ConfigClockSource+0x16c>
 800344c:	2b50      	cmp	r3, #80	@ 0x50
 800344e:	d03c      	beq.n	80034ca <HAL_TIM_ConfigClockSource+0xfa>
 8003450:	2b50      	cmp	r3, #80	@ 0x50
 8003452:	d873      	bhi.n	800353c <HAL_TIM_ConfigClockSource+0x16c>
 8003454:	2b40      	cmp	r3, #64	@ 0x40
 8003456:	d058      	beq.n	800350a <HAL_TIM_ConfigClockSource+0x13a>
 8003458:	2b40      	cmp	r3, #64	@ 0x40
 800345a:	d86f      	bhi.n	800353c <HAL_TIM_ConfigClockSource+0x16c>
 800345c:	2b30      	cmp	r3, #48	@ 0x30
 800345e:	d064      	beq.n	800352a <HAL_TIM_ConfigClockSource+0x15a>
 8003460:	2b30      	cmp	r3, #48	@ 0x30
 8003462:	d86b      	bhi.n	800353c <HAL_TIM_ConfigClockSource+0x16c>
 8003464:	2b20      	cmp	r3, #32
 8003466:	d060      	beq.n	800352a <HAL_TIM_ConfigClockSource+0x15a>
 8003468:	2b20      	cmp	r3, #32
 800346a:	d867      	bhi.n	800353c <HAL_TIM_ConfigClockSource+0x16c>
 800346c:	2b00      	cmp	r3, #0
 800346e:	d05c      	beq.n	800352a <HAL_TIM_ConfigClockSource+0x15a>
 8003470:	2b10      	cmp	r3, #16
 8003472:	d05a      	beq.n	800352a <HAL_TIM_ConfigClockSource+0x15a>
 8003474:	e062      	b.n	800353c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003486:	f000 fbba 	bl	8003bfe <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003498:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68ba      	ldr	r2, [r7, #8]
 80034a0:	609a      	str	r2, [r3, #8]
      break;
 80034a2:	e04f      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034b4:	f000 fba3 	bl	8003bfe <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689a      	ldr	r2, [r3, #8]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80034c6:	609a      	str	r2, [r3, #8]
      break;
 80034c8:	e03c      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034d6:	461a      	mov	r2, r3
 80034d8:	f000 fb1a 	bl	8003b10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2150      	movs	r1, #80	@ 0x50
 80034e2:	4618      	mov	r0, r3
 80034e4:	f000 fb71 	bl	8003bca <TIM_ITRx_SetConfig>
      break;
 80034e8:	e02c      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034f6:	461a      	mov	r2, r3
 80034f8:	f000 fb38 	bl	8003b6c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2160      	movs	r1, #96	@ 0x60
 8003502:	4618      	mov	r0, r3
 8003504:	f000 fb61 	bl	8003bca <TIM_ITRx_SetConfig>
      break;
 8003508:	e01c      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003516:	461a      	mov	r2, r3
 8003518:	f000 fafa 	bl	8003b10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2140      	movs	r1, #64	@ 0x40
 8003522:	4618      	mov	r0, r3
 8003524:	f000 fb51 	bl	8003bca <TIM_ITRx_SetConfig>
      break;
 8003528:	e00c      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4619      	mov	r1, r3
 8003534:	4610      	mov	r0, r2
 8003536:	f000 fb48 	bl	8003bca <TIM_ITRx_SetConfig>
      break;
 800353a:	e003      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	73fb      	strb	r3, [r7, #15]
      break;
 8003540:	e000      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003542:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003554:	7bfb      	ldrb	r3, [r7, #15]
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003566:	bf00      	nop
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	bc80      	pop	{r7}
 800356e:	4770      	bx	lr

08003570 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	bc80      	pop	{r7}
 8003580:	4770      	bx	lr

08003582 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b084      	sub	sp, #16
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	429a      	cmp	r2, r3
 8003598:	d107      	bne.n	80035aa <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2201      	movs	r2, #1
 800359e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035a8:	e02a      	b.n	8003600 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d107      	bne.n	80035c4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2202      	movs	r2, #2
 80035b8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035c2:	e01d      	b.n	8003600 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d107      	bne.n	80035de <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2204      	movs	r2, #4
 80035d2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035dc:	e010      	b.n	8003600 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d107      	bne.n	80035f8 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2208      	movs	r2, #8
 80035ec:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80035f6:	e003      	b.n	8003600 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f7ff ffb5 	bl	8003570 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	771a      	strb	r2, [r3, #28]
}
 800360c:	bf00      	nop
 800360e:	3710      	adds	r7, #16
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003620:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	429a      	cmp	r2, r3
 800362a:	d10b      	bne.n	8003644 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2201      	movs	r2, #1
 8003630:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d136      	bne.n	80036a8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2201      	movs	r2, #1
 800363e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003642:	e031      	b.n	80036a8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	429a      	cmp	r2, r3
 800364c:	d10b      	bne.n	8003666 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2202      	movs	r2, #2
 8003652:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d125      	bne.n	80036a8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003664:	e020      	b.n	80036a8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	429a      	cmp	r2, r3
 800366e:	d10b      	bne.n	8003688 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2204      	movs	r2, #4
 8003674:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d114      	bne.n	80036a8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003686:	e00f      	b.n	80036a8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	429a      	cmp	r2, r3
 8003690:	d10a      	bne.n	80036a8 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2208      	movs	r2, #8
 8003696:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d103      	bne.n	80036a8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f7fc ff3d 	bl	8000528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	771a      	strb	r2, [r3, #28]
}
 80036b4:	bf00      	nop
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d103      	bne.n	80036dc <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2201      	movs	r2, #1
 80036d8:	771a      	strb	r2, [r3, #28]
 80036da:	e019      	b.n	8003710 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d103      	bne.n	80036ee <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2202      	movs	r2, #2
 80036ea:	771a      	strb	r2, [r3, #28]
 80036ec:	e010      	b.n	8003710 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d103      	bne.n	8003700 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2204      	movs	r2, #4
 80036fc:	771a      	strb	r2, [r3, #28]
 80036fe:	e007      	b.n	8003710 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	429a      	cmp	r2, r3
 8003708:	d102      	bne.n	8003710 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2208      	movs	r2, #8
 800370e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f7ff ff24 	bl	800355e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	771a      	strb	r2, [r3, #28]
}
 800371c:	bf00      	nop
 800371e:	3710      	adds	r7, #16
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a2f      	ldr	r2, [pc, #188]	@ (80037f4 <TIM_Base_SetConfig+0xd0>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d00b      	beq.n	8003754 <TIM_Base_SetConfig+0x30>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003742:	d007      	beq.n	8003754 <TIM_Base_SetConfig+0x30>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a2c      	ldr	r2, [pc, #176]	@ (80037f8 <TIM_Base_SetConfig+0xd4>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d003      	beq.n	8003754 <TIM_Base_SetConfig+0x30>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a2b      	ldr	r2, [pc, #172]	@ (80037fc <TIM_Base_SetConfig+0xd8>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d108      	bne.n	8003766 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800375a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	4313      	orrs	r3, r2
 8003764:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a22      	ldr	r2, [pc, #136]	@ (80037f4 <TIM_Base_SetConfig+0xd0>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d00b      	beq.n	8003786 <TIM_Base_SetConfig+0x62>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003774:	d007      	beq.n	8003786 <TIM_Base_SetConfig+0x62>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a1f      	ldr	r2, [pc, #124]	@ (80037f8 <TIM_Base_SetConfig+0xd4>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d003      	beq.n	8003786 <TIM_Base_SetConfig+0x62>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a1e      	ldr	r2, [pc, #120]	@ (80037fc <TIM_Base_SetConfig+0xd8>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d108      	bne.n	8003798 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800378c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	4313      	orrs	r3, r2
 8003796:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a0d      	ldr	r2, [pc, #52]	@ (80037f4 <TIM_Base_SetConfig+0xd0>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d103      	bne.n	80037cc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	691a      	ldr	r2, [r3, #16]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d005      	beq.n	80037ea <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	f023 0201 	bic.w	r2, r3, #1
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	611a      	str	r2, [r3, #16]
  }
}
 80037ea:	bf00      	nop
 80037ec:	3714      	adds	r7, #20
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bc80      	pop	{r7}
 80037f2:	4770      	bx	lr
 80037f4:	40012c00 	.word	0x40012c00
 80037f8:	40000400 	.word	0x40000400
 80037fc:	40000800 	.word	0x40000800

08003800 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003800:	b480      	push	{r7}
 8003802:	b087      	sub	sp, #28
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	f023 0201 	bic.w	r2, r3, #1
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800382e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f023 0303 	bic.w	r3, r3, #3
 8003836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	4313      	orrs	r3, r2
 8003840:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	f023 0302 	bic.w	r3, r3, #2
 8003848:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	697a      	ldr	r2, [r7, #20]
 8003850:	4313      	orrs	r3, r2
 8003852:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a1c      	ldr	r2, [pc, #112]	@ (80038c8 <TIM_OC1_SetConfig+0xc8>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d10c      	bne.n	8003876 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	f023 0308 	bic.w	r3, r3, #8
 8003862:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	4313      	orrs	r3, r2
 800386c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f023 0304 	bic.w	r3, r3, #4
 8003874:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a13      	ldr	r2, [pc, #76]	@ (80038c8 <TIM_OC1_SetConfig+0xc8>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d111      	bne.n	80038a2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003884:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800388c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	4313      	orrs	r3, r2
 8003896:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	4313      	orrs	r3, r2
 80038a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	697a      	ldr	r2, [r7, #20]
 80038ba:	621a      	str	r2, [r3, #32]
}
 80038bc:	bf00      	nop
 80038be:	371c      	adds	r7, #28
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bc80      	pop	{r7}
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	40012c00 	.word	0x40012c00

080038cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b087      	sub	sp, #28
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	f023 0210 	bic.w	r2, r3, #16
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003902:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	021b      	lsls	r3, r3, #8
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	4313      	orrs	r3, r2
 800390e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	f023 0320 	bic.w	r3, r3, #32
 8003916:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	011b      	lsls	r3, r3, #4
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	4313      	orrs	r3, r2
 8003922:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a1d      	ldr	r2, [pc, #116]	@ (800399c <TIM_OC2_SetConfig+0xd0>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d10d      	bne.n	8003948 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003932:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	011b      	lsls	r3, r3, #4
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	4313      	orrs	r3, r2
 800393e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003946:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a14      	ldr	r2, [pc, #80]	@ (800399c <TIM_OC2_SetConfig+0xd0>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d113      	bne.n	8003978 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003956:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800395e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	695b      	ldr	r3, [r3, #20]
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	4313      	orrs	r3, r2
 800396a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	4313      	orrs	r3, r2
 8003976:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	621a      	str	r2, [r3, #32]
}
 8003992:	bf00      	nop
 8003994:	371c      	adds	r7, #28
 8003996:	46bd      	mov	sp, r7
 8003998:	bc80      	pop	{r7}
 800399a:	4770      	bx	lr
 800399c:	40012c00 	.word	0x40012c00

080039a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b087      	sub	sp, #28
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	69db      	ldr	r3, [r3, #28]
 80039c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f023 0303 	bic.w	r3, r3, #3
 80039d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	4313      	orrs	r3, r2
 80039e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80039e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	021b      	lsls	r3, r3, #8
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a1d      	ldr	r2, [pc, #116]	@ (8003a70 <TIM_OC3_SetConfig+0xd0>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d10d      	bne.n	8003a1a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003a04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	021b      	lsls	r3, r3, #8
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a14      	ldr	r2, [pc, #80]	@ (8003a70 <TIM_OC3_SetConfig+0xd0>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d113      	bne.n	8003a4a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	011b      	lsls	r3, r3, #4
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	011b      	lsls	r3, r3, #4
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685a      	ldr	r2, [r3, #4]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	621a      	str	r2, [r3, #32]
}
 8003a64:	bf00      	nop
 8003a66:	371c      	adds	r7, #28
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bc80      	pop	{r7}
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	40012c00 	.word	0x40012c00

08003a74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b087      	sub	sp, #28
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a1b      	ldr	r3, [r3, #32]
 8003a88:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003aa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	021b      	lsls	r3, r3, #8
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003abe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	031b      	lsls	r3, r3, #12
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a0f      	ldr	r2, [pc, #60]	@ (8003b0c <TIM_OC4_SetConfig+0x98>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d109      	bne.n	8003ae8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ada:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	019b      	lsls	r3, r3, #6
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685a      	ldr	r2, [r3, #4]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	621a      	str	r2, [r3, #32]
}
 8003b02:	bf00      	nop
 8003b04:	371c      	adds	r7, #28
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bc80      	pop	{r7}
 8003b0a:	4770      	bx	lr
 8003b0c:	40012c00 	.word	0x40012c00

08003b10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b087      	sub	sp, #28
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6a1b      	ldr	r3, [r3, #32]
 8003b20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	f023 0201 	bic.w	r2, r3, #1
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	011b      	lsls	r3, r3, #4
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	f023 030a 	bic.w	r3, r3, #10
 8003b4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	621a      	str	r2, [r3, #32]
}
 8003b62:	bf00      	nop
 8003b64:	371c      	adds	r7, #28
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bc80      	pop	{r7}
 8003b6a:	4770      	bx	lr

08003b6c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b087      	sub	sp, #28
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	f023 0210 	bic.w	r2, r3, #16
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003b96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	031b      	lsls	r3, r3, #12
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003ba8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	011b      	lsls	r3, r3, #4
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	621a      	str	r2, [r3, #32]
}
 8003bc0:	bf00      	nop
 8003bc2:	371c      	adds	r7, #28
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bc80      	pop	{r7}
 8003bc8:	4770      	bx	lr

08003bca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b085      	sub	sp, #20
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
 8003bd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003be0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	f043 0307 	orr.w	r3, r3, #7
 8003bec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	609a      	str	r2, [r3, #8]
}
 8003bf4:	bf00      	nop
 8003bf6:	3714      	adds	r7, #20
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bc80      	pop	{r7}
 8003bfc:	4770      	bx	lr

08003bfe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b087      	sub	sp, #28
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	60f8      	str	r0, [r7, #12]
 8003c06:	60b9      	str	r1, [r7, #8]
 8003c08:	607a      	str	r2, [r7, #4]
 8003c0a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c18:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	021a      	lsls	r2, r3, #8
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	431a      	orrs	r2, r3
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	609a      	str	r2, [r3, #8]
}
 8003c32:	bf00      	nop
 8003c34:	371c      	adds	r7, #28
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bc80      	pop	{r7}
 8003c3a:	4770      	bx	lr

08003c3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b087      	sub	sp, #28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	f003 031f 	and.w	r3, r3, #31
 8003c4e:	2201      	movs	r2, #1
 8003c50:	fa02 f303 	lsl.w	r3, r2, r3
 8003c54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6a1a      	ldr	r2, [r3, #32]
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	43db      	mvns	r3, r3
 8003c5e:	401a      	ands	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a1a      	ldr	r2, [r3, #32]
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	f003 031f 	and.w	r3, r3, #31
 8003c6e:	6879      	ldr	r1, [r7, #4]
 8003c70:	fa01 f303 	lsl.w	r3, r1, r3
 8003c74:	431a      	orrs	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	621a      	str	r2, [r3, #32]
}
 8003c7a:	bf00      	nop
 8003c7c:	371c      	adds	r7, #28
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bc80      	pop	{r7}
 8003c82:	4770      	bx	lr

08003c84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d101      	bne.n	8003c9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c98:	2302      	movs	r3, #2
 8003c9a:	e046      	b.n	8003d2a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2202      	movs	r2, #2
 8003ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a16      	ldr	r2, [pc, #88]	@ (8003d34 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d00e      	beq.n	8003cfe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ce8:	d009      	beq.n	8003cfe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a12      	ldr	r2, [pc, #72]	@ (8003d38 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d004      	beq.n	8003cfe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a10      	ldr	r2, [pc, #64]	@ (8003d3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d10c      	bne.n	8003d18 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	68ba      	ldr	r2, [r7, #8]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68ba      	ldr	r2, [r7, #8]
 8003d16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3714      	adds	r7, #20
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bc80      	pop	{r7}
 8003d32:	4770      	bx	lr
 8003d34:	40012c00 	.word	0x40012c00
 8003d38:	40000400 	.word	0x40000400
 8003d3c:	40000800 	.word	0x40000800

08003d40 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d101      	bne.n	8003d5c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003d58:	2302      	movs	r3, #2
 8003d5a:	e03d      	b.n	8003dd8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bc80      	pop	{r7}
 8003de0:	4770      	bx	lr
	...

08003de4 <sniprintf>:
 8003de4:	b40c      	push	{r2, r3}
 8003de6:	b530      	push	{r4, r5, lr}
 8003de8:	4b18      	ldr	r3, [pc, #96]	@ (8003e4c <sniprintf+0x68>)
 8003dea:	1e0c      	subs	r4, r1, #0
 8003dec:	681d      	ldr	r5, [r3, #0]
 8003dee:	b09d      	sub	sp, #116	@ 0x74
 8003df0:	da08      	bge.n	8003e04 <sniprintf+0x20>
 8003df2:	238b      	movs	r3, #139	@ 0x8b
 8003df4:	f04f 30ff 	mov.w	r0, #4294967295
 8003df8:	602b      	str	r3, [r5, #0]
 8003dfa:	b01d      	add	sp, #116	@ 0x74
 8003dfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e00:	b002      	add	sp, #8
 8003e02:	4770      	bx	lr
 8003e04:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003e08:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003e0c:	f04f 0300 	mov.w	r3, #0
 8003e10:	931b      	str	r3, [sp, #108]	@ 0x6c
 8003e12:	bf0c      	ite	eq
 8003e14:	4623      	moveq	r3, r4
 8003e16:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003e1a:	9304      	str	r3, [sp, #16]
 8003e1c:	9307      	str	r3, [sp, #28]
 8003e1e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003e22:	9002      	str	r0, [sp, #8]
 8003e24:	9006      	str	r0, [sp, #24]
 8003e26:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003e2a:	4628      	mov	r0, r5
 8003e2c:	ab21      	add	r3, sp, #132	@ 0x84
 8003e2e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003e30:	a902      	add	r1, sp, #8
 8003e32:	9301      	str	r3, [sp, #4]
 8003e34:	f000 f992 	bl	800415c <_svfiprintf_r>
 8003e38:	1c43      	adds	r3, r0, #1
 8003e3a:	bfbc      	itt	lt
 8003e3c:	238b      	movlt	r3, #139	@ 0x8b
 8003e3e:	602b      	strlt	r3, [r5, #0]
 8003e40:	2c00      	cmp	r4, #0
 8003e42:	d0da      	beq.n	8003dfa <sniprintf+0x16>
 8003e44:	2200      	movs	r2, #0
 8003e46:	9b02      	ldr	r3, [sp, #8]
 8003e48:	701a      	strb	r2, [r3, #0]
 8003e4a:	e7d6      	b.n	8003dfa <sniprintf+0x16>
 8003e4c:	20000090 	.word	0x20000090

08003e50 <memset>:
 8003e50:	4603      	mov	r3, r0
 8003e52:	4402      	add	r2, r0
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d100      	bne.n	8003e5a <memset+0xa>
 8003e58:	4770      	bx	lr
 8003e5a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e5e:	e7f9      	b.n	8003e54 <memset+0x4>

08003e60 <__errno>:
 8003e60:	4b01      	ldr	r3, [pc, #4]	@ (8003e68 <__errno+0x8>)
 8003e62:	6818      	ldr	r0, [r3, #0]
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	20000090 	.word	0x20000090

08003e6c <__libc_init_array>:
 8003e6c:	b570      	push	{r4, r5, r6, lr}
 8003e6e:	2600      	movs	r6, #0
 8003e70:	4d0c      	ldr	r5, [pc, #48]	@ (8003ea4 <__libc_init_array+0x38>)
 8003e72:	4c0d      	ldr	r4, [pc, #52]	@ (8003ea8 <__libc_init_array+0x3c>)
 8003e74:	1b64      	subs	r4, r4, r5
 8003e76:	10a4      	asrs	r4, r4, #2
 8003e78:	42a6      	cmp	r6, r4
 8003e7a:	d109      	bne.n	8003e90 <__libc_init_array+0x24>
 8003e7c:	f000 fc76 	bl	800476c <_init>
 8003e80:	2600      	movs	r6, #0
 8003e82:	4d0a      	ldr	r5, [pc, #40]	@ (8003eac <__libc_init_array+0x40>)
 8003e84:	4c0a      	ldr	r4, [pc, #40]	@ (8003eb0 <__libc_init_array+0x44>)
 8003e86:	1b64      	subs	r4, r4, r5
 8003e88:	10a4      	asrs	r4, r4, #2
 8003e8a:	42a6      	cmp	r6, r4
 8003e8c:	d105      	bne.n	8003e9a <__libc_init_array+0x2e>
 8003e8e:	bd70      	pop	{r4, r5, r6, pc}
 8003e90:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e94:	4798      	blx	r3
 8003e96:	3601      	adds	r6, #1
 8003e98:	e7ee      	b.n	8003e78 <__libc_init_array+0xc>
 8003e9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e9e:	4798      	blx	r3
 8003ea0:	3601      	adds	r6, #1
 8003ea2:	e7f2      	b.n	8003e8a <__libc_init_array+0x1e>
 8003ea4:	08004928 	.word	0x08004928
 8003ea8:	08004928 	.word	0x08004928
 8003eac:	08004928 	.word	0x08004928
 8003eb0:	0800492c 	.word	0x0800492c

08003eb4 <__retarget_lock_acquire_recursive>:
 8003eb4:	4770      	bx	lr

08003eb6 <__retarget_lock_release_recursive>:
 8003eb6:	4770      	bx	lr

08003eb8 <_free_r>:
 8003eb8:	b538      	push	{r3, r4, r5, lr}
 8003eba:	4605      	mov	r5, r0
 8003ebc:	2900      	cmp	r1, #0
 8003ebe:	d040      	beq.n	8003f42 <_free_r+0x8a>
 8003ec0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ec4:	1f0c      	subs	r4, r1, #4
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	bfb8      	it	lt
 8003eca:	18e4      	addlt	r4, r4, r3
 8003ecc:	f000 f8de 	bl	800408c <__malloc_lock>
 8003ed0:	4a1c      	ldr	r2, [pc, #112]	@ (8003f44 <_free_r+0x8c>)
 8003ed2:	6813      	ldr	r3, [r2, #0]
 8003ed4:	b933      	cbnz	r3, 8003ee4 <_free_r+0x2c>
 8003ed6:	6063      	str	r3, [r4, #4]
 8003ed8:	6014      	str	r4, [r2, #0]
 8003eda:	4628      	mov	r0, r5
 8003edc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ee0:	f000 b8da 	b.w	8004098 <__malloc_unlock>
 8003ee4:	42a3      	cmp	r3, r4
 8003ee6:	d908      	bls.n	8003efa <_free_r+0x42>
 8003ee8:	6820      	ldr	r0, [r4, #0]
 8003eea:	1821      	adds	r1, r4, r0
 8003eec:	428b      	cmp	r3, r1
 8003eee:	bf01      	itttt	eq
 8003ef0:	6819      	ldreq	r1, [r3, #0]
 8003ef2:	685b      	ldreq	r3, [r3, #4]
 8003ef4:	1809      	addeq	r1, r1, r0
 8003ef6:	6021      	streq	r1, [r4, #0]
 8003ef8:	e7ed      	b.n	8003ed6 <_free_r+0x1e>
 8003efa:	461a      	mov	r2, r3
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	b10b      	cbz	r3, 8003f04 <_free_r+0x4c>
 8003f00:	42a3      	cmp	r3, r4
 8003f02:	d9fa      	bls.n	8003efa <_free_r+0x42>
 8003f04:	6811      	ldr	r1, [r2, #0]
 8003f06:	1850      	adds	r0, r2, r1
 8003f08:	42a0      	cmp	r0, r4
 8003f0a:	d10b      	bne.n	8003f24 <_free_r+0x6c>
 8003f0c:	6820      	ldr	r0, [r4, #0]
 8003f0e:	4401      	add	r1, r0
 8003f10:	1850      	adds	r0, r2, r1
 8003f12:	4283      	cmp	r3, r0
 8003f14:	6011      	str	r1, [r2, #0]
 8003f16:	d1e0      	bne.n	8003eda <_free_r+0x22>
 8003f18:	6818      	ldr	r0, [r3, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	4408      	add	r0, r1
 8003f1e:	6010      	str	r0, [r2, #0]
 8003f20:	6053      	str	r3, [r2, #4]
 8003f22:	e7da      	b.n	8003eda <_free_r+0x22>
 8003f24:	d902      	bls.n	8003f2c <_free_r+0x74>
 8003f26:	230c      	movs	r3, #12
 8003f28:	602b      	str	r3, [r5, #0]
 8003f2a:	e7d6      	b.n	8003eda <_free_r+0x22>
 8003f2c:	6820      	ldr	r0, [r4, #0]
 8003f2e:	1821      	adds	r1, r4, r0
 8003f30:	428b      	cmp	r3, r1
 8003f32:	bf01      	itttt	eq
 8003f34:	6819      	ldreq	r1, [r3, #0]
 8003f36:	685b      	ldreq	r3, [r3, #4]
 8003f38:	1809      	addeq	r1, r1, r0
 8003f3a:	6021      	streq	r1, [r4, #0]
 8003f3c:	6063      	str	r3, [r4, #4]
 8003f3e:	6054      	str	r4, [r2, #4]
 8003f40:	e7cb      	b.n	8003eda <_free_r+0x22>
 8003f42:	bd38      	pop	{r3, r4, r5, pc}
 8003f44:	20001074 	.word	0x20001074

08003f48 <sbrk_aligned>:
 8003f48:	b570      	push	{r4, r5, r6, lr}
 8003f4a:	4e0f      	ldr	r6, [pc, #60]	@ (8003f88 <sbrk_aligned+0x40>)
 8003f4c:	460c      	mov	r4, r1
 8003f4e:	6831      	ldr	r1, [r6, #0]
 8003f50:	4605      	mov	r5, r0
 8003f52:	b911      	cbnz	r1, 8003f5a <sbrk_aligned+0x12>
 8003f54:	f000 fba8 	bl	80046a8 <_sbrk_r>
 8003f58:	6030      	str	r0, [r6, #0]
 8003f5a:	4621      	mov	r1, r4
 8003f5c:	4628      	mov	r0, r5
 8003f5e:	f000 fba3 	bl	80046a8 <_sbrk_r>
 8003f62:	1c43      	adds	r3, r0, #1
 8003f64:	d103      	bne.n	8003f6e <sbrk_aligned+0x26>
 8003f66:	f04f 34ff 	mov.w	r4, #4294967295
 8003f6a:	4620      	mov	r0, r4
 8003f6c:	bd70      	pop	{r4, r5, r6, pc}
 8003f6e:	1cc4      	adds	r4, r0, #3
 8003f70:	f024 0403 	bic.w	r4, r4, #3
 8003f74:	42a0      	cmp	r0, r4
 8003f76:	d0f8      	beq.n	8003f6a <sbrk_aligned+0x22>
 8003f78:	1a21      	subs	r1, r4, r0
 8003f7a:	4628      	mov	r0, r5
 8003f7c:	f000 fb94 	bl	80046a8 <_sbrk_r>
 8003f80:	3001      	adds	r0, #1
 8003f82:	d1f2      	bne.n	8003f6a <sbrk_aligned+0x22>
 8003f84:	e7ef      	b.n	8003f66 <sbrk_aligned+0x1e>
 8003f86:	bf00      	nop
 8003f88:	20001070 	.word	0x20001070

08003f8c <_malloc_r>:
 8003f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f90:	1ccd      	adds	r5, r1, #3
 8003f92:	f025 0503 	bic.w	r5, r5, #3
 8003f96:	3508      	adds	r5, #8
 8003f98:	2d0c      	cmp	r5, #12
 8003f9a:	bf38      	it	cc
 8003f9c:	250c      	movcc	r5, #12
 8003f9e:	2d00      	cmp	r5, #0
 8003fa0:	4606      	mov	r6, r0
 8003fa2:	db01      	blt.n	8003fa8 <_malloc_r+0x1c>
 8003fa4:	42a9      	cmp	r1, r5
 8003fa6:	d904      	bls.n	8003fb2 <_malloc_r+0x26>
 8003fa8:	230c      	movs	r3, #12
 8003faa:	6033      	str	r3, [r6, #0]
 8003fac:	2000      	movs	r0, #0
 8003fae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fb2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004088 <_malloc_r+0xfc>
 8003fb6:	f000 f869 	bl	800408c <__malloc_lock>
 8003fba:	f8d8 3000 	ldr.w	r3, [r8]
 8003fbe:	461c      	mov	r4, r3
 8003fc0:	bb44      	cbnz	r4, 8004014 <_malloc_r+0x88>
 8003fc2:	4629      	mov	r1, r5
 8003fc4:	4630      	mov	r0, r6
 8003fc6:	f7ff ffbf 	bl	8003f48 <sbrk_aligned>
 8003fca:	1c43      	adds	r3, r0, #1
 8003fcc:	4604      	mov	r4, r0
 8003fce:	d158      	bne.n	8004082 <_malloc_r+0xf6>
 8003fd0:	f8d8 4000 	ldr.w	r4, [r8]
 8003fd4:	4627      	mov	r7, r4
 8003fd6:	2f00      	cmp	r7, #0
 8003fd8:	d143      	bne.n	8004062 <_malloc_r+0xd6>
 8003fda:	2c00      	cmp	r4, #0
 8003fdc:	d04b      	beq.n	8004076 <_malloc_r+0xea>
 8003fde:	6823      	ldr	r3, [r4, #0]
 8003fe0:	4639      	mov	r1, r7
 8003fe2:	4630      	mov	r0, r6
 8003fe4:	eb04 0903 	add.w	r9, r4, r3
 8003fe8:	f000 fb5e 	bl	80046a8 <_sbrk_r>
 8003fec:	4581      	cmp	r9, r0
 8003fee:	d142      	bne.n	8004076 <_malloc_r+0xea>
 8003ff0:	6821      	ldr	r1, [r4, #0]
 8003ff2:	4630      	mov	r0, r6
 8003ff4:	1a6d      	subs	r5, r5, r1
 8003ff6:	4629      	mov	r1, r5
 8003ff8:	f7ff ffa6 	bl	8003f48 <sbrk_aligned>
 8003ffc:	3001      	adds	r0, #1
 8003ffe:	d03a      	beq.n	8004076 <_malloc_r+0xea>
 8004000:	6823      	ldr	r3, [r4, #0]
 8004002:	442b      	add	r3, r5
 8004004:	6023      	str	r3, [r4, #0]
 8004006:	f8d8 3000 	ldr.w	r3, [r8]
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	bb62      	cbnz	r2, 8004068 <_malloc_r+0xdc>
 800400e:	f8c8 7000 	str.w	r7, [r8]
 8004012:	e00f      	b.n	8004034 <_malloc_r+0xa8>
 8004014:	6822      	ldr	r2, [r4, #0]
 8004016:	1b52      	subs	r2, r2, r5
 8004018:	d420      	bmi.n	800405c <_malloc_r+0xd0>
 800401a:	2a0b      	cmp	r2, #11
 800401c:	d917      	bls.n	800404e <_malloc_r+0xc2>
 800401e:	1961      	adds	r1, r4, r5
 8004020:	42a3      	cmp	r3, r4
 8004022:	6025      	str	r5, [r4, #0]
 8004024:	bf18      	it	ne
 8004026:	6059      	strne	r1, [r3, #4]
 8004028:	6863      	ldr	r3, [r4, #4]
 800402a:	bf08      	it	eq
 800402c:	f8c8 1000 	streq.w	r1, [r8]
 8004030:	5162      	str	r2, [r4, r5]
 8004032:	604b      	str	r3, [r1, #4]
 8004034:	4630      	mov	r0, r6
 8004036:	f000 f82f 	bl	8004098 <__malloc_unlock>
 800403a:	f104 000b 	add.w	r0, r4, #11
 800403e:	1d23      	adds	r3, r4, #4
 8004040:	f020 0007 	bic.w	r0, r0, #7
 8004044:	1ac2      	subs	r2, r0, r3
 8004046:	bf1c      	itt	ne
 8004048:	1a1b      	subne	r3, r3, r0
 800404a:	50a3      	strne	r3, [r4, r2]
 800404c:	e7af      	b.n	8003fae <_malloc_r+0x22>
 800404e:	6862      	ldr	r2, [r4, #4]
 8004050:	42a3      	cmp	r3, r4
 8004052:	bf0c      	ite	eq
 8004054:	f8c8 2000 	streq.w	r2, [r8]
 8004058:	605a      	strne	r2, [r3, #4]
 800405a:	e7eb      	b.n	8004034 <_malloc_r+0xa8>
 800405c:	4623      	mov	r3, r4
 800405e:	6864      	ldr	r4, [r4, #4]
 8004060:	e7ae      	b.n	8003fc0 <_malloc_r+0x34>
 8004062:	463c      	mov	r4, r7
 8004064:	687f      	ldr	r7, [r7, #4]
 8004066:	e7b6      	b.n	8003fd6 <_malloc_r+0x4a>
 8004068:	461a      	mov	r2, r3
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	42a3      	cmp	r3, r4
 800406e:	d1fb      	bne.n	8004068 <_malloc_r+0xdc>
 8004070:	2300      	movs	r3, #0
 8004072:	6053      	str	r3, [r2, #4]
 8004074:	e7de      	b.n	8004034 <_malloc_r+0xa8>
 8004076:	230c      	movs	r3, #12
 8004078:	4630      	mov	r0, r6
 800407a:	6033      	str	r3, [r6, #0]
 800407c:	f000 f80c 	bl	8004098 <__malloc_unlock>
 8004080:	e794      	b.n	8003fac <_malloc_r+0x20>
 8004082:	6005      	str	r5, [r0, #0]
 8004084:	e7d6      	b.n	8004034 <_malloc_r+0xa8>
 8004086:	bf00      	nop
 8004088:	20001074 	.word	0x20001074

0800408c <__malloc_lock>:
 800408c:	4801      	ldr	r0, [pc, #4]	@ (8004094 <__malloc_lock+0x8>)
 800408e:	f7ff bf11 	b.w	8003eb4 <__retarget_lock_acquire_recursive>
 8004092:	bf00      	nop
 8004094:	2000106c 	.word	0x2000106c

08004098 <__malloc_unlock>:
 8004098:	4801      	ldr	r0, [pc, #4]	@ (80040a0 <__malloc_unlock+0x8>)
 800409a:	f7ff bf0c 	b.w	8003eb6 <__retarget_lock_release_recursive>
 800409e:	bf00      	nop
 80040a0:	2000106c 	.word	0x2000106c

080040a4 <__ssputs_r>:
 80040a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040a8:	461f      	mov	r7, r3
 80040aa:	688e      	ldr	r6, [r1, #8]
 80040ac:	4682      	mov	sl, r0
 80040ae:	42be      	cmp	r6, r7
 80040b0:	460c      	mov	r4, r1
 80040b2:	4690      	mov	r8, r2
 80040b4:	680b      	ldr	r3, [r1, #0]
 80040b6:	d82d      	bhi.n	8004114 <__ssputs_r+0x70>
 80040b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80040bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80040c0:	d026      	beq.n	8004110 <__ssputs_r+0x6c>
 80040c2:	6965      	ldr	r5, [r4, #20]
 80040c4:	6909      	ldr	r1, [r1, #16]
 80040c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80040ca:	eba3 0901 	sub.w	r9, r3, r1
 80040ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80040d2:	1c7b      	adds	r3, r7, #1
 80040d4:	444b      	add	r3, r9
 80040d6:	106d      	asrs	r5, r5, #1
 80040d8:	429d      	cmp	r5, r3
 80040da:	bf38      	it	cc
 80040dc:	461d      	movcc	r5, r3
 80040de:	0553      	lsls	r3, r2, #21
 80040e0:	d527      	bpl.n	8004132 <__ssputs_r+0x8e>
 80040e2:	4629      	mov	r1, r5
 80040e4:	f7ff ff52 	bl	8003f8c <_malloc_r>
 80040e8:	4606      	mov	r6, r0
 80040ea:	b360      	cbz	r0, 8004146 <__ssputs_r+0xa2>
 80040ec:	464a      	mov	r2, r9
 80040ee:	6921      	ldr	r1, [r4, #16]
 80040f0:	f000 faf8 	bl	80046e4 <memcpy>
 80040f4:	89a3      	ldrh	r3, [r4, #12]
 80040f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80040fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040fe:	81a3      	strh	r3, [r4, #12]
 8004100:	6126      	str	r6, [r4, #16]
 8004102:	444e      	add	r6, r9
 8004104:	6026      	str	r6, [r4, #0]
 8004106:	463e      	mov	r6, r7
 8004108:	6165      	str	r5, [r4, #20]
 800410a:	eba5 0509 	sub.w	r5, r5, r9
 800410e:	60a5      	str	r5, [r4, #8]
 8004110:	42be      	cmp	r6, r7
 8004112:	d900      	bls.n	8004116 <__ssputs_r+0x72>
 8004114:	463e      	mov	r6, r7
 8004116:	4632      	mov	r2, r6
 8004118:	4641      	mov	r1, r8
 800411a:	6820      	ldr	r0, [r4, #0]
 800411c:	f000 faaa 	bl	8004674 <memmove>
 8004120:	2000      	movs	r0, #0
 8004122:	68a3      	ldr	r3, [r4, #8]
 8004124:	1b9b      	subs	r3, r3, r6
 8004126:	60a3      	str	r3, [r4, #8]
 8004128:	6823      	ldr	r3, [r4, #0]
 800412a:	4433      	add	r3, r6
 800412c:	6023      	str	r3, [r4, #0]
 800412e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004132:	462a      	mov	r2, r5
 8004134:	f000 fae4 	bl	8004700 <_realloc_r>
 8004138:	4606      	mov	r6, r0
 800413a:	2800      	cmp	r0, #0
 800413c:	d1e0      	bne.n	8004100 <__ssputs_r+0x5c>
 800413e:	4650      	mov	r0, sl
 8004140:	6921      	ldr	r1, [r4, #16]
 8004142:	f7ff feb9 	bl	8003eb8 <_free_r>
 8004146:	230c      	movs	r3, #12
 8004148:	f8ca 3000 	str.w	r3, [sl]
 800414c:	89a3      	ldrh	r3, [r4, #12]
 800414e:	f04f 30ff 	mov.w	r0, #4294967295
 8004152:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004156:	81a3      	strh	r3, [r4, #12]
 8004158:	e7e9      	b.n	800412e <__ssputs_r+0x8a>
	...

0800415c <_svfiprintf_r>:
 800415c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004160:	4698      	mov	r8, r3
 8004162:	898b      	ldrh	r3, [r1, #12]
 8004164:	4607      	mov	r7, r0
 8004166:	061b      	lsls	r3, r3, #24
 8004168:	460d      	mov	r5, r1
 800416a:	4614      	mov	r4, r2
 800416c:	b09d      	sub	sp, #116	@ 0x74
 800416e:	d510      	bpl.n	8004192 <_svfiprintf_r+0x36>
 8004170:	690b      	ldr	r3, [r1, #16]
 8004172:	b973      	cbnz	r3, 8004192 <_svfiprintf_r+0x36>
 8004174:	2140      	movs	r1, #64	@ 0x40
 8004176:	f7ff ff09 	bl	8003f8c <_malloc_r>
 800417a:	6028      	str	r0, [r5, #0]
 800417c:	6128      	str	r0, [r5, #16]
 800417e:	b930      	cbnz	r0, 800418e <_svfiprintf_r+0x32>
 8004180:	230c      	movs	r3, #12
 8004182:	603b      	str	r3, [r7, #0]
 8004184:	f04f 30ff 	mov.w	r0, #4294967295
 8004188:	b01d      	add	sp, #116	@ 0x74
 800418a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800418e:	2340      	movs	r3, #64	@ 0x40
 8004190:	616b      	str	r3, [r5, #20]
 8004192:	2300      	movs	r3, #0
 8004194:	9309      	str	r3, [sp, #36]	@ 0x24
 8004196:	2320      	movs	r3, #32
 8004198:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800419c:	2330      	movs	r3, #48	@ 0x30
 800419e:	f04f 0901 	mov.w	r9, #1
 80041a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80041a6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004340 <_svfiprintf_r+0x1e4>
 80041aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80041ae:	4623      	mov	r3, r4
 80041b0:	469a      	mov	sl, r3
 80041b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041b6:	b10a      	cbz	r2, 80041bc <_svfiprintf_r+0x60>
 80041b8:	2a25      	cmp	r2, #37	@ 0x25
 80041ba:	d1f9      	bne.n	80041b0 <_svfiprintf_r+0x54>
 80041bc:	ebba 0b04 	subs.w	fp, sl, r4
 80041c0:	d00b      	beq.n	80041da <_svfiprintf_r+0x7e>
 80041c2:	465b      	mov	r3, fp
 80041c4:	4622      	mov	r2, r4
 80041c6:	4629      	mov	r1, r5
 80041c8:	4638      	mov	r0, r7
 80041ca:	f7ff ff6b 	bl	80040a4 <__ssputs_r>
 80041ce:	3001      	adds	r0, #1
 80041d0:	f000 80a7 	beq.w	8004322 <_svfiprintf_r+0x1c6>
 80041d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80041d6:	445a      	add	r2, fp
 80041d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80041da:	f89a 3000 	ldrb.w	r3, [sl]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f000 809f 	beq.w	8004322 <_svfiprintf_r+0x1c6>
 80041e4:	2300      	movs	r3, #0
 80041e6:	f04f 32ff 	mov.w	r2, #4294967295
 80041ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041ee:	f10a 0a01 	add.w	sl, sl, #1
 80041f2:	9304      	str	r3, [sp, #16]
 80041f4:	9307      	str	r3, [sp, #28]
 80041f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80041fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80041fc:	4654      	mov	r4, sl
 80041fe:	2205      	movs	r2, #5
 8004200:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004204:	484e      	ldr	r0, [pc, #312]	@ (8004340 <_svfiprintf_r+0x1e4>)
 8004206:	f000 fa5f 	bl	80046c8 <memchr>
 800420a:	9a04      	ldr	r2, [sp, #16]
 800420c:	b9d8      	cbnz	r0, 8004246 <_svfiprintf_r+0xea>
 800420e:	06d0      	lsls	r0, r2, #27
 8004210:	bf44      	itt	mi
 8004212:	2320      	movmi	r3, #32
 8004214:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004218:	0711      	lsls	r1, r2, #28
 800421a:	bf44      	itt	mi
 800421c:	232b      	movmi	r3, #43	@ 0x2b
 800421e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004222:	f89a 3000 	ldrb.w	r3, [sl]
 8004226:	2b2a      	cmp	r3, #42	@ 0x2a
 8004228:	d015      	beq.n	8004256 <_svfiprintf_r+0xfa>
 800422a:	4654      	mov	r4, sl
 800422c:	2000      	movs	r0, #0
 800422e:	f04f 0c0a 	mov.w	ip, #10
 8004232:	9a07      	ldr	r2, [sp, #28]
 8004234:	4621      	mov	r1, r4
 8004236:	f811 3b01 	ldrb.w	r3, [r1], #1
 800423a:	3b30      	subs	r3, #48	@ 0x30
 800423c:	2b09      	cmp	r3, #9
 800423e:	d94b      	bls.n	80042d8 <_svfiprintf_r+0x17c>
 8004240:	b1b0      	cbz	r0, 8004270 <_svfiprintf_r+0x114>
 8004242:	9207      	str	r2, [sp, #28]
 8004244:	e014      	b.n	8004270 <_svfiprintf_r+0x114>
 8004246:	eba0 0308 	sub.w	r3, r0, r8
 800424a:	fa09 f303 	lsl.w	r3, r9, r3
 800424e:	4313      	orrs	r3, r2
 8004250:	46a2      	mov	sl, r4
 8004252:	9304      	str	r3, [sp, #16]
 8004254:	e7d2      	b.n	80041fc <_svfiprintf_r+0xa0>
 8004256:	9b03      	ldr	r3, [sp, #12]
 8004258:	1d19      	adds	r1, r3, #4
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	9103      	str	r1, [sp, #12]
 800425e:	2b00      	cmp	r3, #0
 8004260:	bfbb      	ittet	lt
 8004262:	425b      	neglt	r3, r3
 8004264:	f042 0202 	orrlt.w	r2, r2, #2
 8004268:	9307      	strge	r3, [sp, #28]
 800426a:	9307      	strlt	r3, [sp, #28]
 800426c:	bfb8      	it	lt
 800426e:	9204      	strlt	r2, [sp, #16]
 8004270:	7823      	ldrb	r3, [r4, #0]
 8004272:	2b2e      	cmp	r3, #46	@ 0x2e
 8004274:	d10a      	bne.n	800428c <_svfiprintf_r+0x130>
 8004276:	7863      	ldrb	r3, [r4, #1]
 8004278:	2b2a      	cmp	r3, #42	@ 0x2a
 800427a:	d132      	bne.n	80042e2 <_svfiprintf_r+0x186>
 800427c:	9b03      	ldr	r3, [sp, #12]
 800427e:	3402      	adds	r4, #2
 8004280:	1d1a      	adds	r2, r3, #4
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	9203      	str	r2, [sp, #12]
 8004286:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800428a:	9305      	str	r3, [sp, #20]
 800428c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004344 <_svfiprintf_r+0x1e8>
 8004290:	2203      	movs	r2, #3
 8004292:	4650      	mov	r0, sl
 8004294:	7821      	ldrb	r1, [r4, #0]
 8004296:	f000 fa17 	bl	80046c8 <memchr>
 800429a:	b138      	cbz	r0, 80042ac <_svfiprintf_r+0x150>
 800429c:	2240      	movs	r2, #64	@ 0x40
 800429e:	9b04      	ldr	r3, [sp, #16]
 80042a0:	eba0 000a 	sub.w	r0, r0, sl
 80042a4:	4082      	lsls	r2, r0
 80042a6:	4313      	orrs	r3, r2
 80042a8:	3401      	adds	r4, #1
 80042aa:	9304      	str	r3, [sp, #16]
 80042ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042b0:	2206      	movs	r2, #6
 80042b2:	4825      	ldr	r0, [pc, #148]	@ (8004348 <_svfiprintf_r+0x1ec>)
 80042b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80042b8:	f000 fa06 	bl	80046c8 <memchr>
 80042bc:	2800      	cmp	r0, #0
 80042be:	d036      	beq.n	800432e <_svfiprintf_r+0x1d2>
 80042c0:	4b22      	ldr	r3, [pc, #136]	@ (800434c <_svfiprintf_r+0x1f0>)
 80042c2:	bb1b      	cbnz	r3, 800430c <_svfiprintf_r+0x1b0>
 80042c4:	9b03      	ldr	r3, [sp, #12]
 80042c6:	3307      	adds	r3, #7
 80042c8:	f023 0307 	bic.w	r3, r3, #7
 80042cc:	3308      	adds	r3, #8
 80042ce:	9303      	str	r3, [sp, #12]
 80042d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042d2:	4433      	add	r3, r6
 80042d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80042d6:	e76a      	b.n	80041ae <_svfiprintf_r+0x52>
 80042d8:	460c      	mov	r4, r1
 80042da:	2001      	movs	r0, #1
 80042dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80042e0:	e7a8      	b.n	8004234 <_svfiprintf_r+0xd8>
 80042e2:	2300      	movs	r3, #0
 80042e4:	f04f 0c0a 	mov.w	ip, #10
 80042e8:	4619      	mov	r1, r3
 80042ea:	3401      	adds	r4, #1
 80042ec:	9305      	str	r3, [sp, #20]
 80042ee:	4620      	mov	r0, r4
 80042f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042f4:	3a30      	subs	r2, #48	@ 0x30
 80042f6:	2a09      	cmp	r2, #9
 80042f8:	d903      	bls.n	8004302 <_svfiprintf_r+0x1a6>
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d0c6      	beq.n	800428c <_svfiprintf_r+0x130>
 80042fe:	9105      	str	r1, [sp, #20]
 8004300:	e7c4      	b.n	800428c <_svfiprintf_r+0x130>
 8004302:	4604      	mov	r4, r0
 8004304:	2301      	movs	r3, #1
 8004306:	fb0c 2101 	mla	r1, ip, r1, r2
 800430a:	e7f0      	b.n	80042ee <_svfiprintf_r+0x192>
 800430c:	ab03      	add	r3, sp, #12
 800430e:	9300      	str	r3, [sp, #0]
 8004310:	462a      	mov	r2, r5
 8004312:	4638      	mov	r0, r7
 8004314:	4b0e      	ldr	r3, [pc, #56]	@ (8004350 <_svfiprintf_r+0x1f4>)
 8004316:	a904      	add	r1, sp, #16
 8004318:	f3af 8000 	nop.w
 800431c:	1c42      	adds	r2, r0, #1
 800431e:	4606      	mov	r6, r0
 8004320:	d1d6      	bne.n	80042d0 <_svfiprintf_r+0x174>
 8004322:	89ab      	ldrh	r3, [r5, #12]
 8004324:	065b      	lsls	r3, r3, #25
 8004326:	f53f af2d 	bmi.w	8004184 <_svfiprintf_r+0x28>
 800432a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800432c:	e72c      	b.n	8004188 <_svfiprintf_r+0x2c>
 800432e:	ab03      	add	r3, sp, #12
 8004330:	9300      	str	r3, [sp, #0]
 8004332:	462a      	mov	r2, r5
 8004334:	4638      	mov	r0, r7
 8004336:	4b06      	ldr	r3, [pc, #24]	@ (8004350 <_svfiprintf_r+0x1f4>)
 8004338:	a904      	add	r1, sp, #16
 800433a:	f000 f87d 	bl	8004438 <_printf_i>
 800433e:	e7ed      	b.n	800431c <_svfiprintf_r+0x1c0>
 8004340:	080048ea 	.word	0x080048ea
 8004344:	080048f0 	.word	0x080048f0
 8004348:	080048f4 	.word	0x080048f4
 800434c:	00000000 	.word	0x00000000
 8004350:	080040a5 	.word	0x080040a5

08004354 <_printf_common>:
 8004354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004358:	4616      	mov	r6, r2
 800435a:	4698      	mov	r8, r3
 800435c:	688a      	ldr	r2, [r1, #8]
 800435e:	690b      	ldr	r3, [r1, #16]
 8004360:	4607      	mov	r7, r0
 8004362:	4293      	cmp	r3, r2
 8004364:	bfb8      	it	lt
 8004366:	4613      	movlt	r3, r2
 8004368:	6033      	str	r3, [r6, #0]
 800436a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800436e:	460c      	mov	r4, r1
 8004370:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004374:	b10a      	cbz	r2, 800437a <_printf_common+0x26>
 8004376:	3301      	adds	r3, #1
 8004378:	6033      	str	r3, [r6, #0]
 800437a:	6823      	ldr	r3, [r4, #0]
 800437c:	0699      	lsls	r1, r3, #26
 800437e:	bf42      	ittt	mi
 8004380:	6833      	ldrmi	r3, [r6, #0]
 8004382:	3302      	addmi	r3, #2
 8004384:	6033      	strmi	r3, [r6, #0]
 8004386:	6825      	ldr	r5, [r4, #0]
 8004388:	f015 0506 	ands.w	r5, r5, #6
 800438c:	d106      	bne.n	800439c <_printf_common+0x48>
 800438e:	f104 0a19 	add.w	sl, r4, #25
 8004392:	68e3      	ldr	r3, [r4, #12]
 8004394:	6832      	ldr	r2, [r6, #0]
 8004396:	1a9b      	subs	r3, r3, r2
 8004398:	42ab      	cmp	r3, r5
 800439a:	dc2b      	bgt.n	80043f4 <_printf_common+0xa0>
 800439c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80043a0:	6822      	ldr	r2, [r4, #0]
 80043a2:	3b00      	subs	r3, #0
 80043a4:	bf18      	it	ne
 80043a6:	2301      	movne	r3, #1
 80043a8:	0692      	lsls	r2, r2, #26
 80043aa:	d430      	bmi.n	800440e <_printf_common+0xba>
 80043ac:	4641      	mov	r1, r8
 80043ae:	4638      	mov	r0, r7
 80043b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80043b4:	47c8      	blx	r9
 80043b6:	3001      	adds	r0, #1
 80043b8:	d023      	beq.n	8004402 <_printf_common+0xae>
 80043ba:	6823      	ldr	r3, [r4, #0]
 80043bc:	6922      	ldr	r2, [r4, #16]
 80043be:	f003 0306 	and.w	r3, r3, #6
 80043c2:	2b04      	cmp	r3, #4
 80043c4:	bf14      	ite	ne
 80043c6:	2500      	movne	r5, #0
 80043c8:	6833      	ldreq	r3, [r6, #0]
 80043ca:	f04f 0600 	mov.w	r6, #0
 80043ce:	bf08      	it	eq
 80043d0:	68e5      	ldreq	r5, [r4, #12]
 80043d2:	f104 041a 	add.w	r4, r4, #26
 80043d6:	bf08      	it	eq
 80043d8:	1aed      	subeq	r5, r5, r3
 80043da:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80043de:	bf08      	it	eq
 80043e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043e4:	4293      	cmp	r3, r2
 80043e6:	bfc4      	itt	gt
 80043e8:	1a9b      	subgt	r3, r3, r2
 80043ea:	18ed      	addgt	r5, r5, r3
 80043ec:	42b5      	cmp	r5, r6
 80043ee:	d11a      	bne.n	8004426 <_printf_common+0xd2>
 80043f0:	2000      	movs	r0, #0
 80043f2:	e008      	b.n	8004406 <_printf_common+0xb2>
 80043f4:	2301      	movs	r3, #1
 80043f6:	4652      	mov	r2, sl
 80043f8:	4641      	mov	r1, r8
 80043fa:	4638      	mov	r0, r7
 80043fc:	47c8      	blx	r9
 80043fe:	3001      	adds	r0, #1
 8004400:	d103      	bne.n	800440a <_printf_common+0xb6>
 8004402:	f04f 30ff 	mov.w	r0, #4294967295
 8004406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800440a:	3501      	adds	r5, #1
 800440c:	e7c1      	b.n	8004392 <_printf_common+0x3e>
 800440e:	2030      	movs	r0, #48	@ 0x30
 8004410:	18e1      	adds	r1, r4, r3
 8004412:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004416:	1c5a      	adds	r2, r3, #1
 8004418:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800441c:	4422      	add	r2, r4
 800441e:	3302      	adds	r3, #2
 8004420:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004424:	e7c2      	b.n	80043ac <_printf_common+0x58>
 8004426:	2301      	movs	r3, #1
 8004428:	4622      	mov	r2, r4
 800442a:	4641      	mov	r1, r8
 800442c:	4638      	mov	r0, r7
 800442e:	47c8      	blx	r9
 8004430:	3001      	adds	r0, #1
 8004432:	d0e6      	beq.n	8004402 <_printf_common+0xae>
 8004434:	3601      	adds	r6, #1
 8004436:	e7d9      	b.n	80043ec <_printf_common+0x98>

08004438 <_printf_i>:
 8004438:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800443c:	7e0f      	ldrb	r7, [r1, #24]
 800443e:	4691      	mov	r9, r2
 8004440:	2f78      	cmp	r7, #120	@ 0x78
 8004442:	4680      	mov	r8, r0
 8004444:	460c      	mov	r4, r1
 8004446:	469a      	mov	sl, r3
 8004448:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800444a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800444e:	d807      	bhi.n	8004460 <_printf_i+0x28>
 8004450:	2f62      	cmp	r7, #98	@ 0x62
 8004452:	d80a      	bhi.n	800446a <_printf_i+0x32>
 8004454:	2f00      	cmp	r7, #0
 8004456:	f000 80d1 	beq.w	80045fc <_printf_i+0x1c4>
 800445a:	2f58      	cmp	r7, #88	@ 0x58
 800445c:	f000 80b8 	beq.w	80045d0 <_printf_i+0x198>
 8004460:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004464:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004468:	e03a      	b.n	80044e0 <_printf_i+0xa8>
 800446a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800446e:	2b15      	cmp	r3, #21
 8004470:	d8f6      	bhi.n	8004460 <_printf_i+0x28>
 8004472:	a101      	add	r1, pc, #4	@ (adr r1, 8004478 <_printf_i+0x40>)
 8004474:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004478:	080044d1 	.word	0x080044d1
 800447c:	080044e5 	.word	0x080044e5
 8004480:	08004461 	.word	0x08004461
 8004484:	08004461 	.word	0x08004461
 8004488:	08004461 	.word	0x08004461
 800448c:	08004461 	.word	0x08004461
 8004490:	080044e5 	.word	0x080044e5
 8004494:	08004461 	.word	0x08004461
 8004498:	08004461 	.word	0x08004461
 800449c:	08004461 	.word	0x08004461
 80044a0:	08004461 	.word	0x08004461
 80044a4:	080045e3 	.word	0x080045e3
 80044a8:	0800450f 	.word	0x0800450f
 80044ac:	0800459d 	.word	0x0800459d
 80044b0:	08004461 	.word	0x08004461
 80044b4:	08004461 	.word	0x08004461
 80044b8:	08004605 	.word	0x08004605
 80044bc:	08004461 	.word	0x08004461
 80044c0:	0800450f 	.word	0x0800450f
 80044c4:	08004461 	.word	0x08004461
 80044c8:	08004461 	.word	0x08004461
 80044cc:	080045a5 	.word	0x080045a5
 80044d0:	6833      	ldr	r3, [r6, #0]
 80044d2:	1d1a      	adds	r2, r3, #4
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	6032      	str	r2, [r6, #0]
 80044d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80044e0:	2301      	movs	r3, #1
 80044e2:	e09c      	b.n	800461e <_printf_i+0x1e6>
 80044e4:	6833      	ldr	r3, [r6, #0]
 80044e6:	6820      	ldr	r0, [r4, #0]
 80044e8:	1d19      	adds	r1, r3, #4
 80044ea:	6031      	str	r1, [r6, #0]
 80044ec:	0606      	lsls	r6, r0, #24
 80044ee:	d501      	bpl.n	80044f4 <_printf_i+0xbc>
 80044f0:	681d      	ldr	r5, [r3, #0]
 80044f2:	e003      	b.n	80044fc <_printf_i+0xc4>
 80044f4:	0645      	lsls	r5, r0, #25
 80044f6:	d5fb      	bpl.n	80044f0 <_printf_i+0xb8>
 80044f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80044fc:	2d00      	cmp	r5, #0
 80044fe:	da03      	bge.n	8004508 <_printf_i+0xd0>
 8004500:	232d      	movs	r3, #45	@ 0x2d
 8004502:	426d      	negs	r5, r5
 8004504:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004508:	230a      	movs	r3, #10
 800450a:	4858      	ldr	r0, [pc, #352]	@ (800466c <_printf_i+0x234>)
 800450c:	e011      	b.n	8004532 <_printf_i+0xfa>
 800450e:	6821      	ldr	r1, [r4, #0]
 8004510:	6833      	ldr	r3, [r6, #0]
 8004512:	0608      	lsls	r0, r1, #24
 8004514:	f853 5b04 	ldr.w	r5, [r3], #4
 8004518:	d402      	bmi.n	8004520 <_printf_i+0xe8>
 800451a:	0649      	lsls	r1, r1, #25
 800451c:	bf48      	it	mi
 800451e:	b2ad      	uxthmi	r5, r5
 8004520:	2f6f      	cmp	r7, #111	@ 0x6f
 8004522:	6033      	str	r3, [r6, #0]
 8004524:	bf14      	ite	ne
 8004526:	230a      	movne	r3, #10
 8004528:	2308      	moveq	r3, #8
 800452a:	4850      	ldr	r0, [pc, #320]	@ (800466c <_printf_i+0x234>)
 800452c:	2100      	movs	r1, #0
 800452e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004532:	6866      	ldr	r6, [r4, #4]
 8004534:	2e00      	cmp	r6, #0
 8004536:	60a6      	str	r6, [r4, #8]
 8004538:	db05      	blt.n	8004546 <_printf_i+0x10e>
 800453a:	6821      	ldr	r1, [r4, #0]
 800453c:	432e      	orrs	r6, r5
 800453e:	f021 0104 	bic.w	r1, r1, #4
 8004542:	6021      	str	r1, [r4, #0]
 8004544:	d04b      	beq.n	80045de <_printf_i+0x1a6>
 8004546:	4616      	mov	r6, r2
 8004548:	fbb5 f1f3 	udiv	r1, r5, r3
 800454c:	fb03 5711 	mls	r7, r3, r1, r5
 8004550:	5dc7      	ldrb	r7, [r0, r7]
 8004552:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004556:	462f      	mov	r7, r5
 8004558:	42bb      	cmp	r3, r7
 800455a:	460d      	mov	r5, r1
 800455c:	d9f4      	bls.n	8004548 <_printf_i+0x110>
 800455e:	2b08      	cmp	r3, #8
 8004560:	d10b      	bne.n	800457a <_printf_i+0x142>
 8004562:	6823      	ldr	r3, [r4, #0]
 8004564:	07df      	lsls	r7, r3, #31
 8004566:	d508      	bpl.n	800457a <_printf_i+0x142>
 8004568:	6923      	ldr	r3, [r4, #16]
 800456a:	6861      	ldr	r1, [r4, #4]
 800456c:	4299      	cmp	r1, r3
 800456e:	bfde      	ittt	le
 8004570:	2330      	movle	r3, #48	@ 0x30
 8004572:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004576:	f106 36ff 	addle.w	r6, r6, #4294967295
 800457a:	1b92      	subs	r2, r2, r6
 800457c:	6122      	str	r2, [r4, #16]
 800457e:	464b      	mov	r3, r9
 8004580:	4621      	mov	r1, r4
 8004582:	4640      	mov	r0, r8
 8004584:	f8cd a000 	str.w	sl, [sp]
 8004588:	aa03      	add	r2, sp, #12
 800458a:	f7ff fee3 	bl	8004354 <_printf_common>
 800458e:	3001      	adds	r0, #1
 8004590:	d14a      	bne.n	8004628 <_printf_i+0x1f0>
 8004592:	f04f 30ff 	mov.w	r0, #4294967295
 8004596:	b004      	add	sp, #16
 8004598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800459c:	6823      	ldr	r3, [r4, #0]
 800459e:	f043 0320 	orr.w	r3, r3, #32
 80045a2:	6023      	str	r3, [r4, #0]
 80045a4:	2778      	movs	r7, #120	@ 0x78
 80045a6:	4832      	ldr	r0, [pc, #200]	@ (8004670 <_printf_i+0x238>)
 80045a8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80045ac:	6823      	ldr	r3, [r4, #0]
 80045ae:	6831      	ldr	r1, [r6, #0]
 80045b0:	061f      	lsls	r7, r3, #24
 80045b2:	f851 5b04 	ldr.w	r5, [r1], #4
 80045b6:	d402      	bmi.n	80045be <_printf_i+0x186>
 80045b8:	065f      	lsls	r7, r3, #25
 80045ba:	bf48      	it	mi
 80045bc:	b2ad      	uxthmi	r5, r5
 80045be:	6031      	str	r1, [r6, #0]
 80045c0:	07d9      	lsls	r1, r3, #31
 80045c2:	bf44      	itt	mi
 80045c4:	f043 0320 	orrmi.w	r3, r3, #32
 80045c8:	6023      	strmi	r3, [r4, #0]
 80045ca:	b11d      	cbz	r5, 80045d4 <_printf_i+0x19c>
 80045cc:	2310      	movs	r3, #16
 80045ce:	e7ad      	b.n	800452c <_printf_i+0xf4>
 80045d0:	4826      	ldr	r0, [pc, #152]	@ (800466c <_printf_i+0x234>)
 80045d2:	e7e9      	b.n	80045a8 <_printf_i+0x170>
 80045d4:	6823      	ldr	r3, [r4, #0]
 80045d6:	f023 0320 	bic.w	r3, r3, #32
 80045da:	6023      	str	r3, [r4, #0]
 80045dc:	e7f6      	b.n	80045cc <_printf_i+0x194>
 80045de:	4616      	mov	r6, r2
 80045e0:	e7bd      	b.n	800455e <_printf_i+0x126>
 80045e2:	6833      	ldr	r3, [r6, #0]
 80045e4:	6825      	ldr	r5, [r4, #0]
 80045e6:	1d18      	adds	r0, r3, #4
 80045e8:	6961      	ldr	r1, [r4, #20]
 80045ea:	6030      	str	r0, [r6, #0]
 80045ec:	062e      	lsls	r6, r5, #24
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	d501      	bpl.n	80045f6 <_printf_i+0x1be>
 80045f2:	6019      	str	r1, [r3, #0]
 80045f4:	e002      	b.n	80045fc <_printf_i+0x1c4>
 80045f6:	0668      	lsls	r0, r5, #25
 80045f8:	d5fb      	bpl.n	80045f2 <_printf_i+0x1ba>
 80045fa:	8019      	strh	r1, [r3, #0]
 80045fc:	2300      	movs	r3, #0
 80045fe:	4616      	mov	r6, r2
 8004600:	6123      	str	r3, [r4, #16]
 8004602:	e7bc      	b.n	800457e <_printf_i+0x146>
 8004604:	6833      	ldr	r3, [r6, #0]
 8004606:	2100      	movs	r1, #0
 8004608:	1d1a      	adds	r2, r3, #4
 800460a:	6032      	str	r2, [r6, #0]
 800460c:	681e      	ldr	r6, [r3, #0]
 800460e:	6862      	ldr	r2, [r4, #4]
 8004610:	4630      	mov	r0, r6
 8004612:	f000 f859 	bl	80046c8 <memchr>
 8004616:	b108      	cbz	r0, 800461c <_printf_i+0x1e4>
 8004618:	1b80      	subs	r0, r0, r6
 800461a:	6060      	str	r0, [r4, #4]
 800461c:	6863      	ldr	r3, [r4, #4]
 800461e:	6123      	str	r3, [r4, #16]
 8004620:	2300      	movs	r3, #0
 8004622:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004626:	e7aa      	b.n	800457e <_printf_i+0x146>
 8004628:	4632      	mov	r2, r6
 800462a:	4649      	mov	r1, r9
 800462c:	4640      	mov	r0, r8
 800462e:	6923      	ldr	r3, [r4, #16]
 8004630:	47d0      	blx	sl
 8004632:	3001      	adds	r0, #1
 8004634:	d0ad      	beq.n	8004592 <_printf_i+0x15a>
 8004636:	6823      	ldr	r3, [r4, #0]
 8004638:	079b      	lsls	r3, r3, #30
 800463a:	d413      	bmi.n	8004664 <_printf_i+0x22c>
 800463c:	68e0      	ldr	r0, [r4, #12]
 800463e:	9b03      	ldr	r3, [sp, #12]
 8004640:	4298      	cmp	r0, r3
 8004642:	bfb8      	it	lt
 8004644:	4618      	movlt	r0, r3
 8004646:	e7a6      	b.n	8004596 <_printf_i+0x15e>
 8004648:	2301      	movs	r3, #1
 800464a:	4632      	mov	r2, r6
 800464c:	4649      	mov	r1, r9
 800464e:	4640      	mov	r0, r8
 8004650:	47d0      	blx	sl
 8004652:	3001      	adds	r0, #1
 8004654:	d09d      	beq.n	8004592 <_printf_i+0x15a>
 8004656:	3501      	adds	r5, #1
 8004658:	68e3      	ldr	r3, [r4, #12]
 800465a:	9903      	ldr	r1, [sp, #12]
 800465c:	1a5b      	subs	r3, r3, r1
 800465e:	42ab      	cmp	r3, r5
 8004660:	dcf2      	bgt.n	8004648 <_printf_i+0x210>
 8004662:	e7eb      	b.n	800463c <_printf_i+0x204>
 8004664:	2500      	movs	r5, #0
 8004666:	f104 0619 	add.w	r6, r4, #25
 800466a:	e7f5      	b.n	8004658 <_printf_i+0x220>
 800466c:	080048fb 	.word	0x080048fb
 8004670:	0800490c 	.word	0x0800490c

08004674 <memmove>:
 8004674:	4288      	cmp	r0, r1
 8004676:	b510      	push	{r4, lr}
 8004678:	eb01 0402 	add.w	r4, r1, r2
 800467c:	d902      	bls.n	8004684 <memmove+0x10>
 800467e:	4284      	cmp	r4, r0
 8004680:	4623      	mov	r3, r4
 8004682:	d807      	bhi.n	8004694 <memmove+0x20>
 8004684:	1e43      	subs	r3, r0, #1
 8004686:	42a1      	cmp	r1, r4
 8004688:	d008      	beq.n	800469c <memmove+0x28>
 800468a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800468e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004692:	e7f8      	b.n	8004686 <memmove+0x12>
 8004694:	4601      	mov	r1, r0
 8004696:	4402      	add	r2, r0
 8004698:	428a      	cmp	r2, r1
 800469a:	d100      	bne.n	800469e <memmove+0x2a>
 800469c:	bd10      	pop	{r4, pc}
 800469e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80046a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80046a6:	e7f7      	b.n	8004698 <memmove+0x24>

080046a8 <_sbrk_r>:
 80046a8:	b538      	push	{r3, r4, r5, lr}
 80046aa:	2300      	movs	r3, #0
 80046ac:	4d05      	ldr	r5, [pc, #20]	@ (80046c4 <_sbrk_r+0x1c>)
 80046ae:	4604      	mov	r4, r0
 80046b0:	4608      	mov	r0, r1
 80046b2:	602b      	str	r3, [r5, #0]
 80046b4:	f7fd f8cc 	bl	8001850 <_sbrk>
 80046b8:	1c43      	adds	r3, r0, #1
 80046ba:	d102      	bne.n	80046c2 <_sbrk_r+0x1a>
 80046bc:	682b      	ldr	r3, [r5, #0]
 80046be:	b103      	cbz	r3, 80046c2 <_sbrk_r+0x1a>
 80046c0:	6023      	str	r3, [r4, #0]
 80046c2:	bd38      	pop	{r3, r4, r5, pc}
 80046c4:	20001068 	.word	0x20001068

080046c8 <memchr>:
 80046c8:	4603      	mov	r3, r0
 80046ca:	b510      	push	{r4, lr}
 80046cc:	b2c9      	uxtb	r1, r1
 80046ce:	4402      	add	r2, r0
 80046d0:	4293      	cmp	r3, r2
 80046d2:	4618      	mov	r0, r3
 80046d4:	d101      	bne.n	80046da <memchr+0x12>
 80046d6:	2000      	movs	r0, #0
 80046d8:	e003      	b.n	80046e2 <memchr+0x1a>
 80046da:	7804      	ldrb	r4, [r0, #0]
 80046dc:	3301      	adds	r3, #1
 80046de:	428c      	cmp	r4, r1
 80046e0:	d1f6      	bne.n	80046d0 <memchr+0x8>
 80046e2:	bd10      	pop	{r4, pc}

080046e4 <memcpy>:
 80046e4:	440a      	add	r2, r1
 80046e6:	4291      	cmp	r1, r2
 80046e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80046ec:	d100      	bne.n	80046f0 <memcpy+0xc>
 80046ee:	4770      	bx	lr
 80046f0:	b510      	push	{r4, lr}
 80046f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046f6:	4291      	cmp	r1, r2
 80046f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046fc:	d1f9      	bne.n	80046f2 <memcpy+0xe>
 80046fe:	bd10      	pop	{r4, pc}

08004700 <_realloc_r>:
 8004700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004704:	4607      	mov	r7, r0
 8004706:	4614      	mov	r4, r2
 8004708:	460d      	mov	r5, r1
 800470a:	b921      	cbnz	r1, 8004716 <_realloc_r+0x16>
 800470c:	4611      	mov	r1, r2
 800470e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004712:	f7ff bc3b 	b.w	8003f8c <_malloc_r>
 8004716:	b92a      	cbnz	r2, 8004724 <_realloc_r+0x24>
 8004718:	f7ff fbce 	bl	8003eb8 <_free_r>
 800471c:	4625      	mov	r5, r4
 800471e:	4628      	mov	r0, r5
 8004720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004724:	f000 f81a 	bl	800475c <_malloc_usable_size_r>
 8004728:	4284      	cmp	r4, r0
 800472a:	4606      	mov	r6, r0
 800472c:	d802      	bhi.n	8004734 <_realloc_r+0x34>
 800472e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004732:	d8f4      	bhi.n	800471e <_realloc_r+0x1e>
 8004734:	4621      	mov	r1, r4
 8004736:	4638      	mov	r0, r7
 8004738:	f7ff fc28 	bl	8003f8c <_malloc_r>
 800473c:	4680      	mov	r8, r0
 800473e:	b908      	cbnz	r0, 8004744 <_realloc_r+0x44>
 8004740:	4645      	mov	r5, r8
 8004742:	e7ec      	b.n	800471e <_realloc_r+0x1e>
 8004744:	42b4      	cmp	r4, r6
 8004746:	4622      	mov	r2, r4
 8004748:	4629      	mov	r1, r5
 800474a:	bf28      	it	cs
 800474c:	4632      	movcs	r2, r6
 800474e:	f7ff ffc9 	bl	80046e4 <memcpy>
 8004752:	4629      	mov	r1, r5
 8004754:	4638      	mov	r0, r7
 8004756:	f7ff fbaf 	bl	8003eb8 <_free_r>
 800475a:	e7f1      	b.n	8004740 <_realloc_r+0x40>

0800475c <_malloc_usable_size_r>:
 800475c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004760:	1f18      	subs	r0, r3, #4
 8004762:	2b00      	cmp	r3, #0
 8004764:	bfbc      	itt	lt
 8004766:	580b      	ldrlt	r3, [r1, r0]
 8004768:	18c0      	addlt	r0, r0, r3
 800476a:	4770      	bx	lr

0800476c <_init>:
 800476c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800476e:	bf00      	nop
 8004770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004772:	bc08      	pop	{r3}
 8004774:	469e      	mov	lr, r3
 8004776:	4770      	bx	lr

08004778 <_fini>:
 8004778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800477a:	bf00      	nop
 800477c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800477e:	bc08      	pop	{r3}
 8004780:	469e      	mov	lr, r3
 8004782:	4770      	bx	lr
