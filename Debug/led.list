
led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c78  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  08003d84  08003d84  00004d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fa8  08003fa8  00005098  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003fa8  08003fa8  00004fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fb0  08003fb0  00005098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fb0  08003fb0  00004fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003fb4  08003fb4  00004fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  08003fb8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f84  20000098  08004050  00005098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000101c  08004050  0000601c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY
 12 .debug_info   000095c4  00000000  00000000  000050c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ba7  00000000  00000000  0000e685  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  00010230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008a4  00000000  00000000  00010d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d3c  00000000  00000000  00011604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c326  00000000  00000000  00029340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089425  00000000  00000000  00035666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bea8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003344  00000000  00000000  000bead0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000c1e14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000098 	.word	0x20000098
 8000128:	00000000 	.word	0x00000000
 800012c:	08003d6c 	.word	0x08003d6c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000009c 	.word	0x2000009c
 8000148:	08003d6c 	.word	0x08003d6c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <LCD_Parallel_Init>:
#include "lcd_parallel.h"
#include <string.h>
#include <stdio.h>

void LCD_Parallel_Init(void) {
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
    // Initialize GPIO pins
    LCD_Parallel_GPIO_Init();
 8000160:	f000 f840 	bl	80001e4 <LCD_Parallel_GPIO_Init>
    
    // Wait for LCD to power up completely
    HAL_Delay(100);
 8000164:	2064      	movs	r0, #100	@ 0x64
 8000166:	f000 ff4f 	bl	8001008 <HAL_Delay>
    
    // Set RS = 0 (command mode)
    HAL_GPIO_WritePin(LCD_RS_PORT, LCD_RS_PIN, GPIO_PIN_RESET);
 800016a:	2200      	movs	r2, #0
 800016c:	2101      	movs	r1, #1
 800016e:	481c      	ldr	r0, [pc, #112]	@ (80001e0 <LCD_Parallel_Init+0x84>)
 8000170:	f001 fc66 	bl	8001a40 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_E_PORT, LCD_E_PIN, GPIO_PIN_RESET);
 8000174:	2200      	movs	r2, #0
 8000176:	2102      	movs	r1, #2
 8000178:	4819      	ldr	r0, [pc, #100]	@ (80001e0 <LCD_Parallel_Init+0x84>)
 800017a:	f001 fc61 	bl	8001a40 <HAL_GPIO_WritePin>
    
    // Initialize LCD in 4-bit mode according to datasheet timing
    // First: Send 0x3 three times to establish 8-bit communication
    LCD_Parallel_Write4Bits(0x03);
 800017e:	2003      	movs	r0, #3
 8000180:	f000 f916 	bl	80003b0 <LCD_Parallel_Write4Bits>
    HAL_Delay(10);  // Wait > 4.1ms
 8000184:	200a      	movs	r0, #10
 8000186:	f000 ff3f 	bl	8001008 <HAL_Delay>
    
    LCD_Parallel_Write4Bits(0x03);
 800018a:	2003      	movs	r0, #3
 800018c:	f000 f910 	bl	80003b0 <LCD_Parallel_Write4Bits>
    HAL_Delay(5);   // Wait > 100us
 8000190:	2005      	movs	r0, #5
 8000192:	f000 ff39 	bl	8001008 <HAL_Delay>
    
    LCD_Parallel_Write4Bits(0x03);
 8000196:	2003      	movs	r0, #3
 8000198:	f000 f90a 	bl	80003b0 <LCD_Parallel_Write4Bits>
    HAL_Delay(5);   // Wait > 100us
 800019c:	2005      	movs	r0, #5
 800019e:	f000 ff33 	bl	8001008 <HAL_Delay>
    
    // Switch to 4-bit mode
    LCD_Parallel_Write4Bits(0x02);
 80001a2:	2002      	movs	r0, #2
 80001a4:	f000 f904 	bl	80003b0 <LCD_Parallel_Write4Bits>
    HAL_Delay(5);
 80001a8:	2005      	movs	r0, #5
 80001aa:	f000 ff2d 	bl	8001008 <HAL_Delay>
    
    // Function set: 4-bit, 2 line, 5x8 dots
    LCD_Parallel_SendCommand(LCD_FUNCTION_SET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
 80001ae:	2028      	movs	r0, #40	@ 0x28
 80001b0:	f000 f8bc 	bl	800032c <LCD_Parallel_SendCommand>
    HAL_Delay(5);
 80001b4:	2005      	movs	r0, #5
 80001b6:	f000 ff27 	bl	8001008 <HAL_Delay>
    
    // Display control: display on, cursor off, blink off
    LCD_Parallel_SendCommand(LCD_DISPLAY_CONTROL | LCD_DISPLAY_ON | LCD_CURSOR_OFF | LCD_BLINK_OFF);
 80001ba:	200c      	movs	r0, #12
 80001bc:	f000 f8b6 	bl	800032c <LCD_Parallel_SendCommand>
    HAL_Delay(5);
 80001c0:	2005      	movs	r0, #5
 80001c2:	f000 ff21 	bl	8001008 <HAL_Delay>
    
    // Clear display
    LCD_Parallel_Clear();
 80001c6:	f000 f85b 	bl	8000280 <LCD_Parallel_Clear>
    HAL_Delay(5);
 80001ca:	2005      	movs	r0, #5
 80001cc:	f000 ff1c 	bl	8001008 <HAL_Delay>
    
    // Entry mode: left to right, no shift
    LCD_Parallel_SendCommand(LCD_ENTRY_MODE_SET | LCD_ENTRY_LEFT | LCD_ENTRY_SHIFT_DECREMENT);
 80001d0:	2006      	movs	r0, #6
 80001d2:	f000 f8ab 	bl	800032c <LCD_Parallel_SendCommand>
    HAL_Delay(5);
 80001d6:	2005      	movs	r0, #5
 80001d8:	f000 ff16 	bl	8001008 <HAL_Delay>
}
 80001dc:	bf00      	nop
 80001de:	bd80      	pop	{r7, pc}
 80001e0:	40010c00 	.word	0x40010c00

080001e4 <LCD_Parallel_GPIO_Init>:

void LCD_Parallel_GPIO_Init(void) {
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b086      	sub	sp, #24
 80001e8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ea:	f107 0308 	add.w	r3, r7, #8
 80001ee:	2200      	movs	r2, #0
 80001f0:	601a      	str	r2, [r3, #0]
 80001f2:	605a      	str	r2, [r3, #4]
 80001f4:	609a      	str	r2, [r3, #8]
 80001f6:	60da      	str	r2, [r3, #12]
    
    // Enable GPIOB clock
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80001f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000278 <LCD_Parallel_GPIO_Init+0x94>)
 80001fa:	699b      	ldr	r3, [r3, #24]
 80001fc:	4a1e      	ldr	r2, [pc, #120]	@ (8000278 <LCD_Parallel_GPIO_Init+0x94>)
 80001fe:	f043 0308 	orr.w	r3, r3, #8
 8000202:	6193      	str	r3, [r2, #24]
 8000204:	4b1c      	ldr	r3, [pc, #112]	@ (8000278 <LCD_Parallel_GPIO_Init+0x94>)
 8000206:	699b      	ldr	r3, [r3, #24]
 8000208:	f003 0308 	and.w	r3, r3, #8
 800020c:	607b      	str	r3, [r7, #4]
 800020e:	687b      	ldr	r3, [r7, #4]
    
    // Configure RS pin (PB0)
    GPIO_InitStruct.Pin = LCD_RS_PIN;
 8000210:	2301      	movs	r3, #1
 8000212:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000214:	2301      	movs	r3, #1
 8000216:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000218:	2300      	movs	r3, #0
 800021a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800021c:	2302      	movs	r3, #2
 800021e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LCD_RS_PORT, &GPIO_InitStruct);
 8000220:	f107 0308 	add.w	r3, r7, #8
 8000224:	4619      	mov	r1, r3
 8000226:	4815      	ldr	r0, [pc, #84]	@ (800027c <LCD_Parallel_GPIO_Init+0x98>)
 8000228:	f001 fa86 	bl	8001738 <HAL_GPIO_Init>
    
    // Configure E pin (PB1)
    GPIO_InitStruct.Pin = LCD_E_PIN;
 800022c:	2302      	movs	r3, #2
 800022e:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(LCD_E_PORT, &GPIO_InitStruct);
 8000230:	f107 0308 	add.w	r3, r7, #8
 8000234:	4619      	mov	r1, r3
 8000236:	4811      	ldr	r0, [pc, #68]	@ (800027c <LCD_Parallel_GPIO_Init+0x98>)
 8000238:	f001 fa7e 	bl	8001738 <HAL_GPIO_Init>
    
    // Configure Data pins (PB12, PB13, PB14, PB15)
    GPIO_InitStruct.Pin = LCD_D4_PIN | LCD_D5_PIN | LCD_D6_PIN | LCD_D7_PIN;
 800023c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000240:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(LCD_D4_PORT, &GPIO_InitStruct);
 8000242:	f107 0308 	add.w	r3, r7, #8
 8000246:	4619      	mov	r1, r3
 8000248:	480c      	ldr	r0, [pc, #48]	@ (800027c <LCD_Parallel_GPIO_Init+0x98>)
 800024a:	f001 fa75 	bl	8001738 <HAL_GPIO_Init>
    
    // Initialize all pins to LOW
    HAL_GPIO_WritePin(LCD_RS_PORT, LCD_RS_PIN, GPIO_PIN_RESET);
 800024e:	2200      	movs	r2, #0
 8000250:	2101      	movs	r1, #1
 8000252:	480a      	ldr	r0, [pc, #40]	@ (800027c <LCD_Parallel_GPIO_Init+0x98>)
 8000254:	f001 fbf4 	bl	8001a40 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_E_PORT, LCD_E_PIN, GPIO_PIN_RESET);
 8000258:	2200      	movs	r2, #0
 800025a:	2102      	movs	r1, #2
 800025c:	4807      	ldr	r0, [pc, #28]	@ (800027c <LCD_Parallel_GPIO_Init+0x98>)
 800025e:	f001 fbef 	bl	8001a40 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D4_PORT, LCD_D4_PIN | LCD_D5_PIN | LCD_D6_PIN | LCD_D7_PIN, GPIO_PIN_RESET);
 8000262:	2200      	movs	r2, #0
 8000264:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000268:	4804      	ldr	r0, [pc, #16]	@ (800027c <LCD_Parallel_GPIO_Init+0x98>)
 800026a:	f001 fbe9 	bl	8001a40 <HAL_GPIO_WritePin>
}
 800026e:	bf00      	nop
 8000270:	3718      	adds	r7, #24
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	40021000 	.word	0x40021000
 800027c:	40010c00 	.word	0x40010c00

08000280 <LCD_Parallel_Clear>:

void LCD_Parallel_Clear(void) {
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
    LCD_Parallel_SendCommand(LCD_CLEAR_DISPLAY);
 8000284:	2001      	movs	r0, #1
 8000286:	f000 f851 	bl	800032c <LCD_Parallel_SendCommand>
    HAL_Delay(2);
 800028a:	2002      	movs	r0, #2
 800028c:	f000 febc 	bl	8001008 <HAL_Delay>
}
 8000290:	bf00      	nop
 8000292:	bd80      	pop	{r7, pc}

08000294 <LCD_Parallel_SetCursor>:

void LCD_Parallel_SetCursor(uint8_t row, uint8_t col) {
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
 800029a:	4603      	mov	r3, r0
 800029c:	460a      	mov	r2, r1
 800029e:	71fb      	strb	r3, [r7, #7]
 80002a0:	4613      	mov	r3, r2
 80002a2:	71bb      	strb	r3, [r7, #6]
    uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 80002a4:	4b0f      	ldr	r3, [pc, #60]	@ (80002e4 <LCD_Parallel_SetCursor+0x50>)
 80002a6:	60fb      	str	r3, [r7, #12]
    if (row >= LCD_ROWS) {
 80002a8:	79fb      	ldrb	r3, [r7, #7]
 80002aa:	2b01      	cmp	r3, #1
 80002ac:	d901      	bls.n	80002b2 <LCD_Parallel_SetCursor+0x1e>
        row = LCD_ROWS - 1;
 80002ae:	2301      	movs	r3, #1
 80002b0:	71fb      	strb	r3, [r7, #7]
    }
    if (col >= LCD_COLS) {
 80002b2:	79bb      	ldrb	r3, [r7, #6]
 80002b4:	2b0f      	cmp	r3, #15
 80002b6:	d901      	bls.n	80002bc <LCD_Parallel_SetCursor+0x28>
        col = LCD_COLS - 1;
 80002b8:	230f      	movs	r3, #15
 80002ba:	71bb      	strb	r3, [r7, #6]
    }
    LCD_Parallel_SendCommand(LCD_SET_DDRAM_ADDR | (col + row_offsets[row]));
 80002bc:	79fb      	ldrb	r3, [r7, #7]
 80002be:	3310      	adds	r3, #16
 80002c0:	443b      	add	r3, r7
 80002c2:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 80002c6:	79bb      	ldrb	r3, [r7, #6]
 80002c8:	4413      	add	r3, r2
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	b25b      	sxtb	r3, r3
 80002ce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80002d2:	b25b      	sxtb	r3, r3
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	4618      	mov	r0, r3
 80002d8:	f000 f828 	bl	800032c <LCD_Parallel_SendCommand>
}
 80002dc:	bf00      	nop
 80002de:	3710      	adds	r7, #16
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	54144000 	.word	0x54144000

080002e8 <LCD_Parallel_Print>:

void LCD_Parallel_Print(char *str) {
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
    while (*str) {
 80002f0:	e006      	b.n	8000300 <LCD_Parallel_Print+0x18>
        LCD_Parallel_SendData(*str++);
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	1c5a      	adds	r2, r3, #1
 80002f6:	607a      	str	r2, [r7, #4]
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	4618      	mov	r0, r3
 80002fc:	f000 f824 	bl	8000348 <LCD_Parallel_SendData>
    while (*str) {
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d1f4      	bne.n	80002f2 <LCD_Parallel_Print+0xa>
    }
}
 8000308:	bf00      	nop
 800030a:	bf00      	nop
 800030c:	3708      	adds	r7, #8
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}

08000312 <LCD_Parallel_PrintChar>:

void LCD_Parallel_PrintChar(char c) {
 8000312:	b580      	push	{r7, lr}
 8000314:	b082      	sub	sp, #8
 8000316:	af00      	add	r7, sp, #0
 8000318:	4603      	mov	r3, r0
 800031a:	71fb      	strb	r3, [r7, #7]
    LCD_Parallel_SendData(c);
 800031c:	79fb      	ldrb	r3, [r7, #7]
 800031e:	4618      	mov	r0, r3
 8000320:	f000 f812 	bl	8000348 <LCD_Parallel_SendData>
}
 8000324:	bf00      	nop
 8000326:	3708      	adds	r7, #8
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}

0800032c <LCD_Parallel_SendCommand>:

void LCD_Parallel_WriteCustomChar(uint8_t location) {
    LCD_Parallel_SendData(location);
}

void LCD_Parallel_SendCommand(uint8_t cmd) {
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	4603      	mov	r3, r0
 8000334:	71fb      	strb	r3, [r7, #7]
    LCD_Parallel_Send(cmd, 0);
 8000336:	79fb      	ldrb	r3, [r7, #7]
 8000338:	2100      	movs	r1, #0
 800033a:	4618      	mov	r0, r3
 800033c:	f000 f812 	bl	8000364 <LCD_Parallel_Send>
}
 8000340:	bf00      	nop
 8000342:	3708      	adds	r7, #8
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}

08000348 <LCD_Parallel_SendData>:

void LCD_Parallel_SendData(uint8_t data) {
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	4603      	mov	r3, r0
 8000350:	71fb      	strb	r3, [r7, #7]
    LCD_Parallel_Send(data, 1);
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	2101      	movs	r1, #1
 8000356:	4618      	mov	r0, r3
 8000358:	f000 f804 	bl	8000364 <LCD_Parallel_Send>
}
 800035c:	bf00      	nop
 800035e:	3708      	adds	r7, #8
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}

08000364 <LCD_Parallel_Send>:

void LCD_Parallel_Send(uint8_t data, uint8_t rs) {
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	460a      	mov	r2, r1
 800036e:	71fb      	strb	r3, [r7, #7]
 8000370:	4613      	mov	r3, r2
 8000372:	71bb      	strb	r3, [r7, #6]
    // Set RS pin (0 = command, 1 = data)
    HAL_GPIO_WritePin(LCD_RS_PORT, LCD_RS_PIN, rs ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000374:	79bb      	ldrb	r3, [r7, #6]
 8000376:	2b00      	cmp	r3, #0
 8000378:	bf14      	ite	ne
 800037a:	2301      	movne	r3, #1
 800037c:	2300      	moveq	r3, #0
 800037e:	b2db      	uxtb	r3, r3
 8000380:	461a      	mov	r2, r3
 8000382:	2101      	movs	r1, #1
 8000384:	4809      	ldr	r0, [pc, #36]	@ (80003ac <LCD_Parallel_Send+0x48>)
 8000386:	f001 fb5b 	bl	8001a40 <HAL_GPIO_WritePin>
    
    // Send upper 4 bits
    LCD_Parallel_Write4Bits(data >> 4);
 800038a:	79fb      	ldrb	r3, [r7, #7]
 800038c:	091b      	lsrs	r3, r3, #4
 800038e:	b2db      	uxtb	r3, r3
 8000390:	4618      	mov	r0, r3
 8000392:	f000 f80d 	bl	80003b0 <LCD_Parallel_Write4Bits>
    
    // Send lower 4 bits
    LCD_Parallel_Write4Bits(data & 0x0F);
 8000396:	79fb      	ldrb	r3, [r7, #7]
 8000398:	f003 030f 	and.w	r3, r3, #15
 800039c:	b2db      	uxtb	r3, r3
 800039e:	4618      	mov	r0, r3
 80003a0:	f000 f806 	bl	80003b0 <LCD_Parallel_Write4Bits>
}
 80003a4:	bf00      	nop
 80003a6:	3708      	adds	r7, #8
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	40010c00 	.word	0x40010c00

080003b0 <LCD_Parallel_Write4Bits>:

void LCD_Parallel_Write4Bits(uint8_t data) {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	71fb      	strb	r3, [r7, #7]
    // Set data on D4-D7 pins (PB12-PB15)
    HAL_GPIO_WritePin(LCD_D4_PORT, LCD_D4_PIN, (data & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80003ba:	79fb      	ldrb	r3, [r7, #7]
 80003bc:	f003 0301 	and.w	r3, r3, #1
 80003c0:	b2db      	uxtb	r3, r3
 80003c2:	461a      	mov	r2, r3
 80003c4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80003c8:	4816      	ldr	r0, [pc, #88]	@ (8000424 <LCD_Parallel_Write4Bits+0x74>)
 80003ca:	f001 fb39 	bl	8001a40 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_PORT, LCD_D5_PIN, (data & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80003ce:	79fb      	ldrb	r3, [r7, #7]
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	b2db      	uxtb	r3, r3
 80003d4:	f003 0301 	and.w	r3, r3, #1
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	461a      	mov	r2, r3
 80003dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003e0:	4810      	ldr	r0, [pc, #64]	@ (8000424 <LCD_Parallel_Write4Bits+0x74>)
 80003e2:	f001 fb2d 	bl	8001a40 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_PORT, LCD_D6_PIN, (data & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80003e6:	79fb      	ldrb	r3, [r7, #7]
 80003e8:	109b      	asrs	r3, r3, #2
 80003ea:	b2db      	uxtb	r3, r3
 80003ec:	f003 0301 	and.w	r3, r3, #1
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	461a      	mov	r2, r3
 80003f4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80003f8:	480a      	ldr	r0, [pc, #40]	@ (8000424 <LCD_Parallel_Write4Bits+0x74>)
 80003fa:	f001 fb21 	bl	8001a40 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_PORT, LCD_D7_PIN, (data & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80003fe:	79fb      	ldrb	r3, [r7, #7]
 8000400:	10db      	asrs	r3, r3, #3
 8000402:	b2db      	uxtb	r3, r3
 8000404:	f003 0301 	and.w	r3, r3, #1
 8000408:	b2db      	uxtb	r3, r3
 800040a:	461a      	mov	r2, r3
 800040c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000410:	4804      	ldr	r0, [pc, #16]	@ (8000424 <LCD_Parallel_Write4Bits+0x74>)
 8000412:	f001 fb15 	bl	8001a40 <HAL_GPIO_WritePin>
    
    // Pulse Enable pin
    LCD_Parallel_EnablePulse();
 8000416:	f000 f807 	bl	8000428 <LCD_Parallel_EnablePulse>
}
 800041a:	bf00      	nop
 800041c:	3708      	adds	r7, #8
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	40010c00 	.word	0x40010c00

08000428 <LCD_Parallel_EnablePulse>:

void LCD_Parallel_EnablePulse(void) {
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LCD_E_PORT, LCD_E_PIN, GPIO_PIN_SET);
 800042e:	2201      	movs	r2, #1
 8000430:	2102      	movs	r1, #2
 8000432:	4810      	ldr	r0, [pc, #64]	@ (8000474 <LCD_Parallel_EnablePulse+0x4c>)
 8000434:	f001 fb04 	bl	8001a40 <HAL_GPIO_WritePin>
    
    // Enable pulse width (minimum 450ns, loop delay)
    for(volatile int i = 0; i < 50; i++);
 8000438:	2300      	movs	r3, #0
 800043a:	607b      	str	r3, [r7, #4]
 800043c:	e002      	b.n	8000444 <LCD_Parallel_EnablePulse+0x1c>
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	3301      	adds	r3, #1
 8000442:	607b      	str	r3, [r7, #4]
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	2b31      	cmp	r3, #49	@ 0x31
 8000448:	ddf9      	ble.n	800043e <LCD_Parallel_EnablePulse+0x16>
    
    HAL_GPIO_WritePin(LCD_E_PORT, LCD_E_PIN, GPIO_PIN_RESET);
 800044a:	2200      	movs	r2, #0
 800044c:	2102      	movs	r1, #2
 800044e:	4809      	ldr	r0, [pc, #36]	@ (8000474 <LCD_Parallel_EnablePulse+0x4c>)
 8000450:	f001 faf6 	bl	8001a40 <HAL_GPIO_WritePin>
    
    // Commands need > 37us to settle  
    for(volatile int i = 0; i < 1000; i++);
 8000454:	2300      	movs	r3, #0
 8000456:	603b      	str	r3, [r7, #0]
 8000458:	e002      	b.n	8000460 <LCD_Parallel_EnablePulse+0x38>
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	3301      	adds	r3, #1
 800045e:	603b      	str	r3, [r7, #0]
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000466:	dbf8      	blt.n	800045a <LCD_Parallel_EnablePulse+0x32>
}
 8000468:	bf00      	nop
 800046a:	bf00      	nop
 800046c:	3708      	adds	r7, #8
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	40010c00 	.word	0x40010c00

08000478 <LCD_Parallel_DisplayEffect>:

// Utility functions for displaying LED status
void LCD_Parallel_DisplayEffect(const char* effect_name) {
 8000478:	b580      	push	{r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
    LCD_Parallel_SetCursor(0, 0);
 8000480:	2100      	movs	r1, #0
 8000482:	2000      	movs	r0, #0
 8000484:	f7ff ff06 	bl	8000294 <LCD_Parallel_SetCursor>
    LCD_Parallel_Print("Mode: ");
 8000488:	480d      	ldr	r0, [pc, #52]	@ (80004c0 <LCD_Parallel_DisplayEffect+0x48>)
 800048a:	f7ff ff2d 	bl	80002e8 <LCD_Parallel_Print>
    LCD_Parallel_Print((char*)effect_name);
 800048e:	6878      	ldr	r0, [r7, #4]
 8000490:	f7ff ff2a 	bl	80002e8 <LCD_Parallel_Print>
    
    // Clear remaining characters on first line
    for(int i = strlen("Mode: ") + strlen(effect_name); i < LCD_COLS; i++) {
 8000494:	6878      	ldr	r0, [r7, #4]
 8000496:	f7ff fe59 	bl	800014c <strlen>
 800049a:	4603      	mov	r3, r0
 800049c:	3306      	adds	r3, #6
 800049e:	60fb      	str	r3, [r7, #12]
 80004a0:	e005      	b.n	80004ae <LCD_Parallel_DisplayEffect+0x36>
        LCD_Parallel_PrintChar(' ');
 80004a2:	2020      	movs	r0, #32
 80004a4:	f7ff ff35 	bl	8000312 <LCD_Parallel_PrintChar>
    for(int i = strlen("Mode: ") + strlen(effect_name); i < LCD_COLS; i++) {
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	3301      	adds	r3, #1
 80004ac:	60fb      	str	r3, [r7, #12]
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	2b0f      	cmp	r3, #15
 80004b2:	ddf6      	ble.n	80004a2 <LCD_Parallel_DisplayEffect+0x2a>
    }
}
 80004b4:	bf00      	nop
 80004b6:	bf00      	nop
 80004b8:	3710      	adds	r7, #16
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	08003d84 	.word	0x08003d84

080004c4 <LCD_Parallel_DisplayStatus>:

void LCD_Parallel_DisplayStatus(const char* color, int speed, int brightness) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b08c      	sub	sp, #48	@ 0x30
 80004c8:	af02      	add	r7, sp, #8
 80004ca:	60f8      	str	r0, [r7, #12]
 80004cc:	60b9      	str	r1, [r7, #8]
 80004ce:	607a      	str	r2, [r7, #4]
    char buffer[17];
    
    LCD_Parallel_SetCursor(1, 0);
 80004d0:	2100      	movs	r1, #0
 80004d2:	2001      	movs	r0, #1
 80004d4:	f7ff fede 	bl	8000294 <LCD_Parallel_SetCursor>
    snprintf(buffer, sizeof(buffer), "%s S:%d B:%d%%", color, speed, brightness);
 80004d8:	f107 0010 	add.w	r0, r7, #16
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	9301      	str	r3, [sp, #4]
 80004e0:	68bb      	ldr	r3, [r7, #8]
 80004e2:	9300      	str	r3, [sp, #0]
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	4a0f      	ldr	r2, [pc, #60]	@ (8000524 <LCD_Parallel_DisplayStatus+0x60>)
 80004e8:	2111      	movs	r1, #17
 80004ea:	f002 ff7b 	bl	80033e4 <sniprintf>
    LCD_Parallel_Print(buffer);
 80004ee:	f107 0310 	add.w	r3, r7, #16
 80004f2:	4618      	mov	r0, r3
 80004f4:	f7ff fef8 	bl	80002e8 <LCD_Parallel_Print>
    
    // Clear remaining characters on second line
    for(int i = strlen(buffer); i < LCD_COLS; i++) {
 80004f8:	f107 0310 	add.w	r3, r7, #16
 80004fc:	4618      	mov	r0, r3
 80004fe:	f7ff fe25 	bl	800014c <strlen>
 8000502:	4603      	mov	r3, r0
 8000504:	627b      	str	r3, [r7, #36]	@ 0x24
 8000506:	e005      	b.n	8000514 <LCD_Parallel_DisplayStatus+0x50>
        LCD_Parallel_PrintChar(' ');
 8000508:	2020      	movs	r0, #32
 800050a:	f7ff ff02 	bl	8000312 <LCD_Parallel_PrintChar>
    for(int i = strlen(buffer); i < LCD_COLS; i++) {
 800050e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000510:	3301      	adds	r3, #1
 8000512:	627b      	str	r3, [r7, #36]	@ 0x24
 8000514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000516:	2b0f      	cmp	r3, #15
 8000518:	ddf6      	ble.n	8000508 <LCD_Parallel_DisplayStatus+0x44>
    }
}
 800051a:	bf00      	nop
 800051c:	bf00      	nop
 800051e:	3728      	adds	r7, #40	@ 0x28
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	08003d8c 	.word	0x08003d8c

08000528 <HAL_TIM_PWM_PulseFinishedCallback>:
// Color and speed control
volatile int current_color = COLOR_BLUE;  // Start with blue
volatile int current_speed = 5;           // Speed from 1 (slow) to 10 (fast)
volatile int current_brightness = 50;     // Brightness from 1 (dim) to 100 (bright)

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8000530:	2100      	movs	r1, #0
 8000532:	4805      	ldr	r0, [pc, #20]	@ (8000548 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000534:	f002 f8c4 	bl	80026c0 <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;
 8000538:	4b04      	ldr	r3, [pc, #16]	@ (800054c <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 800053a:	2201      	movs	r2, #1
 800053c:	601a      	str	r2, [r3, #0]
}
 800053e:	bf00      	nop
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	200000b4 	.word	0x200000b4
 800054c:	20000320 	.word	0x20000320

08000550 <Keypad_Init>:

// Keypad functions
void Keypad_Init(void) {
 8000550:	b580      	push	{r7, lr}
 8000552:	b088      	sub	sp, #32
 8000554:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000556:	f107 0308 	add.w	r3, r7, #8
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
 8000562:	60da      	str	r2, [r3, #12]

    // Enable GPIOA clock
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000564:	4b2b      	ldr	r3, [pc, #172]	@ (8000614 <Keypad_Init+0xc4>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	4a2a      	ldr	r2, [pc, #168]	@ (8000614 <Keypad_Init+0xc4>)
 800056a:	f043 0304 	orr.w	r3, r3, #4
 800056e:	6193      	str	r3, [r2, #24]
 8000570:	4b28      	ldr	r3, [pc, #160]	@ (8000614 <Keypad_Init+0xc4>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	f003 0304 	and.w	r3, r3, #4
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]

    // Configure row pins as output
    for(int i = 0; i < KEYPAD_ROWS; i++) {
 800057c:	2300      	movs	r3, #0
 800057e:	61fb      	str	r3, [r7, #28]
 8000580:	e023      	b.n	80005ca <Keypad_Init+0x7a>
        GPIO_InitStruct.Pin = keypad_row_pins[i];
 8000582:	4a25      	ldr	r2, [pc, #148]	@ (8000618 <Keypad_Init+0xc8>)
 8000584:	69fb      	ldr	r3, [r7, #28]
 8000586:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800058a:	60bb      	str	r3, [r7, #8]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058c:	2301      	movs	r3, #1
 800058e:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000590:	2300      	movs	r3, #0
 8000592:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000594:	2302      	movs	r3, #2
 8000596:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(keypad_row_ports[i], &GPIO_InitStruct);
 8000598:	4a20      	ldr	r2, [pc, #128]	@ (800061c <Keypad_Init+0xcc>)
 800059a:	69fb      	ldr	r3, [r7, #28]
 800059c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005a0:	f107 0208 	add.w	r2, r7, #8
 80005a4:	4611      	mov	r1, r2
 80005a6:	4618      	mov	r0, r3
 80005a8:	f001 f8c6 	bl	8001738 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(keypad_row_ports[i], keypad_row_pins[i], GPIO_PIN_SET);
 80005ac:	4a1b      	ldr	r2, [pc, #108]	@ (800061c <Keypad_Init+0xcc>)
 80005ae:	69fb      	ldr	r3, [r7, #28]
 80005b0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005b4:	4a18      	ldr	r2, [pc, #96]	@ (8000618 <Keypad_Init+0xc8>)
 80005b6:	69fb      	ldr	r3, [r7, #28]
 80005b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005bc:	2201      	movs	r2, #1
 80005be:	4619      	mov	r1, r3
 80005c0:	f001 fa3e 	bl	8001a40 <HAL_GPIO_WritePin>
    for(int i = 0; i < KEYPAD_ROWS; i++) {
 80005c4:	69fb      	ldr	r3, [r7, #28]
 80005c6:	3301      	adds	r3, #1
 80005c8:	61fb      	str	r3, [r7, #28]
 80005ca:	69fb      	ldr	r3, [r7, #28]
 80005cc:	2b03      	cmp	r3, #3
 80005ce:	ddd8      	ble.n	8000582 <Keypad_Init+0x32>
    }

    // Configure column pins as input with pull-up
    for(int i = 0; i < KEYPAD_COLS; i++) {
 80005d0:	2300      	movs	r3, #0
 80005d2:	61bb      	str	r3, [r7, #24]
 80005d4:	e015      	b.n	8000602 <Keypad_Init+0xb2>
        GPIO_InitStruct.Pin = keypad_col_pins[i];
 80005d6:	4a12      	ldr	r2, [pc, #72]	@ (8000620 <Keypad_Init+0xd0>)
 80005d8:	69bb      	ldr	r3, [r7, #24]
 80005da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005de:	60bb      	str	r3, [r7, #8]
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005e0:	2300      	movs	r3, #0
 80005e2:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005e4:	2301      	movs	r3, #1
 80005e6:	613b      	str	r3, [r7, #16]
        HAL_GPIO_Init(keypad_col_ports[i], &GPIO_InitStruct);
 80005e8:	4a0e      	ldr	r2, [pc, #56]	@ (8000624 <Keypad_Init+0xd4>)
 80005ea:	69bb      	ldr	r3, [r7, #24]
 80005ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005f0:	f107 0208 	add.w	r2, r7, #8
 80005f4:	4611      	mov	r1, r2
 80005f6:	4618      	mov	r0, r3
 80005f8:	f001 f89e 	bl	8001738 <HAL_GPIO_Init>
    for(int i = 0; i < KEYPAD_COLS; i++) {
 80005fc:	69bb      	ldr	r3, [r7, #24]
 80005fe:	3301      	adds	r3, #1
 8000600:	61bb      	str	r3, [r7, #24]
 8000602:	69bb      	ldr	r3, [r7, #24]
 8000604:	2b03      	cmp	r3, #3
 8000606:	dde6      	ble.n	80005d6 <Keypad_Init+0x86>
    }
}
 8000608:	bf00      	nop
 800060a:	bf00      	nop
 800060c:	3720      	adds	r7, #32
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40021000 	.word	0x40021000
 8000618:	20000010 	.word	0x20000010
 800061c:	20000000 	.word	0x20000000
 8000620:	20000028 	.word	0x20000028
 8000624:	20000018 	.word	0x20000018

08000628 <Update_LCD_Display>:

void Update_LCD_Display(void) {
 8000628:	b5b0      	push	{r4, r5, r7, lr}
 800062a:	b090      	sub	sp, #64	@ 0x40
 800062c:	af00      	add	r7, sp, #0
    // Effect names
    const char* effect_names[] = {"Fade", "Rainbow", "Run", "Flash", "Off", "Music"};
 800062e:	4b27      	ldr	r3, [pc, #156]	@ (80006cc <Update_LCD_Display+0xa4>)
 8000630:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8000634:	461d      	mov	r5, r3
 8000636:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000638:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800063a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800063e:	e884 0003 	stmia.w	r4, {r0, r1}
    const char* color_names[] = {"Blue", "Red", "Pink", "Green", "Purple", "Yellow", "Cyan", "White", "Orange"};
 8000642:	4b23      	ldr	r3, [pc, #140]	@ (80006d0 <Update_LCD_Display+0xa8>)
 8000644:	1d3c      	adds	r4, r7, #4
 8000646:	461d      	mov	r5, r3
 8000648:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800064a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800064c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800064e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000650:	682b      	ldr	r3, [r5, #0]
 8000652:	6023      	str	r3, [r4, #0]

    // Display current effect
    if(current_effect < MAX_EFFECTS) {
 8000654:	4b1f      	ldr	r3, [pc, #124]	@ (80006d4 <Update_LCD_Display+0xac>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2b05      	cmp	r3, #5
 800065a:	dc09      	bgt.n	8000670 <Update_LCD_Display+0x48>
        LCD_Parallel_DisplayEffect(effect_names[current_effect]);
 800065c:	4b1d      	ldr	r3, [pc, #116]	@ (80006d4 <Update_LCD_Display+0xac>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	3340      	adds	r3, #64	@ 0x40
 8000664:	443b      	add	r3, r7
 8000666:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800066a:	4618      	mov	r0, r3
 800066c:	f7ff ff04 	bl	8000478 <LCD_Parallel_DisplayEffect>
    }

    // Display status (color, speed, brightness)
    if(current_effect == EFFECT_RAINBOW) {
 8000670:	4b18      	ldr	r3, [pc, #96]	@ (80006d4 <Update_LCD_Display+0xac>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2b01      	cmp	r3, #1
 8000676:	d108      	bne.n	800068a <Update_LCD_Display+0x62>
        LCD_Parallel_DisplayStatus("Rainbow", current_speed, current_brightness);
 8000678:	4b17      	ldr	r3, [pc, #92]	@ (80006d8 <Update_LCD_Display+0xb0>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a17      	ldr	r2, [pc, #92]	@ (80006dc <Update_LCD_Display+0xb4>)
 800067e:	6812      	ldr	r2, [r2, #0]
 8000680:	4619      	mov	r1, r3
 8000682:	4817      	ldr	r0, [pc, #92]	@ (80006e0 <Update_LCD_Display+0xb8>)
 8000684:	f7ff ff1e 	bl	80004c4 <LCD_Parallel_DisplayStatus>
    } else if(current_effect == EFFECT_OFF) {
        LCD_Parallel_DisplayStatus("OFF", 0, 0);
    } else if(current_color < MAX_COLORS) {
        LCD_Parallel_DisplayStatus(color_names[current_color], current_speed, current_brightness);
    }
}
 8000688:	e01b      	b.n	80006c2 <Update_LCD_Display+0x9a>
    } else if(current_effect == EFFECT_OFF) {
 800068a:	4b12      	ldr	r3, [pc, #72]	@ (80006d4 <Update_LCD_Display+0xac>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	2b04      	cmp	r3, #4
 8000690:	d105      	bne.n	800069e <Update_LCD_Display+0x76>
        LCD_Parallel_DisplayStatus("OFF", 0, 0);
 8000692:	2200      	movs	r2, #0
 8000694:	2100      	movs	r1, #0
 8000696:	4813      	ldr	r0, [pc, #76]	@ (80006e4 <Update_LCD_Display+0xbc>)
 8000698:	f7ff ff14 	bl	80004c4 <LCD_Parallel_DisplayStatus>
}
 800069c:	e011      	b.n	80006c2 <Update_LCD_Display+0x9a>
    } else if(current_color < MAX_COLORS) {
 800069e:	4b12      	ldr	r3, [pc, #72]	@ (80006e8 <Update_LCD_Display+0xc0>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2b08      	cmp	r3, #8
 80006a4:	dc0d      	bgt.n	80006c2 <Update_LCD_Display+0x9a>
        LCD_Parallel_DisplayStatus(color_names[current_color], current_speed, current_brightness);
 80006a6:	4b10      	ldr	r3, [pc, #64]	@ (80006e8 <Update_LCD_Display+0xc0>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	009b      	lsls	r3, r3, #2
 80006ac:	3340      	adds	r3, #64	@ 0x40
 80006ae:	443b      	add	r3, r7
 80006b0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80006b4:	4a08      	ldr	r2, [pc, #32]	@ (80006d8 <Update_LCD_Display+0xb0>)
 80006b6:	6811      	ldr	r1, [r2, #0]
 80006b8:	4a08      	ldr	r2, [pc, #32]	@ (80006dc <Update_LCD_Display+0xb4>)
 80006ba:	6812      	ldr	r2, [r2, #0]
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ff01 	bl	80004c4 <LCD_Parallel_DisplayStatus>
}
 80006c2:	bf00      	nop
 80006c4:	3740      	adds	r7, #64	@ 0x40
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bdb0      	pop	{r4, r5, r7, pc}
 80006ca:	bf00      	nop
 80006cc:	08003e14 	.word	0x08003e14
 80006d0:	08003e70 	.word	0x08003e70
 80006d4:	20000030 	.word	0x20000030
 80006d8:	20000034 	.word	0x20000034
 80006dc:	20000038 	.word	0x20000038
 80006e0:	08003de8 	.word	0x08003de8
 80006e4:	08003df0 	.word	0x08003df0
 80006e8:	20000324 	.word	0x20000324

080006ec <Set_LED>:
            // Do nothing for problematic keys and others
            break;
    }
}

void Set_LED (int LEDnum, int Red, int Green, int Blue) {
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
 80006f8:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	b2d9      	uxtb	r1, r3
 80006fe:	4a10      	ldr	r2, [pc, #64]	@ (8000740 <Set_LED+0x54>)
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	b2d9      	uxtb	r1, r3
 800070a:	4a0d      	ldr	r2, [pc, #52]	@ (8000740 <Set_LED+0x54>)
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	4413      	add	r3, r2
 8000712:	460a      	mov	r2, r1
 8000714:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	b2d9      	uxtb	r1, r3
 800071a:	4a09      	ldr	r2, [pc, #36]	@ (8000740 <Set_LED+0x54>)
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	4413      	add	r3, r2
 8000722:	460a      	mov	r2, r1
 8000724:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	b2d9      	uxtb	r1, r3
 800072a:	4a05      	ldr	r2, [pc, #20]	@ (8000740 <Set_LED+0x54>)
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	4413      	add	r3, r2
 8000732:	460a      	mov	r2, r1
 8000734:	70da      	strb	r2, [r3, #3]
}
 8000736:	bf00      	nop
 8000738:	3714      	adds	r7, #20
 800073a:	46bd      	mov	sp, r7
 800073c:	bc80      	pop	{r7}
 800073e:	4770      	bx	lr
 8000740:	20000140 	.word	0x20000140

08000744 <Set_All_LEDs_Same_Color>:

// Function to set all LEDs to the same color
void Set_All_LEDs_Same_Color(int Red, int Green, int Blue) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < MAX_LED; i++) {
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
 8000754:	e008      	b.n	8000768 <Set_All_LEDs_Same_Color+0x24>
        Set_LED(i, Red, Green, Blue);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	68ba      	ldr	r2, [r7, #8]
 800075a:	68f9      	ldr	r1, [r7, #12]
 800075c:	6978      	ldr	r0, [r7, #20]
 800075e:	f7ff ffc5 	bl	80006ec <Set_LED>
    for (int i = 0; i < MAX_LED; i++) {
 8000762:	697b      	ldr	r3, [r7, #20]
 8000764:	3301      	adds	r3, #1
 8000766:	617b      	str	r3, [r7, #20]
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	2b3b      	cmp	r3, #59	@ 0x3b
 800076c:	ddf3      	ble.n	8000756 <Set_All_LEDs_Same_Color+0x12>
    }
}
 800076e:	bf00      	nop
 8000770:	bf00      	nop
 8000772:	3718      	adds	r7, #24
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}

08000778 <Set_LED_Matrix>:
			Set_LED(i, Red, Green, Blue);
		break;
	}
}

void Set_LED_Matrix (int row, int col, int Red, int Green, int Blue) {
 8000778:	b580      	push	{r7, lr}
 800077a:	b0a2      	sub	sp, #136	@ 0x88
 800077c:	af00      	add	r7, sp, #0
 800077e:	60f8      	str	r0, [r7, #12]
 8000780:	60b9      	str	r1, [r7, #8]
 8000782:	607a      	str	r2, [r7, #4]
 8000784:	603b      	str	r3, [r7, #0]
	int LED_Matrix[3][10] = {
 8000786:	4a0f      	ldr	r2, [pc, #60]	@ (80007c4 <Set_LED_Matrix+0x4c>)
 8000788:	f107 0310 	add.w	r3, r7, #16
 800078c:	4611      	mov	r1, r2
 800078e:	2278      	movs	r2, #120	@ 0x78
 8000790:	4618      	mov	r0, r3
 8000792:	f002 fe91 	bl	80034b8 <memcpy>
			{40, 39, 38, 37, 36, 35, 34, 33, 32, 31},
			{16, 17, 18, 19, 20, 21, 22, 23, 24, 25},
			{11, 10,  9,  8,  7,  6,  5,  4,  3,  2},
	};
	Set_LED(LED_Matrix[row][col], Red, Green, Blue);
 8000796:	68fa      	ldr	r2, [r7, #12]
 8000798:	4613      	mov	r3, r2
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	4413      	add	r3, r2
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	68ba      	ldr	r2, [r7, #8]
 80007a2:	4413      	add	r3, r2
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	3388      	adds	r3, #136	@ 0x88
 80007a8:	443b      	add	r3, r7
 80007aa:	f853 0c78 	ldr.w	r0, [r3, #-120]
 80007ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80007b2:	683a      	ldr	r2, [r7, #0]
 80007b4:	6879      	ldr	r1, [r7, #4]
 80007b6:	f7ff ff99 	bl	80006ec <Set_LED>
}
 80007ba:	bf00      	nop
 80007bc:	3788      	adds	r7, #136	@ 0x88
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	08003e94 	.word	0x08003e94

080007c8 <Set_Brightness>:

#define PI 3.14159265

void Set_Brightness (int brightness) {
 80007c8:	b480      	push	{r7}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if (brightness > 100) brightness = 100;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2b64      	cmp	r3, #100	@ 0x64
 80007d4:	dd01      	ble.n	80007da <Set_Brightness+0x12>
 80007d6:	2364      	movs	r3, #100	@ 0x64
 80007d8:	607b      	str	r3, [r7, #4]
	if (brightness < 0) brightness = 0;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	da01      	bge.n	80007e4 <Set_Brightness+0x1c>
 80007e0:	2300      	movs	r3, #0
 80007e2:	607b      	str	r3, [r7, #4]

	for (int i=0; i < MAX_LED; i++) {
 80007e4:	2300      	movs	r3, #0
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	e02d      	b.n	8000846 <Set_Brightness+0x7e>
		LED_Mod[i][0] = LED_Data[i][0];
 80007ea:	4a1b      	ldr	r2, [pc, #108]	@ (8000858 <Set_Brightness+0x90>)
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 80007f2:	4a1a      	ldr	r2, [pc, #104]	@ (800085c <Set_Brightness+0x94>)
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j = 1; j < 4; ++j) {
 80007fa:	2301      	movs	r3, #1
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	e01c      	b.n	800083a <Set_Brightness+0x72>
			// Simple percentage calculation: brightness from 0-100%
			LED_Mod[i][j] = (LED_Data[i][j] * brightness) / 100;
 8000800:	4a15      	ldr	r2, [pc, #84]	@ (8000858 <Set_Brightness+0x90>)
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	441a      	add	r2, r3
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	4413      	add	r3, r2
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	461a      	mov	r2, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	fb02 f303 	mul.w	r3, r2, r3
 8000816:	4a12      	ldr	r2, [pc, #72]	@ (8000860 <Set_Brightness+0x98>)
 8000818:	fb82 1203 	smull	r1, r2, r2, r3
 800081c:	1152      	asrs	r2, r2, #5
 800081e:	17db      	asrs	r3, r3, #31
 8000820:	1ad3      	subs	r3, r2, r3
 8000822:	b2d9      	uxtb	r1, r3
 8000824:	4a0d      	ldr	r2, [pc, #52]	@ (800085c <Set_Brightness+0x94>)
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	441a      	add	r2, r3
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	4413      	add	r3, r2
 8000830:	460a      	mov	r2, r1
 8000832:	701a      	strb	r2, [r3, #0]
		for (int j = 1; j < 4; ++j) {
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	3301      	adds	r3, #1
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	2b03      	cmp	r3, #3
 800083e:	dddf      	ble.n	8000800 <Set_Brightness+0x38>
	for (int i=0; i < MAX_LED; i++) {
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	3301      	adds	r3, #1
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	2b3b      	cmp	r3, #59	@ 0x3b
 800084a:	ddce      	ble.n	80007ea <Set_Brightness+0x22>
		}
	}

#endif
}
 800084c:	bf00      	nop
 800084e:	bf00      	nop
 8000850:	3714      	adds	r7, #20
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr
 8000858:	20000140 	.word	0x20000140
 800085c:	20000230 	.word	0x20000230
 8000860:	51eb851f 	.word	0x51eb851f

08000864 <WS2812_Send>:
//
//	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, 24);
//}


void WS2812_Send (void) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
	uint32_t indx = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	617b      	str	r3, [r7, #20]
	uint32_t color;

	for (int i = 0; i < MAX_LED; ++i) {
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]
 8000872:	e036      	b.n	80008e2 <WS2812_Send+0x7e>
		color = ((LED_Mod[i][1] << 16) | (LED_Mod[i][2] << 8) | (LED_Mod[i][3]));
 8000874:	4a39      	ldr	r2, [pc, #228]	@ (800095c <WS2812_Send+0xf8>)
 8000876:	693b      	ldr	r3, [r7, #16]
 8000878:	009b      	lsls	r3, r3, #2
 800087a:	4413      	add	r3, r2
 800087c:	785b      	ldrb	r3, [r3, #1]
 800087e:	041a      	lsls	r2, r3, #16
 8000880:	4936      	ldr	r1, [pc, #216]	@ (800095c <WS2812_Send+0xf8>)
 8000882:	693b      	ldr	r3, [r7, #16]
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	440b      	add	r3, r1
 8000888:	789b      	ldrb	r3, [r3, #2]
 800088a:	021b      	lsls	r3, r3, #8
 800088c:	431a      	orrs	r2, r3
 800088e:	4933      	ldr	r1, [pc, #204]	@ (800095c <WS2812_Send+0xf8>)
 8000890:	693b      	ldr	r3, [r7, #16]
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	440b      	add	r3, r1
 8000896:	78db      	ldrb	r3, [r3, #3]
 8000898:	4313      	orrs	r3, r2
 800089a:	603b      	str	r3, [r7, #0]

		for (int j = 23; j >= 0; j--) {
 800089c:	2317      	movs	r3, #23
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	e019      	b.n	80008d6 <WS2812_Send+0x72>
			if (color&(1<<j)) {
 80008a2:	2201      	movs	r2, #1
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	fa02 f303 	lsl.w	r3, r2, r3
 80008aa:	461a      	mov	r2, r3
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	4013      	ands	r3, r2
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d005      	beq.n	80008c0 <WS2812_Send+0x5c>
				pwmData[indx] = 60;
 80008b4:	4a2a      	ldr	r2, [pc, #168]	@ (8000960 <WS2812_Send+0xfc>)
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	213c      	movs	r1, #60	@ 0x3c
 80008ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80008be:	e004      	b.n	80008ca <WS2812_Send+0x66>
			} else {
				pwmData[indx] = 30;
 80008c0:	4a27      	ldr	r2, [pc, #156]	@ (8000960 <WS2812_Send+0xfc>)
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	211e      	movs	r1, #30
 80008c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}

			indx++;
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	3301      	adds	r3, #1
 80008ce:	617b      	str	r3, [r7, #20]
		for (int j = 23; j >= 0; j--) {
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	3b01      	subs	r3, #1
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	dae2      	bge.n	80008a2 <WS2812_Send+0x3e>
	for (int i = 0; i < MAX_LED; ++i) {
 80008dc:	693b      	ldr	r3, [r7, #16]
 80008de:	3301      	adds	r3, #1
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	693b      	ldr	r3, [r7, #16]
 80008e4:	2b3b      	cmp	r3, #59	@ 0x3b
 80008e6:	ddc5      	ble.n	8000874 <WS2812_Send+0x10>
		}
	}

	for (int i = 0; i < 50; ++i) {
 80008e8:	2300      	movs	r3, #0
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	e00a      	b.n	8000904 <WS2812_Send+0xa0>
		pwmData[indx] = 0;
 80008ee:	4a1c      	ldr	r2, [pc, #112]	@ (8000960 <WS2812_Send+0xfc>)
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	2100      	movs	r1, #0
 80008f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	3301      	adds	r3, #1
 80008fc:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 50; ++i) {
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	3301      	adds	r3, #1
 8000902:	60bb      	str	r3, [r7, #8]
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	2b31      	cmp	r3, #49	@ 0x31
 8000908:	ddf1      	ble.n	80008ee <WS2812_Send+0x8a>
	}

	// Reset flag before starting DMA
	datasentflag = 0;
 800090a:	4b16      	ldr	r3, [pc, #88]	@ (8000964 <WS2812_Send+0x100>)
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	b29b      	uxth	r3, r3
 8000914:	4a12      	ldr	r2, [pc, #72]	@ (8000960 <WS2812_Send+0xfc>)
 8000916:	2100      	movs	r1, #0
 8000918:	4813      	ldr	r0, [pc, #76]	@ (8000968 <WS2812_Send+0x104>)
 800091a:	f001 fd2f 	bl	800237c <HAL_TIM_PWM_Start_DMA>

	// Add timeout to prevent infinite loop
	uint32_t timeout = 1000000;  // Adjust timeout value
 800091e:	4b13      	ldr	r3, [pc, #76]	@ (800096c <WS2812_Send+0x108>)
 8000920:	607b      	str	r3, [r7, #4]
	while(!datasentflag && timeout > 0) {
 8000922:	e002      	b.n	800092a <WS2812_Send+0xc6>
		timeout--;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	3b01      	subs	r3, #1
 8000928:	607b      	str	r3, [r7, #4]
	while(!datasentflag && timeout > 0) {
 800092a:	4b0e      	ldr	r3, [pc, #56]	@ (8000964 <WS2812_Send+0x100>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d102      	bne.n	8000938 <WS2812_Send+0xd4>
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d1f5      	bne.n	8000924 <WS2812_Send+0xc0>
	}

	// Force stop if timeout occurred
	if (timeout == 0) {
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d106      	bne.n	800094c <WS2812_Send+0xe8>
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 800093e:	2100      	movs	r1, #0
 8000940:	4809      	ldr	r0, [pc, #36]	@ (8000968 <WS2812_Send+0x104>)
 8000942:	f001 febd 	bl	80026c0 <HAL_TIM_PWM_Stop_DMA>
		datasentflag = 1;
 8000946:	4b07      	ldr	r3, [pc, #28]	@ (8000964 <WS2812_Send+0x100>)
 8000948:	2201      	movs	r2, #1
 800094a:	601a      	str	r2, [r3, #0]
	}

	datasentflag = 0;
 800094c:	4b05      	ldr	r3, [pc, #20]	@ (8000964 <WS2812_Send+0x100>)
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
}
 8000952:	bf00      	nop
 8000954:	3718      	adds	r7, #24
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000230 	.word	0x20000230
 8000960:	20000328 	.word	0x20000328
 8000964:	20000320 	.word	0x20000320
 8000968:	200000b4 	.word	0x200000b4
 800096c:	000f4240 	.word	0x000f4240

08000970 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000976:	f000 fae5 	bl	8000f44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800097a:	f000 f839 	bl	80009f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800097e:	f000 f93b 	bl	8000bf8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000982:	f000 f91b 	bl	8000bbc <MX_DMA_Init>
  MX_TIM1_Init();
 8000986:	f000 f879 	bl	8000a7c <MX_TIM1_Init>

  /* USER CODE BEGIN 2 */

  // Initialize keypad
  Keypad_Init();
 800098a:	f7ff fde1 	bl	8000550 <Keypad_Init>

  // Initialize LCD Parallel
  LCD_Parallel_Init();
 800098e:	f7ff fbe5 	bl	800015c <LCD_Parallel_Init>

  // Turn off all LEDs initially
  Set_All_LEDs_Same_Color(0, 0, 0);
 8000992:	2200      	movs	r2, #0
 8000994:	2100      	movs	r1, #0
 8000996:	2000      	movs	r0, #0
 8000998:	f7ff fed4 	bl	8000744 <Set_All_LEDs_Same_Color>
  Set_Brightness(0);
 800099c:	2000      	movs	r0, #0
 800099e:	f7ff ff13 	bl	80007c8 <Set_Brightness>
  WS2812_Send();
 80009a2:	f7ff ff5f 	bl	8000864 <WS2812_Send>


  // Update LCD with initial status
  Update_LCD_Display();
 80009a6:	f7ff fe3f 	bl	8000628 <Update_LCD_Display>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for (int i = 0; i <= 2; ++i) {
 80009aa:	2300      	movs	r3, #0
 80009ac:	607b      	str	r3, [r7, #4]
 80009ae:	e01b      	b.n	80009e8 <main+0x78>
		 for (int j = 0; j <= 9; ++j) {
 80009b0:	2300      	movs	r3, #0
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	e012      	b.n	80009dc <main+0x6c>
			 Set_LED_Matrix(i, j, 255, 255, 255);
 80009b6:	23ff      	movs	r3, #255	@ 0xff
 80009b8:	9300      	str	r3, [sp, #0]
 80009ba:	23ff      	movs	r3, #255	@ 0xff
 80009bc:	22ff      	movs	r2, #255	@ 0xff
 80009be:	6839      	ldr	r1, [r7, #0]
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f7ff fed9 	bl	8000778 <Set_LED_Matrix>
			 Set_Brightness(20);
 80009c6:	2014      	movs	r0, #20
 80009c8:	f7ff fefe 	bl	80007c8 <Set_Brightness>
			 WS2812_Send();
 80009cc:	f7ff ff4a 	bl	8000864 <WS2812_Send>
			 HAL_Delay(200);
 80009d0:	20c8      	movs	r0, #200	@ 0xc8
 80009d2:	f000 fb19 	bl	8001008 <HAL_Delay>
		 for (int j = 0; j <= 9; ++j) {
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	3301      	adds	r3, #1
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	2b09      	cmp	r3, #9
 80009e0:	dde9      	ble.n	80009b6 <main+0x46>
	  for (int i = 0; i <= 2; ++i) {
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	3301      	adds	r3, #1
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2b02      	cmp	r3, #2
 80009ec:	dde0      	ble.n	80009b0 <main+0x40>
 80009ee:	e7dc      	b.n	80009aa <main+0x3a>

080009f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b090      	sub	sp, #64	@ 0x40
 80009f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009f6:	f107 0318 	add.w	r3, r7, #24
 80009fa:	2228      	movs	r2, #40	@ 0x28
 80009fc:	2100      	movs	r1, #0
 80009fe:	4618      	mov	r0, r3
 8000a00:	f002 fd26 	bl	8003450 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	60da      	str	r2, [r3, #12]
 8000a10:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a12:	2301      	movs	r3, #1
 8000a14:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a16:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a1a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a20:	2301      	movs	r3, #1
 8000a22:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a24:	2302      	movs	r3, #2
 8000a26:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a28:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a2e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a34:	f107 0318 	add.w	r3, r7, #24
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f001 f819 	bl	8001a70 <HAL_RCC_OscConfig>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000a44:	f000 f930 	bl	8000ca8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a48:	230f      	movs	r3, #15
 8000a4a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	2102      	movs	r1, #2
 8000a62:	4618      	mov	r0, r3
 8000a64:	f001 fa86 	bl	8001f74 <HAL_RCC_ClockConfig>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a6e:	f000 f91b 	bl	8000ca8 <Error_Handler>
  }
}
 8000a72:	bf00      	nop
 8000a74:	3740      	adds	r7, #64	@ 0x40
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
	...

08000a7c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b096      	sub	sp, #88	@ 0x58
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a82:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a90:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
 8000aa6:	60da      	str	r2, [r3, #12]
 8000aa8:	611a      	str	r2, [r3, #16]
 8000aaa:	615a      	str	r2, [r3, #20]
 8000aac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	2220      	movs	r2, #32
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f002 fccb 	bl	8003450 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000aba:	4b3e      	ldr	r3, [pc, #248]	@ (8000bb4 <MX_TIM1_Init+0x138>)
 8000abc:	4a3e      	ldr	r2, [pc, #248]	@ (8000bb8 <MX_TIM1_Init+0x13c>)
 8000abe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ac0:	4b3c      	ldr	r3, [pc, #240]	@ (8000bb4 <MX_TIM1_Init+0x138>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac6:	4b3b      	ldr	r3, [pc, #236]	@ (8000bb4 <MX_TIM1_Init+0x138>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 8000acc:	4b39      	ldr	r3, [pc, #228]	@ (8000bb4 <MX_TIM1_Init+0x138>)
 8000ace:	2259      	movs	r2, #89	@ 0x59
 8000ad0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad2:	4b38      	ldr	r3, [pc, #224]	@ (8000bb4 <MX_TIM1_Init+0x138>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ad8:	4b36      	ldr	r3, [pc, #216]	@ (8000bb4 <MX_TIM1_Init+0x138>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ade:	4b35      	ldr	r3, [pc, #212]	@ (8000bb4 <MX_TIM1_Init+0x138>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ae4:	4833      	ldr	r0, [pc, #204]	@ (8000bb4 <MX_TIM1_Init+0x138>)
 8000ae6:	f001 fba1 	bl	800222c <HAL_TIM_Base_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000af0:	f000 f8da 	bl	8000ca8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000af4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000af8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000afa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000afe:	4619      	mov	r1, r3
 8000b00:	482c      	ldr	r0, [pc, #176]	@ (8000bb4 <MX_TIM1_Init+0x138>)
 8000b02:	f001 ff65 	bl	80029d0 <HAL_TIM_ConfigClockSource>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000b0c:	f000 f8cc 	bl	8000ca8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b10:	4828      	ldr	r0, [pc, #160]	@ (8000bb4 <MX_TIM1_Init+0x138>)
 8000b12:	f001 fbda 	bl	80022ca <HAL_TIM_PWM_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000b1c:	f000 f8c4 	bl	8000ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b20:	2300      	movs	r3, #0
 8000b22:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b24:	2300      	movs	r3, #0
 8000b26:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b28:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4821      	ldr	r0, [pc, #132]	@ (8000bb4 <MX_TIM1_Init+0x138>)
 8000b30:	f002 fba8 	bl	8003284 <HAL_TIMEx_MasterConfigSynchronization>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000b3a:	f000 f8b5 	bl	8000ca8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b3e:	2360      	movs	r3, #96	@ 0x60
 8000b40:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b46:	2300      	movs	r3, #0
 8000b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b52:	2300      	movs	r3, #0
 8000b54:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b56:	2300      	movs	r3, #0
 8000b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b5e:	2200      	movs	r2, #0
 8000b60:	4619      	mov	r1, r3
 8000b62:	4814      	ldr	r0, [pc, #80]	@ (8000bb4 <MX_TIM1_Init+0x138>)
 8000b64:	f001 fe72 	bl	800284c <HAL_TIM_PWM_ConfigChannel>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000b6e:	f000 f89b 	bl	8000ca8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b72:	2300      	movs	r3, #0
 8000b74:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b76:	2300      	movs	r3, #0
 8000b78:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b86:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b8a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b90:	1d3b      	adds	r3, r7, #4
 8000b92:	4619      	mov	r1, r3
 8000b94:	4807      	ldr	r0, [pc, #28]	@ (8000bb4 <MX_TIM1_Init+0x138>)
 8000b96:	f002 fbd3 	bl	8003340 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000ba0:	f000 f882 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ba4:	4803      	ldr	r0, [pc, #12]	@ (8000bb4 <MX_TIM1_Init+0x138>)
 8000ba6:	f000 f901 	bl	8000dac <HAL_TIM_MspPostInit>

}
 8000baa:	bf00      	nop
 8000bac:	3758      	adds	r7, #88	@ 0x58
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	200000b4 	.word	0x200000b4
 8000bb8:	40012c00 	.word	0x40012c00

08000bbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf4 <MX_DMA_Init+0x38>)
 8000bc4:	695b      	ldr	r3, [r3, #20]
 8000bc6:	4a0b      	ldr	r2, [pc, #44]	@ (8000bf4 <MX_DMA_Init+0x38>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	6153      	str	r3, [r2, #20]
 8000bce:	4b09      	ldr	r3, [pc, #36]	@ (8000bf4 <MX_DMA_Init+0x38>)
 8000bd0:	695b      	ldr	r3, [r3, #20]
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2100      	movs	r1, #0
 8000bde:	200c      	movs	r0, #12
 8000be0:	f000 fb0d 	bl	80011fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000be4:	200c      	movs	r0, #12
 8000be6:	f000 fb26 	bl	8001236 <HAL_NVIC_EnableIRQ>

}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40021000 	.word	0x40021000

08000bf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b088      	sub	sp, #32
 8000bfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfe:	f107 0310 	add.w	r3, r7, #16
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0c:	4b24      	ldr	r3, [pc, #144]	@ (8000ca0 <MX_GPIO_Init+0xa8>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	4a23      	ldr	r2, [pc, #140]	@ (8000ca0 <MX_GPIO_Init+0xa8>)
 8000c12:	f043 0310 	orr.w	r3, r3, #16
 8000c16:	6193      	str	r3, [r2, #24]
 8000c18:	4b21      	ldr	r3, [pc, #132]	@ (8000ca0 <MX_GPIO_Init+0xa8>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	f003 0310 	and.w	r3, r3, #16
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c24:	4b1e      	ldr	r3, [pc, #120]	@ (8000ca0 <MX_GPIO_Init+0xa8>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	4a1d      	ldr	r2, [pc, #116]	@ (8000ca0 <MX_GPIO_Init+0xa8>)
 8000c2a:	f043 0320 	orr.w	r3, r3, #32
 8000c2e:	6193      	str	r3, [r2, #24]
 8000c30:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca0 <MX_GPIO_Init+0xa8>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	f003 0320 	and.w	r3, r3, #32
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3c:	4b18      	ldr	r3, [pc, #96]	@ (8000ca0 <MX_GPIO_Init+0xa8>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	4a17      	ldr	r2, [pc, #92]	@ (8000ca0 <MX_GPIO_Init+0xa8>)
 8000c42:	f043 0304 	orr.w	r3, r3, #4
 8000c46:	6193      	str	r3, [r2, #24]
 8000c48:	4b15      	ldr	r3, [pc, #84]	@ (8000ca0 <MX_GPIO_Init+0xa8>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	f003 0304 	and.w	r3, r3, #4
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c54:	2200      	movs	r2, #0
 8000c56:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c5a:	4812      	ldr	r0, [pc, #72]	@ (8000ca4 <MX_GPIO_Init+0xac>)
 8000c5c:	f000 fef0 	bl	8001a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c60:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c66:	2301      	movs	r3, #1
 8000c68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c72:	f107 0310 	add.w	r3, r7, #16
 8000c76:	4619      	mov	r1, r3
 8000c78:	480a      	ldr	r0, [pc, #40]	@ (8000ca4 <MX_GPIO_Init+0xac>)
 8000c7a:	f000 fd5d 	bl	8001738 <HAL_GPIO_Init>

  /*Configure GPIO pin PC15 for GYMAX4466 sound detection */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c8c:	f107 0310 	add.w	r3, r7, #16
 8000c90:	4619      	mov	r1, r3
 8000c92:	4804      	ldr	r0, [pc, #16]	@ (8000ca4 <MX_GPIO_Init+0xac>)
 8000c94:	f000 fd50 	bl	8001738 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c98:	bf00      	nop
 8000c9a:	3720      	adds	r7, #32
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	40011000 	.word	0x40011000

08000ca8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cac:	b672      	cpsid	i
}
 8000cae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb0:	bf00      	nop
 8000cb2:	e7fd      	b.n	8000cb0 <Error_Handler+0x8>

08000cb4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cba:	4b15      	ldr	r3, [pc, #84]	@ (8000d10 <HAL_MspInit+0x5c>)
 8000cbc:	699b      	ldr	r3, [r3, #24]
 8000cbe:	4a14      	ldr	r2, [pc, #80]	@ (8000d10 <HAL_MspInit+0x5c>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	6193      	str	r3, [r2, #24]
 8000cc6:	4b12      	ldr	r3, [pc, #72]	@ (8000d10 <HAL_MspInit+0x5c>)
 8000cc8:	699b      	ldr	r3, [r3, #24]
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d10 <HAL_MspInit+0x5c>)
 8000cd4:	69db      	ldr	r3, [r3, #28]
 8000cd6:	4a0e      	ldr	r2, [pc, #56]	@ (8000d10 <HAL_MspInit+0x5c>)
 8000cd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cdc:	61d3      	str	r3, [r2, #28]
 8000cde:	4b0c      	ldr	r3, [pc, #48]	@ (8000d10 <HAL_MspInit+0x5c>)
 8000ce0:	69db      	ldr	r3, [r3, #28]
 8000ce2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cea:	4b0a      	ldr	r3, [pc, #40]	@ (8000d14 <HAL_MspInit+0x60>)
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	4a04      	ldr	r2, [pc, #16]	@ (8000d14 <HAL_MspInit+0x60>)
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d06:	bf00      	nop
 8000d08:	3714      	adds	r7, #20
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr
 8000d10:	40021000 	.word	0x40021000
 8000d14:	40010000 	.word	0x40010000

08000d18 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a1d      	ldr	r2, [pc, #116]	@ (8000d9c <HAL_TIM_Base_MspInit+0x84>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d133      	bne.n	8000d92 <HAL_TIM_Base_MspInit+0x7a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000da0 <HAL_TIM_Base_MspInit+0x88>)
 8000d2c:	699b      	ldr	r3, [r3, #24]
 8000d2e:	4a1c      	ldr	r2, [pc, #112]	@ (8000da0 <HAL_TIM_Base_MspInit+0x88>)
 8000d30:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d34:	6193      	str	r3, [r2, #24]
 8000d36:	4b1a      	ldr	r3, [pc, #104]	@ (8000da0 <HAL_TIM_Base_MspInit+0x88>)
 8000d38:	699b      	ldr	r3, [r3, #24]
 8000d3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8000d42:	4b18      	ldr	r3, [pc, #96]	@ (8000da4 <HAL_TIM_Base_MspInit+0x8c>)
 8000d44:	4a18      	ldr	r2, [pc, #96]	@ (8000da8 <HAL_TIM_Base_MspInit+0x90>)
 8000d46:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d48:	4b16      	ldr	r3, [pc, #88]	@ (8000da4 <HAL_TIM_Base_MspInit+0x8c>)
 8000d4a:	2210      	movs	r2, #16
 8000d4c:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d4e:	4b15      	ldr	r3, [pc, #84]	@ (8000da4 <HAL_TIM_Base_MspInit+0x8c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000d54:	4b13      	ldr	r3, [pc, #76]	@ (8000da4 <HAL_TIM_Base_MspInit+0x8c>)
 8000d56:	2280      	movs	r2, #128	@ 0x80
 8000d58:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d5a:	4b12      	ldr	r3, [pc, #72]	@ (8000da4 <HAL_TIM_Base_MspInit+0x8c>)
 8000d5c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d60:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d62:	4b10      	ldr	r3, [pc, #64]	@ (8000da4 <HAL_TIM_Base_MspInit+0x8c>)
 8000d64:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d68:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000da4 <HAL_TIM_Base_MspInit+0x8c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000d70:	4b0c      	ldr	r3, [pc, #48]	@ (8000da4 <HAL_TIM_Base_MspInit+0x8c>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000d76:	480b      	ldr	r0, [pc, #44]	@ (8000da4 <HAL_TIM_Base_MspInit+0x8c>)
 8000d78:	f000 fa78 	bl	800126c <HAL_DMA_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8000d82:	f7ff ff91 	bl	8000ca8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a06      	ldr	r2, [pc, #24]	@ (8000da4 <HAL_TIM_Base_MspInit+0x8c>)
 8000d8a:	625a      	str	r2, [r3, #36]	@ 0x24
 8000d8c:	4a05      	ldr	r2, [pc, #20]	@ (8000da4 <HAL_TIM_Base_MspInit+0x8c>)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40012c00 	.word	0x40012c00
 8000da0:	40021000 	.word	0x40021000
 8000da4:	200000fc 	.word	0x200000fc
 8000da8:	4002001c 	.word	0x4002001c

08000dac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b088      	sub	sp, #32
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	f107 0310 	add.w	r3, r7, #16
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a10      	ldr	r2, [pc, #64]	@ (8000e08 <HAL_TIM_MspPostInit+0x5c>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d118      	bne.n	8000dfe <HAL_TIM_MspPostInit+0x52>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8000e0c <HAL_TIM_MspPostInit+0x60>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	4a0e      	ldr	r2, [pc, #56]	@ (8000e0c <HAL_TIM_MspPostInit+0x60>)
 8000dd2:	f043 0304 	orr.w	r3, r3, #4
 8000dd6:	6193      	str	r3, [r2, #24]
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e0c <HAL_TIM_MspPostInit+0x60>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	f003 0304 	and.w	r3, r3, #4
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000de4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000de8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dea:	2302      	movs	r3, #2
 8000dec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dee:	2302      	movs	r3, #2
 8000df0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	f107 0310 	add.w	r3, r7, #16
 8000df6:	4619      	mov	r1, r3
 8000df8:	4805      	ldr	r0, [pc, #20]	@ (8000e10 <HAL_TIM_MspPostInit+0x64>)
 8000dfa:	f000 fc9d 	bl	8001738 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000dfe:	bf00      	nop
 8000e00:	3720      	adds	r7, #32
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40012c00 	.word	0x40012c00
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	40010800 	.word	0x40010800

08000e14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <NMI_Handler+0x4>

08000e1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <HardFault_Handler+0x4>

08000e24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <MemManage_Handler+0x4>

08000e2c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e30:	bf00      	nop
 8000e32:	e7fd      	b.n	8000e30 <BusFault_Handler+0x4>

08000e34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e38:	bf00      	nop
 8000e3a:	e7fd      	b.n	8000e38 <UsageFault_Handler+0x4>

08000e3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr

08000e48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr

08000e54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc80      	pop	{r7}
 8000e5e:	4770      	bx	lr

08000e60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e64:	f000 f8b4 	bl	8000fd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e68:	bf00      	nop
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000e70:	4802      	ldr	r0, [pc, #8]	@ (8000e7c <DMA1_Channel2_IRQHandler+0x10>)
 8000e72:	f000 fb2d 	bl	80014d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	200000fc 	.word	0x200000fc

08000e80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e88:	4a14      	ldr	r2, [pc, #80]	@ (8000edc <_sbrk+0x5c>)
 8000e8a:	4b15      	ldr	r3, [pc, #84]	@ (8000ee0 <_sbrk+0x60>)
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e94:	4b13      	ldr	r3, [pc, #76]	@ (8000ee4 <_sbrk+0x64>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d102      	bne.n	8000ea2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e9c:	4b11      	ldr	r3, [pc, #68]	@ (8000ee4 <_sbrk+0x64>)
 8000e9e:	4a12      	ldr	r2, [pc, #72]	@ (8000ee8 <_sbrk+0x68>)
 8000ea0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ea2:	4b10      	ldr	r3, [pc, #64]	@ (8000ee4 <_sbrk+0x64>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d207      	bcs.n	8000ec0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eb0:	f002 fad6 	bl	8003460 <__errno>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	220c      	movs	r2, #12
 8000eb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eba:	f04f 33ff 	mov.w	r3, #4294967295
 8000ebe:	e009      	b.n	8000ed4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ec0:	4b08      	ldr	r3, [pc, #32]	@ (8000ee4 <_sbrk+0x64>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ec6:	4b07      	ldr	r3, [pc, #28]	@ (8000ee4 <_sbrk+0x64>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	4a05      	ldr	r2, [pc, #20]	@ (8000ee4 <_sbrk+0x64>)
 8000ed0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3718      	adds	r7, #24
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20005000 	.word	0x20005000
 8000ee0:	00000400 	.word	0x00000400
 8000ee4:	20000ecc 	.word	0x20000ecc
 8000ee8:	20001020 	.word	0x20001020

08000eec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr

08000ef8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ef8:	f7ff fff8 	bl	8000eec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000efc:	480b      	ldr	r0, [pc, #44]	@ (8000f2c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000efe:	490c      	ldr	r1, [pc, #48]	@ (8000f30 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f00:	4a0c      	ldr	r2, [pc, #48]	@ (8000f34 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f04:	e002      	b.n	8000f0c <LoopCopyDataInit>

08000f06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f0a:	3304      	adds	r3, #4

08000f0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f10:	d3f9      	bcc.n	8000f06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f12:	4a09      	ldr	r2, [pc, #36]	@ (8000f38 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f14:	4c09      	ldr	r4, [pc, #36]	@ (8000f3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f18:	e001      	b.n	8000f1e <LoopFillZerobss>

08000f1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f1c:	3204      	adds	r2, #4

08000f1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f20:	d3fb      	bcc.n	8000f1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f22:	f002 faa3 	bl	800346c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f26:	f7ff fd23 	bl	8000970 <main>
  bx lr
 8000f2a:	4770      	bx	lr
  ldr r0, =_sdata
 8000f2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f30:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8000f34:	08003fb8 	.word	0x08003fb8
  ldr r2, =_sbss
 8000f38:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8000f3c:	2000101c 	.word	0x2000101c

08000f40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f40:	e7fe      	b.n	8000f40 <ADC1_2_IRQHandler>
	...

08000f44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f48:	4b08      	ldr	r3, [pc, #32]	@ (8000f6c <HAL_Init+0x28>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a07      	ldr	r2, [pc, #28]	@ (8000f6c <HAL_Init+0x28>)
 8000f4e:	f043 0310 	orr.w	r3, r3, #16
 8000f52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f54:	2003      	movs	r0, #3
 8000f56:	f000 f947 	bl	80011e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f5a:	200f      	movs	r0, #15
 8000f5c:	f000 f808 	bl	8000f70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f60:	f7ff fea8 	bl	8000cb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40022000 	.word	0x40022000

08000f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f78:	4b12      	ldr	r3, [pc, #72]	@ (8000fc4 <HAL_InitTick+0x54>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4b12      	ldr	r3, [pc, #72]	@ (8000fc8 <HAL_InitTick+0x58>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	4619      	mov	r1, r3
 8000f82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 f95f 	bl	8001252 <HAL_SYSTICK_Config>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e00e      	b.n	8000fbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b0f      	cmp	r3, #15
 8000fa2:	d80a      	bhi.n	8000fba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fac:	f000 f927 	bl	80011fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fb0:	4a06      	ldr	r2, [pc, #24]	@ (8000fcc <HAL_InitTick+0x5c>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	e000      	b.n	8000fbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	2000003c 	.word	0x2000003c
 8000fc8:	20000044 	.word	0x20000044
 8000fcc:	20000040 	.word	0x20000040

08000fd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd4:	4b05      	ldr	r3, [pc, #20]	@ (8000fec <HAL_IncTick+0x1c>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b05      	ldr	r3, [pc, #20]	@ (8000ff0 <HAL_IncTick+0x20>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	4a03      	ldr	r2, [pc, #12]	@ (8000ff0 <HAL_IncTick+0x20>)
 8000fe2:	6013      	str	r3, [r2, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr
 8000fec:	20000044 	.word	0x20000044
 8000ff0:	20000ed0 	.word	0x20000ed0

08000ff4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff8:	4b02      	ldr	r3, [pc, #8]	@ (8001004 <HAL_GetTick+0x10>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr
 8001004:	20000ed0 	.word	0x20000ed0

08001008 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001010:	f7ff fff0 	bl	8000ff4 <HAL_GetTick>
 8001014:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001020:	d005      	beq.n	800102e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001022:	4b0a      	ldr	r3, [pc, #40]	@ (800104c <HAL_Delay+0x44>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	4413      	add	r3, r2
 800102c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800102e:	bf00      	nop
 8001030:	f7ff ffe0 	bl	8000ff4 <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	429a      	cmp	r2, r3
 800103e:	d8f7      	bhi.n	8001030 <HAL_Delay+0x28>
  {
  }
}
 8001040:	bf00      	nop
 8001042:	bf00      	nop
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000044 	.word	0x20000044

08001050 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001060:	4b0c      	ldr	r3, [pc, #48]	@ (8001094 <__NVIC_SetPriorityGrouping+0x44>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001066:	68ba      	ldr	r2, [r7, #8]
 8001068:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800106c:	4013      	ands	r3, r2
 800106e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001078:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800107c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001082:	4a04      	ldr	r2, [pc, #16]	@ (8001094 <__NVIC_SetPriorityGrouping+0x44>)
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	60d3      	str	r3, [r2, #12]
}
 8001088:	bf00      	nop
 800108a:	3714      	adds	r7, #20
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800109c:	4b04      	ldr	r3, [pc, #16]	@ (80010b0 <__NVIC_GetPriorityGrouping+0x18>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	0a1b      	lsrs	r3, r3, #8
 80010a2:	f003 0307 	and.w	r3, r3, #7
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	db0b      	blt.n	80010de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	f003 021f 	and.w	r2, r3, #31
 80010cc:	4906      	ldr	r1, [pc, #24]	@ (80010e8 <__NVIC_EnableIRQ+0x34>)
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	095b      	lsrs	r3, r3, #5
 80010d4:	2001      	movs	r0, #1
 80010d6:	fa00 f202 	lsl.w	r2, r0, r2
 80010da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr
 80010e8:	e000e100 	.word	0xe000e100

080010ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	6039      	str	r1, [r7, #0]
 80010f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	db0a      	blt.n	8001116 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	b2da      	uxtb	r2, r3
 8001104:	490c      	ldr	r1, [pc, #48]	@ (8001138 <__NVIC_SetPriority+0x4c>)
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	0112      	lsls	r2, r2, #4
 800110c:	b2d2      	uxtb	r2, r2
 800110e:	440b      	add	r3, r1
 8001110:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001114:	e00a      	b.n	800112c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4908      	ldr	r1, [pc, #32]	@ (800113c <__NVIC_SetPriority+0x50>)
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	f003 030f 	and.w	r3, r3, #15
 8001122:	3b04      	subs	r3, #4
 8001124:	0112      	lsls	r2, r2, #4
 8001126:	b2d2      	uxtb	r2, r2
 8001128:	440b      	add	r3, r1
 800112a:	761a      	strb	r2, [r3, #24]
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	bc80      	pop	{r7}
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	e000e100 	.word	0xe000e100
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001140:	b480      	push	{r7}
 8001142:	b089      	sub	sp, #36	@ 0x24
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	f1c3 0307 	rsb	r3, r3, #7
 800115a:	2b04      	cmp	r3, #4
 800115c:	bf28      	it	cs
 800115e:	2304      	movcs	r3, #4
 8001160:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3304      	adds	r3, #4
 8001166:	2b06      	cmp	r3, #6
 8001168:	d902      	bls.n	8001170 <NVIC_EncodePriority+0x30>
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3b03      	subs	r3, #3
 800116e:	e000      	b.n	8001172 <NVIC_EncodePriority+0x32>
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001174:	f04f 32ff 	mov.w	r2, #4294967295
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43da      	mvns	r2, r3
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	401a      	ands	r2, r3
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001188:	f04f 31ff 	mov.w	r1, #4294967295
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	fa01 f303 	lsl.w	r3, r1, r3
 8001192:	43d9      	mvns	r1, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001198:	4313      	orrs	r3, r2
         );
}
 800119a:	4618      	mov	r0, r3
 800119c:	3724      	adds	r7, #36	@ 0x24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr

080011a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011b4:	d301      	bcc.n	80011ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011b6:	2301      	movs	r3, #1
 80011b8:	e00f      	b.n	80011da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ba:	4a0a      	ldr	r2, [pc, #40]	@ (80011e4 <SysTick_Config+0x40>)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3b01      	subs	r3, #1
 80011c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011c2:	210f      	movs	r1, #15
 80011c4:	f04f 30ff 	mov.w	r0, #4294967295
 80011c8:	f7ff ff90 	bl	80010ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011cc:	4b05      	ldr	r3, [pc, #20]	@ (80011e4 <SysTick_Config+0x40>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011d2:	4b04      	ldr	r3, [pc, #16]	@ (80011e4 <SysTick_Config+0x40>)
 80011d4:	2207      	movs	r2, #7
 80011d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	e000e010 	.word	0xe000e010

080011e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f7ff ff2d 	bl	8001050 <__NVIC_SetPriorityGrouping>
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011fe:	b580      	push	{r7, lr}
 8001200:	b086      	sub	sp, #24
 8001202:	af00      	add	r7, sp, #0
 8001204:	4603      	mov	r3, r0
 8001206:	60b9      	str	r1, [r7, #8]
 8001208:	607a      	str	r2, [r7, #4]
 800120a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001210:	f7ff ff42 	bl	8001098 <__NVIC_GetPriorityGrouping>
 8001214:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	68b9      	ldr	r1, [r7, #8]
 800121a:	6978      	ldr	r0, [r7, #20]
 800121c:	f7ff ff90 	bl	8001140 <NVIC_EncodePriority>
 8001220:	4602      	mov	r2, r0
 8001222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001226:	4611      	mov	r1, r2
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ff5f 	bl	80010ec <__NVIC_SetPriority>
}
 800122e:	bf00      	nop
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	4603      	mov	r3, r0
 800123e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ff35 	bl	80010b4 <__NVIC_EnableIRQ>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff ffa2 	bl	80011a4 <SysTick_Config>
 8001260:	4603      	mov	r3, r0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001274:	2300      	movs	r3, #0
 8001276:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d101      	bne.n	8001282 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e043      	b.n	800130a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	461a      	mov	r2, r3
 8001288:	4b22      	ldr	r3, [pc, #136]	@ (8001314 <HAL_DMA_Init+0xa8>)
 800128a:	4413      	add	r3, r2
 800128c:	4a22      	ldr	r2, [pc, #136]	@ (8001318 <HAL_DMA_Init+0xac>)
 800128e:	fba2 2303 	umull	r2, r3, r2, r3
 8001292:	091b      	lsrs	r3, r3, #4
 8001294:	009a      	lsls	r2, r3, #2
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a1f      	ldr	r2, [pc, #124]	@ (800131c <HAL_DMA_Init+0xb0>)
 800129e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2202      	movs	r2, #2
 80012a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80012b6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80012ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80012c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	69db      	ldr	r3, [r3, #28]
 80012e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80012e4:	68fa      	ldr	r2, [r7, #12]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2200      	movs	r2, #0
 80012f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2201      	movs	r2, #1
 80012fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3714      	adds	r7, #20
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr
 8001314:	bffdfff8 	.word	0xbffdfff8
 8001318:	cccccccd 	.word	0xcccccccd
 800131c:	40020000 	.word	0x40020000

08001320 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
 800132c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800132e:	2300      	movs	r3, #0
 8001330:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d101      	bne.n	8001340 <HAL_DMA_Start_IT+0x20>
 800133c:	2302      	movs	r3, #2
 800133e:	e04b      	b.n	80013d8 <HAL_DMA_Start_IT+0xb8>
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	2201      	movs	r2, #1
 8001344:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800134e:	b2db      	uxtb	r3, r3
 8001350:	2b01      	cmp	r3, #1
 8001352:	d13a      	bne.n	80013ca <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2202      	movs	r2, #2
 8001358:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2200      	movs	r2, #0
 8001360:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f022 0201 	bic.w	r2, r2, #1
 8001370:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	68b9      	ldr	r1, [r7, #8]
 8001378:	68f8      	ldr	r0, [r7, #12]
 800137a:	f000 f9af 	bl	80016dc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001382:	2b00      	cmp	r3, #0
 8001384:	d008      	beq.n	8001398 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f042 020e 	orr.w	r2, r2, #14
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	e00f      	b.n	80013b8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 0204 	bic.w	r2, r2, #4
 80013a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f042 020a 	orr.w	r2, r2, #10
 80013b6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f042 0201 	orr.w	r2, r2, #1
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	e005      	b.n	80013d6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80013d2:	2302      	movs	r3, #2
 80013d4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80013d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3718      	adds	r7, #24
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013e8:	2300      	movs	r3, #0
 80013ea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d005      	beq.n	8001404 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2204      	movs	r2, #4
 80013fc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	73fb      	strb	r3, [r7, #15]
 8001402:	e051      	b.n	80014a8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f022 020e 	bic.w	r2, r2, #14
 8001412:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f022 0201 	bic.w	r2, r2, #1
 8001422:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a22      	ldr	r2, [pc, #136]	@ (80014b4 <HAL_DMA_Abort_IT+0xd4>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d029      	beq.n	8001482 <HAL_DMA_Abort_IT+0xa2>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a21      	ldr	r2, [pc, #132]	@ (80014b8 <HAL_DMA_Abort_IT+0xd8>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d022      	beq.n	800147e <HAL_DMA_Abort_IT+0x9e>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a1f      	ldr	r2, [pc, #124]	@ (80014bc <HAL_DMA_Abort_IT+0xdc>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d01a      	beq.n	8001478 <HAL_DMA_Abort_IT+0x98>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a1e      	ldr	r2, [pc, #120]	@ (80014c0 <HAL_DMA_Abort_IT+0xe0>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d012      	beq.n	8001472 <HAL_DMA_Abort_IT+0x92>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a1c      	ldr	r2, [pc, #112]	@ (80014c4 <HAL_DMA_Abort_IT+0xe4>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d00a      	beq.n	800146c <HAL_DMA_Abort_IT+0x8c>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a1b      	ldr	r2, [pc, #108]	@ (80014c8 <HAL_DMA_Abort_IT+0xe8>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d102      	bne.n	8001466 <HAL_DMA_Abort_IT+0x86>
 8001460:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001464:	e00e      	b.n	8001484 <HAL_DMA_Abort_IT+0xa4>
 8001466:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800146a:	e00b      	b.n	8001484 <HAL_DMA_Abort_IT+0xa4>
 800146c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001470:	e008      	b.n	8001484 <HAL_DMA_Abort_IT+0xa4>
 8001472:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001476:	e005      	b.n	8001484 <HAL_DMA_Abort_IT+0xa4>
 8001478:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800147c:	e002      	b.n	8001484 <HAL_DMA_Abort_IT+0xa4>
 800147e:	2310      	movs	r3, #16
 8001480:	e000      	b.n	8001484 <HAL_DMA_Abort_IT+0xa4>
 8001482:	2301      	movs	r3, #1
 8001484:	4a11      	ldr	r2, [pc, #68]	@ (80014cc <HAL_DMA_Abort_IT+0xec>)
 8001486:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2201      	movs	r2, #1
 800148c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800149c:	2b00      	cmp	r3, #0
 800149e:	d003      	beq.n	80014a8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	4798      	blx	r3
    } 
  }
  return status;
 80014a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40020008 	.word	0x40020008
 80014b8:	4002001c 	.word	0x4002001c
 80014bc:	40020030 	.word	0x40020030
 80014c0:	40020044 	.word	0x40020044
 80014c4:	40020058 	.word	0x40020058
 80014c8:	4002006c 	.word	0x4002006c
 80014cc:	40020000 	.word	0x40020000

080014d0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ec:	2204      	movs	r2, #4
 80014ee:	409a      	lsls	r2, r3
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	4013      	ands	r3, r2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d04f      	beq.n	8001598 <HAL_DMA_IRQHandler+0xc8>
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	f003 0304 	and.w	r3, r3, #4
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d04a      	beq.n	8001598 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0320 	and.w	r3, r3, #32
 800150c:	2b00      	cmp	r3, #0
 800150e:	d107      	bne.n	8001520 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f022 0204 	bic.w	r2, r2, #4
 800151e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a66      	ldr	r2, [pc, #408]	@ (80016c0 <HAL_DMA_IRQHandler+0x1f0>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d029      	beq.n	800157e <HAL_DMA_IRQHandler+0xae>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a65      	ldr	r2, [pc, #404]	@ (80016c4 <HAL_DMA_IRQHandler+0x1f4>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d022      	beq.n	800157a <HAL_DMA_IRQHandler+0xaa>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a63      	ldr	r2, [pc, #396]	@ (80016c8 <HAL_DMA_IRQHandler+0x1f8>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d01a      	beq.n	8001574 <HAL_DMA_IRQHandler+0xa4>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a62      	ldr	r2, [pc, #392]	@ (80016cc <HAL_DMA_IRQHandler+0x1fc>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d012      	beq.n	800156e <HAL_DMA_IRQHandler+0x9e>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a60      	ldr	r2, [pc, #384]	@ (80016d0 <HAL_DMA_IRQHandler+0x200>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d00a      	beq.n	8001568 <HAL_DMA_IRQHandler+0x98>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a5f      	ldr	r2, [pc, #380]	@ (80016d4 <HAL_DMA_IRQHandler+0x204>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d102      	bne.n	8001562 <HAL_DMA_IRQHandler+0x92>
 800155c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001560:	e00e      	b.n	8001580 <HAL_DMA_IRQHandler+0xb0>
 8001562:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001566:	e00b      	b.n	8001580 <HAL_DMA_IRQHandler+0xb0>
 8001568:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800156c:	e008      	b.n	8001580 <HAL_DMA_IRQHandler+0xb0>
 800156e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001572:	e005      	b.n	8001580 <HAL_DMA_IRQHandler+0xb0>
 8001574:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001578:	e002      	b.n	8001580 <HAL_DMA_IRQHandler+0xb0>
 800157a:	2340      	movs	r3, #64	@ 0x40
 800157c:	e000      	b.n	8001580 <HAL_DMA_IRQHandler+0xb0>
 800157e:	2304      	movs	r3, #4
 8001580:	4a55      	ldr	r2, [pc, #340]	@ (80016d8 <HAL_DMA_IRQHandler+0x208>)
 8001582:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001588:	2b00      	cmp	r3, #0
 800158a:	f000 8094 	beq.w	80016b6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001596:	e08e      	b.n	80016b6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159c:	2202      	movs	r2, #2
 800159e:	409a      	lsls	r2, r3
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	4013      	ands	r3, r2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d056      	beq.n	8001656 <HAL_DMA_IRQHandler+0x186>
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d051      	beq.n	8001656 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0320 	and.w	r3, r3, #32
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d10b      	bne.n	80015d8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f022 020a 	bic.w	r2, r2, #10
 80015ce:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2201      	movs	r2, #1
 80015d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a38      	ldr	r2, [pc, #224]	@ (80016c0 <HAL_DMA_IRQHandler+0x1f0>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d029      	beq.n	8001636 <HAL_DMA_IRQHandler+0x166>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a37      	ldr	r2, [pc, #220]	@ (80016c4 <HAL_DMA_IRQHandler+0x1f4>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d022      	beq.n	8001632 <HAL_DMA_IRQHandler+0x162>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a35      	ldr	r2, [pc, #212]	@ (80016c8 <HAL_DMA_IRQHandler+0x1f8>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d01a      	beq.n	800162c <HAL_DMA_IRQHandler+0x15c>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a34      	ldr	r2, [pc, #208]	@ (80016cc <HAL_DMA_IRQHandler+0x1fc>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d012      	beq.n	8001626 <HAL_DMA_IRQHandler+0x156>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a32      	ldr	r2, [pc, #200]	@ (80016d0 <HAL_DMA_IRQHandler+0x200>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d00a      	beq.n	8001620 <HAL_DMA_IRQHandler+0x150>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a31      	ldr	r2, [pc, #196]	@ (80016d4 <HAL_DMA_IRQHandler+0x204>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d102      	bne.n	800161a <HAL_DMA_IRQHandler+0x14a>
 8001614:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001618:	e00e      	b.n	8001638 <HAL_DMA_IRQHandler+0x168>
 800161a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800161e:	e00b      	b.n	8001638 <HAL_DMA_IRQHandler+0x168>
 8001620:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001624:	e008      	b.n	8001638 <HAL_DMA_IRQHandler+0x168>
 8001626:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800162a:	e005      	b.n	8001638 <HAL_DMA_IRQHandler+0x168>
 800162c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001630:	e002      	b.n	8001638 <HAL_DMA_IRQHandler+0x168>
 8001632:	2320      	movs	r3, #32
 8001634:	e000      	b.n	8001638 <HAL_DMA_IRQHandler+0x168>
 8001636:	2302      	movs	r3, #2
 8001638:	4a27      	ldr	r2, [pc, #156]	@ (80016d8 <HAL_DMA_IRQHandler+0x208>)
 800163a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001648:	2b00      	cmp	r3, #0
 800164a:	d034      	beq.n	80016b6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001654:	e02f      	b.n	80016b6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165a:	2208      	movs	r2, #8
 800165c:	409a      	lsls	r2, r3
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	4013      	ands	r3, r2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d028      	beq.n	80016b8 <HAL_DMA_IRQHandler+0x1e8>
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	f003 0308 	and.w	r3, r3, #8
 800166c:	2b00      	cmp	r3, #0
 800166e:	d023      	beq.n	80016b8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f022 020e 	bic.w	r2, r2, #14
 800167e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001688:	2101      	movs	r1, #1
 800168a:	fa01 f202 	lsl.w	r2, r1, r2
 800168e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2201      	movs	r2, #1
 8001694:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2201      	movs	r2, #1
 800169a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d004      	beq.n	80016b8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	4798      	blx	r3
    }
  }
  return;
 80016b6:	bf00      	nop
 80016b8:	bf00      	nop
}
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40020008 	.word	0x40020008
 80016c4:	4002001c 	.word	0x4002001c
 80016c8:	40020030 	.word	0x40020030
 80016cc:	40020044 	.word	0x40020044
 80016d0:	40020058 	.word	0x40020058
 80016d4:	4002006c 	.word	0x4002006c
 80016d8:	40020000 	.word	0x40020000

080016dc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
 80016e8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016f2:	2101      	movs	r1, #1
 80016f4:	fa01 f202 	lsl.w	r2, r1, r2
 80016f8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	2b10      	cmp	r3, #16
 8001708:	d108      	bne.n	800171c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	68ba      	ldr	r2, [r7, #8]
 8001718:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800171a:	e007      	b.n	800172c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	68ba      	ldr	r2, [r7, #8]
 8001722:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	60da      	str	r2, [r3, #12]
}
 800172c:	bf00      	nop
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	bc80      	pop	{r7}
 8001734:	4770      	bx	lr
	...

08001738 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001738:	b480      	push	{r7}
 800173a:	b08b      	sub	sp, #44	@ 0x2c
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001742:	2300      	movs	r3, #0
 8001744:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001746:	2300      	movs	r3, #0
 8001748:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800174a:	e169      	b.n	8001a20 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800174c:	2201      	movs	r2, #1
 800174e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	69fa      	ldr	r2, [r7, #28]
 800175c:	4013      	ands	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	429a      	cmp	r2, r3
 8001766:	f040 8158 	bne.w	8001a1a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	4a9a      	ldr	r2, [pc, #616]	@ (80019d8 <HAL_GPIO_Init+0x2a0>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d05e      	beq.n	8001832 <HAL_GPIO_Init+0xfa>
 8001774:	4a98      	ldr	r2, [pc, #608]	@ (80019d8 <HAL_GPIO_Init+0x2a0>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d875      	bhi.n	8001866 <HAL_GPIO_Init+0x12e>
 800177a:	4a98      	ldr	r2, [pc, #608]	@ (80019dc <HAL_GPIO_Init+0x2a4>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d058      	beq.n	8001832 <HAL_GPIO_Init+0xfa>
 8001780:	4a96      	ldr	r2, [pc, #600]	@ (80019dc <HAL_GPIO_Init+0x2a4>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d86f      	bhi.n	8001866 <HAL_GPIO_Init+0x12e>
 8001786:	4a96      	ldr	r2, [pc, #600]	@ (80019e0 <HAL_GPIO_Init+0x2a8>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d052      	beq.n	8001832 <HAL_GPIO_Init+0xfa>
 800178c:	4a94      	ldr	r2, [pc, #592]	@ (80019e0 <HAL_GPIO_Init+0x2a8>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d869      	bhi.n	8001866 <HAL_GPIO_Init+0x12e>
 8001792:	4a94      	ldr	r2, [pc, #592]	@ (80019e4 <HAL_GPIO_Init+0x2ac>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d04c      	beq.n	8001832 <HAL_GPIO_Init+0xfa>
 8001798:	4a92      	ldr	r2, [pc, #584]	@ (80019e4 <HAL_GPIO_Init+0x2ac>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d863      	bhi.n	8001866 <HAL_GPIO_Init+0x12e>
 800179e:	4a92      	ldr	r2, [pc, #584]	@ (80019e8 <HAL_GPIO_Init+0x2b0>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d046      	beq.n	8001832 <HAL_GPIO_Init+0xfa>
 80017a4:	4a90      	ldr	r2, [pc, #576]	@ (80019e8 <HAL_GPIO_Init+0x2b0>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d85d      	bhi.n	8001866 <HAL_GPIO_Init+0x12e>
 80017aa:	2b12      	cmp	r3, #18
 80017ac:	d82a      	bhi.n	8001804 <HAL_GPIO_Init+0xcc>
 80017ae:	2b12      	cmp	r3, #18
 80017b0:	d859      	bhi.n	8001866 <HAL_GPIO_Init+0x12e>
 80017b2:	a201      	add	r2, pc, #4	@ (adr r2, 80017b8 <HAL_GPIO_Init+0x80>)
 80017b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017b8:	08001833 	.word	0x08001833
 80017bc:	0800180d 	.word	0x0800180d
 80017c0:	0800181f 	.word	0x0800181f
 80017c4:	08001861 	.word	0x08001861
 80017c8:	08001867 	.word	0x08001867
 80017cc:	08001867 	.word	0x08001867
 80017d0:	08001867 	.word	0x08001867
 80017d4:	08001867 	.word	0x08001867
 80017d8:	08001867 	.word	0x08001867
 80017dc:	08001867 	.word	0x08001867
 80017e0:	08001867 	.word	0x08001867
 80017e4:	08001867 	.word	0x08001867
 80017e8:	08001867 	.word	0x08001867
 80017ec:	08001867 	.word	0x08001867
 80017f0:	08001867 	.word	0x08001867
 80017f4:	08001867 	.word	0x08001867
 80017f8:	08001867 	.word	0x08001867
 80017fc:	08001815 	.word	0x08001815
 8001800:	08001829 	.word	0x08001829
 8001804:	4a79      	ldr	r2, [pc, #484]	@ (80019ec <HAL_GPIO_Init+0x2b4>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d013      	beq.n	8001832 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800180a:	e02c      	b.n	8001866 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	623b      	str	r3, [r7, #32]
          break;
 8001812:	e029      	b.n	8001868 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	3304      	adds	r3, #4
 800181a:	623b      	str	r3, [r7, #32]
          break;
 800181c:	e024      	b.n	8001868 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	3308      	adds	r3, #8
 8001824:	623b      	str	r3, [r7, #32]
          break;
 8001826:	e01f      	b.n	8001868 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	330c      	adds	r3, #12
 800182e:	623b      	str	r3, [r7, #32]
          break;
 8001830:	e01a      	b.n	8001868 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d102      	bne.n	8001840 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800183a:	2304      	movs	r3, #4
 800183c:	623b      	str	r3, [r7, #32]
          break;
 800183e:	e013      	b.n	8001868 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d105      	bne.n	8001854 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001848:	2308      	movs	r3, #8
 800184a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	69fa      	ldr	r2, [r7, #28]
 8001850:	611a      	str	r2, [r3, #16]
          break;
 8001852:	e009      	b.n	8001868 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001854:	2308      	movs	r3, #8
 8001856:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	69fa      	ldr	r2, [r7, #28]
 800185c:	615a      	str	r2, [r3, #20]
          break;
 800185e:	e003      	b.n	8001868 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001860:	2300      	movs	r3, #0
 8001862:	623b      	str	r3, [r7, #32]
          break;
 8001864:	e000      	b.n	8001868 <HAL_GPIO_Init+0x130>
          break;
 8001866:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	2bff      	cmp	r3, #255	@ 0xff
 800186c:	d801      	bhi.n	8001872 <HAL_GPIO_Init+0x13a>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	e001      	b.n	8001876 <HAL_GPIO_Init+0x13e>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	3304      	adds	r3, #4
 8001876:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	2bff      	cmp	r3, #255	@ 0xff
 800187c:	d802      	bhi.n	8001884 <HAL_GPIO_Init+0x14c>
 800187e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	e002      	b.n	800188a <HAL_GPIO_Init+0x152>
 8001884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001886:	3b08      	subs	r3, #8
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	210f      	movs	r1, #15
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	fa01 f303 	lsl.w	r3, r1, r3
 8001898:	43db      	mvns	r3, r3
 800189a:	401a      	ands	r2, r3
 800189c:	6a39      	ldr	r1, [r7, #32]
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	fa01 f303 	lsl.w	r3, r1, r3
 80018a4:	431a      	orrs	r2, r3
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f000 80b1 	beq.w	8001a1a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018b8:	4b4d      	ldr	r3, [pc, #308]	@ (80019f0 <HAL_GPIO_Init+0x2b8>)
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	4a4c      	ldr	r2, [pc, #304]	@ (80019f0 <HAL_GPIO_Init+0x2b8>)
 80018be:	f043 0301 	orr.w	r3, r3, #1
 80018c2:	6193      	str	r3, [r2, #24]
 80018c4:	4b4a      	ldr	r3, [pc, #296]	@ (80019f0 <HAL_GPIO_Init+0x2b8>)
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	f003 0301 	and.w	r3, r3, #1
 80018cc:	60bb      	str	r3, [r7, #8]
 80018ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018d0:	4a48      	ldr	r2, [pc, #288]	@ (80019f4 <HAL_GPIO_Init+0x2bc>)
 80018d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d4:	089b      	lsrs	r3, r3, #2
 80018d6:	3302      	adds	r3, #2
 80018d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e0:	f003 0303 	and.w	r3, r3, #3
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	220f      	movs	r2, #15
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	4013      	ands	r3, r2
 80018f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a40      	ldr	r2, [pc, #256]	@ (80019f8 <HAL_GPIO_Init+0x2c0>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d013      	beq.n	8001924 <HAL_GPIO_Init+0x1ec>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a3f      	ldr	r2, [pc, #252]	@ (80019fc <HAL_GPIO_Init+0x2c4>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d00d      	beq.n	8001920 <HAL_GPIO_Init+0x1e8>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a3e      	ldr	r2, [pc, #248]	@ (8001a00 <HAL_GPIO_Init+0x2c8>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d007      	beq.n	800191c <HAL_GPIO_Init+0x1e4>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a3d      	ldr	r2, [pc, #244]	@ (8001a04 <HAL_GPIO_Init+0x2cc>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d101      	bne.n	8001918 <HAL_GPIO_Init+0x1e0>
 8001914:	2303      	movs	r3, #3
 8001916:	e006      	b.n	8001926 <HAL_GPIO_Init+0x1ee>
 8001918:	2304      	movs	r3, #4
 800191a:	e004      	b.n	8001926 <HAL_GPIO_Init+0x1ee>
 800191c:	2302      	movs	r3, #2
 800191e:	e002      	b.n	8001926 <HAL_GPIO_Init+0x1ee>
 8001920:	2301      	movs	r3, #1
 8001922:	e000      	b.n	8001926 <HAL_GPIO_Init+0x1ee>
 8001924:	2300      	movs	r3, #0
 8001926:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001928:	f002 0203 	and.w	r2, r2, #3
 800192c:	0092      	lsls	r2, r2, #2
 800192e:	4093      	lsls	r3, r2
 8001930:	68fa      	ldr	r2, [r7, #12]
 8001932:	4313      	orrs	r3, r2
 8001934:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001936:	492f      	ldr	r1, [pc, #188]	@ (80019f4 <HAL_GPIO_Init+0x2bc>)
 8001938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800193a:	089b      	lsrs	r3, r3, #2
 800193c:	3302      	adds	r3, #2
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d006      	beq.n	800195e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001950:	4b2d      	ldr	r3, [pc, #180]	@ (8001a08 <HAL_GPIO_Init+0x2d0>)
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	492c      	ldr	r1, [pc, #176]	@ (8001a08 <HAL_GPIO_Init+0x2d0>)
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	4313      	orrs	r3, r2
 800195a:	608b      	str	r3, [r1, #8]
 800195c:	e006      	b.n	800196c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800195e:	4b2a      	ldr	r3, [pc, #168]	@ (8001a08 <HAL_GPIO_Init+0x2d0>)
 8001960:	689a      	ldr	r2, [r3, #8]
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	43db      	mvns	r3, r3
 8001966:	4928      	ldr	r1, [pc, #160]	@ (8001a08 <HAL_GPIO_Init+0x2d0>)
 8001968:	4013      	ands	r3, r2
 800196a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d006      	beq.n	8001986 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001978:	4b23      	ldr	r3, [pc, #140]	@ (8001a08 <HAL_GPIO_Init+0x2d0>)
 800197a:	68da      	ldr	r2, [r3, #12]
 800197c:	4922      	ldr	r1, [pc, #136]	@ (8001a08 <HAL_GPIO_Init+0x2d0>)
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	4313      	orrs	r3, r2
 8001982:	60cb      	str	r3, [r1, #12]
 8001984:	e006      	b.n	8001994 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001986:	4b20      	ldr	r3, [pc, #128]	@ (8001a08 <HAL_GPIO_Init+0x2d0>)
 8001988:	68da      	ldr	r2, [r3, #12]
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	43db      	mvns	r3, r3
 800198e:	491e      	ldr	r1, [pc, #120]	@ (8001a08 <HAL_GPIO_Init+0x2d0>)
 8001990:	4013      	ands	r3, r2
 8001992:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d006      	beq.n	80019ae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019a0:	4b19      	ldr	r3, [pc, #100]	@ (8001a08 <HAL_GPIO_Init+0x2d0>)
 80019a2:	685a      	ldr	r2, [r3, #4]
 80019a4:	4918      	ldr	r1, [pc, #96]	@ (8001a08 <HAL_GPIO_Init+0x2d0>)
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	604b      	str	r3, [r1, #4]
 80019ac:	e006      	b.n	80019bc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019ae:	4b16      	ldr	r3, [pc, #88]	@ (8001a08 <HAL_GPIO_Init+0x2d0>)
 80019b0:	685a      	ldr	r2, [r3, #4]
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	43db      	mvns	r3, r3
 80019b6:	4914      	ldr	r1, [pc, #80]	@ (8001a08 <HAL_GPIO_Init+0x2d0>)
 80019b8:	4013      	ands	r3, r2
 80019ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d021      	beq.n	8001a0c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001a08 <HAL_GPIO_Init+0x2d0>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	490e      	ldr	r1, [pc, #56]	@ (8001a08 <HAL_GPIO_Init+0x2d0>)
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	600b      	str	r3, [r1, #0]
 80019d4:	e021      	b.n	8001a1a <HAL_GPIO_Init+0x2e2>
 80019d6:	bf00      	nop
 80019d8:	10320000 	.word	0x10320000
 80019dc:	10310000 	.word	0x10310000
 80019e0:	10220000 	.word	0x10220000
 80019e4:	10210000 	.word	0x10210000
 80019e8:	10120000 	.word	0x10120000
 80019ec:	10110000 	.word	0x10110000
 80019f0:	40021000 	.word	0x40021000
 80019f4:	40010000 	.word	0x40010000
 80019f8:	40010800 	.word	0x40010800
 80019fc:	40010c00 	.word	0x40010c00
 8001a00:	40011000 	.word	0x40011000
 8001a04:	40011400 	.word	0x40011400
 8001a08:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a3c <HAL_GPIO_Init+0x304>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	43db      	mvns	r3, r3
 8001a14:	4909      	ldr	r1, [pc, #36]	@ (8001a3c <HAL_GPIO_Init+0x304>)
 8001a16:	4013      	ands	r3, r2
 8001a18:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a26:	fa22 f303 	lsr.w	r3, r2, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f47f ae8e 	bne.w	800174c <HAL_GPIO_Init+0x14>
  }
}
 8001a30:	bf00      	nop
 8001a32:	bf00      	nop
 8001a34:	372c      	adds	r7, #44	@ 0x2c
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr
 8001a3c:	40010400 	.word	0x40010400

08001a40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	460b      	mov	r3, r1
 8001a4a:	807b      	strh	r3, [r7, #2]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a50:	787b      	ldrb	r3, [r7, #1]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d003      	beq.n	8001a5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a56:	887a      	ldrh	r2, [r7, #2]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a5c:	e003      	b.n	8001a66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a5e:	887b      	ldrh	r3, [r7, #2]
 8001a60:	041a      	lsls	r2, r3, #16
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	611a      	str	r2, [r3, #16]
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr

08001a70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e272      	b.n	8001f68 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f000 8087 	beq.w	8001b9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a90:	4b92      	ldr	r3, [pc, #584]	@ (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f003 030c 	and.w	r3, r3, #12
 8001a98:	2b04      	cmp	r3, #4
 8001a9a:	d00c      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a9c:	4b8f      	ldr	r3, [pc, #572]	@ (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f003 030c 	and.w	r3, r3, #12
 8001aa4:	2b08      	cmp	r3, #8
 8001aa6:	d112      	bne.n	8001ace <HAL_RCC_OscConfig+0x5e>
 8001aa8:	4b8c      	ldr	r3, [pc, #560]	@ (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ab0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ab4:	d10b      	bne.n	8001ace <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab6:	4b89      	ldr	r3, [pc, #548]	@ (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d06c      	beq.n	8001b9c <HAL_RCC_OscConfig+0x12c>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d168      	bne.n	8001b9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e24c      	b.n	8001f68 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ad6:	d106      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x76>
 8001ad8:	4b80      	ldr	r3, [pc, #512]	@ (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a7f      	ldr	r2, [pc, #508]	@ (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001ade:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ae2:	6013      	str	r3, [r2, #0]
 8001ae4:	e02e      	b.n	8001b44 <HAL_RCC_OscConfig+0xd4>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d10c      	bne.n	8001b08 <HAL_RCC_OscConfig+0x98>
 8001aee:	4b7b      	ldr	r3, [pc, #492]	@ (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a7a      	ldr	r2, [pc, #488]	@ (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001af4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	4b78      	ldr	r3, [pc, #480]	@ (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a77      	ldr	r2, [pc, #476]	@ (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001b00:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b04:	6013      	str	r3, [r2, #0]
 8001b06:	e01d      	b.n	8001b44 <HAL_RCC_OscConfig+0xd4>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b10:	d10c      	bne.n	8001b2c <HAL_RCC_OscConfig+0xbc>
 8001b12:	4b72      	ldr	r3, [pc, #456]	@ (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a71      	ldr	r2, [pc, #452]	@ (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001b18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b1c:	6013      	str	r3, [r2, #0]
 8001b1e:	4b6f      	ldr	r3, [pc, #444]	@ (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a6e      	ldr	r2, [pc, #440]	@ (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001b24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b28:	6013      	str	r3, [r2, #0]
 8001b2a:	e00b      	b.n	8001b44 <HAL_RCC_OscConfig+0xd4>
 8001b2c:	4b6b      	ldr	r3, [pc, #428]	@ (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a6a      	ldr	r2, [pc, #424]	@ (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001b32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b36:	6013      	str	r3, [r2, #0]
 8001b38:	4b68      	ldr	r3, [pc, #416]	@ (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a67      	ldr	r2, [pc, #412]	@ (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001b3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b42:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d013      	beq.n	8001b74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4c:	f7ff fa52 	bl	8000ff4 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b54:	f7ff fa4e 	bl	8000ff4 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b64      	cmp	r3, #100	@ 0x64
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e200      	b.n	8001f68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b66:	4b5d      	ldr	r3, [pc, #372]	@ (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d0f0      	beq.n	8001b54 <HAL_RCC_OscConfig+0xe4>
 8001b72:	e014      	b.n	8001b9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b74:	f7ff fa3e 	bl	8000ff4 <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b7c:	f7ff fa3a 	bl	8000ff4 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b64      	cmp	r3, #100	@ 0x64
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e1ec      	b.n	8001f68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b8e:	4b53      	ldr	r3, [pc, #332]	@ (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1f0      	bne.n	8001b7c <HAL_RCC_OscConfig+0x10c>
 8001b9a:	e000      	b.n	8001b9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d063      	beq.n	8001c72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001baa:	4b4c      	ldr	r3, [pc, #304]	@ (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f003 030c 	and.w	r3, r3, #12
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00b      	beq.n	8001bce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bb6:	4b49      	ldr	r3, [pc, #292]	@ (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f003 030c 	and.w	r3, r3, #12
 8001bbe:	2b08      	cmp	r3, #8
 8001bc0:	d11c      	bne.n	8001bfc <HAL_RCC_OscConfig+0x18c>
 8001bc2:	4b46      	ldr	r3, [pc, #280]	@ (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d116      	bne.n	8001bfc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bce:	4b43      	ldr	r3, [pc, #268]	@ (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d005      	beq.n	8001be6 <HAL_RCC_OscConfig+0x176>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d001      	beq.n	8001be6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e1c0      	b.n	8001f68 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be6:	4b3d      	ldr	r3, [pc, #244]	@ (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	4939      	ldr	r1, [pc, #228]	@ (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bfa:	e03a      	b.n	8001c72 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d020      	beq.n	8001c46 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c04:	4b36      	ldr	r3, [pc, #216]	@ (8001ce0 <HAL_RCC_OscConfig+0x270>)
 8001c06:	2201      	movs	r2, #1
 8001c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0a:	f7ff f9f3 	bl	8000ff4 <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c10:	e008      	b.n	8001c24 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c12:	f7ff f9ef 	bl	8000ff4 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e1a1      	b.n	8001f68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c24:	4b2d      	ldr	r3, [pc, #180]	@ (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d0f0      	beq.n	8001c12 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c30:	4b2a      	ldr	r3, [pc, #168]	@ (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	695b      	ldr	r3, [r3, #20]
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	4927      	ldr	r1, [pc, #156]	@ (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	600b      	str	r3, [r1, #0]
 8001c44:	e015      	b.n	8001c72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c46:	4b26      	ldr	r3, [pc, #152]	@ (8001ce0 <HAL_RCC_OscConfig+0x270>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4c:	f7ff f9d2 	bl	8000ff4 <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c54:	f7ff f9ce 	bl	8000ff4 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e180      	b.n	8001f68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c66:	4b1d      	ldr	r3, [pc, #116]	@ (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1f0      	bne.n	8001c54 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0308 	and.w	r3, r3, #8
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d03a      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d019      	beq.n	8001cba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c86:	4b17      	ldr	r3, [pc, #92]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001c88:	2201      	movs	r2, #1
 8001c8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c8c:	f7ff f9b2 	bl	8000ff4 <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c94:	f7ff f9ae 	bl	8000ff4 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e160      	b.n	8001f68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d0f0      	beq.n	8001c94 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cb2:	2001      	movs	r0, #1
 8001cb4:	f000 fa9c 	bl	80021f0 <RCC_Delay>
 8001cb8:	e01c      	b.n	8001cf4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cba:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc0:	f7ff f998 	bl	8000ff4 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc6:	e00f      	b.n	8001ce8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cc8:	f7ff f994 	bl	8000ff4 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d908      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e146      	b.n	8001f68 <HAL_RCC_OscConfig+0x4f8>
 8001cda:	bf00      	nop
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	42420000 	.word	0x42420000
 8001ce4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ce8:	4b92      	ldr	r3, [pc, #584]	@ (8001f34 <HAL_RCC_OscConfig+0x4c4>)
 8001cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1e9      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f000 80a6 	beq.w	8001e4e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d02:	2300      	movs	r3, #0
 8001d04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d06:	4b8b      	ldr	r3, [pc, #556]	@ (8001f34 <HAL_RCC_OscConfig+0x4c4>)
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d10d      	bne.n	8001d2e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d12:	4b88      	ldr	r3, [pc, #544]	@ (8001f34 <HAL_RCC_OscConfig+0x4c4>)
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	4a87      	ldr	r2, [pc, #540]	@ (8001f34 <HAL_RCC_OscConfig+0x4c4>)
 8001d18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d1c:	61d3      	str	r3, [r2, #28]
 8001d1e:	4b85      	ldr	r3, [pc, #532]	@ (8001f34 <HAL_RCC_OscConfig+0x4c4>)
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d26:	60bb      	str	r3, [r7, #8]
 8001d28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d2e:	4b82      	ldr	r3, [pc, #520]	@ (8001f38 <HAL_RCC_OscConfig+0x4c8>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d118      	bne.n	8001d6c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d3a:	4b7f      	ldr	r3, [pc, #508]	@ (8001f38 <HAL_RCC_OscConfig+0x4c8>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a7e      	ldr	r2, [pc, #504]	@ (8001f38 <HAL_RCC_OscConfig+0x4c8>)
 8001d40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d46:	f7ff f955 	bl	8000ff4 <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d4c:	e008      	b.n	8001d60 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d4e:	f7ff f951 	bl	8000ff4 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b64      	cmp	r3, #100	@ 0x64
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e103      	b.n	8001f68 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d60:	4b75      	ldr	r3, [pc, #468]	@ (8001f38 <HAL_RCC_OscConfig+0x4c8>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d0f0      	beq.n	8001d4e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d106      	bne.n	8001d82 <HAL_RCC_OscConfig+0x312>
 8001d74:	4b6f      	ldr	r3, [pc, #444]	@ (8001f34 <HAL_RCC_OscConfig+0x4c4>)
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	4a6e      	ldr	r2, [pc, #440]	@ (8001f34 <HAL_RCC_OscConfig+0x4c4>)
 8001d7a:	f043 0301 	orr.w	r3, r3, #1
 8001d7e:	6213      	str	r3, [r2, #32]
 8001d80:	e02d      	b.n	8001dde <HAL_RCC_OscConfig+0x36e>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d10c      	bne.n	8001da4 <HAL_RCC_OscConfig+0x334>
 8001d8a:	4b6a      	ldr	r3, [pc, #424]	@ (8001f34 <HAL_RCC_OscConfig+0x4c4>)
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
 8001d8e:	4a69      	ldr	r2, [pc, #420]	@ (8001f34 <HAL_RCC_OscConfig+0x4c4>)
 8001d90:	f023 0301 	bic.w	r3, r3, #1
 8001d94:	6213      	str	r3, [r2, #32]
 8001d96:	4b67      	ldr	r3, [pc, #412]	@ (8001f34 <HAL_RCC_OscConfig+0x4c4>)
 8001d98:	6a1b      	ldr	r3, [r3, #32]
 8001d9a:	4a66      	ldr	r2, [pc, #408]	@ (8001f34 <HAL_RCC_OscConfig+0x4c4>)
 8001d9c:	f023 0304 	bic.w	r3, r3, #4
 8001da0:	6213      	str	r3, [r2, #32]
 8001da2:	e01c      	b.n	8001dde <HAL_RCC_OscConfig+0x36e>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	2b05      	cmp	r3, #5
 8001daa:	d10c      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x356>
 8001dac:	4b61      	ldr	r3, [pc, #388]	@ (8001f34 <HAL_RCC_OscConfig+0x4c4>)
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	4a60      	ldr	r2, [pc, #384]	@ (8001f34 <HAL_RCC_OscConfig+0x4c4>)
 8001db2:	f043 0304 	orr.w	r3, r3, #4
 8001db6:	6213      	str	r3, [r2, #32]
 8001db8:	4b5e      	ldr	r3, [pc, #376]	@ (8001f34 <HAL_RCC_OscConfig+0x4c4>)
 8001dba:	6a1b      	ldr	r3, [r3, #32]
 8001dbc:	4a5d      	ldr	r2, [pc, #372]	@ (8001f34 <HAL_RCC_OscConfig+0x4c4>)
 8001dbe:	f043 0301 	orr.w	r3, r3, #1
 8001dc2:	6213      	str	r3, [r2, #32]
 8001dc4:	e00b      	b.n	8001dde <HAL_RCC_OscConfig+0x36e>
 8001dc6:	4b5b      	ldr	r3, [pc, #364]	@ (8001f34 <HAL_RCC_OscConfig+0x4c4>)
 8001dc8:	6a1b      	ldr	r3, [r3, #32]
 8001dca:	4a5a      	ldr	r2, [pc, #360]	@ (8001f34 <HAL_RCC_OscConfig+0x4c4>)
 8001dcc:	f023 0301 	bic.w	r3, r3, #1
 8001dd0:	6213      	str	r3, [r2, #32]
 8001dd2:	4b58      	ldr	r3, [pc, #352]	@ (8001f34 <HAL_RCC_OscConfig+0x4c4>)
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	4a57      	ldr	r2, [pc, #348]	@ (8001f34 <HAL_RCC_OscConfig+0x4c4>)
 8001dd8:	f023 0304 	bic.w	r3, r3, #4
 8001ddc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d015      	beq.n	8001e12 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de6:	f7ff f905 	bl	8000ff4 <HAL_GetTick>
 8001dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dec:	e00a      	b.n	8001e04 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dee:	f7ff f901 	bl	8000ff4 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e0b1      	b.n	8001f68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e04:	4b4b      	ldr	r3, [pc, #300]	@ (8001f34 <HAL_RCC_OscConfig+0x4c4>)
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d0ee      	beq.n	8001dee <HAL_RCC_OscConfig+0x37e>
 8001e10:	e014      	b.n	8001e3c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e12:	f7ff f8ef 	bl	8000ff4 <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e18:	e00a      	b.n	8001e30 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e1a:	f7ff f8eb 	bl	8000ff4 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e09b      	b.n	8001f68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e30:	4b40      	ldr	r3, [pc, #256]	@ (8001f34 <HAL_RCC_OscConfig+0x4c4>)
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1ee      	bne.n	8001e1a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e3c:	7dfb      	ldrb	r3, [r7, #23]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d105      	bne.n	8001e4e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e42:	4b3c      	ldr	r3, [pc, #240]	@ (8001f34 <HAL_RCC_OscConfig+0x4c4>)
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	4a3b      	ldr	r2, [pc, #236]	@ (8001f34 <HAL_RCC_OscConfig+0x4c4>)
 8001e48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e4c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f000 8087 	beq.w	8001f66 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e58:	4b36      	ldr	r3, [pc, #216]	@ (8001f34 <HAL_RCC_OscConfig+0x4c4>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 030c 	and.w	r3, r3, #12
 8001e60:	2b08      	cmp	r3, #8
 8001e62:	d061      	beq.n	8001f28 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	69db      	ldr	r3, [r3, #28]
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d146      	bne.n	8001efa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e6c:	4b33      	ldr	r3, [pc, #204]	@ (8001f3c <HAL_RCC_OscConfig+0x4cc>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e72:	f7ff f8bf 	bl	8000ff4 <HAL_GetTick>
 8001e76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e78:	e008      	b.n	8001e8c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e7a:	f7ff f8bb 	bl	8000ff4 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e06d      	b.n	8001f68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e8c:	4b29      	ldr	r3, [pc, #164]	@ (8001f34 <HAL_RCC_OscConfig+0x4c4>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1f0      	bne.n	8001e7a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ea0:	d108      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ea2:	4b24      	ldr	r3, [pc, #144]	@ (8001f34 <HAL_RCC_OscConfig+0x4c4>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	4921      	ldr	r1, [pc, #132]	@ (8001f34 <HAL_RCC_OscConfig+0x4c4>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eb4:	4b1f      	ldr	r3, [pc, #124]	@ (8001f34 <HAL_RCC_OscConfig+0x4c4>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a19      	ldr	r1, [r3, #32]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec4:	430b      	orrs	r3, r1
 8001ec6:	491b      	ldr	r1, [pc, #108]	@ (8001f34 <HAL_RCC_OscConfig+0x4c4>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8001f3c <HAL_RCC_OscConfig+0x4cc>)
 8001ece:	2201      	movs	r2, #1
 8001ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed2:	f7ff f88f 	bl	8000ff4 <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ed8:	e008      	b.n	8001eec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eda:	f7ff f88b 	bl	8000ff4 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e03d      	b.n	8001f68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eec:	4b11      	ldr	r3, [pc, #68]	@ (8001f34 <HAL_RCC_OscConfig+0x4c4>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0f0      	beq.n	8001eda <HAL_RCC_OscConfig+0x46a>
 8001ef8:	e035      	b.n	8001f66 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001efa:	4b10      	ldr	r3, [pc, #64]	@ (8001f3c <HAL_RCC_OscConfig+0x4cc>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f00:	f7ff f878 	bl	8000ff4 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f08:	f7ff f874 	bl	8000ff4 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e026      	b.n	8001f68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f1a:	4b06      	ldr	r3, [pc, #24]	@ (8001f34 <HAL_RCC_OscConfig+0x4c4>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1f0      	bne.n	8001f08 <HAL_RCC_OscConfig+0x498>
 8001f26:	e01e      	b.n	8001f66 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	69db      	ldr	r3, [r3, #28]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d107      	bne.n	8001f40 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e019      	b.n	8001f68 <HAL_RCC_OscConfig+0x4f8>
 8001f34:	40021000 	.word	0x40021000
 8001f38:	40007000 	.word	0x40007000
 8001f3c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f40:	4b0b      	ldr	r3, [pc, #44]	@ (8001f70 <HAL_RCC_OscConfig+0x500>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d106      	bne.n	8001f62 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d001      	beq.n	8001f66 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e000      	b.n	8001f68 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3718      	adds	r7, #24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40021000 	.word	0x40021000

08001f74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d101      	bne.n	8001f88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e0d0      	b.n	800212a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f88:	4b6a      	ldr	r3, [pc, #424]	@ (8002134 <HAL_RCC_ClockConfig+0x1c0>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d910      	bls.n	8001fb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f96:	4b67      	ldr	r3, [pc, #412]	@ (8002134 <HAL_RCC_ClockConfig+0x1c0>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f023 0207 	bic.w	r2, r3, #7
 8001f9e:	4965      	ldr	r1, [pc, #404]	@ (8002134 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa6:	4b63      	ldr	r3, [pc, #396]	@ (8002134 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d001      	beq.n	8001fb8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e0b8      	b.n	800212a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d020      	beq.n	8002006 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d005      	beq.n	8001fdc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fd0:	4b59      	ldr	r3, [pc, #356]	@ (8002138 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	4a58      	ldr	r2, [pc, #352]	@ (8002138 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001fda:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0308 	and.w	r3, r3, #8
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d005      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fe8:	4b53      	ldr	r3, [pc, #332]	@ (8002138 <HAL_RCC_ClockConfig+0x1c4>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	4a52      	ldr	r2, [pc, #328]	@ (8002138 <HAL_RCC_ClockConfig+0x1c4>)
 8001fee:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001ff2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ff4:	4b50      	ldr	r3, [pc, #320]	@ (8002138 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	494d      	ldr	r1, [pc, #308]	@ (8002138 <HAL_RCC_ClockConfig+0x1c4>)
 8002002:	4313      	orrs	r3, r2
 8002004:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b00      	cmp	r3, #0
 8002010:	d040      	beq.n	8002094 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d107      	bne.n	800202a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201a:	4b47      	ldr	r3, [pc, #284]	@ (8002138 <HAL_RCC_ClockConfig+0x1c4>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d115      	bne.n	8002052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e07f      	b.n	800212a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	2b02      	cmp	r3, #2
 8002030:	d107      	bne.n	8002042 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002032:	4b41      	ldr	r3, [pc, #260]	@ (8002138 <HAL_RCC_ClockConfig+0x1c4>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d109      	bne.n	8002052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e073      	b.n	800212a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002042:	4b3d      	ldr	r3, [pc, #244]	@ (8002138 <HAL_RCC_ClockConfig+0x1c4>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e06b      	b.n	800212a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002052:	4b39      	ldr	r3, [pc, #228]	@ (8002138 <HAL_RCC_ClockConfig+0x1c4>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f023 0203 	bic.w	r2, r3, #3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	4936      	ldr	r1, [pc, #216]	@ (8002138 <HAL_RCC_ClockConfig+0x1c4>)
 8002060:	4313      	orrs	r3, r2
 8002062:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002064:	f7fe ffc6 	bl	8000ff4 <HAL_GetTick>
 8002068:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800206a:	e00a      	b.n	8002082 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800206c:	f7fe ffc2 	bl	8000ff4 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	f241 3288 	movw	r2, #5000	@ 0x1388
 800207a:	4293      	cmp	r3, r2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e053      	b.n	800212a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002082:	4b2d      	ldr	r3, [pc, #180]	@ (8002138 <HAL_RCC_ClockConfig+0x1c4>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f003 020c 	and.w	r2, r3, #12
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	429a      	cmp	r2, r3
 8002092:	d1eb      	bne.n	800206c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002094:	4b27      	ldr	r3, [pc, #156]	@ (8002134 <HAL_RCC_ClockConfig+0x1c0>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d210      	bcs.n	80020c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020a2:	4b24      	ldr	r3, [pc, #144]	@ (8002134 <HAL_RCC_ClockConfig+0x1c0>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f023 0207 	bic.w	r2, r3, #7
 80020aa:	4922      	ldr	r1, [pc, #136]	@ (8002134 <HAL_RCC_ClockConfig+0x1c0>)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b2:	4b20      	ldr	r3, [pc, #128]	@ (8002134 <HAL_RCC_ClockConfig+0x1c0>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d001      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e032      	b.n	800212a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d008      	beq.n	80020e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020d0:	4b19      	ldr	r3, [pc, #100]	@ (8002138 <HAL_RCC_ClockConfig+0x1c4>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	4916      	ldr	r1, [pc, #88]	@ (8002138 <HAL_RCC_ClockConfig+0x1c4>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0308 	and.w	r3, r3, #8
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d009      	beq.n	8002102 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020ee:	4b12      	ldr	r3, [pc, #72]	@ (8002138 <HAL_RCC_ClockConfig+0x1c4>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	490e      	ldr	r1, [pc, #56]	@ (8002138 <HAL_RCC_ClockConfig+0x1c4>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002102:	f000 f821 	bl	8002148 <HAL_RCC_GetSysClockFreq>
 8002106:	4602      	mov	r2, r0
 8002108:	4b0b      	ldr	r3, [pc, #44]	@ (8002138 <HAL_RCC_ClockConfig+0x1c4>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	091b      	lsrs	r3, r3, #4
 800210e:	f003 030f 	and.w	r3, r3, #15
 8002112:	490a      	ldr	r1, [pc, #40]	@ (800213c <HAL_RCC_ClockConfig+0x1c8>)
 8002114:	5ccb      	ldrb	r3, [r1, r3]
 8002116:	fa22 f303 	lsr.w	r3, r2, r3
 800211a:	4a09      	ldr	r2, [pc, #36]	@ (8002140 <HAL_RCC_ClockConfig+0x1cc>)
 800211c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800211e:	4b09      	ldr	r3, [pc, #36]	@ (8002144 <HAL_RCC_ClockConfig+0x1d0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f7fe ff24 	bl	8000f70 <HAL_InitTick>

  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40022000 	.word	0x40022000
 8002138:	40021000 	.word	0x40021000
 800213c:	08003f50 	.word	0x08003f50
 8002140:	2000003c 	.word	0x2000003c
 8002144:	20000040 	.word	0x20000040

08002148 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002148:	b480      	push	{r7}
 800214a:	b087      	sub	sp, #28
 800214c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800214e:	2300      	movs	r3, #0
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	2300      	movs	r3, #0
 8002154:	60bb      	str	r3, [r7, #8]
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]
 800215a:	2300      	movs	r3, #0
 800215c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800215e:	2300      	movs	r3, #0
 8002160:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002162:	4b1e      	ldr	r3, [pc, #120]	@ (80021dc <HAL_RCC_GetSysClockFreq+0x94>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f003 030c 	and.w	r3, r3, #12
 800216e:	2b04      	cmp	r3, #4
 8002170:	d002      	beq.n	8002178 <HAL_RCC_GetSysClockFreq+0x30>
 8002172:	2b08      	cmp	r3, #8
 8002174:	d003      	beq.n	800217e <HAL_RCC_GetSysClockFreq+0x36>
 8002176:	e027      	b.n	80021c8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002178:	4b19      	ldr	r3, [pc, #100]	@ (80021e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800217a:	613b      	str	r3, [r7, #16]
      break;
 800217c:	e027      	b.n	80021ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	0c9b      	lsrs	r3, r3, #18
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	4a17      	ldr	r2, [pc, #92]	@ (80021e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002188:	5cd3      	ldrb	r3, [r2, r3]
 800218a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d010      	beq.n	80021b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002196:	4b11      	ldr	r3, [pc, #68]	@ (80021dc <HAL_RCC_GetSysClockFreq+0x94>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	0c5b      	lsrs	r3, r3, #17
 800219c:	f003 0301 	and.w	r3, r3, #1
 80021a0:	4a11      	ldr	r2, [pc, #68]	@ (80021e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80021a2:	5cd3      	ldrb	r3, [r2, r3]
 80021a4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a0d      	ldr	r2, [pc, #52]	@ (80021e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80021aa:	fb03 f202 	mul.w	r2, r3, r2
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b4:	617b      	str	r3, [r7, #20]
 80021b6:	e004      	b.n	80021c2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a0c      	ldr	r2, [pc, #48]	@ (80021ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80021bc:	fb02 f303 	mul.w	r3, r2, r3
 80021c0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	613b      	str	r3, [r7, #16]
      break;
 80021c6:	e002      	b.n	80021ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021c8:	4b05      	ldr	r3, [pc, #20]	@ (80021e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80021ca:	613b      	str	r3, [r7, #16]
      break;
 80021cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021ce:	693b      	ldr	r3, [r7, #16]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	371c      	adds	r7, #28
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bc80      	pop	{r7}
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	40021000 	.word	0x40021000
 80021e0:	007a1200 	.word	0x007a1200
 80021e4:	08003f60 	.word	0x08003f60
 80021e8:	08003f70 	.word	0x08003f70
 80021ec:	003d0900 	.word	0x003d0900

080021f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002224 <RCC_Delay+0x34>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a0a      	ldr	r2, [pc, #40]	@ (8002228 <RCC_Delay+0x38>)
 80021fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002202:	0a5b      	lsrs	r3, r3, #9
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	fb02 f303 	mul.w	r3, r2, r3
 800220a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800220c:	bf00      	nop
  }
  while (Delay --);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	1e5a      	subs	r2, r3, #1
 8002212:	60fa      	str	r2, [r7, #12]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1f9      	bne.n	800220c <RCC_Delay+0x1c>
}
 8002218:	bf00      	nop
 800221a:	bf00      	nop
 800221c:	3714      	adds	r7, #20
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr
 8002224:	2000003c 	.word	0x2000003c
 8002228:	10624dd3 	.word	0x10624dd3

0800222c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e041      	b.n	80022c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d106      	bne.n	8002258 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7fe fd60 	bl	8000d18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2202      	movs	r2, #2
 800225c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3304      	adds	r3, #4
 8002268:	4619      	mov	r1, r3
 800226a:	4610      	mov	r0, r2
 800226c:	f000 fd5a 	bl	8002d24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b082      	sub	sp, #8
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e041      	b.n	8002360 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d106      	bne.n	80022f6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 f839 	bl	8002368 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2202      	movs	r2, #2
 80022fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	3304      	adds	r3, #4
 8002306:	4619      	mov	r1, r3
 8002308:	4610      	mov	r0, r2
 800230a:	f000 fd0b 	bl	8002d24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2201      	movs	r2, #1
 8002312:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2201      	movs	r2, #1
 800231a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2201      	movs	r2, #1
 8002322:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2201      	movs	r2, #1
 8002342:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2201      	movs	r2, #1
 8002352:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2201      	movs	r2, #1
 800235a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	bc80      	pop	{r7}
 8002378:	4770      	bx	lr
	...

0800237c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
 8002388:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800238a:	2300      	movs	r3, #0
 800238c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d109      	bne.n	80023a8 <HAL_TIM_PWM_Start_DMA+0x2c>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	bf0c      	ite	eq
 80023a0:	2301      	moveq	r3, #1
 80023a2:	2300      	movne	r3, #0
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	e022      	b.n	80023ee <HAL_TIM_PWM_Start_DMA+0x72>
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	d109      	bne.n	80023c2 <HAL_TIM_PWM_Start_DMA+0x46>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	bf0c      	ite	eq
 80023ba:	2301      	moveq	r3, #1
 80023bc:	2300      	movne	r3, #0
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	e015      	b.n	80023ee <HAL_TIM_PWM_Start_DMA+0x72>
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	2b08      	cmp	r3, #8
 80023c6:	d109      	bne.n	80023dc <HAL_TIM_PWM_Start_DMA+0x60>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	bf0c      	ite	eq
 80023d4:	2301      	moveq	r3, #1
 80023d6:	2300      	movne	r3, #0
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	e008      	b.n	80023ee <HAL_TIM_PWM_Start_DMA+0x72>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	bf0c      	ite	eq
 80023e8:	2301      	moveq	r3, #1
 80023ea:	2300      	movne	r3, #0
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80023f2:	2302      	movs	r3, #2
 80023f4:	e153      	b.n	800269e <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d109      	bne.n	8002410 <HAL_TIM_PWM_Start_DMA+0x94>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002402:	b2db      	uxtb	r3, r3
 8002404:	2b01      	cmp	r3, #1
 8002406:	bf0c      	ite	eq
 8002408:	2301      	moveq	r3, #1
 800240a:	2300      	movne	r3, #0
 800240c:	b2db      	uxtb	r3, r3
 800240e:	e022      	b.n	8002456 <HAL_TIM_PWM_Start_DMA+0xda>
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	2b04      	cmp	r3, #4
 8002414:	d109      	bne.n	800242a <HAL_TIM_PWM_Start_DMA+0xae>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b01      	cmp	r3, #1
 8002420:	bf0c      	ite	eq
 8002422:	2301      	moveq	r3, #1
 8002424:	2300      	movne	r3, #0
 8002426:	b2db      	uxtb	r3, r3
 8002428:	e015      	b.n	8002456 <HAL_TIM_PWM_Start_DMA+0xda>
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	2b08      	cmp	r3, #8
 800242e:	d109      	bne.n	8002444 <HAL_TIM_PWM_Start_DMA+0xc8>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b01      	cmp	r3, #1
 800243a:	bf0c      	ite	eq
 800243c:	2301      	moveq	r3, #1
 800243e:	2300      	movne	r3, #0
 8002440:	b2db      	uxtb	r3, r3
 8002442:	e008      	b.n	8002456 <HAL_TIM_PWM_Start_DMA+0xda>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b01      	cmp	r3, #1
 800244e:	bf0c      	ite	eq
 8002450:	2301      	moveq	r3, #1
 8002452:	2300      	movne	r3, #0
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d024      	beq.n	80024a4 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d002      	beq.n	8002466 <HAL_TIM_PWM_Start_DMA+0xea>
 8002460:	887b      	ldrh	r3, [r7, #2]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e119      	b.n	800269e <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d104      	bne.n	800247a <HAL_TIM_PWM_Start_DMA+0xfe>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2202      	movs	r2, #2
 8002474:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002478:	e016      	b.n	80024a8 <HAL_TIM_PWM_Start_DMA+0x12c>
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	2b04      	cmp	r3, #4
 800247e:	d104      	bne.n	800248a <HAL_TIM_PWM_Start_DMA+0x10e>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2202      	movs	r2, #2
 8002484:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002488:	e00e      	b.n	80024a8 <HAL_TIM_PWM_Start_DMA+0x12c>
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	2b08      	cmp	r3, #8
 800248e:	d104      	bne.n	800249a <HAL_TIM_PWM_Start_DMA+0x11e>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2202      	movs	r2, #2
 8002494:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002498:	e006      	b.n	80024a8 <HAL_TIM_PWM_Start_DMA+0x12c>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2202      	movs	r2, #2
 800249e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80024a2:	e001      	b.n	80024a8 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e0fa      	b.n	800269e <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	2b0c      	cmp	r3, #12
 80024ac:	f200 80ae 	bhi.w	800260c <HAL_TIM_PWM_Start_DMA+0x290>
 80024b0:	a201      	add	r2, pc, #4	@ (adr r2, 80024b8 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80024b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b6:	bf00      	nop
 80024b8:	080024ed 	.word	0x080024ed
 80024bc:	0800260d 	.word	0x0800260d
 80024c0:	0800260d 	.word	0x0800260d
 80024c4:	0800260d 	.word	0x0800260d
 80024c8:	08002535 	.word	0x08002535
 80024cc:	0800260d 	.word	0x0800260d
 80024d0:	0800260d 	.word	0x0800260d
 80024d4:	0800260d 	.word	0x0800260d
 80024d8:	0800257d 	.word	0x0800257d
 80024dc:	0800260d 	.word	0x0800260d
 80024e0:	0800260d 	.word	0x0800260d
 80024e4:	0800260d 	.word	0x0800260d
 80024e8:	080025c5 	.word	0x080025c5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f0:	4a6d      	ldr	r2, [pc, #436]	@ (80026a8 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80024f2:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f8:	4a6c      	ldr	r2, [pc, #432]	@ (80026ac <HAL_TIM_PWM_Start_DMA+0x330>)
 80024fa:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002500:	4a6b      	ldr	r2, [pc, #428]	@ (80026b0 <HAL_TIM_PWM_Start_DMA+0x334>)
 8002502:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002508:	6879      	ldr	r1, [r7, #4]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	3334      	adds	r3, #52	@ 0x34
 8002510:	461a      	mov	r2, r3
 8002512:	887b      	ldrh	r3, [r7, #2]
 8002514:	f7fe ff04 	bl	8001320 <HAL_DMA_Start_IT>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e0bd      	b.n	800269e <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68da      	ldr	r2, [r3, #12]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002530:	60da      	str	r2, [r3, #12]
      break;
 8002532:	e06e      	b.n	8002612 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002538:	4a5b      	ldr	r2, [pc, #364]	@ (80026a8 <HAL_TIM_PWM_Start_DMA+0x32c>)
 800253a:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002540:	4a5a      	ldr	r2, [pc, #360]	@ (80026ac <HAL_TIM_PWM_Start_DMA+0x330>)
 8002542:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002548:	4a59      	ldr	r2, [pc, #356]	@ (80026b0 <HAL_TIM_PWM_Start_DMA+0x334>)
 800254a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	3338      	adds	r3, #56	@ 0x38
 8002558:	461a      	mov	r2, r3
 800255a:	887b      	ldrh	r3, [r7, #2]
 800255c:	f7fe fee0 	bl	8001320 <HAL_DMA_Start_IT>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e099      	b.n	800269e <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68da      	ldr	r2, [r3, #12]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002578:	60da      	str	r2, [r3, #12]
      break;
 800257a:	e04a      	b.n	8002612 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002580:	4a49      	ldr	r2, [pc, #292]	@ (80026a8 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002582:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002588:	4a48      	ldr	r2, [pc, #288]	@ (80026ac <HAL_TIM_PWM_Start_DMA+0x330>)
 800258a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002590:	4a47      	ldr	r2, [pc, #284]	@ (80026b0 <HAL_TIM_PWM_Start_DMA+0x334>)
 8002592:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002598:	6879      	ldr	r1, [r7, #4]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	333c      	adds	r3, #60	@ 0x3c
 80025a0:	461a      	mov	r2, r3
 80025a2:	887b      	ldrh	r3, [r7, #2]
 80025a4:	f7fe febc 	bl	8001320 <HAL_DMA_Start_IT>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e075      	b.n	800269e <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68da      	ldr	r2, [r3, #12]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025c0:	60da      	str	r2, [r3, #12]
      break;
 80025c2:	e026      	b.n	8002612 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c8:	4a37      	ldr	r2, [pc, #220]	@ (80026a8 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80025ca:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d0:	4a36      	ldr	r2, [pc, #216]	@ (80026ac <HAL_TIM_PWM_Start_DMA+0x330>)
 80025d2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d8:	4a35      	ldr	r2, [pc, #212]	@ (80026b0 <HAL_TIM_PWM_Start_DMA+0x334>)
 80025da:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80025e0:	6879      	ldr	r1, [r7, #4]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	3340      	adds	r3, #64	@ 0x40
 80025e8:	461a      	mov	r2, r3
 80025ea:	887b      	ldrh	r3, [r7, #2]
 80025ec:	f7fe fe98 	bl	8001320 <HAL_DMA_Start_IT>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e051      	b.n	800269e <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68da      	ldr	r2, [r3, #12]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002608:	60da      	str	r2, [r3, #12]
      break;
 800260a:	e002      	b.n	8002612 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	75fb      	strb	r3, [r7, #23]
      break;
 8002610:	bf00      	nop
  }

  if (status == HAL_OK)
 8002612:	7dfb      	ldrb	r3, [r7, #23]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d141      	bne.n	800269c <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2201      	movs	r2, #1
 800261e:	68b9      	ldr	r1, [r7, #8]
 8002620:	4618      	mov	r0, r3
 8002622:	f000 fe0b 	bl	800323c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a22      	ldr	r2, [pc, #136]	@ (80026b4 <HAL_TIM_PWM_Start_DMA+0x338>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d107      	bne.n	8002640 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800263e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a1b      	ldr	r2, [pc, #108]	@ (80026b4 <HAL_TIM_PWM_Start_DMA+0x338>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d00e      	beq.n	8002668 <HAL_TIM_PWM_Start_DMA+0x2ec>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002652:	d009      	beq.n	8002668 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a17      	ldr	r2, [pc, #92]	@ (80026b8 <HAL_TIM_PWM_Start_DMA+0x33c>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d004      	beq.n	8002668 <HAL_TIM_PWM_Start_DMA+0x2ec>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a16      	ldr	r2, [pc, #88]	@ (80026bc <HAL_TIM_PWM_Start_DMA+0x340>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d111      	bne.n	800268c <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	2b06      	cmp	r3, #6
 8002678:	d010      	beq.n	800269c <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f042 0201 	orr.w	r2, r2, #1
 8002688:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800268a:	e007      	b.n	800269c <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0201 	orr.w	r2, r2, #1
 800269a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800269c:	7dfb      	ldrb	r3, [r7, #23]
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3718      	adds	r7, #24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	08002c15 	.word	0x08002c15
 80026ac:	08002cbd 	.word	0x08002cbd
 80026b0:	08002b83 	.word	0x08002b83
 80026b4:	40012c00 	.word	0x40012c00
 80026b8:	40000400 	.word	0x40000400
 80026bc:	40000800 	.word	0x40000800

080026c0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026ca:	2300      	movs	r3, #0
 80026cc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	2b0c      	cmp	r3, #12
 80026d2:	d855      	bhi.n	8002780 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80026d4:	a201      	add	r2, pc, #4	@ (adr r2, 80026dc <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80026d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026da:	bf00      	nop
 80026dc:	08002711 	.word	0x08002711
 80026e0:	08002781 	.word	0x08002781
 80026e4:	08002781 	.word	0x08002781
 80026e8:	08002781 	.word	0x08002781
 80026ec:	0800272d 	.word	0x0800272d
 80026f0:	08002781 	.word	0x08002781
 80026f4:	08002781 	.word	0x08002781
 80026f8:	08002781 	.word	0x08002781
 80026fc:	08002749 	.word	0x08002749
 8002700:	08002781 	.word	0x08002781
 8002704:	08002781 	.word	0x08002781
 8002708:	08002781 	.word	0x08002781
 800270c:	08002765 	.word	0x08002765
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68da      	ldr	r2, [r3, #12]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800271e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002724:	4618      	mov	r0, r3
 8002726:	f7fe fe5b 	bl	80013e0 <HAL_DMA_Abort_IT>
      break;
 800272a:	e02c      	b.n	8002786 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68da      	ldr	r2, [r3, #12]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800273a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002740:	4618      	mov	r0, r3
 8002742:	f7fe fe4d 	bl	80013e0 <HAL_DMA_Abort_IT>
      break;
 8002746:	e01e      	b.n	8002786 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68da      	ldr	r2, [r3, #12]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002756:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800275c:	4618      	mov	r0, r3
 800275e:	f7fe fe3f 	bl	80013e0 <HAL_DMA_Abort_IT>
      break;
 8002762:	e010      	b.n	8002786 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68da      	ldr	r2, [r3, #12]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002772:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002778:	4618      	mov	r0, r3
 800277a:	f7fe fe31 	bl	80013e0 <HAL_DMA_Abort_IT>
      break;
 800277e:	e002      	b.n	8002786 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	73fb      	strb	r3, [r7, #15]
      break;
 8002784:	bf00      	nop
  }

  if (status == HAL_OK)
 8002786:	7bfb      	ldrb	r3, [r7, #15]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d157      	bne.n	800283c <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2200      	movs	r2, #0
 8002792:	6839      	ldr	r1, [r7, #0]
 8002794:	4618      	mov	r0, r3
 8002796:	f000 fd51 	bl	800323c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a2a      	ldr	r2, [pc, #168]	@ (8002848 <HAL_TIM_PWM_Stop_DMA+0x188>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d117      	bne.n	80027d4 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6a1a      	ldr	r2, [r3, #32]
 80027aa:	f241 1311 	movw	r3, #4369	@ 0x1111
 80027ae:	4013      	ands	r3, r2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d10f      	bne.n	80027d4 <HAL_TIM_PWM_Stop_DMA+0x114>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6a1a      	ldr	r2, [r3, #32]
 80027ba:	f240 4344 	movw	r3, #1092	@ 0x444
 80027be:	4013      	ands	r3, r2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d107      	bne.n	80027d4 <HAL_TIM_PWM_Stop_DMA+0x114>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027d2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6a1a      	ldr	r2, [r3, #32]
 80027da:	f241 1311 	movw	r3, #4369	@ 0x1111
 80027de:	4013      	ands	r3, r2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10f      	bne.n	8002804 <HAL_TIM_PWM_Stop_DMA+0x144>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6a1a      	ldr	r2, [r3, #32]
 80027ea:	f240 4344 	movw	r3, #1092	@ 0x444
 80027ee:	4013      	ands	r3, r2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d107      	bne.n	8002804 <HAL_TIM_PWM_Stop_DMA+0x144>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 0201 	bic.w	r2, r2, #1
 8002802:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d104      	bne.n	8002814 <HAL_TIM_PWM_Stop_DMA+0x154>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002812:	e013      	b.n	800283c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	2b04      	cmp	r3, #4
 8002818:	d104      	bne.n	8002824 <HAL_TIM_PWM_Stop_DMA+0x164>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002822:	e00b      	b.n	800283c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	2b08      	cmp	r3, #8
 8002828:	d104      	bne.n	8002834 <HAL_TIM_PWM_Stop_DMA+0x174>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2201      	movs	r2, #1
 800282e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002832:	e003      	b.n	800283c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 800283c:	7bfb      	ldrb	r3, [r7, #15]
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40012c00 	.word	0x40012c00

0800284c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002858:	2300      	movs	r3, #0
 800285a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002862:	2b01      	cmp	r3, #1
 8002864:	d101      	bne.n	800286a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002866:	2302      	movs	r3, #2
 8002868:	e0ae      	b.n	80029c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b0c      	cmp	r3, #12
 8002876:	f200 809f 	bhi.w	80029b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800287a:	a201      	add	r2, pc, #4	@ (adr r2, 8002880 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800287c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002880:	080028b5 	.word	0x080028b5
 8002884:	080029b9 	.word	0x080029b9
 8002888:	080029b9 	.word	0x080029b9
 800288c:	080029b9 	.word	0x080029b9
 8002890:	080028f5 	.word	0x080028f5
 8002894:	080029b9 	.word	0x080029b9
 8002898:	080029b9 	.word	0x080029b9
 800289c:	080029b9 	.word	0x080029b9
 80028a0:	08002937 	.word	0x08002937
 80028a4:	080029b9 	.word	0x080029b9
 80028a8:	080029b9 	.word	0x080029b9
 80028ac:	080029b9 	.word	0x080029b9
 80028b0:	08002977 	.word	0x08002977
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68b9      	ldr	r1, [r7, #8]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f000 faa0 	bl	8002e00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	699a      	ldr	r2, [r3, #24]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f042 0208 	orr.w	r2, r2, #8
 80028ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	699a      	ldr	r2, [r3, #24]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 0204 	bic.w	r2, r2, #4
 80028de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6999      	ldr	r1, [r3, #24]
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	691a      	ldr	r2, [r3, #16]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	430a      	orrs	r2, r1
 80028f0:	619a      	str	r2, [r3, #24]
      break;
 80028f2:	e064      	b.n	80029be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68b9      	ldr	r1, [r7, #8]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 fae6 	bl	8002ecc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	699a      	ldr	r2, [r3, #24]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800290e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	699a      	ldr	r2, [r3, #24]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800291e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6999      	ldr	r1, [r3, #24]
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	021a      	lsls	r2, r3, #8
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	430a      	orrs	r2, r1
 8002932:	619a      	str	r2, [r3, #24]
      break;
 8002934:	e043      	b.n	80029be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68b9      	ldr	r1, [r7, #8]
 800293c:	4618      	mov	r0, r3
 800293e:	f000 fb2f 	bl	8002fa0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	69da      	ldr	r2, [r3, #28]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f042 0208 	orr.w	r2, r2, #8
 8002950:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	69da      	ldr	r2, [r3, #28]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 0204 	bic.w	r2, r2, #4
 8002960:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	69d9      	ldr	r1, [r3, #28]
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	691a      	ldr	r2, [r3, #16]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	430a      	orrs	r2, r1
 8002972:	61da      	str	r2, [r3, #28]
      break;
 8002974:	e023      	b.n	80029be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68b9      	ldr	r1, [r7, #8]
 800297c:	4618      	mov	r0, r3
 800297e:	f000 fb79 	bl	8003074 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	69da      	ldr	r2, [r3, #28]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002990:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	69da      	ldr	r2, [r3, #28]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	69d9      	ldr	r1, [r3, #28]
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	021a      	lsls	r2, r3, #8
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	61da      	str	r2, [r3, #28]
      break;
 80029b6:	e002      	b.n	80029be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	75fb      	strb	r3, [r7, #23]
      break;
 80029bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80029c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3718      	adds	r7, #24
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029da:	2300      	movs	r3, #0
 80029dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d101      	bne.n	80029ec <HAL_TIM_ConfigClockSource+0x1c>
 80029e8:	2302      	movs	r3, #2
 80029ea:	e0b4      	b.n	8002b56 <HAL_TIM_ConfigClockSource+0x186>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2202      	movs	r2, #2
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002a0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002a12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68ba      	ldr	r2, [r7, #8]
 8002a1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a24:	d03e      	beq.n	8002aa4 <HAL_TIM_ConfigClockSource+0xd4>
 8002a26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a2a:	f200 8087 	bhi.w	8002b3c <HAL_TIM_ConfigClockSource+0x16c>
 8002a2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a32:	f000 8086 	beq.w	8002b42 <HAL_TIM_ConfigClockSource+0x172>
 8002a36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a3a:	d87f      	bhi.n	8002b3c <HAL_TIM_ConfigClockSource+0x16c>
 8002a3c:	2b70      	cmp	r3, #112	@ 0x70
 8002a3e:	d01a      	beq.n	8002a76 <HAL_TIM_ConfigClockSource+0xa6>
 8002a40:	2b70      	cmp	r3, #112	@ 0x70
 8002a42:	d87b      	bhi.n	8002b3c <HAL_TIM_ConfigClockSource+0x16c>
 8002a44:	2b60      	cmp	r3, #96	@ 0x60
 8002a46:	d050      	beq.n	8002aea <HAL_TIM_ConfigClockSource+0x11a>
 8002a48:	2b60      	cmp	r3, #96	@ 0x60
 8002a4a:	d877      	bhi.n	8002b3c <HAL_TIM_ConfigClockSource+0x16c>
 8002a4c:	2b50      	cmp	r3, #80	@ 0x50
 8002a4e:	d03c      	beq.n	8002aca <HAL_TIM_ConfigClockSource+0xfa>
 8002a50:	2b50      	cmp	r3, #80	@ 0x50
 8002a52:	d873      	bhi.n	8002b3c <HAL_TIM_ConfigClockSource+0x16c>
 8002a54:	2b40      	cmp	r3, #64	@ 0x40
 8002a56:	d058      	beq.n	8002b0a <HAL_TIM_ConfigClockSource+0x13a>
 8002a58:	2b40      	cmp	r3, #64	@ 0x40
 8002a5a:	d86f      	bhi.n	8002b3c <HAL_TIM_ConfigClockSource+0x16c>
 8002a5c:	2b30      	cmp	r3, #48	@ 0x30
 8002a5e:	d064      	beq.n	8002b2a <HAL_TIM_ConfigClockSource+0x15a>
 8002a60:	2b30      	cmp	r3, #48	@ 0x30
 8002a62:	d86b      	bhi.n	8002b3c <HAL_TIM_ConfigClockSource+0x16c>
 8002a64:	2b20      	cmp	r3, #32
 8002a66:	d060      	beq.n	8002b2a <HAL_TIM_ConfigClockSource+0x15a>
 8002a68:	2b20      	cmp	r3, #32
 8002a6a:	d867      	bhi.n	8002b3c <HAL_TIM_ConfigClockSource+0x16c>
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d05c      	beq.n	8002b2a <HAL_TIM_ConfigClockSource+0x15a>
 8002a70:	2b10      	cmp	r3, #16
 8002a72:	d05a      	beq.n	8002b2a <HAL_TIM_ConfigClockSource+0x15a>
 8002a74:	e062      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a86:	f000 fbba 	bl	80031fe <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002a98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68ba      	ldr	r2, [r7, #8]
 8002aa0:	609a      	str	r2, [r3, #8]
      break;
 8002aa2:	e04f      	b.n	8002b44 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ab4:	f000 fba3 	bl	80031fe <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689a      	ldr	r2, [r3, #8]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ac6:	609a      	str	r2, [r3, #8]
      break;
 8002ac8:	e03c      	b.n	8002b44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	f000 fb1a 	bl	8003110 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2150      	movs	r1, #80	@ 0x50
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f000 fb71 	bl	80031ca <TIM_ITRx_SetConfig>
      break;
 8002ae8:	e02c      	b.n	8002b44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002af6:	461a      	mov	r2, r3
 8002af8:	f000 fb38 	bl	800316c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2160      	movs	r1, #96	@ 0x60
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 fb61 	bl	80031ca <TIM_ITRx_SetConfig>
      break;
 8002b08:	e01c      	b.n	8002b44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b16:	461a      	mov	r2, r3
 8002b18:	f000 fafa 	bl	8003110 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2140      	movs	r1, #64	@ 0x40
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 fb51 	bl	80031ca <TIM_ITRx_SetConfig>
      break;
 8002b28:	e00c      	b.n	8002b44 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4619      	mov	r1, r3
 8002b34:	4610      	mov	r0, r2
 8002b36:	f000 fb48 	bl	80031ca <TIM_ITRx_SetConfig>
      break;
 8002b3a:	e003      	b.n	8002b44 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b40:	e000      	b.n	8002b44 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bc80      	pop	{r7}
 8002b6e:	4770      	bx	lr

08002b70 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bc80      	pop	{r7}
 8002b80:	4770      	bx	lr

08002b82 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b084      	sub	sp, #16
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b8e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d107      	bne.n	8002baa <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ba8:	e02a      	b.n	8002c00 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d107      	bne.n	8002bc4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002bc2:	e01d      	b.n	8002c00 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d107      	bne.n	8002bde <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2204      	movs	r2, #4
 8002bd2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002bdc:	e010      	b.n	8002c00 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d107      	bne.n	8002bf8 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2208      	movs	r2, #8
 8002bec:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002bf6:	e003      	b.n	8002c00 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f7ff ffb5 	bl	8002b70 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	771a      	strb	r2, [r3, #28]
}
 8002c0c:	bf00      	nop
 8002c0e:	3710      	adds	r7, #16
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c20:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d10b      	bne.n	8002c44 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d136      	bne.n	8002ca8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c42:	e031      	b.n	8002ca8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d10b      	bne.n	8002c66 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2202      	movs	r2, #2
 8002c52:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d125      	bne.n	8002ca8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c64:	e020      	b.n	8002ca8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d10b      	bne.n	8002c88 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2204      	movs	r2, #4
 8002c74:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d114      	bne.n	8002ca8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c86:	e00f      	b.n	8002ca8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d10a      	bne.n	8002ca8 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2208      	movs	r2, #8
 8002c96:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d103      	bne.n	8002ca8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f7fd fc3d 	bl	8000528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	771a      	strb	r2, [r3, #28]
}
 8002cb4:	bf00      	nop
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d103      	bne.n	8002cdc <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	771a      	strb	r2, [r3, #28]
 8002cda:	e019      	b.n	8002d10 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d103      	bne.n	8002cee <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2202      	movs	r2, #2
 8002cea:	771a      	strb	r2, [r3, #28]
 8002cec:	e010      	b.n	8002d10 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d103      	bne.n	8002d00 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2204      	movs	r2, #4
 8002cfc:	771a      	strb	r2, [r3, #28]
 8002cfe:	e007      	b.n	8002d10 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d102      	bne.n	8002d10 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2208      	movs	r2, #8
 8002d0e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f7ff ff24 	bl	8002b5e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	771a      	strb	r2, [r3, #28]
}
 8002d1c:	bf00      	nop
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a2f      	ldr	r2, [pc, #188]	@ (8002df4 <TIM_Base_SetConfig+0xd0>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d00b      	beq.n	8002d54 <TIM_Base_SetConfig+0x30>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d42:	d007      	beq.n	8002d54 <TIM_Base_SetConfig+0x30>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a2c      	ldr	r2, [pc, #176]	@ (8002df8 <TIM_Base_SetConfig+0xd4>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d003      	beq.n	8002d54 <TIM_Base_SetConfig+0x30>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a2b      	ldr	r2, [pc, #172]	@ (8002dfc <TIM_Base_SetConfig+0xd8>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d108      	bne.n	8002d66 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a22      	ldr	r2, [pc, #136]	@ (8002df4 <TIM_Base_SetConfig+0xd0>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d00b      	beq.n	8002d86 <TIM_Base_SetConfig+0x62>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d74:	d007      	beq.n	8002d86 <TIM_Base_SetConfig+0x62>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a1f      	ldr	r2, [pc, #124]	@ (8002df8 <TIM_Base_SetConfig+0xd4>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d003      	beq.n	8002d86 <TIM_Base_SetConfig+0x62>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a1e      	ldr	r2, [pc, #120]	@ (8002dfc <TIM_Base_SetConfig+0xd8>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d108      	bne.n	8002d98 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a0d      	ldr	r2, [pc, #52]	@ (8002df4 <TIM_Base_SetConfig+0xd0>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d103      	bne.n	8002dcc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	691a      	ldr	r2, [r3, #16]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d005      	beq.n	8002dea <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	f023 0201 	bic.w	r2, r3, #1
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	611a      	str	r2, [r3, #16]
  }
}
 8002dea:	bf00      	nop
 8002dec:	3714      	adds	r7, #20
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bc80      	pop	{r7}
 8002df2:	4770      	bx	lr
 8002df4:	40012c00 	.word	0x40012c00
 8002df8:	40000400 	.word	0x40000400
 8002dfc:	40000800 	.word	0x40000800

08002e00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b087      	sub	sp, #28
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	f023 0201 	bic.w	r2, r3, #1
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f023 0303 	bic.w	r3, r3, #3
 8002e36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	f023 0302 	bic.w	r3, r3, #2
 8002e48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a1c      	ldr	r2, [pc, #112]	@ (8002ec8 <TIM_OC1_SetConfig+0xc8>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d10c      	bne.n	8002e76 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	f023 0308 	bic.w	r3, r3, #8
 8002e62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	f023 0304 	bic.w	r3, r3, #4
 8002e74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a13      	ldr	r2, [pc, #76]	@ (8002ec8 <TIM_OC1_SetConfig+0xc8>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d111      	bne.n	8002ea2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002e8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685a      	ldr	r2, [r3, #4]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	621a      	str	r2, [r3, #32]
}
 8002ebc:	bf00      	nop
 8002ebe:	371c      	adds	r7, #28
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bc80      	pop	{r7}
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	40012c00 	.word	0x40012c00

08002ecc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b087      	sub	sp, #28
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	f023 0210 	bic.w	r2, r3, #16
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	021b      	lsls	r3, r3, #8
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	f023 0320 	bic.w	r3, r3, #32
 8002f16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	011b      	lsls	r3, r3, #4
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a1d      	ldr	r2, [pc, #116]	@ (8002f9c <TIM_OC2_SetConfig+0xd0>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d10d      	bne.n	8002f48 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	011b      	lsls	r3, r3, #4
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a14      	ldr	r2, [pc, #80]	@ (8002f9c <TIM_OC2_SetConfig+0xd0>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d113      	bne.n	8002f78 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002f56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	621a      	str	r2, [r3, #32]
}
 8002f92:	bf00      	nop
 8002f94:	371c      	adds	r7, #28
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr
 8002f9c:	40012c00 	.word	0x40012c00

08002fa0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b087      	sub	sp, #28
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f023 0303 	bic.w	r3, r3, #3
 8002fd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002fe8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	021b      	lsls	r3, r3, #8
 8002ff0:	697a      	ldr	r2, [r7, #20]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a1d      	ldr	r2, [pc, #116]	@ (8003070 <TIM_OC3_SetConfig+0xd0>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d10d      	bne.n	800301a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003004:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	021b      	lsls	r3, r3, #8
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	4313      	orrs	r3, r2
 8003010:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003018:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a14      	ldr	r2, [pc, #80]	@ (8003070 <TIM_OC3_SetConfig+0xd0>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d113      	bne.n	800304a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003028:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003030:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	011b      	lsls	r3, r3, #4
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	4313      	orrs	r3, r2
 800303c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	011b      	lsls	r3, r3, #4
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	4313      	orrs	r3, r2
 8003048:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685a      	ldr	r2, [r3, #4]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	621a      	str	r2, [r3, #32]
}
 8003064:	bf00      	nop
 8003066:	371c      	adds	r7, #28
 8003068:	46bd      	mov	sp, r7
 800306a:	bc80      	pop	{r7}
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	40012c00 	.word	0x40012c00

08003074 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003074:	b480      	push	{r7}
 8003076:	b087      	sub	sp, #28
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a1b      	ldr	r3, [r3, #32]
 8003088:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80030a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	021b      	lsls	r3, r3, #8
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80030be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	031b      	lsls	r3, r3, #12
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a0f      	ldr	r2, [pc, #60]	@ (800310c <TIM_OC4_SetConfig+0x98>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d109      	bne.n	80030e8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80030da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	695b      	ldr	r3, [r3, #20]
 80030e0:	019b      	lsls	r3, r3, #6
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685a      	ldr	r2, [r3, #4]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	621a      	str	r2, [r3, #32]
}
 8003102:	bf00      	nop
 8003104:	371c      	adds	r7, #28
 8003106:	46bd      	mov	sp, r7
 8003108:	bc80      	pop	{r7}
 800310a:	4770      	bx	lr
 800310c:	40012c00 	.word	0x40012c00

08003110 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003110:	b480      	push	{r7}
 8003112:	b087      	sub	sp, #28
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	f023 0201 	bic.w	r2, r3, #1
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800313a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	011b      	lsls	r3, r3, #4
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	4313      	orrs	r3, r2
 8003144:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f023 030a 	bic.w	r3, r3, #10
 800314c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	4313      	orrs	r3, r2
 8003154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	621a      	str	r2, [r3, #32]
}
 8003162:	bf00      	nop
 8003164:	371c      	adds	r7, #28
 8003166:	46bd      	mov	sp, r7
 8003168:	bc80      	pop	{r7}
 800316a:	4770      	bx	lr

0800316c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800316c:	b480      	push	{r7}
 800316e:	b087      	sub	sp, #28
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	f023 0210 	bic.w	r2, r3, #16
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003196:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	031b      	lsls	r3, r3, #12
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	4313      	orrs	r3, r2
 80031a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80031a8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	011b      	lsls	r3, r3, #4
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	621a      	str	r2, [r3, #32]
}
 80031c0:	bf00      	nop
 80031c2:	371c      	adds	r7, #28
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bc80      	pop	{r7}
 80031c8:	4770      	bx	lr

080031ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031ca:	b480      	push	{r7}
 80031cc:	b085      	sub	sp, #20
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
 80031d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	f043 0307 	orr.w	r3, r3, #7
 80031ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	609a      	str	r2, [r3, #8]
}
 80031f4:	bf00      	nop
 80031f6:	3714      	adds	r7, #20
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bc80      	pop	{r7}
 80031fc:	4770      	bx	lr

080031fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031fe:	b480      	push	{r7}
 8003200:	b087      	sub	sp, #28
 8003202:	af00      	add	r7, sp, #0
 8003204:	60f8      	str	r0, [r7, #12]
 8003206:	60b9      	str	r1, [r7, #8]
 8003208:	607a      	str	r2, [r7, #4]
 800320a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003218:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	021a      	lsls	r2, r3, #8
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	431a      	orrs	r2, r3
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	4313      	orrs	r3, r2
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	4313      	orrs	r3, r2
 800322a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	609a      	str	r2, [r3, #8]
}
 8003232:	bf00      	nop
 8003234:	371c      	adds	r7, #28
 8003236:	46bd      	mov	sp, r7
 8003238:	bc80      	pop	{r7}
 800323a:	4770      	bx	lr

0800323c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800323c:	b480      	push	{r7}
 800323e:	b087      	sub	sp, #28
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	f003 031f 	and.w	r3, r3, #31
 800324e:	2201      	movs	r2, #1
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6a1a      	ldr	r2, [r3, #32]
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	43db      	mvns	r3, r3
 800325e:	401a      	ands	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6a1a      	ldr	r2, [r3, #32]
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	f003 031f 	and.w	r3, r3, #31
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	fa01 f303 	lsl.w	r3, r1, r3
 8003274:	431a      	orrs	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	621a      	str	r2, [r3, #32]
}
 800327a:	bf00      	nop
 800327c:	371c      	adds	r7, #28
 800327e:	46bd      	mov	sp, r7
 8003280:	bc80      	pop	{r7}
 8003282:	4770      	bx	lr

08003284 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003294:	2b01      	cmp	r3, #1
 8003296:	d101      	bne.n	800329c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003298:	2302      	movs	r3, #2
 800329a:	e046      	b.n	800332a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2202      	movs	r2, #2
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a16      	ldr	r2, [pc, #88]	@ (8003334 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d00e      	beq.n	80032fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032e8:	d009      	beq.n	80032fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a12      	ldr	r2, [pc, #72]	@ (8003338 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d004      	beq.n	80032fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a10      	ldr	r2, [pc, #64]	@ (800333c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d10c      	bne.n	8003318 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003304:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	4313      	orrs	r3, r2
 800330e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68ba      	ldr	r2, [r7, #8]
 8003316:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr
 8003334:	40012c00 	.word	0x40012c00
 8003338:	40000400 	.word	0x40000400
 800333c:	40000800 	.word	0x40000800

08003340 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800334a:	2300      	movs	r3, #0
 800334c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003354:	2b01      	cmp	r3, #1
 8003356:	d101      	bne.n	800335c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003358:	2302      	movs	r3, #2
 800335a:	e03d      	b.n	80033d8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	4313      	orrs	r3, r2
 8003370:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	4313      	orrs	r3, r2
 800337e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	4313      	orrs	r3, r2
 800338c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4313      	orrs	r3, r2
 800339a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3714      	adds	r7, #20
 80033dc:	46bd      	mov	sp, r7
 80033de:	bc80      	pop	{r7}
 80033e0:	4770      	bx	lr
	...

080033e4 <sniprintf>:
 80033e4:	b40c      	push	{r2, r3}
 80033e6:	b530      	push	{r4, r5, lr}
 80033e8:	4b18      	ldr	r3, [pc, #96]	@ (800344c <sniprintf+0x68>)
 80033ea:	1e0c      	subs	r4, r1, #0
 80033ec:	681d      	ldr	r5, [r3, #0]
 80033ee:	b09d      	sub	sp, #116	@ 0x74
 80033f0:	da08      	bge.n	8003404 <sniprintf+0x20>
 80033f2:	238b      	movs	r3, #139	@ 0x8b
 80033f4:	f04f 30ff 	mov.w	r0, #4294967295
 80033f8:	602b      	str	r3, [r5, #0]
 80033fa:	b01d      	add	sp, #116	@ 0x74
 80033fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003400:	b002      	add	sp, #8
 8003402:	4770      	bx	lr
 8003404:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003408:	f8ad 3014 	strh.w	r3, [sp, #20]
 800340c:	f04f 0300 	mov.w	r3, #0
 8003410:	931b      	str	r3, [sp, #108]	@ 0x6c
 8003412:	bf0c      	ite	eq
 8003414:	4623      	moveq	r3, r4
 8003416:	f104 33ff 	addne.w	r3, r4, #4294967295
 800341a:	9304      	str	r3, [sp, #16]
 800341c:	9307      	str	r3, [sp, #28]
 800341e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003422:	9002      	str	r0, [sp, #8]
 8003424:	9006      	str	r0, [sp, #24]
 8003426:	f8ad 3016 	strh.w	r3, [sp, #22]
 800342a:	4628      	mov	r0, r5
 800342c:	ab21      	add	r3, sp, #132	@ 0x84
 800342e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003430:	a902      	add	r1, sp, #8
 8003432:	9301      	str	r3, [sp, #4]
 8003434:	f000 f9a0 	bl	8003778 <_svfiprintf_r>
 8003438:	1c43      	adds	r3, r0, #1
 800343a:	bfbc      	itt	lt
 800343c:	238b      	movlt	r3, #139	@ 0x8b
 800343e:	602b      	strlt	r3, [r5, #0]
 8003440:	2c00      	cmp	r4, #0
 8003442:	d0da      	beq.n	80033fa <sniprintf+0x16>
 8003444:	2200      	movs	r2, #0
 8003446:	9b02      	ldr	r3, [sp, #8]
 8003448:	701a      	strb	r2, [r3, #0]
 800344a:	e7d6      	b.n	80033fa <sniprintf+0x16>
 800344c:	20000048 	.word	0x20000048

08003450 <memset>:
 8003450:	4603      	mov	r3, r0
 8003452:	4402      	add	r2, r0
 8003454:	4293      	cmp	r3, r2
 8003456:	d100      	bne.n	800345a <memset+0xa>
 8003458:	4770      	bx	lr
 800345a:	f803 1b01 	strb.w	r1, [r3], #1
 800345e:	e7f9      	b.n	8003454 <memset+0x4>

08003460 <__errno>:
 8003460:	4b01      	ldr	r3, [pc, #4]	@ (8003468 <__errno+0x8>)
 8003462:	6818      	ldr	r0, [r3, #0]
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	20000048 	.word	0x20000048

0800346c <__libc_init_array>:
 800346c:	b570      	push	{r4, r5, r6, lr}
 800346e:	2600      	movs	r6, #0
 8003470:	4d0c      	ldr	r5, [pc, #48]	@ (80034a4 <__libc_init_array+0x38>)
 8003472:	4c0d      	ldr	r4, [pc, #52]	@ (80034a8 <__libc_init_array+0x3c>)
 8003474:	1b64      	subs	r4, r4, r5
 8003476:	10a4      	asrs	r4, r4, #2
 8003478:	42a6      	cmp	r6, r4
 800347a:	d109      	bne.n	8003490 <__libc_init_array+0x24>
 800347c:	f000 fc76 	bl	8003d6c <_init>
 8003480:	2600      	movs	r6, #0
 8003482:	4d0a      	ldr	r5, [pc, #40]	@ (80034ac <__libc_init_array+0x40>)
 8003484:	4c0a      	ldr	r4, [pc, #40]	@ (80034b0 <__libc_init_array+0x44>)
 8003486:	1b64      	subs	r4, r4, r5
 8003488:	10a4      	asrs	r4, r4, #2
 800348a:	42a6      	cmp	r6, r4
 800348c:	d105      	bne.n	800349a <__libc_init_array+0x2e>
 800348e:	bd70      	pop	{r4, r5, r6, pc}
 8003490:	f855 3b04 	ldr.w	r3, [r5], #4
 8003494:	4798      	blx	r3
 8003496:	3601      	adds	r6, #1
 8003498:	e7ee      	b.n	8003478 <__libc_init_array+0xc>
 800349a:	f855 3b04 	ldr.w	r3, [r5], #4
 800349e:	4798      	blx	r3
 80034a0:	3601      	adds	r6, #1
 80034a2:	e7f2      	b.n	800348a <__libc_init_array+0x1e>
 80034a4:	08003fb0 	.word	0x08003fb0
 80034a8:	08003fb0 	.word	0x08003fb0
 80034ac:	08003fb0 	.word	0x08003fb0
 80034b0:	08003fb4 	.word	0x08003fb4

080034b4 <__retarget_lock_acquire_recursive>:
 80034b4:	4770      	bx	lr

080034b6 <__retarget_lock_release_recursive>:
 80034b6:	4770      	bx	lr

080034b8 <memcpy>:
 80034b8:	440a      	add	r2, r1
 80034ba:	4291      	cmp	r1, r2
 80034bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80034c0:	d100      	bne.n	80034c4 <memcpy+0xc>
 80034c2:	4770      	bx	lr
 80034c4:	b510      	push	{r4, lr}
 80034c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80034ca:	4291      	cmp	r1, r2
 80034cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80034d0:	d1f9      	bne.n	80034c6 <memcpy+0xe>
 80034d2:	bd10      	pop	{r4, pc}

080034d4 <_free_r>:
 80034d4:	b538      	push	{r3, r4, r5, lr}
 80034d6:	4605      	mov	r5, r0
 80034d8:	2900      	cmp	r1, #0
 80034da:	d040      	beq.n	800355e <_free_r+0x8a>
 80034dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034e0:	1f0c      	subs	r4, r1, #4
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	bfb8      	it	lt
 80034e6:	18e4      	addlt	r4, r4, r3
 80034e8:	f000 f8de 	bl	80036a8 <__malloc_lock>
 80034ec:	4a1c      	ldr	r2, [pc, #112]	@ (8003560 <_free_r+0x8c>)
 80034ee:	6813      	ldr	r3, [r2, #0]
 80034f0:	b933      	cbnz	r3, 8003500 <_free_r+0x2c>
 80034f2:	6063      	str	r3, [r4, #4]
 80034f4:	6014      	str	r4, [r2, #0]
 80034f6:	4628      	mov	r0, r5
 80034f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80034fc:	f000 b8da 	b.w	80036b4 <__malloc_unlock>
 8003500:	42a3      	cmp	r3, r4
 8003502:	d908      	bls.n	8003516 <_free_r+0x42>
 8003504:	6820      	ldr	r0, [r4, #0]
 8003506:	1821      	adds	r1, r4, r0
 8003508:	428b      	cmp	r3, r1
 800350a:	bf01      	itttt	eq
 800350c:	6819      	ldreq	r1, [r3, #0]
 800350e:	685b      	ldreq	r3, [r3, #4]
 8003510:	1809      	addeq	r1, r1, r0
 8003512:	6021      	streq	r1, [r4, #0]
 8003514:	e7ed      	b.n	80034f2 <_free_r+0x1e>
 8003516:	461a      	mov	r2, r3
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	b10b      	cbz	r3, 8003520 <_free_r+0x4c>
 800351c:	42a3      	cmp	r3, r4
 800351e:	d9fa      	bls.n	8003516 <_free_r+0x42>
 8003520:	6811      	ldr	r1, [r2, #0]
 8003522:	1850      	adds	r0, r2, r1
 8003524:	42a0      	cmp	r0, r4
 8003526:	d10b      	bne.n	8003540 <_free_r+0x6c>
 8003528:	6820      	ldr	r0, [r4, #0]
 800352a:	4401      	add	r1, r0
 800352c:	1850      	adds	r0, r2, r1
 800352e:	4283      	cmp	r3, r0
 8003530:	6011      	str	r1, [r2, #0]
 8003532:	d1e0      	bne.n	80034f6 <_free_r+0x22>
 8003534:	6818      	ldr	r0, [r3, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	4408      	add	r0, r1
 800353a:	6010      	str	r0, [r2, #0]
 800353c:	6053      	str	r3, [r2, #4]
 800353e:	e7da      	b.n	80034f6 <_free_r+0x22>
 8003540:	d902      	bls.n	8003548 <_free_r+0x74>
 8003542:	230c      	movs	r3, #12
 8003544:	602b      	str	r3, [r5, #0]
 8003546:	e7d6      	b.n	80034f6 <_free_r+0x22>
 8003548:	6820      	ldr	r0, [r4, #0]
 800354a:	1821      	adds	r1, r4, r0
 800354c:	428b      	cmp	r3, r1
 800354e:	bf01      	itttt	eq
 8003550:	6819      	ldreq	r1, [r3, #0]
 8003552:	685b      	ldreq	r3, [r3, #4]
 8003554:	1809      	addeq	r1, r1, r0
 8003556:	6021      	streq	r1, [r4, #0]
 8003558:	6063      	str	r3, [r4, #4]
 800355a:	6054      	str	r4, [r2, #4]
 800355c:	e7cb      	b.n	80034f6 <_free_r+0x22>
 800355e:	bd38      	pop	{r3, r4, r5, pc}
 8003560:	20001018 	.word	0x20001018

08003564 <sbrk_aligned>:
 8003564:	b570      	push	{r4, r5, r6, lr}
 8003566:	4e0f      	ldr	r6, [pc, #60]	@ (80035a4 <sbrk_aligned+0x40>)
 8003568:	460c      	mov	r4, r1
 800356a:	6831      	ldr	r1, [r6, #0]
 800356c:	4605      	mov	r5, r0
 800356e:	b911      	cbnz	r1, 8003576 <sbrk_aligned+0x12>
 8003570:	f000 fba8 	bl	8003cc4 <_sbrk_r>
 8003574:	6030      	str	r0, [r6, #0]
 8003576:	4621      	mov	r1, r4
 8003578:	4628      	mov	r0, r5
 800357a:	f000 fba3 	bl	8003cc4 <_sbrk_r>
 800357e:	1c43      	adds	r3, r0, #1
 8003580:	d103      	bne.n	800358a <sbrk_aligned+0x26>
 8003582:	f04f 34ff 	mov.w	r4, #4294967295
 8003586:	4620      	mov	r0, r4
 8003588:	bd70      	pop	{r4, r5, r6, pc}
 800358a:	1cc4      	adds	r4, r0, #3
 800358c:	f024 0403 	bic.w	r4, r4, #3
 8003590:	42a0      	cmp	r0, r4
 8003592:	d0f8      	beq.n	8003586 <sbrk_aligned+0x22>
 8003594:	1a21      	subs	r1, r4, r0
 8003596:	4628      	mov	r0, r5
 8003598:	f000 fb94 	bl	8003cc4 <_sbrk_r>
 800359c:	3001      	adds	r0, #1
 800359e:	d1f2      	bne.n	8003586 <sbrk_aligned+0x22>
 80035a0:	e7ef      	b.n	8003582 <sbrk_aligned+0x1e>
 80035a2:	bf00      	nop
 80035a4:	20001014 	.word	0x20001014

080035a8 <_malloc_r>:
 80035a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035ac:	1ccd      	adds	r5, r1, #3
 80035ae:	f025 0503 	bic.w	r5, r5, #3
 80035b2:	3508      	adds	r5, #8
 80035b4:	2d0c      	cmp	r5, #12
 80035b6:	bf38      	it	cc
 80035b8:	250c      	movcc	r5, #12
 80035ba:	2d00      	cmp	r5, #0
 80035bc:	4606      	mov	r6, r0
 80035be:	db01      	blt.n	80035c4 <_malloc_r+0x1c>
 80035c0:	42a9      	cmp	r1, r5
 80035c2:	d904      	bls.n	80035ce <_malloc_r+0x26>
 80035c4:	230c      	movs	r3, #12
 80035c6:	6033      	str	r3, [r6, #0]
 80035c8:	2000      	movs	r0, #0
 80035ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80036a4 <_malloc_r+0xfc>
 80035d2:	f000 f869 	bl	80036a8 <__malloc_lock>
 80035d6:	f8d8 3000 	ldr.w	r3, [r8]
 80035da:	461c      	mov	r4, r3
 80035dc:	bb44      	cbnz	r4, 8003630 <_malloc_r+0x88>
 80035de:	4629      	mov	r1, r5
 80035e0:	4630      	mov	r0, r6
 80035e2:	f7ff ffbf 	bl	8003564 <sbrk_aligned>
 80035e6:	1c43      	adds	r3, r0, #1
 80035e8:	4604      	mov	r4, r0
 80035ea:	d158      	bne.n	800369e <_malloc_r+0xf6>
 80035ec:	f8d8 4000 	ldr.w	r4, [r8]
 80035f0:	4627      	mov	r7, r4
 80035f2:	2f00      	cmp	r7, #0
 80035f4:	d143      	bne.n	800367e <_malloc_r+0xd6>
 80035f6:	2c00      	cmp	r4, #0
 80035f8:	d04b      	beq.n	8003692 <_malloc_r+0xea>
 80035fa:	6823      	ldr	r3, [r4, #0]
 80035fc:	4639      	mov	r1, r7
 80035fe:	4630      	mov	r0, r6
 8003600:	eb04 0903 	add.w	r9, r4, r3
 8003604:	f000 fb5e 	bl	8003cc4 <_sbrk_r>
 8003608:	4581      	cmp	r9, r0
 800360a:	d142      	bne.n	8003692 <_malloc_r+0xea>
 800360c:	6821      	ldr	r1, [r4, #0]
 800360e:	4630      	mov	r0, r6
 8003610:	1a6d      	subs	r5, r5, r1
 8003612:	4629      	mov	r1, r5
 8003614:	f7ff ffa6 	bl	8003564 <sbrk_aligned>
 8003618:	3001      	adds	r0, #1
 800361a:	d03a      	beq.n	8003692 <_malloc_r+0xea>
 800361c:	6823      	ldr	r3, [r4, #0]
 800361e:	442b      	add	r3, r5
 8003620:	6023      	str	r3, [r4, #0]
 8003622:	f8d8 3000 	ldr.w	r3, [r8]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	bb62      	cbnz	r2, 8003684 <_malloc_r+0xdc>
 800362a:	f8c8 7000 	str.w	r7, [r8]
 800362e:	e00f      	b.n	8003650 <_malloc_r+0xa8>
 8003630:	6822      	ldr	r2, [r4, #0]
 8003632:	1b52      	subs	r2, r2, r5
 8003634:	d420      	bmi.n	8003678 <_malloc_r+0xd0>
 8003636:	2a0b      	cmp	r2, #11
 8003638:	d917      	bls.n	800366a <_malloc_r+0xc2>
 800363a:	1961      	adds	r1, r4, r5
 800363c:	42a3      	cmp	r3, r4
 800363e:	6025      	str	r5, [r4, #0]
 8003640:	bf18      	it	ne
 8003642:	6059      	strne	r1, [r3, #4]
 8003644:	6863      	ldr	r3, [r4, #4]
 8003646:	bf08      	it	eq
 8003648:	f8c8 1000 	streq.w	r1, [r8]
 800364c:	5162      	str	r2, [r4, r5]
 800364e:	604b      	str	r3, [r1, #4]
 8003650:	4630      	mov	r0, r6
 8003652:	f000 f82f 	bl	80036b4 <__malloc_unlock>
 8003656:	f104 000b 	add.w	r0, r4, #11
 800365a:	1d23      	adds	r3, r4, #4
 800365c:	f020 0007 	bic.w	r0, r0, #7
 8003660:	1ac2      	subs	r2, r0, r3
 8003662:	bf1c      	itt	ne
 8003664:	1a1b      	subne	r3, r3, r0
 8003666:	50a3      	strne	r3, [r4, r2]
 8003668:	e7af      	b.n	80035ca <_malloc_r+0x22>
 800366a:	6862      	ldr	r2, [r4, #4]
 800366c:	42a3      	cmp	r3, r4
 800366e:	bf0c      	ite	eq
 8003670:	f8c8 2000 	streq.w	r2, [r8]
 8003674:	605a      	strne	r2, [r3, #4]
 8003676:	e7eb      	b.n	8003650 <_malloc_r+0xa8>
 8003678:	4623      	mov	r3, r4
 800367a:	6864      	ldr	r4, [r4, #4]
 800367c:	e7ae      	b.n	80035dc <_malloc_r+0x34>
 800367e:	463c      	mov	r4, r7
 8003680:	687f      	ldr	r7, [r7, #4]
 8003682:	e7b6      	b.n	80035f2 <_malloc_r+0x4a>
 8003684:	461a      	mov	r2, r3
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	42a3      	cmp	r3, r4
 800368a:	d1fb      	bne.n	8003684 <_malloc_r+0xdc>
 800368c:	2300      	movs	r3, #0
 800368e:	6053      	str	r3, [r2, #4]
 8003690:	e7de      	b.n	8003650 <_malloc_r+0xa8>
 8003692:	230c      	movs	r3, #12
 8003694:	4630      	mov	r0, r6
 8003696:	6033      	str	r3, [r6, #0]
 8003698:	f000 f80c 	bl	80036b4 <__malloc_unlock>
 800369c:	e794      	b.n	80035c8 <_malloc_r+0x20>
 800369e:	6005      	str	r5, [r0, #0]
 80036a0:	e7d6      	b.n	8003650 <_malloc_r+0xa8>
 80036a2:	bf00      	nop
 80036a4:	20001018 	.word	0x20001018

080036a8 <__malloc_lock>:
 80036a8:	4801      	ldr	r0, [pc, #4]	@ (80036b0 <__malloc_lock+0x8>)
 80036aa:	f7ff bf03 	b.w	80034b4 <__retarget_lock_acquire_recursive>
 80036ae:	bf00      	nop
 80036b0:	20001010 	.word	0x20001010

080036b4 <__malloc_unlock>:
 80036b4:	4801      	ldr	r0, [pc, #4]	@ (80036bc <__malloc_unlock+0x8>)
 80036b6:	f7ff befe 	b.w	80034b6 <__retarget_lock_release_recursive>
 80036ba:	bf00      	nop
 80036bc:	20001010 	.word	0x20001010

080036c0 <__ssputs_r>:
 80036c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036c4:	461f      	mov	r7, r3
 80036c6:	688e      	ldr	r6, [r1, #8]
 80036c8:	4682      	mov	sl, r0
 80036ca:	42be      	cmp	r6, r7
 80036cc:	460c      	mov	r4, r1
 80036ce:	4690      	mov	r8, r2
 80036d0:	680b      	ldr	r3, [r1, #0]
 80036d2:	d82d      	bhi.n	8003730 <__ssputs_r+0x70>
 80036d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80036d8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80036dc:	d026      	beq.n	800372c <__ssputs_r+0x6c>
 80036de:	6965      	ldr	r5, [r4, #20]
 80036e0:	6909      	ldr	r1, [r1, #16]
 80036e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80036e6:	eba3 0901 	sub.w	r9, r3, r1
 80036ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80036ee:	1c7b      	adds	r3, r7, #1
 80036f0:	444b      	add	r3, r9
 80036f2:	106d      	asrs	r5, r5, #1
 80036f4:	429d      	cmp	r5, r3
 80036f6:	bf38      	it	cc
 80036f8:	461d      	movcc	r5, r3
 80036fa:	0553      	lsls	r3, r2, #21
 80036fc:	d527      	bpl.n	800374e <__ssputs_r+0x8e>
 80036fe:	4629      	mov	r1, r5
 8003700:	f7ff ff52 	bl	80035a8 <_malloc_r>
 8003704:	4606      	mov	r6, r0
 8003706:	b360      	cbz	r0, 8003762 <__ssputs_r+0xa2>
 8003708:	464a      	mov	r2, r9
 800370a:	6921      	ldr	r1, [r4, #16]
 800370c:	f7ff fed4 	bl	80034b8 <memcpy>
 8003710:	89a3      	ldrh	r3, [r4, #12]
 8003712:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003716:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800371a:	81a3      	strh	r3, [r4, #12]
 800371c:	6126      	str	r6, [r4, #16]
 800371e:	444e      	add	r6, r9
 8003720:	6026      	str	r6, [r4, #0]
 8003722:	463e      	mov	r6, r7
 8003724:	6165      	str	r5, [r4, #20]
 8003726:	eba5 0509 	sub.w	r5, r5, r9
 800372a:	60a5      	str	r5, [r4, #8]
 800372c:	42be      	cmp	r6, r7
 800372e:	d900      	bls.n	8003732 <__ssputs_r+0x72>
 8003730:	463e      	mov	r6, r7
 8003732:	4632      	mov	r2, r6
 8003734:	4641      	mov	r1, r8
 8003736:	6820      	ldr	r0, [r4, #0]
 8003738:	f000 faaa 	bl	8003c90 <memmove>
 800373c:	2000      	movs	r0, #0
 800373e:	68a3      	ldr	r3, [r4, #8]
 8003740:	1b9b      	subs	r3, r3, r6
 8003742:	60a3      	str	r3, [r4, #8]
 8003744:	6823      	ldr	r3, [r4, #0]
 8003746:	4433      	add	r3, r6
 8003748:	6023      	str	r3, [r4, #0]
 800374a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800374e:	462a      	mov	r2, r5
 8003750:	f000 fad6 	bl	8003d00 <_realloc_r>
 8003754:	4606      	mov	r6, r0
 8003756:	2800      	cmp	r0, #0
 8003758:	d1e0      	bne.n	800371c <__ssputs_r+0x5c>
 800375a:	4650      	mov	r0, sl
 800375c:	6921      	ldr	r1, [r4, #16]
 800375e:	f7ff feb9 	bl	80034d4 <_free_r>
 8003762:	230c      	movs	r3, #12
 8003764:	f8ca 3000 	str.w	r3, [sl]
 8003768:	89a3      	ldrh	r3, [r4, #12]
 800376a:	f04f 30ff 	mov.w	r0, #4294967295
 800376e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003772:	81a3      	strh	r3, [r4, #12]
 8003774:	e7e9      	b.n	800374a <__ssputs_r+0x8a>
	...

08003778 <_svfiprintf_r>:
 8003778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800377c:	4698      	mov	r8, r3
 800377e:	898b      	ldrh	r3, [r1, #12]
 8003780:	4607      	mov	r7, r0
 8003782:	061b      	lsls	r3, r3, #24
 8003784:	460d      	mov	r5, r1
 8003786:	4614      	mov	r4, r2
 8003788:	b09d      	sub	sp, #116	@ 0x74
 800378a:	d510      	bpl.n	80037ae <_svfiprintf_r+0x36>
 800378c:	690b      	ldr	r3, [r1, #16]
 800378e:	b973      	cbnz	r3, 80037ae <_svfiprintf_r+0x36>
 8003790:	2140      	movs	r1, #64	@ 0x40
 8003792:	f7ff ff09 	bl	80035a8 <_malloc_r>
 8003796:	6028      	str	r0, [r5, #0]
 8003798:	6128      	str	r0, [r5, #16]
 800379a:	b930      	cbnz	r0, 80037aa <_svfiprintf_r+0x32>
 800379c:	230c      	movs	r3, #12
 800379e:	603b      	str	r3, [r7, #0]
 80037a0:	f04f 30ff 	mov.w	r0, #4294967295
 80037a4:	b01d      	add	sp, #116	@ 0x74
 80037a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037aa:	2340      	movs	r3, #64	@ 0x40
 80037ac:	616b      	str	r3, [r5, #20]
 80037ae:	2300      	movs	r3, #0
 80037b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80037b2:	2320      	movs	r3, #32
 80037b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80037b8:	2330      	movs	r3, #48	@ 0x30
 80037ba:	f04f 0901 	mov.w	r9, #1
 80037be:	f8cd 800c 	str.w	r8, [sp, #12]
 80037c2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800395c <_svfiprintf_r+0x1e4>
 80037c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80037ca:	4623      	mov	r3, r4
 80037cc:	469a      	mov	sl, r3
 80037ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80037d2:	b10a      	cbz	r2, 80037d8 <_svfiprintf_r+0x60>
 80037d4:	2a25      	cmp	r2, #37	@ 0x25
 80037d6:	d1f9      	bne.n	80037cc <_svfiprintf_r+0x54>
 80037d8:	ebba 0b04 	subs.w	fp, sl, r4
 80037dc:	d00b      	beq.n	80037f6 <_svfiprintf_r+0x7e>
 80037de:	465b      	mov	r3, fp
 80037e0:	4622      	mov	r2, r4
 80037e2:	4629      	mov	r1, r5
 80037e4:	4638      	mov	r0, r7
 80037e6:	f7ff ff6b 	bl	80036c0 <__ssputs_r>
 80037ea:	3001      	adds	r0, #1
 80037ec:	f000 80a7 	beq.w	800393e <_svfiprintf_r+0x1c6>
 80037f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80037f2:	445a      	add	r2, fp
 80037f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80037f6:	f89a 3000 	ldrb.w	r3, [sl]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f000 809f 	beq.w	800393e <_svfiprintf_r+0x1c6>
 8003800:	2300      	movs	r3, #0
 8003802:	f04f 32ff 	mov.w	r2, #4294967295
 8003806:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800380a:	f10a 0a01 	add.w	sl, sl, #1
 800380e:	9304      	str	r3, [sp, #16]
 8003810:	9307      	str	r3, [sp, #28]
 8003812:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003816:	931a      	str	r3, [sp, #104]	@ 0x68
 8003818:	4654      	mov	r4, sl
 800381a:	2205      	movs	r2, #5
 800381c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003820:	484e      	ldr	r0, [pc, #312]	@ (800395c <_svfiprintf_r+0x1e4>)
 8003822:	f000 fa5f 	bl	8003ce4 <memchr>
 8003826:	9a04      	ldr	r2, [sp, #16]
 8003828:	b9d8      	cbnz	r0, 8003862 <_svfiprintf_r+0xea>
 800382a:	06d0      	lsls	r0, r2, #27
 800382c:	bf44      	itt	mi
 800382e:	2320      	movmi	r3, #32
 8003830:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003834:	0711      	lsls	r1, r2, #28
 8003836:	bf44      	itt	mi
 8003838:	232b      	movmi	r3, #43	@ 0x2b
 800383a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800383e:	f89a 3000 	ldrb.w	r3, [sl]
 8003842:	2b2a      	cmp	r3, #42	@ 0x2a
 8003844:	d015      	beq.n	8003872 <_svfiprintf_r+0xfa>
 8003846:	4654      	mov	r4, sl
 8003848:	2000      	movs	r0, #0
 800384a:	f04f 0c0a 	mov.w	ip, #10
 800384e:	9a07      	ldr	r2, [sp, #28]
 8003850:	4621      	mov	r1, r4
 8003852:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003856:	3b30      	subs	r3, #48	@ 0x30
 8003858:	2b09      	cmp	r3, #9
 800385a:	d94b      	bls.n	80038f4 <_svfiprintf_r+0x17c>
 800385c:	b1b0      	cbz	r0, 800388c <_svfiprintf_r+0x114>
 800385e:	9207      	str	r2, [sp, #28]
 8003860:	e014      	b.n	800388c <_svfiprintf_r+0x114>
 8003862:	eba0 0308 	sub.w	r3, r0, r8
 8003866:	fa09 f303 	lsl.w	r3, r9, r3
 800386a:	4313      	orrs	r3, r2
 800386c:	46a2      	mov	sl, r4
 800386e:	9304      	str	r3, [sp, #16]
 8003870:	e7d2      	b.n	8003818 <_svfiprintf_r+0xa0>
 8003872:	9b03      	ldr	r3, [sp, #12]
 8003874:	1d19      	adds	r1, r3, #4
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	9103      	str	r1, [sp, #12]
 800387a:	2b00      	cmp	r3, #0
 800387c:	bfbb      	ittet	lt
 800387e:	425b      	neglt	r3, r3
 8003880:	f042 0202 	orrlt.w	r2, r2, #2
 8003884:	9307      	strge	r3, [sp, #28]
 8003886:	9307      	strlt	r3, [sp, #28]
 8003888:	bfb8      	it	lt
 800388a:	9204      	strlt	r2, [sp, #16]
 800388c:	7823      	ldrb	r3, [r4, #0]
 800388e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003890:	d10a      	bne.n	80038a8 <_svfiprintf_r+0x130>
 8003892:	7863      	ldrb	r3, [r4, #1]
 8003894:	2b2a      	cmp	r3, #42	@ 0x2a
 8003896:	d132      	bne.n	80038fe <_svfiprintf_r+0x186>
 8003898:	9b03      	ldr	r3, [sp, #12]
 800389a:	3402      	adds	r4, #2
 800389c:	1d1a      	adds	r2, r3, #4
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	9203      	str	r2, [sp, #12]
 80038a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80038a6:	9305      	str	r3, [sp, #20]
 80038a8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003960 <_svfiprintf_r+0x1e8>
 80038ac:	2203      	movs	r2, #3
 80038ae:	4650      	mov	r0, sl
 80038b0:	7821      	ldrb	r1, [r4, #0]
 80038b2:	f000 fa17 	bl	8003ce4 <memchr>
 80038b6:	b138      	cbz	r0, 80038c8 <_svfiprintf_r+0x150>
 80038b8:	2240      	movs	r2, #64	@ 0x40
 80038ba:	9b04      	ldr	r3, [sp, #16]
 80038bc:	eba0 000a 	sub.w	r0, r0, sl
 80038c0:	4082      	lsls	r2, r0
 80038c2:	4313      	orrs	r3, r2
 80038c4:	3401      	adds	r4, #1
 80038c6:	9304      	str	r3, [sp, #16]
 80038c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038cc:	2206      	movs	r2, #6
 80038ce:	4825      	ldr	r0, [pc, #148]	@ (8003964 <_svfiprintf_r+0x1ec>)
 80038d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80038d4:	f000 fa06 	bl	8003ce4 <memchr>
 80038d8:	2800      	cmp	r0, #0
 80038da:	d036      	beq.n	800394a <_svfiprintf_r+0x1d2>
 80038dc:	4b22      	ldr	r3, [pc, #136]	@ (8003968 <_svfiprintf_r+0x1f0>)
 80038de:	bb1b      	cbnz	r3, 8003928 <_svfiprintf_r+0x1b0>
 80038e0:	9b03      	ldr	r3, [sp, #12]
 80038e2:	3307      	adds	r3, #7
 80038e4:	f023 0307 	bic.w	r3, r3, #7
 80038e8:	3308      	adds	r3, #8
 80038ea:	9303      	str	r3, [sp, #12]
 80038ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80038ee:	4433      	add	r3, r6
 80038f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80038f2:	e76a      	b.n	80037ca <_svfiprintf_r+0x52>
 80038f4:	460c      	mov	r4, r1
 80038f6:	2001      	movs	r0, #1
 80038f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80038fc:	e7a8      	b.n	8003850 <_svfiprintf_r+0xd8>
 80038fe:	2300      	movs	r3, #0
 8003900:	f04f 0c0a 	mov.w	ip, #10
 8003904:	4619      	mov	r1, r3
 8003906:	3401      	adds	r4, #1
 8003908:	9305      	str	r3, [sp, #20]
 800390a:	4620      	mov	r0, r4
 800390c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003910:	3a30      	subs	r2, #48	@ 0x30
 8003912:	2a09      	cmp	r2, #9
 8003914:	d903      	bls.n	800391e <_svfiprintf_r+0x1a6>
 8003916:	2b00      	cmp	r3, #0
 8003918:	d0c6      	beq.n	80038a8 <_svfiprintf_r+0x130>
 800391a:	9105      	str	r1, [sp, #20]
 800391c:	e7c4      	b.n	80038a8 <_svfiprintf_r+0x130>
 800391e:	4604      	mov	r4, r0
 8003920:	2301      	movs	r3, #1
 8003922:	fb0c 2101 	mla	r1, ip, r1, r2
 8003926:	e7f0      	b.n	800390a <_svfiprintf_r+0x192>
 8003928:	ab03      	add	r3, sp, #12
 800392a:	9300      	str	r3, [sp, #0]
 800392c:	462a      	mov	r2, r5
 800392e:	4638      	mov	r0, r7
 8003930:	4b0e      	ldr	r3, [pc, #56]	@ (800396c <_svfiprintf_r+0x1f4>)
 8003932:	a904      	add	r1, sp, #16
 8003934:	f3af 8000 	nop.w
 8003938:	1c42      	adds	r2, r0, #1
 800393a:	4606      	mov	r6, r0
 800393c:	d1d6      	bne.n	80038ec <_svfiprintf_r+0x174>
 800393e:	89ab      	ldrh	r3, [r5, #12]
 8003940:	065b      	lsls	r3, r3, #25
 8003942:	f53f af2d 	bmi.w	80037a0 <_svfiprintf_r+0x28>
 8003946:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003948:	e72c      	b.n	80037a4 <_svfiprintf_r+0x2c>
 800394a:	ab03      	add	r3, sp, #12
 800394c:	9300      	str	r3, [sp, #0]
 800394e:	462a      	mov	r2, r5
 8003950:	4638      	mov	r0, r7
 8003952:	4b06      	ldr	r3, [pc, #24]	@ (800396c <_svfiprintf_r+0x1f4>)
 8003954:	a904      	add	r1, sp, #16
 8003956:	f000 f87d 	bl	8003a54 <_printf_i>
 800395a:	e7ed      	b.n	8003938 <_svfiprintf_r+0x1c0>
 800395c:	08003f72 	.word	0x08003f72
 8003960:	08003f78 	.word	0x08003f78
 8003964:	08003f7c 	.word	0x08003f7c
 8003968:	00000000 	.word	0x00000000
 800396c:	080036c1 	.word	0x080036c1

08003970 <_printf_common>:
 8003970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003974:	4616      	mov	r6, r2
 8003976:	4698      	mov	r8, r3
 8003978:	688a      	ldr	r2, [r1, #8]
 800397a:	690b      	ldr	r3, [r1, #16]
 800397c:	4607      	mov	r7, r0
 800397e:	4293      	cmp	r3, r2
 8003980:	bfb8      	it	lt
 8003982:	4613      	movlt	r3, r2
 8003984:	6033      	str	r3, [r6, #0]
 8003986:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800398a:	460c      	mov	r4, r1
 800398c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003990:	b10a      	cbz	r2, 8003996 <_printf_common+0x26>
 8003992:	3301      	adds	r3, #1
 8003994:	6033      	str	r3, [r6, #0]
 8003996:	6823      	ldr	r3, [r4, #0]
 8003998:	0699      	lsls	r1, r3, #26
 800399a:	bf42      	ittt	mi
 800399c:	6833      	ldrmi	r3, [r6, #0]
 800399e:	3302      	addmi	r3, #2
 80039a0:	6033      	strmi	r3, [r6, #0]
 80039a2:	6825      	ldr	r5, [r4, #0]
 80039a4:	f015 0506 	ands.w	r5, r5, #6
 80039a8:	d106      	bne.n	80039b8 <_printf_common+0x48>
 80039aa:	f104 0a19 	add.w	sl, r4, #25
 80039ae:	68e3      	ldr	r3, [r4, #12]
 80039b0:	6832      	ldr	r2, [r6, #0]
 80039b2:	1a9b      	subs	r3, r3, r2
 80039b4:	42ab      	cmp	r3, r5
 80039b6:	dc2b      	bgt.n	8003a10 <_printf_common+0xa0>
 80039b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80039bc:	6822      	ldr	r2, [r4, #0]
 80039be:	3b00      	subs	r3, #0
 80039c0:	bf18      	it	ne
 80039c2:	2301      	movne	r3, #1
 80039c4:	0692      	lsls	r2, r2, #26
 80039c6:	d430      	bmi.n	8003a2a <_printf_common+0xba>
 80039c8:	4641      	mov	r1, r8
 80039ca:	4638      	mov	r0, r7
 80039cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80039d0:	47c8      	blx	r9
 80039d2:	3001      	adds	r0, #1
 80039d4:	d023      	beq.n	8003a1e <_printf_common+0xae>
 80039d6:	6823      	ldr	r3, [r4, #0]
 80039d8:	6922      	ldr	r2, [r4, #16]
 80039da:	f003 0306 	and.w	r3, r3, #6
 80039de:	2b04      	cmp	r3, #4
 80039e0:	bf14      	ite	ne
 80039e2:	2500      	movne	r5, #0
 80039e4:	6833      	ldreq	r3, [r6, #0]
 80039e6:	f04f 0600 	mov.w	r6, #0
 80039ea:	bf08      	it	eq
 80039ec:	68e5      	ldreq	r5, [r4, #12]
 80039ee:	f104 041a 	add.w	r4, r4, #26
 80039f2:	bf08      	it	eq
 80039f4:	1aed      	subeq	r5, r5, r3
 80039f6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80039fa:	bf08      	it	eq
 80039fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a00:	4293      	cmp	r3, r2
 8003a02:	bfc4      	itt	gt
 8003a04:	1a9b      	subgt	r3, r3, r2
 8003a06:	18ed      	addgt	r5, r5, r3
 8003a08:	42b5      	cmp	r5, r6
 8003a0a:	d11a      	bne.n	8003a42 <_printf_common+0xd2>
 8003a0c:	2000      	movs	r0, #0
 8003a0e:	e008      	b.n	8003a22 <_printf_common+0xb2>
 8003a10:	2301      	movs	r3, #1
 8003a12:	4652      	mov	r2, sl
 8003a14:	4641      	mov	r1, r8
 8003a16:	4638      	mov	r0, r7
 8003a18:	47c8      	blx	r9
 8003a1a:	3001      	adds	r0, #1
 8003a1c:	d103      	bne.n	8003a26 <_printf_common+0xb6>
 8003a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8003a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a26:	3501      	adds	r5, #1
 8003a28:	e7c1      	b.n	80039ae <_printf_common+0x3e>
 8003a2a:	2030      	movs	r0, #48	@ 0x30
 8003a2c:	18e1      	adds	r1, r4, r3
 8003a2e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003a32:	1c5a      	adds	r2, r3, #1
 8003a34:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003a38:	4422      	add	r2, r4
 8003a3a:	3302      	adds	r3, #2
 8003a3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003a40:	e7c2      	b.n	80039c8 <_printf_common+0x58>
 8003a42:	2301      	movs	r3, #1
 8003a44:	4622      	mov	r2, r4
 8003a46:	4641      	mov	r1, r8
 8003a48:	4638      	mov	r0, r7
 8003a4a:	47c8      	blx	r9
 8003a4c:	3001      	adds	r0, #1
 8003a4e:	d0e6      	beq.n	8003a1e <_printf_common+0xae>
 8003a50:	3601      	adds	r6, #1
 8003a52:	e7d9      	b.n	8003a08 <_printf_common+0x98>

08003a54 <_printf_i>:
 8003a54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a58:	7e0f      	ldrb	r7, [r1, #24]
 8003a5a:	4691      	mov	r9, r2
 8003a5c:	2f78      	cmp	r7, #120	@ 0x78
 8003a5e:	4680      	mov	r8, r0
 8003a60:	460c      	mov	r4, r1
 8003a62:	469a      	mov	sl, r3
 8003a64:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003a66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003a6a:	d807      	bhi.n	8003a7c <_printf_i+0x28>
 8003a6c:	2f62      	cmp	r7, #98	@ 0x62
 8003a6e:	d80a      	bhi.n	8003a86 <_printf_i+0x32>
 8003a70:	2f00      	cmp	r7, #0
 8003a72:	f000 80d1 	beq.w	8003c18 <_printf_i+0x1c4>
 8003a76:	2f58      	cmp	r7, #88	@ 0x58
 8003a78:	f000 80b8 	beq.w	8003bec <_printf_i+0x198>
 8003a7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003a80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003a84:	e03a      	b.n	8003afc <_printf_i+0xa8>
 8003a86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003a8a:	2b15      	cmp	r3, #21
 8003a8c:	d8f6      	bhi.n	8003a7c <_printf_i+0x28>
 8003a8e:	a101      	add	r1, pc, #4	@ (adr r1, 8003a94 <_printf_i+0x40>)
 8003a90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a94:	08003aed 	.word	0x08003aed
 8003a98:	08003b01 	.word	0x08003b01
 8003a9c:	08003a7d 	.word	0x08003a7d
 8003aa0:	08003a7d 	.word	0x08003a7d
 8003aa4:	08003a7d 	.word	0x08003a7d
 8003aa8:	08003a7d 	.word	0x08003a7d
 8003aac:	08003b01 	.word	0x08003b01
 8003ab0:	08003a7d 	.word	0x08003a7d
 8003ab4:	08003a7d 	.word	0x08003a7d
 8003ab8:	08003a7d 	.word	0x08003a7d
 8003abc:	08003a7d 	.word	0x08003a7d
 8003ac0:	08003bff 	.word	0x08003bff
 8003ac4:	08003b2b 	.word	0x08003b2b
 8003ac8:	08003bb9 	.word	0x08003bb9
 8003acc:	08003a7d 	.word	0x08003a7d
 8003ad0:	08003a7d 	.word	0x08003a7d
 8003ad4:	08003c21 	.word	0x08003c21
 8003ad8:	08003a7d 	.word	0x08003a7d
 8003adc:	08003b2b 	.word	0x08003b2b
 8003ae0:	08003a7d 	.word	0x08003a7d
 8003ae4:	08003a7d 	.word	0x08003a7d
 8003ae8:	08003bc1 	.word	0x08003bc1
 8003aec:	6833      	ldr	r3, [r6, #0]
 8003aee:	1d1a      	adds	r2, r3, #4
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6032      	str	r2, [r6, #0]
 8003af4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003af8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003afc:	2301      	movs	r3, #1
 8003afe:	e09c      	b.n	8003c3a <_printf_i+0x1e6>
 8003b00:	6833      	ldr	r3, [r6, #0]
 8003b02:	6820      	ldr	r0, [r4, #0]
 8003b04:	1d19      	adds	r1, r3, #4
 8003b06:	6031      	str	r1, [r6, #0]
 8003b08:	0606      	lsls	r6, r0, #24
 8003b0a:	d501      	bpl.n	8003b10 <_printf_i+0xbc>
 8003b0c:	681d      	ldr	r5, [r3, #0]
 8003b0e:	e003      	b.n	8003b18 <_printf_i+0xc4>
 8003b10:	0645      	lsls	r5, r0, #25
 8003b12:	d5fb      	bpl.n	8003b0c <_printf_i+0xb8>
 8003b14:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003b18:	2d00      	cmp	r5, #0
 8003b1a:	da03      	bge.n	8003b24 <_printf_i+0xd0>
 8003b1c:	232d      	movs	r3, #45	@ 0x2d
 8003b1e:	426d      	negs	r5, r5
 8003b20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b24:	230a      	movs	r3, #10
 8003b26:	4858      	ldr	r0, [pc, #352]	@ (8003c88 <_printf_i+0x234>)
 8003b28:	e011      	b.n	8003b4e <_printf_i+0xfa>
 8003b2a:	6821      	ldr	r1, [r4, #0]
 8003b2c:	6833      	ldr	r3, [r6, #0]
 8003b2e:	0608      	lsls	r0, r1, #24
 8003b30:	f853 5b04 	ldr.w	r5, [r3], #4
 8003b34:	d402      	bmi.n	8003b3c <_printf_i+0xe8>
 8003b36:	0649      	lsls	r1, r1, #25
 8003b38:	bf48      	it	mi
 8003b3a:	b2ad      	uxthmi	r5, r5
 8003b3c:	2f6f      	cmp	r7, #111	@ 0x6f
 8003b3e:	6033      	str	r3, [r6, #0]
 8003b40:	bf14      	ite	ne
 8003b42:	230a      	movne	r3, #10
 8003b44:	2308      	moveq	r3, #8
 8003b46:	4850      	ldr	r0, [pc, #320]	@ (8003c88 <_printf_i+0x234>)
 8003b48:	2100      	movs	r1, #0
 8003b4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003b4e:	6866      	ldr	r6, [r4, #4]
 8003b50:	2e00      	cmp	r6, #0
 8003b52:	60a6      	str	r6, [r4, #8]
 8003b54:	db05      	blt.n	8003b62 <_printf_i+0x10e>
 8003b56:	6821      	ldr	r1, [r4, #0]
 8003b58:	432e      	orrs	r6, r5
 8003b5a:	f021 0104 	bic.w	r1, r1, #4
 8003b5e:	6021      	str	r1, [r4, #0]
 8003b60:	d04b      	beq.n	8003bfa <_printf_i+0x1a6>
 8003b62:	4616      	mov	r6, r2
 8003b64:	fbb5 f1f3 	udiv	r1, r5, r3
 8003b68:	fb03 5711 	mls	r7, r3, r1, r5
 8003b6c:	5dc7      	ldrb	r7, [r0, r7]
 8003b6e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003b72:	462f      	mov	r7, r5
 8003b74:	42bb      	cmp	r3, r7
 8003b76:	460d      	mov	r5, r1
 8003b78:	d9f4      	bls.n	8003b64 <_printf_i+0x110>
 8003b7a:	2b08      	cmp	r3, #8
 8003b7c:	d10b      	bne.n	8003b96 <_printf_i+0x142>
 8003b7e:	6823      	ldr	r3, [r4, #0]
 8003b80:	07df      	lsls	r7, r3, #31
 8003b82:	d508      	bpl.n	8003b96 <_printf_i+0x142>
 8003b84:	6923      	ldr	r3, [r4, #16]
 8003b86:	6861      	ldr	r1, [r4, #4]
 8003b88:	4299      	cmp	r1, r3
 8003b8a:	bfde      	ittt	le
 8003b8c:	2330      	movle	r3, #48	@ 0x30
 8003b8e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003b92:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003b96:	1b92      	subs	r2, r2, r6
 8003b98:	6122      	str	r2, [r4, #16]
 8003b9a:	464b      	mov	r3, r9
 8003b9c:	4621      	mov	r1, r4
 8003b9e:	4640      	mov	r0, r8
 8003ba0:	f8cd a000 	str.w	sl, [sp]
 8003ba4:	aa03      	add	r2, sp, #12
 8003ba6:	f7ff fee3 	bl	8003970 <_printf_common>
 8003baa:	3001      	adds	r0, #1
 8003bac:	d14a      	bne.n	8003c44 <_printf_i+0x1f0>
 8003bae:	f04f 30ff 	mov.w	r0, #4294967295
 8003bb2:	b004      	add	sp, #16
 8003bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bb8:	6823      	ldr	r3, [r4, #0]
 8003bba:	f043 0320 	orr.w	r3, r3, #32
 8003bbe:	6023      	str	r3, [r4, #0]
 8003bc0:	2778      	movs	r7, #120	@ 0x78
 8003bc2:	4832      	ldr	r0, [pc, #200]	@ (8003c8c <_printf_i+0x238>)
 8003bc4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003bc8:	6823      	ldr	r3, [r4, #0]
 8003bca:	6831      	ldr	r1, [r6, #0]
 8003bcc:	061f      	lsls	r7, r3, #24
 8003bce:	f851 5b04 	ldr.w	r5, [r1], #4
 8003bd2:	d402      	bmi.n	8003bda <_printf_i+0x186>
 8003bd4:	065f      	lsls	r7, r3, #25
 8003bd6:	bf48      	it	mi
 8003bd8:	b2ad      	uxthmi	r5, r5
 8003bda:	6031      	str	r1, [r6, #0]
 8003bdc:	07d9      	lsls	r1, r3, #31
 8003bde:	bf44      	itt	mi
 8003be0:	f043 0320 	orrmi.w	r3, r3, #32
 8003be4:	6023      	strmi	r3, [r4, #0]
 8003be6:	b11d      	cbz	r5, 8003bf0 <_printf_i+0x19c>
 8003be8:	2310      	movs	r3, #16
 8003bea:	e7ad      	b.n	8003b48 <_printf_i+0xf4>
 8003bec:	4826      	ldr	r0, [pc, #152]	@ (8003c88 <_printf_i+0x234>)
 8003bee:	e7e9      	b.n	8003bc4 <_printf_i+0x170>
 8003bf0:	6823      	ldr	r3, [r4, #0]
 8003bf2:	f023 0320 	bic.w	r3, r3, #32
 8003bf6:	6023      	str	r3, [r4, #0]
 8003bf8:	e7f6      	b.n	8003be8 <_printf_i+0x194>
 8003bfa:	4616      	mov	r6, r2
 8003bfc:	e7bd      	b.n	8003b7a <_printf_i+0x126>
 8003bfe:	6833      	ldr	r3, [r6, #0]
 8003c00:	6825      	ldr	r5, [r4, #0]
 8003c02:	1d18      	adds	r0, r3, #4
 8003c04:	6961      	ldr	r1, [r4, #20]
 8003c06:	6030      	str	r0, [r6, #0]
 8003c08:	062e      	lsls	r6, r5, #24
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	d501      	bpl.n	8003c12 <_printf_i+0x1be>
 8003c0e:	6019      	str	r1, [r3, #0]
 8003c10:	e002      	b.n	8003c18 <_printf_i+0x1c4>
 8003c12:	0668      	lsls	r0, r5, #25
 8003c14:	d5fb      	bpl.n	8003c0e <_printf_i+0x1ba>
 8003c16:	8019      	strh	r1, [r3, #0]
 8003c18:	2300      	movs	r3, #0
 8003c1a:	4616      	mov	r6, r2
 8003c1c:	6123      	str	r3, [r4, #16]
 8003c1e:	e7bc      	b.n	8003b9a <_printf_i+0x146>
 8003c20:	6833      	ldr	r3, [r6, #0]
 8003c22:	2100      	movs	r1, #0
 8003c24:	1d1a      	adds	r2, r3, #4
 8003c26:	6032      	str	r2, [r6, #0]
 8003c28:	681e      	ldr	r6, [r3, #0]
 8003c2a:	6862      	ldr	r2, [r4, #4]
 8003c2c:	4630      	mov	r0, r6
 8003c2e:	f000 f859 	bl	8003ce4 <memchr>
 8003c32:	b108      	cbz	r0, 8003c38 <_printf_i+0x1e4>
 8003c34:	1b80      	subs	r0, r0, r6
 8003c36:	6060      	str	r0, [r4, #4]
 8003c38:	6863      	ldr	r3, [r4, #4]
 8003c3a:	6123      	str	r3, [r4, #16]
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c42:	e7aa      	b.n	8003b9a <_printf_i+0x146>
 8003c44:	4632      	mov	r2, r6
 8003c46:	4649      	mov	r1, r9
 8003c48:	4640      	mov	r0, r8
 8003c4a:	6923      	ldr	r3, [r4, #16]
 8003c4c:	47d0      	blx	sl
 8003c4e:	3001      	adds	r0, #1
 8003c50:	d0ad      	beq.n	8003bae <_printf_i+0x15a>
 8003c52:	6823      	ldr	r3, [r4, #0]
 8003c54:	079b      	lsls	r3, r3, #30
 8003c56:	d413      	bmi.n	8003c80 <_printf_i+0x22c>
 8003c58:	68e0      	ldr	r0, [r4, #12]
 8003c5a:	9b03      	ldr	r3, [sp, #12]
 8003c5c:	4298      	cmp	r0, r3
 8003c5e:	bfb8      	it	lt
 8003c60:	4618      	movlt	r0, r3
 8003c62:	e7a6      	b.n	8003bb2 <_printf_i+0x15e>
 8003c64:	2301      	movs	r3, #1
 8003c66:	4632      	mov	r2, r6
 8003c68:	4649      	mov	r1, r9
 8003c6a:	4640      	mov	r0, r8
 8003c6c:	47d0      	blx	sl
 8003c6e:	3001      	adds	r0, #1
 8003c70:	d09d      	beq.n	8003bae <_printf_i+0x15a>
 8003c72:	3501      	adds	r5, #1
 8003c74:	68e3      	ldr	r3, [r4, #12]
 8003c76:	9903      	ldr	r1, [sp, #12]
 8003c78:	1a5b      	subs	r3, r3, r1
 8003c7a:	42ab      	cmp	r3, r5
 8003c7c:	dcf2      	bgt.n	8003c64 <_printf_i+0x210>
 8003c7e:	e7eb      	b.n	8003c58 <_printf_i+0x204>
 8003c80:	2500      	movs	r5, #0
 8003c82:	f104 0619 	add.w	r6, r4, #25
 8003c86:	e7f5      	b.n	8003c74 <_printf_i+0x220>
 8003c88:	08003f83 	.word	0x08003f83
 8003c8c:	08003f94 	.word	0x08003f94

08003c90 <memmove>:
 8003c90:	4288      	cmp	r0, r1
 8003c92:	b510      	push	{r4, lr}
 8003c94:	eb01 0402 	add.w	r4, r1, r2
 8003c98:	d902      	bls.n	8003ca0 <memmove+0x10>
 8003c9a:	4284      	cmp	r4, r0
 8003c9c:	4623      	mov	r3, r4
 8003c9e:	d807      	bhi.n	8003cb0 <memmove+0x20>
 8003ca0:	1e43      	subs	r3, r0, #1
 8003ca2:	42a1      	cmp	r1, r4
 8003ca4:	d008      	beq.n	8003cb8 <memmove+0x28>
 8003ca6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003caa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003cae:	e7f8      	b.n	8003ca2 <memmove+0x12>
 8003cb0:	4601      	mov	r1, r0
 8003cb2:	4402      	add	r2, r0
 8003cb4:	428a      	cmp	r2, r1
 8003cb6:	d100      	bne.n	8003cba <memmove+0x2a>
 8003cb8:	bd10      	pop	{r4, pc}
 8003cba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003cbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003cc2:	e7f7      	b.n	8003cb4 <memmove+0x24>

08003cc4 <_sbrk_r>:
 8003cc4:	b538      	push	{r3, r4, r5, lr}
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	4d05      	ldr	r5, [pc, #20]	@ (8003ce0 <_sbrk_r+0x1c>)
 8003cca:	4604      	mov	r4, r0
 8003ccc:	4608      	mov	r0, r1
 8003cce:	602b      	str	r3, [r5, #0]
 8003cd0:	f7fd f8d6 	bl	8000e80 <_sbrk>
 8003cd4:	1c43      	adds	r3, r0, #1
 8003cd6:	d102      	bne.n	8003cde <_sbrk_r+0x1a>
 8003cd8:	682b      	ldr	r3, [r5, #0]
 8003cda:	b103      	cbz	r3, 8003cde <_sbrk_r+0x1a>
 8003cdc:	6023      	str	r3, [r4, #0]
 8003cde:	bd38      	pop	{r3, r4, r5, pc}
 8003ce0:	2000100c 	.word	0x2000100c

08003ce4 <memchr>:
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	b510      	push	{r4, lr}
 8003ce8:	b2c9      	uxtb	r1, r1
 8003cea:	4402      	add	r2, r0
 8003cec:	4293      	cmp	r3, r2
 8003cee:	4618      	mov	r0, r3
 8003cf0:	d101      	bne.n	8003cf6 <memchr+0x12>
 8003cf2:	2000      	movs	r0, #0
 8003cf4:	e003      	b.n	8003cfe <memchr+0x1a>
 8003cf6:	7804      	ldrb	r4, [r0, #0]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	428c      	cmp	r4, r1
 8003cfc:	d1f6      	bne.n	8003cec <memchr+0x8>
 8003cfe:	bd10      	pop	{r4, pc}

08003d00 <_realloc_r>:
 8003d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d04:	4607      	mov	r7, r0
 8003d06:	4614      	mov	r4, r2
 8003d08:	460d      	mov	r5, r1
 8003d0a:	b921      	cbnz	r1, 8003d16 <_realloc_r+0x16>
 8003d0c:	4611      	mov	r1, r2
 8003d0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d12:	f7ff bc49 	b.w	80035a8 <_malloc_r>
 8003d16:	b92a      	cbnz	r2, 8003d24 <_realloc_r+0x24>
 8003d18:	f7ff fbdc 	bl	80034d4 <_free_r>
 8003d1c:	4625      	mov	r5, r4
 8003d1e:	4628      	mov	r0, r5
 8003d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d24:	f000 f81a 	bl	8003d5c <_malloc_usable_size_r>
 8003d28:	4284      	cmp	r4, r0
 8003d2a:	4606      	mov	r6, r0
 8003d2c:	d802      	bhi.n	8003d34 <_realloc_r+0x34>
 8003d2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003d32:	d8f4      	bhi.n	8003d1e <_realloc_r+0x1e>
 8003d34:	4621      	mov	r1, r4
 8003d36:	4638      	mov	r0, r7
 8003d38:	f7ff fc36 	bl	80035a8 <_malloc_r>
 8003d3c:	4680      	mov	r8, r0
 8003d3e:	b908      	cbnz	r0, 8003d44 <_realloc_r+0x44>
 8003d40:	4645      	mov	r5, r8
 8003d42:	e7ec      	b.n	8003d1e <_realloc_r+0x1e>
 8003d44:	42b4      	cmp	r4, r6
 8003d46:	4622      	mov	r2, r4
 8003d48:	4629      	mov	r1, r5
 8003d4a:	bf28      	it	cs
 8003d4c:	4632      	movcs	r2, r6
 8003d4e:	f7ff fbb3 	bl	80034b8 <memcpy>
 8003d52:	4629      	mov	r1, r5
 8003d54:	4638      	mov	r0, r7
 8003d56:	f7ff fbbd 	bl	80034d4 <_free_r>
 8003d5a:	e7f1      	b.n	8003d40 <_realloc_r+0x40>

08003d5c <_malloc_usable_size_r>:
 8003d5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d60:	1f18      	subs	r0, r3, #4
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	bfbc      	itt	lt
 8003d66:	580b      	ldrlt	r3, [r1, r0]
 8003d68:	18c0      	addlt	r0, r0, r3
 8003d6a:	4770      	bx	lr

08003d6c <_init>:
 8003d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d6e:	bf00      	nop
 8003d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d72:	bc08      	pop	{r3}
 8003d74:	469e      	mov	lr, r3
 8003d76:	4770      	bx	lr

08003d78 <_fini>:
 8003d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d7a:	bf00      	nop
 8003d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d7e:	bc08      	pop	{r3}
 8003d80:	469e      	mov	lr, r3
 8003d82:	4770      	bx	lr
