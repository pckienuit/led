
led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005548  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  08005654  08005654  00006654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005898  08005898  0000709c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005898  08005898  0000709c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005898  08005898  0000709c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005898  08005898  00006898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800589c  0800589c  0000689c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000009c  20000000  080058a0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001038  2000009c  0800593c  0000709c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010d4  0800593c  000070d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b454  00000000  00000000  000070c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002136  00000000  00000000  00012519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  00014650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a14  00000000  00000000  00015368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000193fa  00000000  00000000  00015d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ea35  00000000  00000000  0002f176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ff33  00000000  00000000  0003dbab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cdade  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040c4  00000000  00000000  000cdb24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000d1be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000009c 	.word	0x2000009c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800563c 	.word	0x0800563c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a0 	.word	0x200000a0
 8000148:	0800563c 	.word	0x0800563c

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 800019e:	2afd      	cmp	r2, #253	@ 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	@ 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_frsub>:
 80002b4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80002b8:	e002      	b.n	80002c0 <__addsf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_fsub>:
 80002bc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080002c0 <__addsf3>:
 80002c0:	0042      	lsls	r2, r0, #1
 80002c2:	bf1f      	itttt	ne
 80002c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002c8:	ea92 0f03 	teqne	r2, r3
 80002cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d4:	d06a      	beq.n	80003ac <__addsf3+0xec>
 80002d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002de:	bfc1      	itttt	gt
 80002e0:	18d2      	addgt	r2, r2, r3
 80002e2:	4041      	eorgt	r1, r0
 80002e4:	4048      	eorgt	r0, r1
 80002e6:	4041      	eorgt	r1, r0
 80002e8:	bfb8      	it	lt
 80002ea:	425b      	neglt	r3, r3
 80002ec:	2b19      	cmp	r3, #25
 80002ee:	bf88      	it	hi
 80002f0:	4770      	bxhi	lr
 80002f2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80002f6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002fa:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80002fe:	bf18      	it	ne
 8000300:	4240      	negne	r0, r0
 8000302:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000306:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800030a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4249      	negne	r1, r1
 8000312:	ea92 0f03 	teq	r2, r3
 8000316:	d03f      	beq.n	8000398 <__addsf3+0xd8>
 8000318:	f1a2 0201 	sub.w	r2, r2, #1
 800031c:	fa41 fc03 	asr.w	ip, r1, r3
 8000320:	eb10 000c 	adds.w	r0, r0, ip
 8000324:	f1c3 0320 	rsb	r3, r3, #32
 8000328:	fa01 f103 	lsl.w	r1, r1, r3
 800032c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000330:	d502      	bpl.n	8000338 <__addsf3+0x78>
 8000332:	4249      	negs	r1, r1
 8000334:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000338:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800033c:	d313      	bcc.n	8000366 <__addsf3+0xa6>
 800033e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000342:	d306      	bcc.n	8000352 <__addsf3+0x92>
 8000344:	0840      	lsrs	r0, r0, #1
 8000346:	ea4f 0131 	mov.w	r1, r1, rrx
 800034a:	f102 0201 	add.w	r2, r2, #1
 800034e:	2afe      	cmp	r2, #254	@ 0xfe
 8000350:	d251      	bcs.n	80003f6 <__addsf3+0x136>
 8000352:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000356:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800035a:	bf08      	it	eq
 800035c:	f020 0001 	biceq.w	r0, r0, #1
 8000360:	ea40 0003 	orr.w	r0, r0, r3
 8000364:	4770      	bx	lr
 8000366:	0049      	lsls	r1, r1, #1
 8000368:	eb40 0000 	adc.w	r0, r0, r0
 800036c:	3a01      	subs	r2, #1
 800036e:	bf28      	it	cs
 8000370:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000374:	d2ed      	bcs.n	8000352 <__addsf3+0x92>
 8000376:	fab0 fc80 	clz	ip, r0
 800037a:	f1ac 0c08 	sub.w	ip, ip, #8
 800037e:	ebb2 020c 	subs.w	r2, r2, ip
 8000382:	fa00 f00c 	lsl.w	r0, r0, ip
 8000386:	bfaa      	itet	ge
 8000388:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800038c:	4252      	neglt	r2, r2
 800038e:	4318      	orrge	r0, r3
 8000390:	bfbc      	itt	lt
 8000392:	40d0      	lsrlt	r0, r2
 8000394:	4318      	orrlt	r0, r3
 8000396:	4770      	bx	lr
 8000398:	f092 0f00 	teq	r2, #0
 800039c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80003a0:	bf06      	itte	eq
 80003a2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80003a6:	3201      	addeq	r2, #1
 80003a8:	3b01      	subne	r3, #1
 80003aa:	e7b5      	b.n	8000318 <__addsf3+0x58>
 80003ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b4:	bf18      	it	ne
 80003b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ba:	d021      	beq.n	8000400 <__addsf3+0x140>
 80003bc:	ea92 0f03 	teq	r2, r3
 80003c0:	d004      	beq.n	80003cc <__addsf3+0x10c>
 80003c2:	f092 0f00 	teq	r2, #0
 80003c6:	bf08      	it	eq
 80003c8:	4608      	moveq	r0, r1
 80003ca:	4770      	bx	lr
 80003cc:	ea90 0f01 	teq	r0, r1
 80003d0:	bf1c      	itt	ne
 80003d2:	2000      	movne	r0, #0
 80003d4:	4770      	bxne	lr
 80003d6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80003da:	d104      	bne.n	80003e6 <__addsf3+0x126>
 80003dc:	0040      	lsls	r0, r0, #1
 80003de:	bf28      	it	cs
 80003e0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80003e4:	4770      	bx	lr
 80003e6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80003ea:	bf3c      	itt	cc
 80003ec:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80003f0:	4770      	bxcc	lr
 80003f2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80003f6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80003fa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003fe:	4770      	bx	lr
 8000400:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000404:	bf16      	itet	ne
 8000406:	4608      	movne	r0, r1
 8000408:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800040c:	4601      	movne	r1, r0
 800040e:	0242      	lsls	r2, r0, #9
 8000410:	bf06      	itte	eq
 8000412:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000416:	ea90 0f01 	teqeq	r0, r1
 800041a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800041e:	4770      	bx	lr

08000420 <__aeabi_ui2f>:
 8000420:	f04f 0300 	mov.w	r3, #0
 8000424:	e004      	b.n	8000430 <__aeabi_i2f+0x8>
 8000426:	bf00      	nop

08000428 <__aeabi_i2f>:
 8000428:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	ea5f 0c00 	movs.w	ip, r0
 8000434:	bf08      	it	eq
 8000436:	4770      	bxeq	lr
 8000438:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 800043c:	4601      	mov	r1, r0
 800043e:	f04f 0000 	mov.w	r0, #0
 8000442:	e01c      	b.n	800047e <__aeabi_l2f+0x2a>

08000444 <__aeabi_ul2f>:
 8000444:	ea50 0201 	orrs.w	r2, r0, r1
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e00a      	b.n	8000468 <__aeabi_l2f+0x14>
 8000452:	bf00      	nop

08000454 <__aeabi_l2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000460:	d502      	bpl.n	8000468 <__aeabi_l2f+0x14>
 8000462:	4240      	negs	r0, r0
 8000464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000468:	ea5f 0c01 	movs.w	ip, r1
 800046c:	bf02      	ittt	eq
 800046e:	4684      	moveq	ip, r0
 8000470:	4601      	moveq	r1, r0
 8000472:	2000      	moveq	r0, #0
 8000474:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000478:	bf08      	it	eq
 800047a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800047e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000482:	fabc f28c 	clz	r2, ip
 8000486:	3a08      	subs	r2, #8
 8000488:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800048c:	db10      	blt.n	80004b0 <__aeabi_l2f+0x5c>
 800048e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000492:	4463      	add	r3, ip
 8000494:	fa00 fc02 	lsl.w	ip, r0, r2
 8000498:	f1c2 0220 	rsb	r2, r2, #32
 800049c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	eb43 0002 	adc.w	r0, r3, r2
 80004a8:	bf08      	it	eq
 80004aa:	f020 0001 	biceq.w	r0, r0, #1
 80004ae:	4770      	bx	lr
 80004b0:	f102 0220 	add.w	r2, r2, #32
 80004b4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b8:	f1c2 0220 	rsb	r2, r2, #32
 80004bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004c0:	fa21 f202 	lsr.w	r2, r1, r2
 80004c4:	eb43 0002 	adc.w	r0, r3, r2
 80004c8:	bf08      	it	eq
 80004ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004ce:	4770      	bx	lr

080004d0 <__gesf2>:
 80004d0:	f04f 3cff 	mov.w	ip, #4294967295
 80004d4:	e006      	b.n	80004e4 <__cmpsf2+0x4>
 80004d6:	bf00      	nop

080004d8 <__lesf2>:
 80004d8:	f04f 0c01 	mov.w	ip, #1
 80004dc:	e002      	b.n	80004e4 <__cmpsf2+0x4>
 80004de:	bf00      	nop

080004e0 <__cmpsf2>:
 80004e0:	f04f 0c01 	mov.w	ip, #1
 80004e4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80004ec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80004f0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80004f4:	bf18      	it	ne
 80004f6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80004fa:	d011      	beq.n	8000520 <__cmpsf2+0x40>
 80004fc:	b001      	add	sp, #4
 80004fe:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000502:	bf18      	it	ne
 8000504:	ea90 0f01 	teqne	r0, r1
 8000508:	bf58      	it	pl
 800050a:	ebb2 0003 	subspl.w	r0, r2, r3
 800050e:	bf88      	it	hi
 8000510:	17c8      	asrhi	r0, r1, #31
 8000512:	bf38      	it	cc
 8000514:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000518:	bf18      	it	ne
 800051a:	f040 0001 	orrne.w	r0, r0, #1
 800051e:	4770      	bx	lr
 8000520:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000524:	d102      	bne.n	800052c <__cmpsf2+0x4c>
 8000526:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800052a:	d105      	bne.n	8000538 <__cmpsf2+0x58>
 800052c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000530:	d1e4      	bne.n	80004fc <__cmpsf2+0x1c>
 8000532:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000536:	d0e1      	beq.n	80004fc <__cmpsf2+0x1c>
 8000538:	f85d 0b04 	ldr.w	r0, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <__aeabi_cfrcmple>:
 8000540:	4684      	mov	ip, r0
 8000542:	4608      	mov	r0, r1
 8000544:	4661      	mov	r1, ip
 8000546:	e7ff      	b.n	8000548 <__aeabi_cfcmpeq>

08000548 <__aeabi_cfcmpeq>:
 8000548:	b50f      	push	{r0, r1, r2, r3, lr}
 800054a:	f7ff ffc9 	bl	80004e0 <__cmpsf2>
 800054e:	2800      	cmp	r0, #0
 8000550:	bf48      	it	mi
 8000552:	f110 0f00 	cmnmi.w	r0, #0
 8000556:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000558 <__aeabi_fcmpeq>:
 8000558:	f84d ed08 	str.w	lr, [sp, #-8]!
 800055c:	f7ff fff4 	bl	8000548 <__aeabi_cfcmpeq>
 8000560:	bf0c      	ite	eq
 8000562:	2001      	moveq	r0, #1
 8000564:	2000      	movne	r0, #0
 8000566:	f85d fb08 	ldr.w	pc, [sp], #8
 800056a:	bf00      	nop

0800056c <__aeabi_fcmplt>:
 800056c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000570:	f7ff ffea 	bl	8000548 <__aeabi_cfcmpeq>
 8000574:	bf34      	ite	cc
 8000576:	2001      	movcc	r0, #1
 8000578:	2000      	movcs	r0, #0
 800057a:	f85d fb08 	ldr.w	pc, [sp], #8
 800057e:	bf00      	nop

08000580 <__aeabi_fcmple>:
 8000580:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000584:	f7ff ffe0 	bl	8000548 <__aeabi_cfcmpeq>
 8000588:	bf94      	ite	ls
 800058a:	2001      	movls	r0, #1
 800058c:	2000      	movhi	r0, #0
 800058e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000592:	bf00      	nop

08000594 <__aeabi_fcmpge>:
 8000594:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000598:	f7ff ffd2 	bl	8000540 <__aeabi_cfrcmple>
 800059c:	bf94      	ite	ls
 800059e:	2001      	movls	r0, #1
 80005a0:	2000      	movhi	r0, #0
 80005a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005a6:	bf00      	nop

080005a8 <__aeabi_fcmpgt>:
 80005a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ac:	f7ff ffc8 	bl	8000540 <__aeabi_cfrcmple>
 80005b0:	bf34      	ite	cc
 80005b2:	2001      	movcc	r0, #1
 80005b4:	2000      	movcs	r0, #0
 80005b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ba:	bf00      	nop

080005bc <__aeabi_f2uiz>:
 80005bc:	0042      	lsls	r2, r0, #1
 80005be:	d20e      	bcs.n	80005de <__aeabi_f2uiz+0x22>
 80005c0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80005c4:	d30b      	bcc.n	80005de <__aeabi_f2uiz+0x22>
 80005c6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80005ca:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80005ce:	d409      	bmi.n	80005e4 <__aeabi_f2uiz+0x28>
 80005d0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80005d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80005d8:	fa23 f002 	lsr.w	r0, r3, r2
 80005dc:	4770      	bx	lr
 80005de:	f04f 0000 	mov.w	r0, #0
 80005e2:	4770      	bx	lr
 80005e4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80005e8:	d101      	bne.n	80005ee <__aeabi_f2uiz+0x32>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	d102      	bne.n	80005f4 <__aeabi_f2uiz+0x38>
 80005ee:	f04f 30ff 	mov.w	r0, #4294967295
 80005f2:	4770      	bx	lr
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <LCD_Parallel_Init>:
#include "lcd_parallel.h"
#include <string.h>
#include <stdio.h>

void LCD_Parallel_Init(void) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
    // Initialize GPIO pins
    LCD_Parallel_GPIO_Init();
 8000600:	f000 f840 	bl	8000684 <LCD_Parallel_GPIO_Init>
    
    // Wait for LCD to power up completely
    HAL_Delay(100);
 8000604:	2064      	movs	r0, #100	@ 0x64
 8000606:	f001 fa2f 	bl	8001a68 <HAL_Delay>
    
    // Set RS = 0 (command mode)
    HAL_GPIO_WritePin(LCD_RS_PORT, LCD_RS_PIN, GPIO_PIN_RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	2101      	movs	r1, #1
 800060e:	481c      	ldr	r0, [pc, #112]	@ (8000680 <LCD_Parallel_Init+0x84>)
 8000610:	f002 fa98 	bl	8002b44 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_E_PORT, LCD_E_PIN, GPIO_PIN_RESET);
 8000614:	2200      	movs	r2, #0
 8000616:	2102      	movs	r1, #2
 8000618:	4819      	ldr	r0, [pc, #100]	@ (8000680 <LCD_Parallel_Init+0x84>)
 800061a:	f002 fa93 	bl	8002b44 <HAL_GPIO_WritePin>
    
    // Initialize LCD in 4-bit mode according to datasheet timing
    // First: Send 0x3 three times to establish 8-bit communication
    LCD_Parallel_Write4Bits(0x03);
 800061e:	2003      	movs	r0, #3
 8000620:	f000 f90a 	bl	8000838 <LCD_Parallel_Write4Bits>
    HAL_Delay(10);  // Wait > 4.1ms
 8000624:	200a      	movs	r0, #10
 8000626:	f001 fa1f 	bl	8001a68 <HAL_Delay>
    
    LCD_Parallel_Write4Bits(0x03);
 800062a:	2003      	movs	r0, #3
 800062c:	f000 f904 	bl	8000838 <LCD_Parallel_Write4Bits>
    HAL_Delay(5);   // Wait > 100us
 8000630:	2005      	movs	r0, #5
 8000632:	f001 fa19 	bl	8001a68 <HAL_Delay>
    
    LCD_Parallel_Write4Bits(0x03);
 8000636:	2003      	movs	r0, #3
 8000638:	f000 f8fe 	bl	8000838 <LCD_Parallel_Write4Bits>
    HAL_Delay(5);   // Wait > 100us
 800063c:	2005      	movs	r0, #5
 800063e:	f001 fa13 	bl	8001a68 <HAL_Delay>
    
    // Switch to 4-bit mode
    LCD_Parallel_Write4Bits(0x02);
 8000642:	2002      	movs	r0, #2
 8000644:	f000 f8f8 	bl	8000838 <LCD_Parallel_Write4Bits>
    HAL_Delay(5);
 8000648:	2005      	movs	r0, #5
 800064a:	f001 fa0d 	bl	8001a68 <HAL_Delay>
    
    // Function set: 4-bit, 2 line, 5x8 dots
    LCD_Parallel_SendCommand(LCD_FUNCTION_SET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
 800064e:	2028      	movs	r0, #40	@ 0x28
 8000650:	f000 f8af 	bl	80007b2 <LCD_Parallel_SendCommand>
    HAL_Delay(5);
 8000654:	2005      	movs	r0, #5
 8000656:	f001 fa07 	bl	8001a68 <HAL_Delay>
    
    // Display control: display on, cursor off, blink off
    LCD_Parallel_SendCommand(LCD_DISPLAY_CONTROL | LCD_DISPLAY_ON | LCD_CURSOR_OFF | LCD_BLINK_OFF);
 800065a:	200c      	movs	r0, #12
 800065c:	f000 f8a9 	bl	80007b2 <LCD_Parallel_SendCommand>
    HAL_Delay(5);
 8000660:	2005      	movs	r0, #5
 8000662:	f001 fa01 	bl	8001a68 <HAL_Delay>
    
    // Clear display
    LCD_Parallel_Clear();
 8000666:	f000 f85b 	bl	8000720 <LCD_Parallel_Clear>
    HAL_Delay(5);
 800066a:	2005      	movs	r0, #5
 800066c:	f001 f9fc 	bl	8001a68 <HAL_Delay>
    
    // Entry mode: left to right, no shift
    LCD_Parallel_SendCommand(LCD_ENTRY_MODE_SET | LCD_ENTRY_LEFT | LCD_ENTRY_SHIFT_DECREMENT);
 8000670:	2006      	movs	r0, #6
 8000672:	f000 f89e 	bl	80007b2 <LCD_Parallel_SendCommand>
    HAL_Delay(5);
 8000676:	2005      	movs	r0, #5
 8000678:	f001 f9f6 	bl	8001a68 <HAL_Delay>
}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40010c00 	.word	0x40010c00

08000684 <LCD_Parallel_GPIO_Init>:

void LCD_Parallel_GPIO_Init(void) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068a:	f107 0308 	add.w	r3, r7, #8
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
    
    // Enable GPIOB clock
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000698:	4b1f      	ldr	r3, [pc, #124]	@ (8000718 <LCD_Parallel_GPIO_Init+0x94>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	4a1e      	ldr	r2, [pc, #120]	@ (8000718 <LCD_Parallel_GPIO_Init+0x94>)
 800069e:	f043 0308 	orr.w	r3, r3, #8
 80006a2:	6193      	str	r3, [r2, #24]
 80006a4:	4b1c      	ldr	r3, [pc, #112]	@ (8000718 <LCD_Parallel_GPIO_Init+0x94>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	f003 0308 	and.w	r3, r3, #8
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	687b      	ldr	r3, [r7, #4]
    
    // Configure RS pin (PB0)
    GPIO_InitStruct.Pin = LCD_RS_PIN;
 80006b0:	2301      	movs	r3, #1
 80006b2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b4:	2301      	movs	r3, #1
 80006b6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006bc:	2302      	movs	r3, #2
 80006be:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LCD_RS_PORT, &GPIO_InitStruct);
 80006c0:	f107 0308 	add.w	r3, r7, #8
 80006c4:	4619      	mov	r1, r3
 80006c6:	4815      	ldr	r0, [pc, #84]	@ (800071c <LCD_Parallel_GPIO_Init+0x98>)
 80006c8:	f002 f8b8 	bl	800283c <HAL_GPIO_Init>
    
    // Configure E pin (PB1)
    GPIO_InitStruct.Pin = LCD_E_PIN;
 80006cc:	2302      	movs	r3, #2
 80006ce:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(LCD_E_PORT, &GPIO_InitStruct);
 80006d0:	f107 0308 	add.w	r3, r7, #8
 80006d4:	4619      	mov	r1, r3
 80006d6:	4811      	ldr	r0, [pc, #68]	@ (800071c <LCD_Parallel_GPIO_Init+0x98>)
 80006d8:	f002 f8b0 	bl	800283c <HAL_GPIO_Init>
    
    // Configure Data pins (PB12, PB13, PB14, PB15)
    GPIO_InitStruct.Pin = LCD_D4_PIN | LCD_D5_PIN | LCD_D6_PIN | LCD_D7_PIN;
 80006dc:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80006e0:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(LCD_D4_PORT, &GPIO_InitStruct);
 80006e2:	f107 0308 	add.w	r3, r7, #8
 80006e6:	4619      	mov	r1, r3
 80006e8:	480c      	ldr	r0, [pc, #48]	@ (800071c <LCD_Parallel_GPIO_Init+0x98>)
 80006ea:	f002 f8a7 	bl	800283c <HAL_GPIO_Init>
    
    // Initialize all pins to LOW
    HAL_GPIO_WritePin(LCD_RS_PORT, LCD_RS_PIN, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2101      	movs	r1, #1
 80006f2:	480a      	ldr	r0, [pc, #40]	@ (800071c <LCD_Parallel_GPIO_Init+0x98>)
 80006f4:	f002 fa26 	bl	8002b44 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_E_PORT, LCD_E_PIN, GPIO_PIN_RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2102      	movs	r1, #2
 80006fc:	4807      	ldr	r0, [pc, #28]	@ (800071c <LCD_Parallel_GPIO_Init+0x98>)
 80006fe:	f002 fa21 	bl	8002b44 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D4_PORT, LCD_D4_PIN | LCD_D5_PIN | LCD_D6_PIN | LCD_D7_PIN, GPIO_PIN_RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000708:	4804      	ldr	r0, [pc, #16]	@ (800071c <LCD_Parallel_GPIO_Init+0x98>)
 800070a:	f002 fa1b 	bl	8002b44 <HAL_GPIO_WritePin>
}
 800070e:	bf00      	nop
 8000710:	3718      	adds	r7, #24
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40021000 	.word	0x40021000
 800071c:	40010c00 	.word	0x40010c00

08000720 <LCD_Parallel_Clear>:

void LCD_Parallel_Clear(void) {
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
    LCD_Parallel_SendCommand(LCD_CLEAR_DISPLAY);
 8000724:	2001      	movs	r0, #1
 8000726:	f000 f844 	bl	80007b2 <LCD_Parallel_SendCommand>
    HAL_Delay(2);
 800072a:	2002      	movs	r0, #2
 800072c:	f001 f99c 	bl	8001a68 <HAL_Delay>
}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}

08000734 <LCD_Parallel_SetCursor>:

void LCD_Parallel_SetCursor(uint8_t row, uint8_t col) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	460a      	mov	r2, r1
 800073e:	71fb      	strb	r3, [r7, #7]
 8000740:	4613      	mov	r3, r2
 8000742:	71bb      	strb	r3, [r7, #6]
    uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 8000744:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <LCD_Parallel_SetCursor+0x50>)
 8000746:	60fb      	str	r3, [r7, #12]
    if (row >= LCD_ROWS) {
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	2b01      	cmp	r3, #1
 800074c:	d901      	bls.n	8000752 <LCD_Parallel_SetCursor+0x1e>
        row = LCD_ROWS - 1;
 800074e:	2301      	movs	r3, #1
 8000750:	71fb      	strb	r3, [r7, #7]
    }
    if (col >= LCD_COLS) {
 8000752:	79bb      	ldrb	r3, [r7, #6]
 8000754:	2b0f      	cmp	r3, #15
 8000756:	d901      	bls.n	800075c <LCD_Parallel_SetCursor+0x28>
        col = LCD_COLS - 1;
 8000758:	230f      	movs	r3, #15
 800075a:	71bb      	strb	r3, [r7, #6]
    }
    LCD_Parallel_SendCommand(LCD_SET_DDRAM_ADDR | (col + row_offsets[row]));
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	3310      	adds	r3, #16
 8000760:	443b      	add	r3, r7
 8000762:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8000766:	79bb      	ldrb	r3, [r7, #6]
 8000768:	4413      	add	r3, r2
 800076a:	b2db      	uxtb	r3, r3
 800076c:	b25b      	sxtb	r3, r3
 800076e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000772:	b25b      	sxtb	r3, r3
 8000774:	b2db      	uxtb	r3, r3
 8000776:	4618      	mov	r0, r3
 8000778:	f000 f81b 	bl	80007b2 <LCD_Parallel_SendCommand>
}
 800077c:	bf00      	nop
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	54144000 	.word	0x54144000

08000788 <LCD_Parallel_Print>:

void LCD_Parallel_Print(char *str) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000790:	e006      	b.n	80007a0 <LCD_Parallel_Print+0x18>
        LCD_Parallel_SendData(*str++);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	1c5a      	adds	r2, r3, #1
 8000796:	607a      	str	r2, [r7, #4]
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	4618      	mov	r0, r3
 800079c:	f000 f817 	bl	80007ce <LCD_Parallel_SendData>
    while (*str) {
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d1f4      	bne.n	8000792 <LCD_Parallel_Print+0xa>
    }
}
 80007a8:	bf00      	nop
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <LCD_Parallel_SendCommand>:

void LCD_Parallel_WriteCustomChar(uint8_t location) {
    LCD_Parallel_SendData(location);
}

void LCD_Parallel_SendCommand(uint8_t cmd) {
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b082      	sub	sp, #8
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	4603      	mov	r3, r0
 80007ba:	71fb      	strb	r3, [r7, #7]
    LCD_Parallel_Send(cmd, 0);
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	2100      	movs	r1, #0
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 f813 	bl	80007ec <LCD_Parallel_Send>
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <LCD_Parallel_SendData>:

void LCD_Parallel_SendData(uint8_t data) {
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b082      	sub	sp, #8
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	4603      	mov	r3, r0
 80007d6:	71fb      	strb	r3, [r7, #7]
    LCD_Parallel_Send(data, 1);
 80007d8:	79fb      	ldrb	r3, [r7, #7]
 80007da:	2101      	movs	r1, #1
 80007dc:	4618      	mov	r0, r3
 80007de:	f000 f805 	bl	80007ec <LCD_Parallel_Send>
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
	...

080007ec <LCD_Parallel_Send>:

void LCD_Parallel_Send(uint8_t data, uint8_t rs) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	460a      	mov	r2, r1
 80007f6:	71fb      	strb	r3, [r7, #7]
 80007f8:	4613      	mov	r3, r2
 80007fa:	71bb      	strb	r3, [r7, #6]
    // Set RS pin (0 = command, 1 = data)
    HAL_GPIO_WritePin(LCD_RS_PORT, LCD_RS_PIN, rs ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80007fc:	79bb      	ldrb	r3, [r7, #6]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	bf14      	ite	ne
 8000802:	2301      	movne	r3, #1
 8000804:	2300      	moveq	r3, #0
 8000806:	b2db      	uxtb	r3, r3
 8000808:	461a      	mov	r2, r3
 800080a:	2101      	movs	r1, #1
 800080c:	4809      	ldr	r0, [pc, #36]	@ (8000834 <LCD_Parallel_Send+0x48>)
 800080e:	f002 f999 	bl	8002b44 <HAL_GPIO_WritePin>
    
    // Send upper 4 bits
    LCD_Parallel_Write4Bits(data >> 4);
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	091b      	lsrs	r3, r3, #4
 8000816:	b2db      	uxtb	r3, r3
 8000818:	4618      	mov	r0, r3
 800081a:	f000 f80d 	bl	8000838 <LCD_Parallel_Write4Bits>
    
    // Send lower 4 bits
    LCD_Parallel_Write4Bits(data & 0x0F);
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	f003 030f 	and.w	r3, r3, #15
 8000824:	b2db      	uxtb	r3, r3
 8000826:	4618      	mov	r0, r3
 8000828:	f000 f806 	bl	8000838 <LCD_Parallel_Write4Bits>
}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40010c00 	.word	0x40010c00

08000838 <LCD_Parallel_Write4Bits>:

void LCD_Parallel_Write4Bits(uint8_t data) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	71fb      	strb	r3, [r7, #7]
    // Set data on D4-D7 pins (PB12-PB15)
    HAL_GPIO_WritePin(LCD_D4_PORT, LCD_D4_PIN, (data & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	f003 0301 	and.w	r3, r3, #1
 8000848:	b2db      	uxtb	r3, r3
 800084a:	461a      	mov	r2, r3
 800084c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000850:	4816      	ldr	r0, [pc, #88]	@ (80008ac <LCD_Parallel_Write4Bits+0x74>)
 8000852:	f002 f977 	bl	8002b44 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_PORT, LCD_D5_PIN, (data & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	105b      	asrs	r3, r3, #1
 800085a:	b2db      	uxtb	r3, r3
 800085c:	f003 0301 	and.w	r3, r3, #1
 8000860:	b2db      	uxtb	r3, r3
 8000862:	461a      	mov	r2, r3
 8000864:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000868:	4810      	ldr	r0, [pc, #64]	@ (80008ac <LCD_Parallel_Write4Bits+0x74>)
 800086a:	f002 f96b 	bl	8002b44 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_PORT, LCD_D6_PIN, (data & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	109b      	asrs	r3, r3, #2
 8000872:	b2db      	uxtb	r3, r3
 8000874:	f003 0301 	and.w	r3, r3, #1
 8000878:	b2db      	uxtb	r3, r3
 800087a:	461a      	mov	r2, r3
 800087c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000880:	480a      	ldr	r0, [pc, #40]	@ (80008ac <LCD_Parallel_Write4Bits+0x74>)
 8000882:	f002 f95f 	bl	8002b44 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_PORT, LCD_D7_PIN, (data & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	10db      	asrs	r3, r3, #3
 800088a:	b2db      	uxtb	r3, r3
 800088c:	f003 0301 	and.w	r3, r3, #1
 8000890:	b2db      	uxtb	r3, r3
 8000892:	461a      	mov	r2, r3
 8000894:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000898:	4804      	ldr	r0, [pc, #16]	@ (80008ac <LCD_Parallel_Write4Bits+0x74>)
 800089a:	f002 f953 	bl	8002b44 <HAL_GPIO_WritePin>
    
    // Pulse Enable pin
    LCD_Parallel_EnablePulse();
 800089e:	f000 f807 	bl	80008b0 <LCD_Parallel_EnablePulse>
}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40010c00 	.word	0x40010c00

080008b0 <LCD_Parallel_EnablePulse>:

void LCD_Parallel_EnablePulse(void) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LCD_E_PORT, LCD_E_PIN, GPIO_PIN_SET);
 80008b6:	2201      	movs	r2, #1
 80008b8:	2102      	movs	r1, #2
 80008ba:	4810      	ldr	r0, [pc, #64]	@ (80008fc <LCD_Parallel_EnablePulse+0x4c>)
 80008bc:	f002 f942 	bl	8002b44 <HAL_GPIO_WritePin>
    
    // Enable pulse width (minimum 450ns, loop delay)
    for(volatile int i = 0; i < 50; i++);
 80008c0:	2300      	movs	r3, #0
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	e002      	b.n	80008cc <LCD_Parallel_EnablePulse+0x1c>
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	3301      	adds	r3, #1
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2b31      	cmp	r3, #49	@ 0x31
 80008d0:	ddf9      	ble.n	80008c6 <LCD_Parallel_EnablePulse+0x16>
    
    HAL_GPIO_WritePin(LCD_E_PORT, LCD_E_PIN, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2102      	movs	r1, #2
 80008d6:	4809      	ldr	r0, [pc, #36]	@ (80008fc <LCD_Parallel_EnablePulse+0x4c>)
 80008d8:	f002 f934 	bl	8002b44 <HAL_GPIO_WritePin>
    
    // Commands need > 37us to settle  
    for(volatile int i = 0; i < 1000; i++);
 80008dc:	2300      	movs	r3, #0
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	e002      	b.n	80008e8 <LCD_Parallel_EnablePulse+0x38>
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	3301      	adds	r3, #1
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80008ee:	dbf8      	blt.n	80008e2 <LCD_Parallel_EnablePulse+0x32>
}
 80008f0:	bf00      	nop
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40010c00 	.word	0x40010c00

08000900 <int_to_string>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Function to convert integer to string
char* int_to_string(int num, char* str) {
 8000900:	b480      	push	{r7}
 8000902:	b089      	sub	sp, #36	@ 0x24
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	6039      	str	r1, [r7, #0]
    int i = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	61fb      	str	r3, [r7, #28]
    int is_negative = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	61bb      	str	r3, [r7, #24]
    
    // Handle negative numbers
    if (num < 0) {
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2b00      	cmp	r3, #0
 8000916:	da04      	bge.n	8000922 <int_to_string+0x22>
        is_negative = 1;
 8000918:	2301      	movs	r3, #1
 800091a:	61bb      	str	r3, [r7, #24]
        num = -num;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	425b      	negs	r3, r3
 8000920:	607b      	str	r3, [r7, #4]
    }
    
    // Handle zero
    if (num == 0) {
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d12c      	bne.n	8000982 <int_to_string+0x82>
        str[i++] = '0';
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	1c5a      	adds	r2, r3, #1
 800092c:	61fa      	str	r2, [r7, #28]
 800092e:	461a      	mov	r2, r3
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	4413      	add	r3, r2
 8000934:	2230      	movs	r2, #48	@ 0x30
 8000936:	701a      	strb	r2, [r3, #0]
        str[i] = '\0';
 8000938:	69fb      	ldr	r3, [r7, #28]
 800093a:	683a      	ldr	r2, [r7, #0]
 800093c:	4413      	add	r3, r2
 800093e:	2200      	movs	r2, #0
 8000940:	701a      	strb	r2, [r3, #0]
        return str;
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	e053      	b.n	80009ee <int_to_string+0xee>
    }
    
    // Convert number to string in reverse order
    while (num > 0) {
        str[i++] = num % 10 + '0';
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	4b2b      	ldr	r3, [pc, #172]	@ (80009f8 <int_to_string+0xf8>)
 800094a:	fb83 1302 	smull	r1, r3, r3, r2
 800094e:	1099      	asrs	r1, r3, #2
 8000950:	17d3      	asrs	r3, r2, #31
 8000952:	1ac9      	subs	r1, r1, r3
 8000954:	460b      	mov	r3, r1
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	440b      	add	r3, r1
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	1ad1      	subs	r1, r2, r3
 800095e:	b2ca      	uxtb	r2, r1
 8000960:	69fb      	ldr	r3, [r7, #28]
 8000962:	1c59      	adds	r1, r3, #1
 8000964:	61f9      	str	r1, [r7, #28]
 8000966:	4619      	mov	r1, r3
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	440b      	add	r3, r1
 800096c:	3230      	adds	r2, #48	@ 0x30
 800096e:	b2d2      	uxtb	r2, r2
 8000970:	701a      	strb	r2, [r3, #0]
        num = num / 10;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4a20      	ldr	r2, [pc, #128]	@ (80009f8 <int_to_string+0xf8>)
 8000976:	fb82 1203 	smull	r1, r2, r2, r3
 800097a:	1092      	asrs	r2, r2, #2
 800097c:	17db      	asrs	r3, r3, #31
 800097e:	1ad3      	subs	r3, r2, r3
 8000980:	607b      	str	r3, [r7, #4]
    while (num > 0) {
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2b00      	cmp	r3, #0
 8000986:	dcde      	bgt.n	8000946 <int_to_string+0x46>
    }
    
    // Add negative sign if needed
    if (is_negative) {
 8000988:	69bb      	ldr	r3, [r7, #24]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d007      	beq.n	800099e <int_to_string+0x9e>
        str[i++] = '-';
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	1c5a      	adds	r2, r3, #1
 8000992:	61fa      	str	r2, [r7, #28]
 8000994:	461a      	mov	r2, r3
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	4413      	add	r3, r2
 800099a:	222d      	movs	r2, #45	@ 0x2d
 800099c:	701a      	strb	r2, [r3, #0]
    }
    
    // Reverse the string
    int start = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]
    int end = i - 1;
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	3b01      	subs	r3, #1
 80009a6:	613b      	str	r3, [r7, #16]
    while (start < end) {
 80009a8:	e017      	b.n	80009da <int_to_string+0xda>
        char temp = str[start];
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	683a      	ldr	r2, [r7, #0]
 80009ae:	4413      	add	r3, r2
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	73fb      	strb	r3, [r7, #15]
        str[start] = str[end];
 80009b4:	693b      	ldr	r3, [r7, #16]
 80009b6:	683a      	ldr	r2, [r7, #0]
 80009b8:	441a      	add	r2, r3
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	6839      	ldr	r1, [r7, #0]
 80009be:	440b      	add	r3, r1
 80009c0:	7812      	ldrb	r2, [r2, #0]
 80009c2:	701a      	strb	r2, [r3, #0]
        str[end] = temp;
 80009c4:	693b      	ldr	r3, [r7, #16]
 80009c6:	683a      	ldr	r2, [r7, #0]
 80009c8:	4413      	add	r3, r2
 80009ca:	7bfa      	ldrb	r2, [r7, #15]
 80009cc:	701a      	strb	r2, [r3, #0]
        start++;
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	3301      	adds	r3, #1
 80009d2:	617b      	str	r3, [r7, #20]
        end--;
 80009d4:	693b      	ldr	r3, [r7, #16]
 80009d6:	3b01      	subs	r3, #1
 80009d8:	613b      	str	r3, [r7, #16]
    while (start < end) {
 80009da:	697a      	ldr	r2, [r7, #20]
 80009dc:	693b      	ldr	r3, [r7, #16]
 80009de:	429a      	cmp	r2, r3
 80009e0:	dbe3      	blt.n	80009aa <int_to_string+0xaa>
    }
    
    // Add null terminator
    str[i] = '\0';
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	683a      	ldr	r2, [r7, #0]
 80009e6:	4413      	add	r3, r2
 80009e8:	2200      	movs	r2, #0
 80009ea:	701a      	strb	r2, [r3, #0]
    return str;
 80009ec:	683b      	ldr	r3, [r7, #0]
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3724      	adds	r7, #36	@ 0x24
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bc80      	pop	{r7}
 80009f6:	4770      	bx	lr
 80009f8:	66666667 	.word	0x66666667

080009fc <HAL_TIM_PWM_PulseFinishedCallback>:
// Color and speed control
volatile int current_color = COLOR_BLUE;  // Start with blue
volatile int current_speed = 5;           // Speed from 1 (slow) to 10 (fast)
volatile int current_brightness = 50;     // Brightness from 1 (dim) to 100 (bright)

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8000a04:	2100      	movs	r1, #0
 8000a06:	4805      	ldr	r0, [pc, #20]	@ (8000a1c <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000a08:	f002 ff92 	bl	8003930 <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;
 8000a0c:	4b04      	ldr	r3, [pc, #16]	@ (8000a20 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000a0e:	2201      	movs	r2, #1
 8000a10:	601a      	str	r2, [r3, #0]
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	200000e8 	.word	0x200000e8
 8000a20:	20000358 	.word	0x20000358

08000a24 <Keypad_Init>:

// Keypad functions
void Keypad_Init(void) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b088      	sub	sp, #32
 8000a28:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2a:	f107 0308 	add.w	r3, r7, #8
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]

    // Enable GPIOA clock
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a38:	4b2b      	ldr	r3, [pc, #172]	@ (8000ae8 <Keypad_Init+0xc4>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	4a2a      	ldr	r2, [pc, #168]	@ (8000ae8 <Keypad_Init+0xc4>)
 8000a3e:	f043 0304 	orr.w	r3, r3, #4
 8000a42:	6193      	str	r3, [r2, #24]
 8000a44:	4b28      	ldr	r3, [pc, #160]	@ (8000ae8 <Keypad_Init+0xc4>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	f003 0304 	and.w	r3, r3, #4
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	687b      	ldr	r3, [r7, #4]

    // Configure row pins as output
    for(int i = 0; i < KEYPAD_ROWS; i++) {
 8000a50:	2300      	movs	r3, #0
 8000a52:	61fb      	str	r3, [r7, #28]
 8000a54:	e023      	b.n	8000a9e <Keypad_Init+0x7a>
        GPIO_InitStruct.Pin = keypad_row_pins[i];
 8000a56:	4a25      	ldr	r2, [pc, #148]	@ (8000aec <Keypad_Init+0xc8>)
 8000a58:	69fb      	ldr	r3, [r7, #28]
 8000a5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a5e:	60bb      	str	r3, [r7, #8]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(keypad_row_ports[i], &GPIO_InitStruct);
 8000a6c:	4a20      	ldr	r2, [pc, #128]	@ (8000af0 <Keypad_Init+0xcc>)
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a74:	f107 0208 	add.w	r2, r7, #8
 8000a78:	4611      	mov	r1, r2
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f001 fede 	bl	800283c <HAL_GPIO_Init>
        HAL_GPIO_WritePin(keypad_row_ports[i], keypad_row_pins[i], GPIO_PIN_SET);
 8000a80:	4a1b      	ldr	r2, [pc, #108]	@ (8000af0 <Keypad_Init+0xcc>)
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a88:	4a18      	ldr	r2, [pc, #96]	@ (8000aec <Keypad_Init+0xc8>)
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a90:	2201      	movs	r2, #1
 8000a92:	4619      	mov	r1, r3
 8000a94:	f002 f856 	bl	8002b44 <HAL_GPIO_WritePin>
    for(int i = 0; i < KEYPAD_ROWS; i++) {
 8000a98:	69fb      	ldr	r3, [r7, #28]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	61fb      	str	r3, [r7, #28]
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	2b03      	cmp	r3, #3
 8000aa2:	ddd8      	ble.n	8000a56 <Keypad_Init+0x32>
    }

    // Configure column pins as input with pull-up
    for(int i = 0; i < KEYPAD_COLS; i++) {
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61bb      	str	r3, [r7, #24]
 8000aa8:	e015      	b.n	8000ad6 <Keypad_Init+0xb2>
        GPIO_InitStruct.Pin = keypad_col_pins[i];
 8000aaa:	4a12      	ldr	r2, [pc, #72]	@ (8000af4 <Keypad_Init+0xd0>)
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ab2:	60bb      	str	r3, [r7, #8]
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	613b      	str	r3, [r7, #16]
        HAL_GPIO_Init(keypad_col_ports[i], &GPIO_InitStruct);
 8000abc:	4a0e      	ldr	r2, [pc, #56]	@ (8000af8 <Keypad_Init+0xd4>)
 8000abe:	69bb      	ldr	r3, [r7, #24]
 8000ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ac4:	f107 0208 	add.w	r2, r7, #8
 8000ac8:	4611      	mov	r1, r2
 8000aca:	4618      	mov	r0, r3
 8000acc:	f001 feb6 	bl	800283c <HAL_GPIO_Init>
    for(int i = 0; i < KEYPAD_COLS; i++) {
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	61bb      	str	r3, [r7, #24]
 8000ad6:	69bb      	ldr	r3, [r7, #24]
 8000ad8:	2b03      	cmp	r3, #3
 8000ada:	dde6      	ble.n	8000aaa <Keypad_Init+0x86>
    }
}
 8000adc:	bf00      	nop
 8000ade:	bf00      	nop
 8000ae0:	3720      	adds	r7, #32
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	20000010 	.word	0x20000010
 8000af0:	20000000 	.word	0x20000000
 8000af4:	20000028 	.word	0x20000028
 8000af8:	20000018 	.word	0x20000018

08000afc <Set_LED>:
            // Do nothing for problematic keys and others
            break;
    }
}

void Set_LED (int LEDnum, int Red, int Green, int Blue) {
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
 8000b08:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	b2d9      	uxtb	r1, r3
 8000b0e:	4a10      	ldr	r2, [pc, #64]	@ (8000b50 <Set_LED+0x54>)
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	b2d9      	uxtb	r1, r3
 8000b1a:	4a0d      	ldr	r2, [pc, #52]	@ (8000b50 <Set_LED+0x54>)
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	009b      	lsls	r3, r3, #2
 8000b20:	4413      	add	r3, r2
 8000b22:	460a      	mov	r2, r1
 8000b24:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8000b26:	68bb      	ldr	r3, [r7, #8]
 8000b28:	b2d9      	uxtb	r1, r3
 8000b2a:	4a09      	ldr	r2, [pc, #36]	@ (8000b50 <Set_LED+0x54>)
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	4413      	add	r3, r2
 8000b32:	460a      	mov	r2, r1
 8000b34:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	b2d9      	uxtb	r1, r3
 8000b3a:	4a05      	ldr	r2, [pc, #20]	@ (8000b50 <Set_LED+0x54>)
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	4413      	add	r3, r2
 8000b42:	460a      	mov	r2, r1
 8000b44:	70da      	strb	r2, [r3, #3]
}
 8000b46:	bf00      	nop
 8000b48:	3714      	adds	r7, #20
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr
 8000b50:	20000178 	.word	0x20000178

08000b54 <Set_All_LEDs_Same_Color>:

// Function to set all LEDs to the same color
void Set_All_LEDs_Same_Color(int Red, int Green, int Blue) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < MAX_LED; i++) {
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]
 8000b64:	e008      	b.n	8000b78 <Set_All_LEDs_Same_Color+0x24>
        Set_LED(i, Red, Green, Blue);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	68ba      	ldr	r2, [r7, #8]
 8000b6a:	68f9      	ldr	r1, [r7, #12]
 8000b6c:	6978      	ldr	r0, [r7, #20]
 8000b6e:	f7ff ffc5 	bl	8000afc <Set_LED>
    for (int i = 0; i < MAX_LED; i++) {
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	3301      	adds	r3, #1
 8000b76:	617b      	str	r3, [r7, #20]
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	2b3b      	cmp	r3, #59	@ 0x3b
 8000b7c:	ddf3      	ble.n	8000b66 <Set_All_LEDs_Same_Color+0x12>
    }
}
 8000b7e:	bf00      	nop
 8000b80:	bf00      	nop
 8000b82:	3718      	adds	r7, #24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <Set_LED_Matrix>:
			Set_LED(i, Red, Green, Blue);
		break;
	}
}

void Set_LED_Matrix (int row, int col, int Red, int Green, int Blue) {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b0a2      	sub	sp, #136	@ 0x88
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
 8000b94:	603b      	str	r3, [r7, #0]
	int LED_Matrix[3][10] = {
 8000b96:	4a0f      	ldr	r2, [pc, #60]	@ (8000bd4 <Set_LED_Matrix+0x4c>)
 8000b98:	f107 0310 	add.w	r3, r7, #16
 8000b9c:	4611      	mov	r1, r2
 8000b9e:	2278      	movs	r2, #120	@ 0x78
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f003 ff16 	bl	80049d2 <memcpy>
			{40, 39, 38, 37, 36, 35, 34, 33, 32, 31},
			{16, 17, 18, 19, 20, 21, 22, 23, 24, 25},
			{11, 10,  9,  8,  7,  6,  5,  4,  3,  2},
	};
	Set_LED(LED_Matrix[row][col], Red, Green, Blue);
 8000ba6:	68fa      	ldr	r2, [r7, #12]
 8000ba8:	4613      	mov	r3, r2
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	4413      	add	r3, r2
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	68ba      	ldr	r2, [r7, #8]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	3388      	adds	r3, #136	@ 0x88
 8000bb8:	443b      	add	r3, r7
 8000bba:	f853 0c78 	ldr.w	r0, [r3, #-120]
 8000bbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000bc2:	683a      	ldr	r2, [r7, #0]
 8000bc4:	6879      	ldr	r1, [r7, #4]
 8000bc6:	f7ff ff99 	bl	8000afc <Set_LED>
}
 8000bca:	bf00      	nop
 8000bcc:	3788      	adds	r7, #136	@ 0x88
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	08005700 	.word	0x08005700

08000bd8 <Set_Brightness>:

void Set_Brightness (int brightness) {
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if (brightness > 100) brightness = 100;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2b64      	cmp	r3, #100	@ 0x64
 8000be4:	dd01      	ble.n	8000bea <Set_Brightness+0x12>
 8000be6:	2364      	movs	r3, #100	@ 0x64
 8000be8:	607b      	str	r3, [r7, #4]
	if (brightness < 0) brightness = 0;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	da01      	bge.n	8000bf4 <Set_Brightness+0x1c>
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	607b      	str	r3, [r7, #4]

	for (int i=0; i < MAX_LED; i++) {
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	e02d      	b.n	8000c56 <Set_Brightness+0x7e>
		LED_Mod[i][0] = LED_Data[i][0];
 8000bfa:	4a1b      	ldr	r2, [pc, #108]	@ (8000c68 <Set_Brightness+0x90>)
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8000c02:	4a1a      	ldr	r2, [pc, #104]	@ (8000c6c <Set_Brightness+0x94>)
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j = 1; j < 4; ++j) {
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	e01c      	b.n	8000c4a <Set_Brightness+0x72>
			// Simple percentage calculation: brightness from 0-100%
			LED_Mod[i][j] = (LED_Data[i][j] * brightness) / 100;
 8000c10:	4a15      	ldr	r2, [pc, #84]	@ (8000c68 <Set_Brightness+0x90>)
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	441a      	add	r2, r3
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	461a      	mov	r2, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	fb02 f303 	mul.w	r3, r2, r3
 8000c26:	4a12      	ldr	r2, [pc, #72]	@ (8000c70 <Set_Brightness+0x98>)
 8000c28:	fb82 1203 	smull	r1, r2, r2, r3
 8000c2c:	1152      	asrs	r2, r2, #5
 8000c2e:	17db      	asrs	r3, r3, #31
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	b2d9      	uxtb	r1, r3
 8000c34:	4a0d      	ldr	r2, [pc, #52]	@ (8000c6c <Set_Brightness+0x94>)
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	441a      	add	r2, r3
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	4413      	add	r3, r2
 8000c40:	460a      	mov	r2, r1
 8000c42:	701a      	strb	r2, [r3, #0]
		for (int j = 1; j < 4; ++j) {
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	3301      	adds	r3, #1
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	2b03      	cmp	r3, #3
 8000c4e:	dddf      	ble.n	8000c10 <Set_Brightness+0x38>
	for (int i=0; i < MAX_LED; i++) {
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	3301      	adds	r3, #1
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	2b3b      	cmp	r3, #59	@ 0x3b
 8000c5a:	ddce      	ble.n	8000bfa <Set_Brightness+0x22>
		}
	}

#endif
}
 8000c5c:	bf00      	nop
 8000c5e:	bf00      	nop
 8000c60:	3714      	adds	r7, #20
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr
 8000c68:	20000178 	.word	0x20000178
 8000c6c:	20000268 	.word	0x20000268
 8000c70:	51eb851f 	.word	0x51eb851f

08000c74 <WS2812_Send>:
//
//	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, 24);
//}


void WS2812_Send (void) {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0
	uint32_t indx = 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
	uint32_t color;

	for (int i = 0; i < MAX_LED; ++i) {
 8000c7e:	2300      	movs	r3, #0
 8000c80:	613b      	str	r3, [r7, #16]
 8000c82:	e036      	b.n	8000cf2 <WS2812_Send+0x7e>
		color = ((LED_Mod[i][1] << 16) | (LED_Mod[i][2] << 8) | (LED_Mod[i][3]));
 8000c84:	4a39      	ldr	r2, [pc, #228]	@ (8000d6c <WS2812_Send+0xf8>)
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	4413      	add	r3, r2
 8000c8c:	785b      	ldrb	r3, [r3, #1]
 8000c8e:	041a      	lsls	r2, r3, #16
 8000c90:	4936      	ldr	r1, [pc, #216]	@ (8000d6c <WS2812_Send+0xf8>)
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	440b      	add	r3, r1
 8000c98:	789b      	ldrb	r3, [r3, #2]
 8000c9a:	021b      	lsls	r3, r3, #8
 8000c9c:	431a      	orrs	r2, r3
 8000c9e:	4933      	ldr	r1, [pc, #204]	@ (8000d6c <WS2812_Send+0xf8>)
 8000ca0:	693b      	ldr	r3, [r7, #16]
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	440b      	add	r3, r1
 8000ca6:	78db      	ldrb	r3, [r3, #3]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	603b      	str	r3, [r7, #0]

		for (int j = 23; j >= 0; j--) {
 8000cac:	2317      	movs	r3, #23
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	e019      	b.n	8000ce6 <WS2812_Send+0x72>
			if (color&(1<<j)) {
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	461a      	mov	r2, r3
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d005      	beq.n	8000cd0 <WS2812_Send+0x5c>
				pwmData[indx] = 60;
 8000cc4:	4a2a      	ldr	r2, [pc, #168]	@ (8000d70 <WS2812_Send+0xfc>)
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	213c      	movs	r1, #60	@ 0x3c
 8000cca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000cce:	e004      	b.n	8000cda <WS2812_Send+0x66>
			} else {
				pwmData[indx] = 30;
 8000cd0:	4a27      	ldr	r2, [pc, #156]	@ (8000d70 <WS2812_Send+0xfc>)
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	211e      	movs	r1, #30
 8000cd6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}

			indx++;
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	617b      	str	r3, [r7, #20]
		for (int j = 23; j >= 0; j--) {
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	dae2      	bge.n	8000cb2 <WS2812_Send+0x3e>
	for (int i = 0; i < MAX_LED; ++i) {
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	613b      	str	r3, [r7, #16]
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	2b3b      	cmp	r3, #59	@ 0x3b
 8000cf6:	ddc5      	ble.n	8000c84 <WS2812_Send+0x10>
		}
	}

	for (int i = 0; i < 50; ++i) {
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60bb      	str	r3, [r7, #8]
 8000cfc:	e00a      	b.n	8000d14 <WS2812_Send+0xa0>
		pwmData[indx] = 0;
 8000cfe:	4a1c      	ldr	r2, [pc, #112]	@ (8000d70 <WS2812_Send+0xfc>)
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	2100      	movs	r1, #0
 8000d04:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 50; ++i) {
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	3301      	adds	r3, #1
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	2b31      	cmp	r3, #49	@ 0x31
 8000d18:	ddf1      	ble.n	8000cfe <WS2812_Send+0x8a>
	}

	// Reset flag before starting DMA
	datasentflag = 0;
 8000d1a:	4b16      	ldr	r3, [pc, #88]	@ (8000d74 <WS2812_Send+0x100>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	4a12      	ldr	r2, [pc, #72]	@ (8000d70 <WS2812_Send+0xfc>)
 8000d26:	2100      	movs	r1, #0
 8000d28:	4813      	ldr	r0, [pc, #76]	@ (8000d78 <WS2812_Send+0x104>)
 8000d2a:	f002 fc5f 	bl	80035ec <HAL_TIM_PWM_Start_DMA>

	// Add timeout to prevent infinite loop
	uint32_t timeout = 1000000;  // Adjust timeout value
 8000d2e:	4b13      	ldr	r3, [pc, #76]	@ (8000d7c <WS2812_Send+0x108>)
 8000d30:	607b      	str	r3, [r7, #4]
	while(!datasentflag && timeout > 0) {
 8000d32:	e002      	b.n	8000d3a <WS2812_Send+0xc6>
		timeout--;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	607b      	str	r3, [r7, #4]
	while(!datasentflag && timeout > 0) {
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d74 <WS2812_Send+0x100>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d102      	bne.n	8000d48 <WS2812_Send+0xd4>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d1f5      	bne.n	8000d34 <WS2812_Send+0xc0>
	}

	// Force stop if timeout occurred
	if (timeout == 0) {
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d106      	bne.n	8000d5c <WS2812_Send+0xe8>
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4809      	ldr	r0, [pc, #36]	@ (8000d78 <WS2812_Send+0x104>)
 8000d52:	f002 fded 	bl	8003930 <HAL_TIM_PWM_Stop_DMA>
		datasentflag = 1;
 8000d56:	4b07      	ldr	r3, [pc, #28]	@ (8000d74 <WS2812_Send+0x100>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	601a      	str	r2, [r3, #0]
	}

	datasentflag = 0;
 8000d5c:	4b05      	ldr	r3, [pc, #20]	@ (8000d74 <WS2812_Send+0x100>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
}
 8000d62:	bf00      	nop
 8000d64:	3718      	adds	r7, #24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000268 	.word	0x20000268
 8000d70:	2000035c 	.word	0x2000035c
 8000d74:	20000358 	.word	0x20000358
 8000d78:	200000e8 	.word	0x200000e8
 8000d7c:	000f4240 	.word	0x000f4240

08000d80 <get_temperature_color>:
    *g = (uint8_t)((g1 + m) * 255);
    *b = (uint8_t)((b1 + m) * 255);
}

// Function to get temperature-based color (blue to red)
void get_temperature_color(float intensity, uint8_t* r, uint8_t* g, uint8_t* b) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
 8000d8c:	603b      	str	r3, [r7, #0]
    // Map intensity (0-255) to temperature color
    // Blue (cold) -> Cyan -> Green -> Yellow -> Red (hot)
    if (intensity < 51) {  // 0-50: Blue to Cyan
 8000d8e:	4947      	ldr	r1, [pc, #284]	@ (8000eac <get_temperature_color+0x12c>)
 8000d90:	68f8      	ldr	r0, [r7, #12]
 8000d92:	f7ff fbeb 	bl	800056c <__aeabi_fcmplt>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d012      	beq.n	8000dc2 <get_temperature_color+0x42>
        *r = 0;
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	701a      	strb	r2, [r3, #0]
        *g = intensity * 5;
 8000da2:	4943      	ldr	r1, [pc, #268]	@ (8000eb0 <get_temperature_color+0x130>)
 8000da4:	68f8      	ldr	r0, [r7, #12]
 8000da6:	f7ff f9d1 	bl	800014c <__aeabi_fmul>
 8000daa:	4603      	mov	r3, r0
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fc05 	bl	80005bc <__aeabi_f2uiz>
 8000db2:	4603      	mov	r3, r0
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	701a      	strb	r2, [r3, #0]
        *b = 255;
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	22ff      	movs	r2, #255	@ 0xff
 8000dbe:	701a      	strb	r2, [r3, #0]
    } else {  // 204-255: Orange to Red
        *r = 255;
        *g = 0;
        *b = 0;
    }
}
 8000dc0:	e06f      	b.n	8000ea2 <get_temperature_color+0x122>
    } else if (intensity < 102) {  // 51-101: Cyan to Green
 8000dc2:	493c      	ldr	r1, [pc, #240]	@ (8000eb4 <get_temperature_color+0x134>)
 8000dc4:	68f8      	ldr	r0, [r7, #12]
 8000dc6:	f7ff fbd1 	bl	800056c <__aeabi_fcmplt>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d01c      	beq.n	8000e0a <get_temperature_color+0x8a>
        *r = 0;
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	701a      	strb	r2, [r3, #0]
        *g = 255;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	22ff      	movs	r2, #255	@ 0xff
 8000dda:	701a      	strb	r2, [r3, #0]
        *b = 255 - (intensity - 51) * 5;
 8000ddc:	4933      	ldr	r1, [pc, #204]	@ (8000eac <get_temperature_color+0x12c>)
 8000dde:	68f8      	ldr	r0, [r7, #12]
 8000de0:	f7ff fa6c 	bl	80002bc <__aeabi_fsub>
 8000de4:	4603      	mov	r3, r0
 8000de6:	4932      	ldr	r1, [pc, #200]	@ (8000eb0 <get_temperature_color+0x130>)
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff f9af 	bl	800014c <__aeabi_fmul>
 8000dee:	4603      	mov	r3, r0
 8000df0:	4619      	mov	r1, r3
 8000df2:	4831      	ldr	r0, [pc, #196]	@ (8000eb8 <get_temperature_color+0x138>)
 8000df4:	f7ff fa62 	bl	80002bc <__aeabi_fsub>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff fbde 	bl	80005bc <__aeabi_f2uiz>
 8000e00:	4603      	mov	r3, r0
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	701a      	strb	r2, [r3, #0]
}
 8000e08:	e04b      	b.n	8000ea2 <get_temperature_color+0x122>
    } else if (intensity < 153) {  // 102-152: Green to Yellow
 8000e0a:	492c      	ldr	r1, [pc, #176]	@ (8000ebc <get_temperature_color+0x13c>)
 8000e0c:	68f8      	ldr	r0, [r7, #12]
 8000e0e:	f7ff fbad 	bl	800056c <__aeabi_fcmplt>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d017      	beq.n	8000e48 <get_temperature_color+0xc8>
        *r = (intensity - 102) * 5;
 8000e18:	4926      	ldr	r1, [pc, #152]	@ (8000eb4 <get_temperature_color+0x134>)
 8000e1a:	68f8      	ldr	r0, [r7, #12]
 8000e1c:	f7ff fa4e 	bl	80002bc <__aeabi_fsub>
 8000e20:	4603      	mov	r3, r0
 8000e22:	4923      	ldr	r1, [pc, #140]	@ (8000eb0 <get_temperature_color+0x130>)
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff f991 	bl	800014c <__aeabi_fmul>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fbc5 	bl	80005bc <__aeabi_f2uiz>
 8000e32:	4603      	mov	r3, r0
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	701a      	strb	r2, [r3, #0]
        *g = 255;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	22ff      	movs	r2, #255	@ 0xff
 8000e3e:	701a      	strb	r2, [r3, #0]
        *b = 0;
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	2200      	movs	r2, #0
 8000e44:	701a      	strb	r2, [r3, #0]
}
 8000e46:	e02c      	b.n	8000ea2 <get_temperature_color+0x122>
    } else if (intensity < 204) {  // 153-203: Yellow to Orange
 8000e48:	491d      	ldr	r1, [pc, #116]	@ (8000ec0 <get_temperature_color+0x140>)
 8000e4a:	68f8      	ldr	r0, [r7, #12]
 8000e4c:	f7ff fb8e 	bl	800056c <__aeabi_fcmplt>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d01c      	beq.n	8000e90 <get_temperature_color+0x110>
        *r = 255;
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	22ff      	movs	r2, #255	@ 0xff
 8000e5a:	701a      	strb	r2, [r3, #0]
        *g = 255 - (intensity - 153) * 5;
 8000e5c:	4917      	ldr	r1, [pc, #92]	@ (8000ebc <get_temperature_color+0x13c>)
 8000e5e:	68f8      	ldr	r0, [r7, #12]
 8000e60:	f7ff fa2c 	bl	80002bc <__aeabi_fsub>
 8000e64:	4603      	mov	r3, r0
 8000e66:	4912      	ldr	r1, [pc, #72]	@ (8000eb0 <get_temperature_color+0x130>)
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff f96f 	bl	800014c <__aeabi_fmul>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	4619      	mov	r1, r3
 8000e72:	4811      	ldr	r0, [pc, #68]	@ (8000eb8 <get_temperature_color+0x138>)
 8000e74:	f7ff fa22 	bl	80002bc <__aeabi_fsub>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff fb9e 	bl	80005bc <__aeabi_f2uiz>
 8000e80:	4603      	mov	r3, r0
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	701a      	strb	r2, [r3, #0]
        *b = 0;
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	701a      	strb	r2, [r3, #0]
}
 8000e8e:	e008      	b.n	8000ea2 <get_temperature_color+0x122>
        *r = 255;
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	22ff      	movs	r2, #255	@ 0xff
 8000e94:	701a      	strb	r2, [r3, #0]
        *g = 0;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	701a      	strb	r2, [r3, #0]
        *b = 0;
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	701a      	strb	r2, [r3, #0]
}
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	424c0000 	.word	0x424c0000
 8000eb0:	40a00000 	.word	0x40a00000
 8000eb4:	42cc0000 	.word	0x42cc0000
 8000eb8:	437f0000 	.word	0x437f0000
 8000ebc:	43190000 	.word	0x43190000
 8000ec0:	434c0000 	.word	0x434c0000

08000ec4 <is_valid_position>:

// Function to check if a position is valid and not adjacent to any lit LED
int is_valid_position(int row, int col, int* lit_positions, int num_lit) {
 8000ec4:	b480      	push	{r7}
 8000ec6:	b089      	sub	sp, #36	@ 0x24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
 8000ed0:	603b      	str	r3, [r7, #0]
    // Check if position is within bounds
    if (row < 0 || row >= 3 || col < 0 || col >= 10) {
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	db08      	blt.n	8000eea <is_valid_position+0x26>
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	dc05      	bgt.n	8000eea <is_valid_position+0x26>
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	db02      	blt.n	8000eea <is_valid_position+0x26>
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	2b09      	cmp	r3, #9
 8000ee8:	dd01      	ble.n	8000eee <is_valid_position+0x2a>
        return 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	e03f      	b.n	8000f6e <is_valid_position+0xaa>
    }
    
    // Check if position is adjacent to any lit LED
    for (int i = 0; i < num_lit; i++) {
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
 8000ef2:	e037      	b.n	8000f64 <is_valid_position+0xa0>
        int lit_row = lit_positions[i] / 10;
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	4413      	add	r3, r2
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a1e      	ldr	r2, [pc, #120]	@ (8000f78 <is_valid_position+0xb4>)
 8000f00:	fb82 1203 	smull	r1, r2, r2, r3
 8000f04:	1092      	asrs	r2, r2, #2
 8000f06:	17db      	asrs	r3, r3, #31
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	61bb      	str	r3, [r7, #24]
        int lit_col = lit_positions[i] % 10;
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	4413      	add	r3, r2
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	4b18      	ldr	r3, [pc, #96]	@ (8000f78 <is_valid_position+0xb4>)
 8000f18:	fb83 1302 	smull	r1, r3, r3, r2
 8000f1c:	1099      	asrs	r1, r3, #2
 8000f1e:	17d3      	asrs	r3, r2, #31
 8000f20:	1ac9      	subs	r1, r1, r3
 8000f22:	460b      	mov	r3, r1
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	440b      	add	r3, r1
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	617b      	str	r3, [r7, #20]
        
        // Check if positions are adjacent (including diagonals)
        if (abs(row - lit_row) <= 1 && abs(col - lit_col) <= 1) {
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f38:	db11      	blt.n	8000f5e <is_valid_position+0x9a>
 8000f3a:	68fa      	ldr	r2, [r7, #12]
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	dc0c      	bgt.n	8000f5e <is_valid_position+0x9a>
 8000f44:	68ba      	ldr	r2, [r7, #8]
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f4e:	db06      	blt.n	8000f5e <is_valid_position+0x9a>
 8000f50:	68ba      	ldr	r2, [r7, #8]
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	dc01      	bgt.n	8000f5e <is_valid_position+0x9a>
            return 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	e007      	b.n	8000f6e <is_valid_position+0xaa>
    for (int i = 0; i < num_lit; i++) {
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3301      	adds	r3, #1
 8000f62:	61fb      	str	r3, [r7, #28]
 8000f64:	69fa      	ldr	r2, [r7, #28]
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	dbc3      	blt.n	8000ef4 <is_valid_position+0x30>
        }
    }
    
    return 1;
 8000f6c:	2301      	movs	r3, #1
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3724      	adds	r7, #36	@ 0x24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr
 8000f78:	66666667 	.word	0x66666667

08000f7c <Sound_Reactive_LED>:

// Function to control LED based on sound frequency with random flashing effect
void Sound_Reactive_LED(uint32_t sound_value) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	@ 0x28
 8000f80:	af02      	add	r7, sp, #8
 8000f82:	6078      	str	r0, [r7, #4]
    static uint32_t last_update = 0;
    static int lit_positions[30];  // Store positions of lit LEDs
    static int num_lit = 0;
    
    // Ignore sound below 400
    if (sound_value < 650) {
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f240 2289 	movw	r2, #649	@ 0x289
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d80c      	bhi.n	8000fa8 <Sound_Reactive_LED+0x2c>
        Set_All_LEDs_Same_Color(0, 0, 0);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2100      	movs	r1, #0
 8000f92:	2000      	movs	r0, #0
 8000f94:	f7ff fdde 	bl	8000b54 <Set_All_LEDs_Same_Color>
        Set_Brightness(current_brightness);
 8000f98:	4b51      	ldr	r3, [pc, #324]	@ (80010e0 <Sound_Reactive_LED+0x164>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fe1b 	bl	8000bd8 <Set_Brightness>
        WS2812_Send();
 8000fa2:	f7ff fe67 	bl	8000c74 <WS2812_Send>
        return;
 8000fa6:	e097      	b.n	80010d8 <Sound_Reactive_LED+0x15c>
    }
    
    // Map sound value to LED intensity (400-4095 to 0-255)
    uint8_t intensity = ((sound_value - 650) * 255) / (4095 - 400);
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	4613      	mov	r3, r2
 8000fac:	021b      	lsls	r3, r3, #8
 8000fae:	1a9b      	subs	r3, r3, r2
 8000fb0:	f5a3 3321 	sub.w	r3, r3, #164864	@ 0x28400
 8000fb4:	f2a3 3376 	subw	r3, r3, #886	@ 0x376
 8000fb8:	4a4a      	ldr	r2, [pc, #296]	@ (80010e4 <Sound_Reactive_LED+0x168>)
 8000fba:	fba2 2303 	umull	r2, r3, r2, r3
 8000fbe:	0a1b      	lsrs	r3, r3, #8
 8000fc0:	75fb      	strb	r3, [r7, #23]
    
    // Update effect every 50ms
    if (HAL_GetTick() - last_update > 10) {
 8000fc2:	f000 fd47 	bl	8001a54 <HAL_GetTick>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	4b47      	ldr	r3, [pc, #284]	@ (80010e8 <Sound_Reactive_LED+0x16c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	2b0a      	cmp	r3, #10
 8000fd0:	d97b      	bls.n	80010ca <Sound_Reactive_LED+0x14e>
        last_update = HAL_GetTick();
 8000fd2:	f000 fd3f 	bl	8001a54 <HAL_GetTick>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	4a43      	ldr	r2, [pc, #268]	@ (80010e8 <Sound_Reactive_LED+0x16c>)
 8000fda:	6013      	str	r3, [r2, #0]
        
        // Calculate number of LEDs to light based on intensity
        int num_leds = (intensity * 15) / 255;  // Max 15 LEDs
 8000fdc:	7dfb      	ldrb	r3, [r7, #23]
 8000fde:	4a43      	ldr	r2, [pc, #268]	@ (80010ec <Sound_Reactive_LED+0x170>)
 8000fe0:	fb82 1203 	smull	r1, r2, r2, r3
 8000fe4:	10d2      	asrs	r2, r2, #3
 8000fe6:	17db      	asrs	r3, r3, #31
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	61fb      	str	r3, [r7, #28]
        if (num_leds < 1) num_leds = 1;
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	dc01      	bgt.n	8000ff6 <Sound_Reactive_LED+0x7a>
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	61fb      	str	r3, [r7, #28]
        if (num_leds > 15) num_leds = 15;
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	2b0f      	cmp	r3, #15
 8000ffa:	dd01      	ble.n	8001000 <Sound_Reactive_LED+0x84>
 8000ffc:	230f      	movs	r3, #15
 8000ffe:	61fb      	str	r3, [r7, #28]
        
        // Clear all LEDs
        Set_All_LEDs_Same_Color(0, 0, 0);
 8001000:	2200      	movs	r2, #0
 8001002:	2100      	movs	r1, #0
 8001004:	2000      	movs	r0, #0
 8001006:	f7ff fda5 	bl	8000b54 <Set_All_LEDs_Same_Color>
        
        // Reset lit positions
        num_lit = 0;
 800100a:	4b39      	ldr	r3, [pc, #228]	@ (80010f0 <Sound_Reactive_LED+0x174>)
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
        
        // Try to light up new LEDs
        int attempts = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	61bb      	str	r3, [r7, #24]
        while (num_lit < num_leds && attempts < 100) {
 8001014:	e051      	b.n	80010ba <Sound_Reactive_LED+0x13e>
            attempts++;
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	3301      	adds	r3, #1
 800101a:	61bb      	str	r3, [r7, #24]
            
            // Generate random position
            int row = rand() % 3;
 800101c:	f003 fb1a 	bl	8004654 <rand>
 8001020:	4602      	mov	r2, r0
 8001022:	4b34      	ldr	r3, [pc, #208]	@ (80010f4 <Sound_Reactive_LED+0x178>)
 8001024:	fb83 3102 	smull	r3, r1, r3, r2
 8001028:	17d3      	asrs	r3, r2, #31
 800102a:	1ac9      	subs	r1, r1, r3
 800102c:	460b      	mov	r3, r1
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	440b      	add	r3, r1
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	613b      	str	r3, [r7, #16]
            int col = rand() % 10;
 8001036:	f003 fb0d 	bl	8004654 <rand>
 800103a:	4602      	mov	r2, r0
 800103c:	4b2e      	ldr	r3, [pc, #184]	@ (80010f8 <Sound_Reactive_LED+0x17c>)
 800103e:	fb83 1302 	smull	r1, r3, r3, r2
 8001042:	1099      	asrs	r1, r3, #2
 8001044:	17d3      	asrs	r3, r2, #31
 8001046:	1ac9      	subs	r1, r1, r3
 8001048:	460b      	mov	r3, r1
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	440b      	add	r3, r1
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	60fb      	str	r3, [r7, #12]
            
            // Check if position is valid
            if (is_valid_position(row, col, lit_positions, num_lit)) {
 8001054:	4b26      	ldr	r3, [pc, #152]	@ (80010f0 <Sound_Reactive_LED+0x174>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a28      	ldr	r2, [pc, #160]	@ (80010fc <Sound_Reactive_LED+0x180>)
 800105a:	68f9      	ldr	r1, [r7, #12]
 800105c:	6938      	ldr	r0, [r7, #16]
 800105e:	f7ff ff31 	bl	8000ec4 <is_valid_position>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d028      	beq.n	80010ba <Sound_Reactive_LED+0x13e>
                // Store position
                lit_positions[num_lit] = row * 10 + col;
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	4613      	mov	r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	4413      	add	r3, r2
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	4619      	mov	r1, r3
 8001074:	4b1e      	ldr	r3, [pc, #120]	@ (80010f0 <Sound_Reactive_LED+0x174>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	68fa      	ldr	r2, [r7, #12]
 800107a:	440a      	add	r2, r1
 800107c:	491f      	ldr	r1, [pc, #124]	@ (80010fc <Sound_Reactive_LED+0x180>)
 800107e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                num_lit++;
 8001082:	4b1b      	ldr	r3, [pc, #108]	@ (80010f0 <Sound_Reactive_LED+0x174>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	3301      	adds	r3, #1
 8001088:	4a19      	ldr	r2, [pc, #100]	@ (80010f0 <Sound_Reactive_LED+0x174>)
 800108a:	6013      	str	r3, [r2, #0]
                
                // Get color based on intensity
                uint8_t r, g, b;
                get_temperature_color(intensity, &r, &g, &b);
 800108c:	7dfb      	ldrb	r3, [r7, #23]
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff f9c6 	bl	8000420 <__aeabi_ui2f>
 8001094:	f107 0309 	add.w	r3, r7, #9
 8001098:	f107 020a 	add.w	r2, r7, #10
 800109c:	f107 010b 	add.w	r1, r7, #11
 80010a0:	f7ff fe6e 	bl	8000d80 <get_temperature_color>
                
                // Light up the LED
                Set_LED_Matrix(row, col, r, g, b);
 80010a4:	7afb      	ldrb	r3, [r7, #11]
 80010a6:	461a      	mov	r2, r3
 80010a8:	7abb      	ldrb	r3, [r7, #10]
 80010aa:	4619      	mov	r1, r3
 80010ac:	7a7b      	ldrb	r3, [r7, #9]
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	460b      	mov	r3, r1
 80010b2:	68f9      	ldr	r1, [r7, #12]
 80010b4:	6938      	ldr	r0, [r7, #16]
 80010b6:	f7ff fd67 	bl	8000b88 <Set_LED_Matrix>
        while (num_lit < num_leds && attempts < 100) {
 80010ba:	4b0d      	ldr	r3, [pc, #52]	@ (80010f0 <Sound_Reactive_LED+0x174>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	69fa      	ldr	r2, [r7, #28]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	dd02      	ble.n	80010ca <Sound_Reactive_LED+0x14e>
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	2b63      	cmp	r3, #99	@ 0x63
 80010c8:	dda5      	ble.n	8001016 <Sound_Reactive_LED+0x9a>
            }
        }
    }
    
    // Apply brightness
    Set_Brightness(current_brightness);
 80010ca:	4b05      	ldr	r3, [pc, #20]	@ (80010e0 <Sound_Reactive_LED+0x164>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fd82 	bl	8000bd8 <Set_Brightness>
    WS2812_Send();
 80010d4:	f7ff fdce 	bl	8000c74 <WS2812_Send>
}
 80010d8:	3720      	adds	r7, #32
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000030 	.word	0x20000030
 80010e4:	11bc84bf 	.word	0x11bc84bf
 80010e8:	20000f00 	.word	0x20000f00
 80010ec:	78787879 	.word	0x78787879
 80010f0:	20000f04 	.word	0x20000f04
 80010f4:	55555556 	.word	0x55555556
 80010f8:	66666667 	.word	0x66666667
 80010fc:	20000f08 	.word	0x20000f08

08001100 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b092      	sub	sp, #72	@ 0x48
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001106:	f000 fc4d 	bl	80019a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800110a:	f000 f891 	bl	8001230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800110e:	f000 f9e7 	bl	80014e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001112:	f000 f9c7 	bl	80014a4 <MX_DMA_Init>
  MX_TIM1_Init();
 8001116:	f000 f925 	bl	8001364 <MX_TIM1_Init>
  MX_ADC1_Init();
 800111a:	f000 f8e5 	bl	80012e8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  // Initialize keypad
  Keypad_Init();
 800111e:	f7ff fc81 	bl	8000a24 <Keypad_Init>

  // Initialize LCD Parallel
  LCD_Parallel_Init();
 8001122:	f7ff fa6b 	bl	80005fc <LCD_Parallel_Init>

  // Turn off all LEDs initially
  Set_All_LEDs_Same_Color(0, 0, 0);
 8001126:	2200      	movs	r2, #0
 8001128:	2100      	movs	r1, #0
 800112a:	2000      	movs	r0, #0
 800112c:	f7ff fd12 	bl	8000b54 <Set_All_LEDs_Same_Color>
  Set_Brightness(0);
 8001130:	2000      	movs	r0, #0
 8001132:	f7ff fd51 	bl	8000bd8 <Set_Brightness>
  WS2812_Send();
 8001136:	f7ff fd9d 	bl	8000c74 <WS2812_Send>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int mn = 5000, mx = 0, avg = 0, cnt = 0;
 800113a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800113e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001140:	2300      	movs	r3, #0
 8001142:	643b      	str	r3, [r7, #64]	@ 0x40
 8001144:	2300      	movs	r3, #0
 8001146:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001148:	2300      	movs	r3, #0
 800114a:	63bb      	str	r3, [r7, #56]	@ 0x38
  while (1)
  {
    /* USER CODE END WHILE */
    HAL_ADC_Start(&hadc1);
 800114c:	4836      	ldr	r0, [pc, #216]	@ (8001228 <main+0x128>)
 800114e:	f000 fd87 	bl	8001c60 <HAL_ADC_Start>
    HAL_Delay(10);
 8001152:	200a      	movs	r0, #10
 8001154:	f000 fc88 	bl	8001a68 <HAL_Delay>
    var = HAL_ADC_GetValue(&hadc1);
 8001158:	4833      	ldr	r0, [pc, #204]	@ (8001228 <main+0x128>)
 800115a:	f000 fe5b 	bl	8001e14 <HAL_ADC_GetValue>
 800115e:	4603      	mov	r3, r0
 8001160:	4a32      	ldr	r2, [pc, #200]	@ (800122c <main+0x12c>)
 8001162:	6013      	str	r3, [r2, #0]

    if (var > mx) mx = var;
 8001164:	4b31      	ldr	r3, [pc, #196]	@ (800122c <main+0x12c>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800116a:	429a      	cmp	r2, r3
 800116c:	d902      	bls.n	8001174 <main+0x74>
 800116e:	4b2f      	ldr	r3, [pc, #188]	@ (800122c <main+0x12c>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	643b      	str	r3, [r7, #64]	@ 0x40
    if (var < mn) mn = var;
 8001174:	4b2d      	ldr	r3, [pc, #180]	@ (800122c <main+0x12c>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800117a:	429a      	cmp	r2, r3
 800117c:	d202      	bcs.n	8001184 <main+0x84>
 800117e:	4b2b      	ldr	r3, [pc, #172]	@ (800122c <main+0x12c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	647b      	str	r3, [r7, #68]	@ 0x44
    avg += var;
 8001184:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001186:	4b29      	ldr	r3, [pc, #164]	@ (800122c <main+0x12c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4413      	add	r3, r2
 800118c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    cnt++;
 800118e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001190:	3301      	adds	r3, #1
 8001192:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Call the sound reactive LED function
    Sound_Reactive_LED(var);
 8001194:	4b25      	ldr	r3, [pc, #148]	@ (800122c <main+0x12c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff feef 	bl	8000f7c <Sound_Reactive_LED>

    char t[20], mnt[10], mxt[10], avgt[10];
    LCD_Parallel_SetCursor(0, 0);
 800119e:	2100      	movs	r1, #0
 80011a0:	2000      	movs	r0, #0
 80011a2:	f7ff fac7 	bl	8000734 <LCD_Parallel_SetCursor>
    LCD_Parallel_Print(int_to_string(var, t));
 80011a6:	4b21      	ldr	r3, [pc, #132]	@ (800122c <main+0x12c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	461a      	mov	r2, r3
 80011ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011b0:	4619      	mov	r1, r3
 80011b2:	4610      	mov	r0, r2
 80011b4:	f7ff fba4 	bl	8000900 <int_to_string>
 80011b8:	4603      	mov	r3, r0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff fae4 	bl	8000788 <LCD_Parallel_Print>

    LCD_Parallel_SetCursor(1, 0);
 80011c0:	2100      	movs	r1, #0
 80011c2:	2001      	movs	r0, #1
 80011c4:	f7ff fab6 	bl	8000734 <LCD_Parallel_SetCursor>
    LCD_Parallel_Print(int_to_string(mn, mnt));
 80011c8:	f107 0318 	add.w	r3, r7, #24
 80011cc:	4619      	mov	r1, r3
 80011ce:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80011d0:	f7ff fb96 	bl	8000900 <int_to_string>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff fad6 	bl	8000788 <LCD_Parallel_Print>

    LCD_Parallel_SetCursor(1, 5);
 80011dc:	2105      	movs	r1, #5
 80011de:	2001      	movs	r0, #1
 80011e0:	f7ff faa8 	bl	8000734 <LCD_Parallel_SetCursor>
    LCD_Parallel_Print(int_to_string(mx, mxt));
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	4619      	mov	r1, r3
 80011ea:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80011ec:	f7ff fb88 	bl	8000900 <int_to_string>
 80011f0:	4603      	mov	r3, r0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff fac8 	bl	8000788 <LCD_Parallel_Print>

    LCD_Parallel_SetCursor(0, 5);
 80011f8:	2105      	movs	r1, #5
 80011fa:	2000      	movs	r0, #0
 80011fc:	f7ff fa9a 	bl	8000734 <LCD_Parallel_SetCursor>
    LCD_Parallel_Print(int_to_string(avg/cnt, avgt));
 8001200:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001204:	fb92 f3f3 	sdiv	r3, r2, r3
 8001208:	463a      	mov	r2, r7
 800120a:	4611      	mov	r1, r2
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff fb77 	bl	8000900 <int_to_string>
 8001212:	4603      	mov	r3, r0
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff fab7 	bl	8000788 <LCD_Parallel_Print>

    LCD_Parallel_Clear();
 800121a:	f7ff fa81 	bl	8000720 <LCD_Parallel_Clear>

    HAL_ADC_Stop(&hadc1);
 800121e:	4802      	ldr	r0, [pc, #8]	@ (8001228 <main+0x128>)
 8001220:	f000 fdcc 	bl	8001dbc <HAL_ADC_Stop>
  {
 8001224:	e792      	b.n	800114c <main+0x4c>
 8001226:	bf00      	nop
 8001228:	200000b8 	.word	0x200000b8
 800122c:	20000174 	.word	0x20000174

08001230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b094      	sub	sp, #80	@ 0x50
 8001234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001236:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800123a:	2228      	movs	r2, #40	@ 0x28
 800123c:	2100      	movs	r1, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f003 fb4b 	bl	80048da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001254:	1d3b      	adds	r3, r7, #4
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001260:	2301      	movs	r3, #1
 8001262:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001264:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001268:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800126a:	2300      	movs	r3, #0
 800126c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800126e:	2301      	movs	r3, #1
 8001270:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001272:	2302      	movs	r3, #2
 8001274:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001276:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800127a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800127c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001280:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001282:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001286:	4618      	mov	r0, r3
 8001288:	f001 fc74 	bl	8002b74 <HAL_RCC_OscConfig>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001292:	f000 f971 	bl	8001578 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001296:	230f      	movs	r3, #15
 8001298:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800129a:	2302      	movs	r3, #2
 800129c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800129e:	2300      	movs	r3, #0
 80012a0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012a6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012a8:	2300      	movs	r3, #0
 80012aa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	2102      	movs	r1, #2
 80012b2:	4618      	mov	r0, r3
 80012b4:	f001 fee0 	bl	8003078 <HAL_RCC_ClockConfig>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80012be:	f000 f95b 	bl	8001578 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80012c2:	2302      	movs	r3, #2
 80012c4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80012c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012ca:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	4618      	mov	r0, r3
 80012d0:	f002 f82e 	bl	8003330 <HAL_RCCEx_PeriphCLKConfig>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <SystemClock_Config+0xae>
  {
    Error_Handler();
 80012da:	f000 f94d 	bl	8001578 <Error_Handler>
  }
}
 80012de:	bf00      	nop
 80012e0:	3750      	adds	r7, #80	@ 0x50
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012ee:	1d3b      	adds	r3, r7, #4
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012f8:	4b18      	ldr	r3, [pc, #96]	@ (800135c <MX_ADC1_Init+0x74>)
 80012fa:	4a19      	ldr	r2, [pc, #100]	@ (8001360 <MX_ADC1_Init+0x78>)
 80012fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012fe:	4b17      	ldr	r3, [pc, #92]	@ (800135c <MX_ADC1_Init+0x74>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001304:	4b15      	ldr	r3, [pc, #84]	@ (800135c <MX_ADC1_Init+0x74>)
 8001306:	2200      	movs	r2, #0
 8001308:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800130a:	4b14      	ldr	r3, [pc, #80]	@ (800135c <MX_ADC1_Init+0x74>)
 800130c:	2200      	movs	r2, #0
 800130e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001310:	4b12      	ldr	r3, [pc, #72]	@ (800135c <MX_ADC1_Init+0x74>)
 8001312:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001316:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001318:	4b10      	ldr	r3, [pc, #64]	@ (800135c <MX_ADC1_Init+0x74>)
 800131a:	2200      	movs	r2, #0
 800131c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800131e:	4b0f      	ldr	r3, [pc, #60]	@ (800135c <MX_ADC1_Init+0x74>)
 8001320:	2201      	movs	r2, #1
 8001322:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001324:	480d      	ldr	r0, [pc, #52]	@ (800135c <MX_ADC1_Init+0x74>)
 8001326:	f000 fbc3 	bl	8001ab0 <HAL_ADC_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001330:	f000 f922 	bl	8001578 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001334:	2300      	movs	r3, #0
 8001336:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001338:	2301      	movs	r3, #1
 800133a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800133c:	2300      	movs	r3, #0
 800133e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001340:	1d3b      	adds	r3, r7, #4
 8001342:	4619      	mov	r1, r3
 8001344:	4805      	ldr	r0, [pc, #20]	@ (800135c <MX_ADC1_Init+0x74>)
 8001346:	f000 fd71 	bl	8001e2c <HAL_ADC_ConfigChannel>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001350:	f000 f912 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001354:	bf00      	nop
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	200000b8 	.word	0x200000b8
 8001360:	40012400 	.word	0x40012400

08001364 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b096      	sub	sp, #88	@ 0x58
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800136a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001378:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001382:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]
 8001390:	611a      	str	r2, [r3, #16]
 8001392:	615a      	str	r2, [r3, #20]
 8001394:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001396:	1d3b      	adds	r3, r7, #4
 8001398:	2220      	movs	r2, #32
 800139a:	2100      	movs	r1, #0
 800139c:	4618      	mov	r0, r3
 800139e:	f003 fa9c 	bl	80048da <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013a2:	4b3e      	ldr	r3, [pc, #248]	@ (800149c <MX_TIM1_Init+0x138>)
 80013a4:	4a3e      	ldr	r2, [pc, #248]	@ (80014a0 <MX_TIM1_Init+0x13c>)
 80013a6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80013a8:	4b3c      	ldr	r3, [pc, #240]	@ (800149c <MX_TIM1_Init+0x138>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ae:	4b3b      	ldr	r3, [pc, #236]	@ (800149c <MX_TIM1_Init+0x138>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 80013b4:	4b39      	ldr	r3, [pc, #228]	@ (800149c <MX_TIM1_Init+0x138>)
 80013b6:	2259      	movs	r2, #89	@ 0x59
 80013b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ba:	4b38      	ldr	r3, [pc, #224]	@ (800149c <MX_TIM1_Init+0x138>)
 80013bc:	2200      	movs	r2, #0
 80013be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013c0:	4b36      	ldr	r3, [pc, #216]	@ (800149c <MX_TIM1_Init+0x138>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c6:	4b35      	ldr	r3, [pc, #212]	@ (800149c <MX_TIM1_Init+0x138>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013cc:	4833      	ldr	r0, [pc, #204]	@ (800149c <MX_TIM1_Init+0x138>)
 80013ce:	f002 f865 	bl	800349c <HAL_TIM_Base_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80013d8:	f000 f8ce 	bl	8001578 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013e2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80013e6:	4619      	mov	r1, r3
 80013e8:	482c      	ldr	r0, [pc, #176]	@ (800149c <MX_TIM1_Init+0x138>)
 80013ea:	f002 fc29 	bl	8003c40 <HAL_TIM_ConfigClockSource>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80013f4:	f000 f8c0 	bl	8001578 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013f8:	4828      	ldr	r0, [pc, #160]	@ (800149c <MX_TIM1_Init+0x138>)
 80013fa:	f002 f89e 	bl	800353a <HAL_TIM_PWM_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001404:	f000 f8b8 	bl	8001578 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001408:	2300      	movs	r3, #0
 800140a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800140c:	2300      	movs	r3, #0
 800140e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001410:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001414:	4619      	mov	r1, r3
 8001416:	4821      	ldr	r0, [pc, #132]	@ (800149c <MX_TIM1_Init+0x138>)
 8001418:	f003 f86c 	bl	80044f4 <HAL_TIMEx_MasterConfigSynchronization>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001422:	f000 f8a9 	bl	8001578 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001426:	2360      	movs	r3, #96	@ 0x60
 8001428:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800142e:	2300      	movs	r3, #0
 8001430:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001432:	2300      	movs	r3, #0
 8001434:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001436:	2300      	movs	r3, #0
 8001438:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800143a:	2300      	movs	r3, #0
 800143c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800143e:	2300      	movs	r3, #0
 8001440:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001442:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001446:	2200      	movs	r2, #0
 8001448:	4619      	mov	r1, r3
 800144a:	4814      	ldr	r0, [pc, #80]	@ (800149c <MX_TIM1_Init+0x138>)
 800144c:	f002 fb36 	bl	8003abc <HAL_TIM_PWM_ConfigChannel>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001456:	f000 f88f 	bl	8001578 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800145a:	2300      	movs	r3, #0
 800145c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800145e:	2300      	movs	r3, #0
 8001460:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800146e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001472:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001474:	2300      	movs	r3, #0
 8001476:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001478:	1d3b      	adds	r3, r7, #4
 800147a:	4619      	mov	r1, r3
 800147c:	4807      	ldr	r0, [pc, #28]	@ (800149c <MX_TIM1_Init+0x138>)
 800147e:	f003 f897 	bl	80045b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001488:	f000 f876 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800148c:	4803      	ldr	r0, [pc, #12]	@ (800149c <MX_TIM1_Init+0x138>)
 800148e:	f000 f931 	bl	80016f4 <HAL_TIM_MspPostInit>

}
 8001492:	bf00      	nop
 8001494:	3758      	adds	r7, #88	@ 0x58
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	200000e8 	.word	0x200000e8
 80014a0:	40012c00 	.word	0x40012c00

080014a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014aa:	4b0c      	ldr	r3, [pc, #48]	@ (80014dc <MX_DMA_Init+0x38>)
 80014ac:	695b      	ldr	r3, [r3, #20]
 80014ae:	4a0b      	ldr	r2, [pc, #44]	@ (80014dc <MX_DMA_Init+0x38>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	6153      	str	r3, [r2, #20]
 80014b6:	4b09      	ldr	r3, [pc, #36]	@ (80014dc <MX_DMA_Init+0x38>)
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2100      	movs	r1, #0
 80014c6:	200c      	movs	r0, #12
 80014c8:	f000 ff1b 	bl	8002302 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80014cc:	200c      	movs	r0, #12
 80014ce:	f000 ff34 	bl	800233a <HAL_NVIC_EnableIRQ>

}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40021000 	.word	0x40021000

080014e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b088      	sub	sp, #32
 80014e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e6:	f107 0310 	add.w	r3, r7, #16
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]
 80014f2:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001570 <MX_GPIO_Init+0x90>)
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001570 <MX_GPIO_Init+0x90>)
 80014fa:	f043 0310 	orr.w	r3, r3, #16
 80014fe:	6193      	str	r3, [r2, #24]
 8001500:	4b1b      	ldr	r3, [pc, #108]	@ (8001570 <MX_GPIO_Init+0x90>)
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	f003 0310 	and.w	r3, r3, #16
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800150c:	4b18      	ldr	r3, [pc, #96]	@ (8001570 <MX_GPIO_Init+0x90>)
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	4a17      	ldr	r2, [pc, #92]	@ (8001570 <MX_GPIO_Init+0x90>)
 8001512:	f043 0320 	orr.w	r3, r3, #32
 8001516:	6193      	str	r3, [r2, #24]
 8001518:	4b15      	ldr	r3, [pc, #84]	@ (8001570 <MX_GPIO_Init+0x90>)
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	f003 0320 	and.w	r3, r3, #32
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001524:	4b12      	ldr	r3, [pc, #72]	@ (8001570 <MX_GPIO_Init+0x90>)
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	4a11      	ldr	r2, [pc, #68]	@ (8001570 <MX_GPIO_Init+0x90>)
 800152a:	f043 0304 	orr.w	r3, r3, #4
 800152e:	6193      	str	r3, [r2, #24]
 8001530:	4b0f      	ldr	r3, [pc, #60]	@ (8001570 <MX_GPIO_Init+0x90>)
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	f003 0304 	and.w	r3, r3, #4
 8001538:	607b      	str	r3, [r7, #4]
 800153a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800153c:	2200      	movs	r2, #0
 800153e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001542:	480c      	ldr	r0, [pc, #48]	@ (8001574 <MX_GPIO_Init+0x94>)
 8001544:	f001 fafe 	bl	8002b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001548:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800154c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154e:	2301      	movs	r3, #1
 8001550:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001556:	2302      	movs	r3, #2
 8001558:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800155a:	f107 0310 	add.w	r3, r7, #16
 800155e:	4619      	mov	r1, r3
 8001560:	4804      	ldr	r0, [pc, #16]	@ (8001574 <MX_GPIO_Init+0x94>)
 8001562:	f001 f96b 	bl	800283c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001566:	bf00      	nop
 8001568:	3720      	adds	r7, #32
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40021000 	.word	0x40021000
 8001574:	40011000 	.word	0x40011000

08001578 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800157c:	b672      	cpsid	i
}
 800157e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001580:	bf00      	nop
 8001582:	e7fd      	b.n	8001580 <Error_Handler+0x8>

08001584 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800158a:	4b15      	ldr	r3, [pc, #84]	@ (80015e0 <HAL_MspInit+0x5c>)
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	4a14      	ldr	r2, [pc, #80]	@ (80015e0 <HAL_MspInit+0x5c>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	6193      	str	r3, [r2, #24]
 8001596:	4b12      	ldr	r3, [pc, #72]	@ (80015e0 <HAL_MspInit+0x5c>)
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	60bb      	str	r3, [r7, #8]
 80015a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a2:	4b0f      	ldr	r3, [pc, #60]	@ (80015e0 <HAL_MspInit+0x5c>)
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	4a0e      	ldr	r2, [pc, #56]	@ (80015e0 <HAL_MspInit+0x5c>)
 80015a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015ac:	61d3      	str	r3, [r2, #28]
 80015ae:	4b0c      	ldr	r3, [pc, #48]	@ (80015e0 <HAL_MspInit+0x5c>)
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015b6:	607b      	str	r3, [r7, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015ba:	4b0a      	ldr	r3, [pc, #40]	@ (80015e4 <HAL_MspInit+0x60>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	4a04      	ldr	r2, [pc, #16]	@ (80015e4 <HAL_MspInit+0x60>)
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015d6:	bf00      	nop
 80015d8:	3714      	adds	r7, #20
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr
 80015e0:	40021000 	.word	0x40021000
 80015e4:	40010000 	.word	0x40010000

080015e8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b088      	sub	sp, #32
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f0:	f107 0310 	add.w	r3, r7, #16
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a14      	ldr	r2, [pc, #80]	@ (8001654 <HAL_ADC_MspInit+0x6c>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d121      	bne.n	800164c <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001608:	4b13      	ldr	r3, [pc, #76]	@ (8001658 <HAL_ADC_MspInit+0x70>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	4a12      	ldr	r2, [pc, #72]	@ (8001658 <HAL_ADC_MspInit+0x70>)
 800160e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001612:	6193      	str	r3, [r2, #24]
 8001614:	4b10      	ldr	r3, [pc, #64]	@ (8001658 <HAL_ADC_MspInit+0x70>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001620:	4b0d      	ldr	r3, [pc, #52]	@ (8001658 <HAL_ADC_MspInit+0x70>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	4a0c      	ldr	r2, [pc, #48]	@ (8001658 <HAL_ADC_MspInit+0x70>)
 8001626:	f043 0304 	orr.w	r3, r3, #4
 800162a:	6193      	str	r3, [r2, #24]
 800162c:	4b0a      	ldr	r3, [pc, #40]	@ (8001658 <HAL_ADC_MspInit+0x70>)
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	f003 0304 	and.w	r3, r3, #4
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001638:	2301      	movs	r3, #1
 800163a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800163c:	2303      	movs	r3, #3
 800163e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001640:	f107 0310 	add.w	r3, r7, #16
 8001644:	4619      	mov	r1, r3
 8001646:	4805      	ldr	r0, [pc, #20]	@ (800165c <HAL_ADC_MspInit+0x74>)
 8001648:	f001 f8f8 	bl	800283c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800164c:	bf00      	nop
 800164e:	3720      	adds	r7, #32
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40012400 	.word	0x40012400
 8001658:	40021000 	.word	0x40021000
 800165c:	40010800 	.word	0x40010800

08001660 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a1d      	ldr	r2, [pc, #116]	@ (80016e4 <HAL_TIM_Base_MspInit+0x84>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d133      	bne.n	80016da <HAL_TIM_Base_MspInit+0x7a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001672:	4b1d      	ldr	r3, [pc, #116]	@ (80016e8 <HAL_TIM_Base_MspInit+0x88>)
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	4a1c      	ldr	r2, [pc, #112]	@ (80016e8 <HAL_TIM_Base_MspInit+0x88>)
 8001678:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800167c:	6193      	str	r3, [r2, #24]
 800167e:	4b1a      	ldr	r3, [pc, #104]	@ (80016e8 <HAL_TIM_Base_MspInit+0x88>)
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 800168a:	4b18      	ldr	r3, [pc, #96]	@ (80016ec <HAL_TIM_Base_MspInit+0x8c>)
 800168c:	4a18      	ldr	r2, [pc, #96]	@ (80016f0 <HAL_TIM_Base_MspInit+0x90>)
 800168e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001690:	4b16      	ldr	r3, [pc, #88]	@ (80016ec <HAL_TIM_Base_MspInit+0x8c>)
 8001692:	2210      	movs	r2, #16
 8001694:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001696:	4b15      	ldr	r3, [pc, #84]	@ (80016ec <HAL_TIM_Base_MspInit+0x8c>)
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800169c:	4b13      	ldr	r3, [pc, #76]	@ (80016ec <HAL_TIM_Base_MspInit+0x8c>)
 800169e:	2280      	movs	r2, #128	@ 0x80
 80016a0:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016a2:	4b12      	ldr	r3, [pc, #72]	@ (80016ec <HAL_TIM_Base_MspInit+0x8c>)
 80016a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016a8:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016aa:	4b10      	ldr	r3, [pc, #64]	@ (80016ec <HAL_TIM_Base_MspInit+0x8c>)
 80016ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016b0:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80016b2:	4b0e      	ldr	r3, [pc, #56]	@ (80016ec <HAL_TIM_Base_MspInit+0x8c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80016b8:	4b0c      	ldr	r3, [pc, #48]	@ (80016ec <HAL_TIM_Base_MspInit+0x8c>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80016be:	480b      	ldr	r0, [pc, #44]	@ (80016ec <HAL_TIM_Base_MspInit+0x8c>)
 80016c0:	f000 fe56 	bl	8002370 <HAL_DMA_Init>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 80016ca:	f7ff ff55 	bl	8001578 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a06      	ldr	r2, [pc, #24]	@ (80016ec <HAL_TIM_Base_MspInit+0x8c>)
 80016d2:	625a      	str	r2, [r3, #36]	@ 0x24
 80016d4:	4a05      	ldr	r2, [pc, #20]	@ (80016ec <HAL_TIM_Base_MspInit+0x8c>)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80016da:	bf00      	nop
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40012c00 	.word	0x40012c00
 80016e8:	40021000 	.word	0x40021000
 80016ec:	20000130 	.word	0x20000130
 80016f0:	4002001c 	.word	0x4002001c

080016f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b088      	sub	sp, #32
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fc:	f107 0310 	add.w	r3, r7, #16
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a10      	ldr	r2, [pc, #64]	@ (8001750 <HAL_TIM_MspPostInit+0x5c>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d118      	bne.n	8001746 <HAL_TIM_MspPostInit+0x52>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001714:	4b0f      	ldr	r3, [pc, #60]	@ (8001754 <HAL_TIM_MspPostInit+0x60>)
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	4a0e      	ldr	r2, [pc, #56]	@ (8001754 <HAL_TIM_MspPostInit+0x60>)
 800171a:	f043 0304 	orr.w	r3, r3, #4
 800171e:	6193      	str	r3, [r2, #24]
 8001720:	4b0c      	ldr	r3, [pc, #48]	@ (8001754 <HAL_TIM_MspPostInit+0x60>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	f003 0304 	and.w	r3, r3, #4
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800172c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001730:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001732:	2302      	movs	r3, #2
 8001734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001736:	2302      	movs	r3, #2
 8001738:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173a:	f107 0310 	add.w	r3, r7, #16
 800173e:	4619      	mov	r1, r3
 8001740:	4805      	ldr	r0, [pc, #20]	@ (8001758 <HAL_TIM_MspPostInit+0x64>)
 8001742:	f001 f87b 	bl	800283c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001746:	bf00      	nop
 8001748:	3720      	adds	r7, #32
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40012c00 	.word	0x40012c00
 8001754:	40021000 	.word	0x40021000
 8001758:	40010800 	.word	0x40010800

0800175c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001760:	bf00      	nop
 8001762:	e7fd      	b.n	8001760 <NMI_Handler+0x4>

08001764 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001768:	bf00      	nop
 800176a:	e7fd      	b.n	8001768 <HardFault_Handler+0x4>

0800176c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001770:	bf00      	nop
 8001772:	e7fd      	b.n	8001770 <MemManage_Handler+0x4>

08001774 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001778:	bf00      	nop
 800177a:	e7fd      	b.n	8001778 <BusFault_Handler+0x4>

0800177c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001780:	bf00      	nop
 8001782:	e7fd      	b.n	8001780 <UsageFault_Handler+0x4>

08001784 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr

08001790 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr

0800179c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr

080017a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ac:	f000 f940 	bl	8001a30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017b0:	bf00      	nop
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80017b8:	4802      	ldr	r0, [pc, #8]	@ (80017c4 <DMA1_Channel2_IRQHandler+0x10>)
 80017ba:	f000 ff0b 	bl	80025d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000130 	.word	0x20000130

080017c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  return 1;
 80017cc:	2301      	movs	r3, #1
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bc80      	pop	{r7}
 80017d4:	4770      	bx	lr

080017d6 <_kill>:

int _kill(int pid, int sig)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
 80017de:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017e0:	f003 f8ca 	bl	8004978 <__errno>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2216      	movs	r2, #22
 80017e8:	601a      	str	r2, [r3, #0]
  return -1;
 80017ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <_exit>:

void _exit (int status)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b082      	sub	sp, #8
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017fe:	f04f 31ff 	mov.w	r1, #4294967295
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f7ff ffe7 	bl	80017d6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001808:	bf00      	nop
 800180a:	e7fd      	b.n	8001808 <_exit+0x12>

0800180c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001818:	2300      	movs	r3, #0
 800181a:	617b      	str	r3, [r7, #20]
 800181c:	e00a      	b.n	8001834 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800181e:	f3af 8000 	nop.w
 8001822:	4601      	mov	r1, r0
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	1c5a      	adds	r2, r3, #1
 8001828:	60ba      	str	r2, [r7, #8]
 800182a:	b2ca      	uxtb	r2, r1
 800182c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	3301      	adds	r3, #1
 8001832:	617b      	str	r3, [r7, #20]
 8001834:	697a      	ldr	r2, [r7, #20]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	429a      	cmp	r2, r3
 800183a:	dbf0      	blt.n	800181e <_read+0x12>
  }

  return len;
 800183c:	687b      	ldr	r3, [r7, #4]
}
 800183e:	4618      	mov	r0, r3
 8001840:	3718      	adds	r7, #24
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b086      	sub	sp, #24
 800184a:	af00      	add	r7, sp, #0
 800184c:	60f8      	str	r0, [r7, #12]
 800184e:	60b9      	str	r1, [r7, #8]
 8001850:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
 8001856:	e009      	b.n	800186c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	1c5a      	adds	r2, r3, #1
 800185c:	60ba      	str	r2, [r7, #8]
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	4618      	mov	r0, r3
 8001862:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	3301      	adds	r3, #1
 800186a:	617b      	str	r3, [r7, #20]
 800186c:	697a      	ldr	r2, [r7, #20]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	429a      	cmp	r2, r3
 8001872:	dbf1      	blt.n	8001858 <_write+0x12>
  }
  return len;
 8001874:	687b      	ldr	r3, [r7, #4]
}
 8001876:	4618      	mov	r0, r3
 8001878:	3718      	adds	r7, #24
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <_close>:

int _close(int file)
{
 800187e:	b480      	push	{r7}
 8001880:	b083      	sub	sp, #12
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001886:	f04f 33ff 	mov.w	r3, #4294967295
}
 800188a:	4618      	mov	r0, r3
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr

08001894 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018a4:	605a      	str	r2, [r3, #4]
  return 0;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr

080018b2 <_isatty>:

int _isatty(int file)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018ba:	2301      	movs	r3, #1
}
 80018bc:	4618      	mov	r0, r3
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr

080018c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b085      	sub	sp, #20
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	60f8      	str	r0, [r7, #12]
 80018ce:	60b9      	str	r1, [r7, #8]
 80018d0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018d2:	2300      	movs	r3, #0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr
	...

080018e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018e8:	4a14      	ldr	r2, [pc, #80]	@ (800193c <_sbrk+0x5c>)
 80018ea:	4b15      	ldr	r3, [pc, #84]	@ (8001940 <_sbrk+0x60>)
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018f4:	4b13      	ldr	r3, [pc, #76]	@ (8001944 <_sbrk+0x64>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d102      	bne.n	8001902 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018fc:	4b11      	ldr	r3, [pc, #68]	@ (8001944 <_sbrk+0x64>)
 80018fe:	4a12      	ldr	r2, [pc, #72]	@ (8001948 <_sbrk+0x68>)
 8001900:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001902:	4b10      	ldr	r3, [pc, #64]	@ (8001944 <_sbrk+0x64>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4413      	add	r3, r2
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	429a      	cmp	r2, r3
 800190e:	d207      	bcs.n	8001920 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001910:	f003 f832 	bl	8004978 <__errno>
 8001914:	4603      	mov	r3, r0
 8001916:	220c      	movs	r2, #12
 8001918:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800191a:	f04f 33ff 	mov.w	r3, #4294967295
 800191e:	e009      	b.n	8001934 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001920:	4b08      	ldr	r3, [pc, #32]	@ (8001944 <_sbrk+0x64>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001926:	4b07      	ldr	r3, [pc, #28]	@ (8001944 <_sbrk+0x64>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4413      	add	r3, r2
 800192e:	4a05      	ldr	r2, [pc, #20]	@ (8001944 <_sbrk+0x64>)
 8001930:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001932:	68fb      	ldr	r3, [r7, #12]
}
 8001934:	4618      	mov	r0, r3
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20005000 	.word	0x20005000
 8001940:	00000400 	.word	0x00000400
 8001944:	20000f80 	.word	0x20000f80
 8001948:	200010d8 	.word	0x200010d8

0800194c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr

08001958 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001958:	f7ff fff8 	bl	800194c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800195c:	480b      	ldr	r0, [pc, #44]	@ (800198c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800195e:	490c      	ldr	r1, [pc, #48]	@ (8001990 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001960:	4a0c      	ldr	r2, [pc, #48]	@ (8001994 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001964:	e002      	b.n	800196c <LoopCopyDataInit>

08001966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800196a:	3304      	adds	r3, #4

0800196c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800196c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800196e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001970:	d3f9      	bcc.n	8001966 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001972:	4a09      	ldr	r2, [pc, #36]	@ (8001998 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001974:	4c09      	ldr	r4, [pc, #36]	@ (800199c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001978:	e001      	b.n	800197e <LoopFillZerobss>

0800197a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800197a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800197c:	3204      	adds	r2, #4

0800197e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800197e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001980:	d3fb      	bcc.n	800197a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001982:	f002 ffff 	bl	8004984 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001986:	f7ff fbbb 	bl	8001100 <main>
  bx lr
 800198a:	4770      	bx	lr
  ldr r0, =_sdata
 800198c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001990:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8001994:	080058a0 	.word	0x080058a0
  ldr r2, =_sbss
 8001998:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 800199c:	200010d4 	.word	0x200010d4

080019a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019a0:	e7fe      	b.n	80019a0 <ADC1_2_IRQHandler>
	...

080019a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019a8:	4b08      	ldr	r3, [pc, #32]	@ (80019cc <HAL_Init+0x28>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a07      	ldr	r2, [pc, #28]	@ (80019cc <HAL_Init+0x28>)
 80019ae:	f043 0310 	orr.w	r3, r3, #16
 80019b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b4:	2003      	movs	r0, #3
 80019b6:	f000 fc99 	bl	80022ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ba:	200f      	movs	r0, #15
 80019bc:	f000 f808 	bl	80019d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019c0:	f7ff fde0 	bl	8001584 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40022000 	.word	0x40022000

080019d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019d8:	4b12      	ldr	r3, [pc, #72]	@ (8001a24 <HAL_InitTick+0x54>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	4b12      	ldr	r3, [pc, #72]	@ (8001a28 <HAL_InitTick+0x58>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	4619      	mov	r1, r3
 80019e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ee:	4618      	mov	r0, r3
 80019f0:	f000 fcb1 	bl	8002356 <HAL_SYSTICK_Config>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e00e      	b.n	8001a1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b0f      	cmp	r3, #15
 8001a02:	d80a      	bhi.n	8001a1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a04:	2200      	movs	r2, #0
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	f04f 30ff 	mov.w	r0, #4294967295
 8001a0c:	f000 fc79 	bl	8002302 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a10:	4a06      	ldr	r2, [pc, #24]	@ (8001a2c <HAL_InitTick+0x5c>)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a16:	2300      	movs	r3, #0
 8001a18:	e000      	b.n	8001a1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20000034 	.word	0x20000034
 8001a28:	2000003c 	.word	0x2000003c
 8001a2c:	20000038 	.word	0x20000038

08001a30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a34:	4b05      	ldr	r3, [pc, #20]	@ (8001a4c <HAL_IncTick+0x1c>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4b05      	ldr	r3, [pc, #20]	@ (8001a50 <HAL_IncTick+0x20>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4413      	add	r3, r2
 8001a40:	4a03      	ldr	r2, [pc, #12]	@ (8001a50 <HAL_IncTick+0x20>)
 8001a42:	6013      	str	r3, [r2, #0]
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr
 8001a4c:	2000003c 	.word	0x2000003c
 8001a50:	20000f84 	.word	0x20000f84

08001a54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  return uwTick;
 8001a58:	4b02      	ldr	r3, [pc, #8]	@ (8001a64 <HAL_GetTick+0x10>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr
 8001a64:	20000f84 	.word	0x20000f84

08001a68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a70:	f7ff fff0 	bl	8001a54 <HAL_GetTick>
 8001a74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a80:	d005      	beq.n	8001a8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a82:	4b0a      	ldr	r3, [pc, #40]	@ (8001aac <HAL_Delay+0x44>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	461a      	mov	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a8e:	bf00      	nop
 8001a90:	f7ff ffe0 	bl	8001a54 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d8f7      	bhi.n	8001a90 <HAL_Delay+0x28>
  {
  }
}
 8001aa0:	bf00      	nop
 8001aa2:	bf00      	nop
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	2000003c 	.word	0x2000003c

08001ab0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e0be      	b.n	8001c50 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d109      	bne.n	8001af4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff fd7a 	bl	80015e8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f000 faeb 	bl	80020d0 <ADC_ConversionStop_Disable>
 8001afa:	4603      	mov	r3, r0
 8001afc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b02:	f003 0310 	and.w	r3, r3, #16
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f040 8099 	bne.w	8001c3e <HAL_ADC_Init+0x18e>
 8001b0c:	7dfb      	ldrb	r3, [r7, #23]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f040 8095 	bne.w	8001c3e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b18:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001b1c:	f023 0302 	bic.w	r3, r3, #2
 8001b20:	f043 0202 	orr.w	r2, r3, #2
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b30:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	7b1b      	ldrb	r3, [r3, #12]
 8001b36:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b38:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b3a:	68ba      	ldr	r2, [r7, #8]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b48:	d003      	beq.n	8001b52 <HAL_ADC_Init+0xa2>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d102      	bne.n	8001b58 <HAL_ADC_Init+0xa8>
 8001b52:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b56:	e000      	b.n	8001b5a <HAL_ADC_Init+0xaa>
 8001b58:	2300      	movs	r3, #0
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	7d1b      	ldrb	r3, [r3, #20]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d119      	bne.n	8001b9c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	7b1b      	ldrb	r3, [r3, #12]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d109      	bne.n	8001b84 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	3b01      	subs	r3, #1
 8001b76:	035a      	lsls	r2, r3, #13
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b80:	613b      	str	r3, [r7, #16]
 8001b82:	e00b      	b.n	8001b9c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b88:	f043 0220 	orr.w	r2, r3, #32
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b94:	f043 0201 	orr.w	r2, r3, #1
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	430a      	orrs	r2, r1
 8001bae:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	689a      	ldr	r2, [r3, #8]
 8001bb6:	4b28      	ldr	r3, [pc, #160]	@ (8001c58 <HAL_ADC_Init+0x1a8>)
 8001bb8:	4013      	ands	r3, r2
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	6812      	ldr	r2, [r2, #0]
 8001bbe:	68b9      	ldr	r1, [r7, #8]
 8001bc0:	430b      	orrs	r3, r1
 8001bc2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001bcc:	d003      	beq.n	8001bd6 <HAL_ADC_Init+0x126>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d104      	bne.n	8001be0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	051b      	lsls	r3, r3, #20
 8001bde:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001be6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	689a      	ldr	r2, [r3, #8]
 8001bfa:	4b18      	ldr	r3, [pc, #96]	@ (8001c5c <HAL_ADC_Init+0x1ac>)
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d10b      	bne.n	8001c1c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c0e:	f023 0303 	bic.w	r3, r3, #3
 8001c12:	f043 0201 	orr.w	r2, r3, #1
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c1a:	e018      	b.n	8001c4e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c20:	f023 0312 	bic.w	r3, r3, #18
 8001c24:	f043 0210 	orr.w	r2, r3, #16
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c30:	f043 0201 	orr.w	r2, r3, #1
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c3c:	e007      	b.n	8001c4e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c42:	f043 0210 	orr.w	r2, r3, #16
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	ffe1f7fd 	.word	0xffe1f7fd
 8001c5c:	ff1f0efe 	.word	0xff1f0efe

08001c60 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d101      	bne.n	8001c7a <HAL_ADC_Start+0x1a>
 8001c76:	2302      	movs	r3, #2
 8001c78:	e098      	b.n	8001dac <HAL_ADC_Start+0x14c>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f9ca 	bl	800201c <ADC_Enable>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001c8c:	7bfb      	ldrb	r3, [r7, #15]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f040 8087 	bne.w	8001da2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c9c:	f023 0301 	bic.w	r3, r3, #1
 8001ca0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a41      	ldr	r2, [pc, #260]	@ (8001db4 <HAL_ADC_Start+0x154>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d105      	bne.n	8001cbe <HAL_ADC_Start+0x5e>
 8001cb2:	4b41      	ldr	r3, [pc, #260]	@ (8001db8 <HAL_ADC_Start+0x158>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d115      	bne.n	8001cea <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cc2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d026      	beq.n	8001d26 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cdc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001ce0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ce8:	e01d      	b.n	8001d26 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cee:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a2f      	ldr	r2, [pc, #188]	@ (8001db8 <HAL_ADC_Start+0x158>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d004      	beq.n	8001d0a <HAL_ADC_Start+0xaa>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a2b      	ldr	r2, [pc, #172]	@ (8001db4 <HAL_ADC_Start+0x154>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d10d      	bne.n	8001d26 <HAL_ADC_Start+0xc6>
 8001d0a:	4b2b      	ldr	r3, [pc, #172]	@ (8001db8 <HAL_ADC_Start+0x158>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d007      	beq.n	8001d26 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d1a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d1e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d006      	beq.n	8001d40 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d36:	f023 0206 	bic.w	r2, r3, #6
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001d3e:	e002      	b.n	8001d46 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f06f 0202 	mvn.w	r2, #2
 8001d56:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001d62:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001d66:	d113      	bne.n	8001d90 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d6c:	4a11      	ldr	r2, [pc, #68]	@ (8001db4 <HAL_ADC_Start+0x154>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d105      	bne.n	8001d7e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001d72:	4b11      	ldr	r3, [pc, #68]	@ (8001db8 <HAL_ADC_Start+0x158>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d108      	bne.n	8001d90 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001d8c:	609a      	str	r2, [r3, #8]
 8001d8e:	e00c      	b.n	8001daa <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	689a      	ldr	r2, [r3, #8]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	e003      	b.n	8001daa <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3710      	adds	r7, #16
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40012800 	.word	0x40012800
 8001db8:	40012400 	.word	0x40012400

08001dbc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d101      	bne.n	8001dd6 <HAL_ADC_Stop+0x1a>
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	e01a      	b.n	8001e0c <HAL_ADC_Stop+0x50>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f976 	bl	80020d0 <ADC_ConversionStop_Disable>
 8001de4:	4603      	mov	r3, r0
 8001de6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001de8:	7bfb      	ldrb	r3, [r7, #15]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d109      	bne.n	8001e02 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001df6:	f023 0301 	bic.w	r3, r3, #1
 8001dfa:	f043 0201 	orr.w	r2, r3, #1
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr

08001e2c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e36:	2300      	movs	r3, #0
 8001e38:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d101      	bne.n	8001e4c <HAL_ADC_ConfigChannel+0x20>
 8001e48:	2302      	movs	r3, #2
 8001e4a:	e0dc      	b.n	8002006 <HAL_ADC_ConfigChannel+0x1da>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	2b06      	cmp	r3, #6
 8001e5a:	d81c      	bhi.n	8001e96 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685a      	ldr	r2, [r3, #4]
 8001e66:	4613      	mov	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	3b05      	subs	r3, #5
 8001e6e:	221f      	movs	r2, #31
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	4019      	ands	r1, r3
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	6818      	ldr	r0, [r3, #0]
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	4613      	mov	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	4413      	add	r3, r2
 8001e86:	3b05      	subs	r3, #5
 8001e88:	fa00 f203 	lsl.w	r2, r0, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	430a      	orrs	r2, r1
 8001e92:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e94:	e03c      	b.n	8001f10 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b0c      	cmp	r3, #12
 8001e9c:	d81c      	bhi.n	8001ed8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4413      	add	r3, r2
 8001eae:	3b23      	subs	r3, #35	@ 0x23
 8001eb0:	221f      	movs	r2, #31
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	4019      	ands	r1, r3
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	6818      	ldr	r0, [r3, #0]
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	4413      	add	r3, r2
 8001ec8:	3b23      	subs	r3, #35	@ 0x23
 8001eca:	fa00 f203 	lsl.w	r2, r0, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ed6:	e01b      	b.n	8001f10 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4413      	add	r3, r2
 8001ee8:	3b41      	subs	r3, #65	@ 0x41
 8001eea:	221f      	movs	r2, #31
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	4019      	ands	r1, r3
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	6818      	ldr	r0, [r3, #0]
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	4613      	mov	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4413      	add	r3, r2
 8001f02:	3b41      	subs	r3, #65	@ 0x41
 8001f04:	fa00 f203 	lsl.w	r2, r0, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2b09      	cmp	r3, #9
 8001f16:	d91c      	bls.n	8001f52 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68d9      	ldr	r1, [r3, #12]
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	4613      	mov	r3, r2
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	4413      	add	r3, r2
 8001f28:	3b1e      	subs	r3, #30
 8001f2a:	2207      	movs	r2, #7
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	4019      	ands	r1, r3
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	6898      	ldr	r0, [r3, #8]
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	4413      	add	r3, r2
 8001f42:	3b1e      	subs	r3, #30
 8001f44:	fa00 f203 	lsl.w	r2, r0, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	60da      	str	r2, [r3, #12]
 8001f50:	e019      	b.n	8001f86 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6919      	ldr	r1, [r3, #16]
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	4413      	add	r3, r2
 8001f62:	2207      	movs	r2, #7
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	4019      	ands	r1, r3
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	6898      	ldr	r0, [r3, #8]
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	4613      	mov	r3, r2
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	4413      	add	r3, r2
 8001f7a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2b10      	cmp	r3, #16
 8001f8c:	d003      	beq.n	8001f96 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f92:	2b11      	cmp	r3, #17
 8001f94:	d132      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a1d      	ldr	r2, [pc, #116]	@ (8002010 <HAL_ADC_ConfigChannel+0x1e4>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d125      	bne.n	8001fec <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d126      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001fbc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2b10      	cmp	r3, #16
 8001fc4:	d11a      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fc6:	4b13      	ldr	r3, [pc, #76]	@ (8002014 <HAL_ADC_ConfigChannel+0x1e8>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a13      	ldr	r2, [pc, #76]	@ (8002018 <HAL_ADC_ConfigChannel+0x1ec>)
 8001fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd0:	0c9a      	lsrs	r2, r3, #18
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4413      	add	r3, r2
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fdc:	e002      	b.n	8001fe4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1f9      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x1b2>
 8001fea:	e007      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ff0:	f043 0220 	orr.w	r2, r3, #32
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002004:	7bfb      	ldrb	r3, [r7, #15]
}
 8002006:	4618      	mov	r0, r3
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr
 8002010:	40012400 	.word	0x40012400
 8002014:	20000034 	.word	0x20000034
 8002018:	431bde83 	.word	0x431bde83

0800201c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002024:	2300      	movs	r3, #0
 8002026:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002028:	2300      	movs	r3, #0
 800202a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b01      	cmp	r3, #1
 8002038:	d040      	beq.n	80020bc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	689a      	ldr	r2, [r3, #8]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f042 0201 	orr.w	r2, r2, #1
 8002048:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800204a:	4b1f      	ldr	r3, [pc, #124]	@ (80020c8 <ADC_Enable+0xac>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a1f      	ldr	r2, [pc, #124]	@ (80020cc <ADC_Enable+0xb0>)
 8002050:	fba2 2303 	umull	r2, r3, r2, r3
 8002054:	0c9b      	lsrs	r3, r3, #18
 8002056:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002058:	e002      	b.n	8002060 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	3b01      	subs	r3, #1
 800205e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f9      	bne.n	800205a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002066:	f7ff fcf5 	bl	8001a54 <HAL_GetTick>
 800206a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800206c:	e01f      	b.n	80020ae <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800206e:	f7ff fcf1 	bl	8001a54 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d918      	bls.n	80020ae <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b01      	cmp	r3, #1
 8002088:	d011      	beq.n	80020ae <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800208e:	f043 0210 	orr.w	r2, r3, #16
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800209a:	f043 0201 	orr.w	r2, r3, #1
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e007      	b.n	80020be <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f003 0301 	and.w	r3, r3, #1
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d1d8      	bne.n	800206e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	20000034 	.word	0x20000034
 80020cc:	431bde83 	.word	0x431bde83

080020d0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020d8:	2300      	movs	r3, #0
 80020da:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d12e      	bne.n	8002148 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f022 0201 	bic.w	r2, r2, #1
 80020f8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80020fa:	f7ff fcab 	bl	8001a54 <HAL_GetTick>
 80020fe:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002100:	e01b      	b.n	800213a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002102:	f7ff fca7 	bl	8001a54 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d914      	bls.n	800213a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b01      	cmp	r3, #1
 800211c:	d10d      	bne.n	800213a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002122:	f043 0210 	orr.w	r2, r3, #16
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800212e:	f043 0201 	orr.w	r2, r3, #1
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e007      	b.n	800214a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	2b01      	cmp	r3, #1
 8002146:	d0dc      	beq.n	8002102 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
	...

08002154 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002164:	4b0c      	ldr	r3, [pc, #48]	@ (8002198 <__NVIC_SetPriorityGrouping+0x44>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800216a:	68ba      	ldr	r2, [r7, #8]
 800216c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002170:	4013      	ands	r3, r2
 8002172:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800217c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002180:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002184:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002186:	4a04      	ldr	r2, [pc, #16]	@ (8002198 <__NVIC_SetPriorityGrouping+0x44>)
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	60d3      	str	r3, [r2, #12]
}
 800218c:	bf00      	nop
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	bc80      	pop	{r7}
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	e000ed00 	.word	0xe000ed00

0800219c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021a0:	4b04      	ldr	r3, [pc, #16]	@ (80021b4 <__NVIC_GetPriorityGrouping+0x18>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	0a1b      	lsrs	r3, r3, #8
 80021a6:	f003 0307 	and.w	r3, r3, #7
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bc80      	pop	{r7}
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	e000ed00 	.word	0xe000ed00

080021b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	db0b      	blt.n	80021e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ca:	79fb      	ldrb	r3, [r7, #7]
 80021cc:	f003 021f 	and.w	r2, r3, #31
 80021d0:	4906      	ldr	r1, [pc, #24]	@ (80021ec <__NVIC_EnableIRQ+0x34>)
 80021d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d6:	095b      	lsrs	r3, r3, #5
 80021d8:	2001      	movs	r0, #1
 80021da:	fa00 f202 	lsl.w	r2, r0, r2
 80021de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bc80      	pop	{r7}
 80021ea:	4770      	bx	lr
 80021ec:	e000e100 	.word	0xe000e100

080021f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	6039      	str	r1, [r7, #0]
 80021fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002200:	2b00      	cmp	r3, #0
 8002202:	db0a      	blt.n	800221a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	b2da      	uxtb	r2, r3
 8002208:	490c      	ldr	r1, [pc, #48]	@ (800223c <__NVIC_SetPriority+0x4c>)
 800220a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220e:	0112      	lsls	r2, r2, #4
 8002210:	b2d2      	uxtb	r2, r2
 8002212:	440b      	add	r3, r1
 8002214:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002218:	e00a      	b.n	8002230 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	b2da      	uxtb	r2, r3
 800221e:	4908      	ldr	r1, [pc, #32]	@ (8002240 <__NVIC_SetPriority+0x50>)
 8002220:	79fb      	ldrb	r3, [r7, #7]
 8002222:	f003 030f 	and.w	r3, r3, #15
 8002226:	3b04      	subs	r3, #4
 8002228:	0112      	lsls	r2, r2, #4
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	440b      	add	r3, r1
 800222e:	761a      	strb	r2, [r3, #24]
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	bc80      	pop	{r7}
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	e000e100 	.word	0xe000e100
 8002240:	e000ed00 	.word	0xe000ed00

08002244 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002244:	b480      	push	{r7}
 8002246:	b089      	sub	sp, #36	@ 0x24
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	f1c3 0307 	rsb	r3, r3, #7
 800225e:	2b04      	cmp	r3, #4
 8002260:	bf28      	it	cs
 8002262:	2304      	movcs	r3, #4
 8002264:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	3304      	adds	r3, #4
 800226a:	2b06      	cmp	r3, #6
 800226c:	d902      	bls.n	8002274 <NVIC_EncodePriority+0x30>
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	3b03      	subs	r3, #3
 8002272:	e000      	b.n	8002276 <NVIC_EncodePriority+0x32>
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002278:	f04f 32ff 	mov.w	r2, #4294967295
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43da      	mvns	r2, r3
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	401a      	ands	r2, r3
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800228c:	f04f 31ff 	mov.w	r1, #4294967295
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	fa01 f303 	lsl.w	r3, r1, r3
 8002296:	43d9      	mvns	r1, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800229c:	4313      	orrs	r3, r2
         );
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3724      	adds	r7, #36	@ 0x24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr

080022a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3b01      	subs	r3, #1
 80022b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022b8:	d301      	bcc.n	80022be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ba:	2301      	movs	r3, #1
 80022bc:	e00f      	b.n	80022de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022be:	4a0a      	ldr	r2, [pc, #40]	@ (80022e8 <SysTick_Config+0x40>)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3b01      	subs	r3, #1
 80022c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022c6:	210f      	movs	r1, #15
 80022c8:	f04f 30ff 	mov.w	r0, #4294967295
 80022cc:	f7ff ff90 	bl	80021f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022d0:	4b05      	ldr	r3, [pc, #20]	@ (80022e8 <SysTick_Config+0x40>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022d6:	4b04      	ldr	r3, [pc, #16]	@ (80022e8 <SysTick_Config+0x40>)
 80022d8:	2207      	movs	r2, #7
 80022da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	e000e010 	.word	0xe000e010

080022ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f7ff ff2d 	bl	8002154 <__NVIC_SetPriorityGrouping>
}
 80022fa:	bf00      	nop
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002302:	b580      	push	{r7, lr}
 8002304:	b086      	sub	sp, #24
 8002306:	af00      	add	r7, sp, #0
 8002308:	4603      	mov	r3, r0
 800230a:	60b9      	str	r1, [r7, #8]
 800230c:	607a      	str	r2, [r7, #4]
 800230e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002310:	2300      	movs	r3, #0
 8002312:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002314:	f7ff ff42 	bl	800219c <__NVIC_GetPriorityGrouping>
 8002318:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	68b9      	ldr	r1, [r7, #8]
 800231e:	6978      	ldr	r0, [r7, #20]
 8002320:	f7ff ff90 	bl	8002244 <NVIC_EncodePriority>
 8002324:	4602      	mov	r2, r0
 8002326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800232a:	4611      	mov	r1, r2
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff ff5f 	bl	80021f0 <__NVIC_SetPriority>
}
 8002332:	bf00      	nop
 8002334:	3718      	adds	r7, #24
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b082      	sub	sp, #8
 800233e:	af00      	add	r7, sp, #0
 8002340:	4603      	mov	r3, r0
 8002342:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff ff35 	bl	80021b8 <__NVIC_EnableIRQ>
}
 800234e:	bf00      	nop
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b082      	sub	sp, #8
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7ff ffa2 	bl	80022a8 <SysTick_Config>
 8002364:	4603      	mov	r3, r0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
	...

08002370 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002378:	2300      	movs	r3, #0
 800237a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e043      	b.n	800240e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	461a      	mov	r2, r3
 800238c:	4b22      	ldr	r3, [pc, #136]	@ (8002418 <HAL_DMA_Init+0xa8>)
 800238e:	4413      	add	r3, r2
 8002390:	4a22      	ldr	r2, [pc, #136]	@ (800241c <HAL_DMA_Init+0xac>)
 8002392:	fba2 2303 	umull	r2, r3, r2, r3
 8002396:	091b      	lsrs	r3, r3, #4
 8002398:	009a      	lsls	r2, r3, #2
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a1f      	ldr	r2, [pc, #124]	@ (8002420 <HAL_DMA_Init+0xb0>)
 80023a2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2202      	movs	r2, #2
 80023a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80023ba:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80023be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80023c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	bc80      	pop	{r7}
 8002416:	4770      	bx	lr
 8002418:	bffdfff8 	.word	0xbffdfff8
 800241c:	cccccccd 	.word	0xcccccccd
 8002420:	40020000 	.word	0x40020000

08002424 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
 8002430:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002432:	2300      	movs	r3, #0
 8002434:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f893 3020 	ldrb.w	r3, [r3, #32]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d101      	bne.n	8002444 <HAL_DMA_Start_IT+0x20>
 8002440:	2302      	movs	r3, #2
 8002442:	e04b      	b.n	80024dc <HAL_DMA_Start_IT+0xb8>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b01      	cmp	r3, #1
 8002456:	d13a      	bne.n	80024ce <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2202      	movs	r2, #2
 800245c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0201 	bic.w	r2, r2, #1
 8002474:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	68b9      	ldr	r1, [r7, #8]
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f000 f9af 	bl	80027e0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002486:	2b00      	cmp	r3, #0
 8002488:	d008      	beq.n	800249c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f042 020e 	orr.w	r2, r2, #14
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	e00f      	b.n	80024bc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f022 0204 	bic.w	r2, r2, #4
 80024aa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 020a 	orr.w	r2, r2, #10
 80024ba:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f042 0201 	orr.w	r2, r2, #1
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	e005      	b.n	80024da <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80024d6:	2302      	movs	r3, #2
 80024d8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80024da:	7dfb      	ldrb	r3, [r7, #23]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3718      	adds	r7, #24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024ec:	2300      	movs	r3, #0
 80024ee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d005      	beq.n	8002508 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2204      	movs	r2, #4
 8002500:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	73fb      	strb	r3, [r7, #15]
 8002506:	e051      	b.n	80025ac <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 020e 	bic.w	r2, r2, #14
 8002516:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f022 0201 	bic.w	r2, r2, #1
 8002526:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a22      	ldr	r2, [pc, #136]	@ (80025b8 <HAL_DMA_Abort_IT+0xd4>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d029      	beq.n	8002586 <HAL_DMA_Abort_IT+0xa2>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a21      	ldr	r2, [pc, #132]	@ (80025bc <HAL_DMA_Abort_IT+0xd8>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d022      	beq.n	8002582 <HAL_DMA_Abort_IT+0x9e>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a1f      	ldr	r2, [pc, #124]	@ (80025c0 <HAL_DMA_Abort_IT+0xdc>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d01a      	beq.n	800257c <HAL_DMA_Abort_IT+0x98>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a1e      	ldr	r2, [pc, #120]	@ (80025c4 <HAL_DMA_Abort_IT+0xe0>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d012      	beq.n	8002576 <HAL_DMA_Abort_IT+0x92>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a1c      	ldr	r2, [pc, #112]	@ (80025c8 <HAL_DMA_Abort_IT+0xe4>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d00a      	beq.n	8002570 <HAL_DMA_Abort_IT+0x8c>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a1b      	ldr	r2, [pc, #108]	@ (80025cc <HAL_DMA_Abort_IT+0xe8>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d102      	bne.n	800256a <HAL_DMA_Abort_IT+0x86>
 8002564:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002568:	e00e      	b.n	8002588 <HAL_DMA_Abort_IT+0xa4>
 800256a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800256e:	e00b      	b.n	8002588 <HAL_DMA_Abort_IT+0xa4>
 8002570:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002574:	e008      	b.n	8002588 <HAL_DMA_Abort_IT+0xa4>
 8002576:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800257a:	e005      	b.n	8002588 <HAL_DMA_Abort_IT+0xa4>
 800257c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002580:	e002      	b.n	8002588 <HAL_DMA_Abort_IT+0xa4>
 8002582:	2310      	movs	r3, #16
 8002584:	e000      	b.n	8002588 <HAL_DMA_Abort_IT+0xa4>
 8002586:	2301      	movs	r3, #1
 8002588:	4a11      	ldr	r2, [pc, #68]	@ (80025d0 <HAL_DMA_Abort_IT+0xec>)
 800258a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d003      	beq.n	80025ac <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	4798      	blx	r3
    } 
  }
  return status;
 80025ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40020008 	.word	0x40020008
 80025bc:	4002001c 	.word	0x4002001c
 80025c0:	40020030 	.word	0x40020030
 80025c4:	40020044 	.word	0x40020044
 80025c8:	40020058 	.word	0x40020058
 80025cc:	4002006c 	.word	0x4002006c
 80025d0:	40020000 	.word	0x40020000

080025d4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f0:	2204      	movs	r2, #4
 80025f2:	409a      	lsls	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	4013      	ands	r3, r2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d04f      	beq.n	800269c <HAL_DMA_IRQHandler+0xc8>
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	f003 0304 	and.w	r3, r3, #4
 8002602:	2b00      	cmp	r3, #0
 8002604:	d04a      	beq.n	800269c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0320 	and.w	r3, r3, #32
 8002610:	2b00      	cmp	r3, #0
 8002612:	d107      	bne.n	8002624 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 0204 	bic.w	r2, r2, #4
 8002622:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a66      	ldr	r2, [pc, #408]	@ (80027c4 <HAL_DMA_IRQHandler+0x1f0>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d029      	beq.n	8002682 <HAL_DMA_IRQHandler+0xae>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a65      	ldr	r2, [pc, #404]	@ (80027c8 <HAL_DMA_IRQHandler+0x1f4>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d022      	beq.n	800267e <HAL_DMA_IRQHandler+0xaa>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a63      	ldr	r2, [pc, #396]	@ (80027cc <HAL_DMA_IRQHandler+0x1f8>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d01a      	beq.n	8002678 <HAL_DMA_IRQHandler+0xa4>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a62      	ldr	r2, [pc, #392]	@ (80027d0 <HAL_DMA_IRQHandler+0x1fc>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d012      	beq.n	8002672 <HAL_DMA_IRQHandler+0x9e>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a60      	ldr	r2, [pc, #384]	@ (80027d4 <HAL_DMA_IRQHandler+0x200>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d00a      	beq.n	800266c <HAL_DMA_IRQHandler+0x98>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a5f      	ldr	r2, [pc, #380]	@ (80027d8 <HAL_DMA_IRQHandler+0x204>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d102      	bne.n	8002666 <HAL_DMA_IRQHandler+0x92>
 8002660:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002664:	e00e      	b.n	8002684 <HAL_DMA_IRQHandler+0xb0>
 8002666:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800266a:	e00b      	b.n	8002684 <HAL_DMA_IRQHandler+0xb0>
 800266c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002670:	e008      	b.n	8002684 <HAL_DMA_IRQHandler+0xb0>
 8002672:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002676:	e005      	b.n	8002684 <HAL_DMA_IRQHandler+0xb0>
 8002678:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800267c:	e002      	b.n	8002684 <HAL_DMA_IRQHandler+0xb0>
 800267e:	2340      	movs	r3, #64	@ 0x40
 8002680:	e000      	b.n	8002684 <HAL_DMA_IRQHandler+0xb0>
 8002682:	2304      	movs	r3, #4
 8002684:	4a55      	ldr	r2, [pc, #340]	@ (80027dc <HAL_DMA_IRQHandler+0x208>)
 8002686:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 8094 	beq.w	80027ba <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800269a:	e08e      	b.n	80027ba <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a0:	2202      	movs	r2, #2
 80026a2:	409a      	lsls	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	4013      	ands	r3, r2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d056      	beq.n	800275a <HAL_DMA_IRQHandler+0x186>
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d051      	beq.n	800275a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0320 	and.w	r3, r3, #32
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d10b      	bne.n	80026dc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 020a 	bic.w	r2, r2, #10
 80026d2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a38      	ldr	r2, [pc, #224]	@ (80027c4 <HAL_DMA_IRQHandler+0x1f0>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d029      	beq.n	800273a <HAL_DMA_IRQHandler+0x166>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a37      	ldr	r2, [pc, #220]	@ (80027c8 <HAL_DMA_IRQHandler+0x1f4>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d022      	beq.n	8002736 <HAL_DMA_IRQHandler+0x162>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a35      	ldr	r2, [pc, #212]	@ (80027cc <HAL_DMA_IRQHandler+0x1f8>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d01a      	beq.n	8002730 <HAL_DMA_IRQHandler+0x15c>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a34      	ldr	r2, [pc, #208]	@ (80027d0 <HAL_DMA_IRQHandler+0x1fc>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d012      	beq.n	800272a <HAL_DMA_IRQHandler+0x156>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a32      	ldr	r2, [pc, #200]	@ (80027d4 <HAL_DMA_IRQHandler+0x200>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d00a      	beq.n	8002724 <HAL_DMA_IRQHandler+0x150>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a31      	ldr	r2, [pc, #196]	@ (80027d8 <HAL_DMA_IRQHandler+0x204>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d102      	bne.n	800271e <HAL_DMA_IRQHandler+0x14a>
 8002718:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800271c:	e00e      	b.n	800273c <HAL_DMA_IRQHandler+0x168>
 800271e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002722:	e00b      	b.n	800273c <HAL_DMA_IRQHandler+0x168>
 8002724:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002728:	e008      	b.n	800273c <HAL_DMA_IRQHandler+0x168>
 800272a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800272e:	e005      	b.n	800273c <HAL_DMA_IRQHandler+0x168>
 8002730:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002734:	e002      	b.n	800273c <HAL_DMA_IRQHandler+0x168>
 8002736:	2320      	movs	r3, #32
 8002738:	e000      	b.n	800273c <HAL_DMA_IRQHandler+0x168>
 800273a:	2302      	movs	r3, #2
 800273c:	4a27      	ldr	r2, [pc, #156]	@ (80027dc <HAL_DMA_IRQHandler+0x208>)
 800273e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800274c:	2b00      	cmp	r3, #0
 800274e:	d034      	beq.n	80027ba <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002758:	e02f      	b.n	80027ba <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275e:	2208      	movs	r2, #8
 8002760:	409a      	lsls	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	4013      	ands	r3, r2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d028      	beq.n	80027bc <HAL_DMA_IRQHandler+0x1e8>
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	f003 0308 	and.w	r3, r3, #8
 8002770:	2b00      	cmp	r3, #0
 8002772:	d023      	beq.n	80027bc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f022 020e 	bic.w	r2, r2, #14
 8002782:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800278c:	2101      	movs	r1, #1
 800278e:	fa01 f202 	lsl.w	r2, r1, r2
 8002792:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d004      	beq.n	80027bc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	4798      	blx	r3
    }
  }
  return;
 80027ba:	bf00      	nop
 80027bc:	bf00      	nop
}
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40020008 	.word	0x40020008
 80027c8:	4002001c 	.word	0x4002001c
 80027cc:	40020030 	.word	0x40020030
 80027d0:	40020044 	.word	0x40020044
 80027d4:	40020058 	.word	0x40020058
 80027d8:	4002006c 	.word	0x4002006c
 80027dc:	40020000 	.word	0x40020000

080027e0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
 80027ec:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027f6:	2101      	movs	r1, #1
 80027f8:	fa01 f202 	lsl.w	r2, r1, r2
 80027fc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	2b10      	cmp	r3, #16
 800280c:	d108      	bne.n	8002820 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800281e:	e007      	b.n	8002830 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68ba      	ldr	r2, [r7, #8]
 8002826:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	60da      	str	r2, [r3, #12]
}
 8002830:	bf00      	nop
 8002832:	3714      	adds	r7, #20
 8002834:	46bd      	mov	sp, r7
 8002836:	bc80      	pop	{r7}
 8002838:	4770      	bx	lr
	...

0800283c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800283c:	b480      	push	{r7}
 800283e:	b08b      	sub	sp, #44	@ 0x2c
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002846:	2300      	movs	r3, #0
 8002848:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800284a:	2300      	movs	r3, #0
 800284c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800284e:	e169      	b.n	8002b24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002850:	2201      	movs	r2, #1
 8002852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	69fa      	ldr	r2, [r7, #28]
 8002860:	4013      	ands	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	429a      	cmp	r2, r3
 800286a:	f040 8158 	bne.w	8002b1e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	4a9a      	ldr	r2, [pc, #616]	@ (8002adc <HAL_GPIO_Init+0x2a0>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d05e      	beq.n	8002936 <HAL_GPIO_Init+0xfa>
 8002878:	4a98      	ldr	r2, [pc, #608]	@ (8002adc <HAL_GPIO_Init+0x2a0>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d875      	bhi.n	800296a <HAL_GPIO_Init+0x12e>
 800287e:	4a98      	ldr	r2, [pc, #608]	@ (8002ae0 <HAL_GPIO_Init+0x2a4>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d058      	beq.n	8002936 <HAL_GPIO_Init+0xfa>
 8002884:	4a96      	ldr	r2, [pc, #600]	@ (8002ae0 <HAL_GPIO_Init+0x2a4>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d86f      	bhi.n	800296a <HAL_GPIO_Init+0x12e>
 800288a:	4a96      	ldr	r2, [pc, #600]	@ (8002ae4 <HAL_GPIO_Init+0x2a8>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d052      	beq.n	8002936 <HAL_GPIO_Init+0xfa>
 8002890:	4a94      	ldr	r2, [pc, #592]	@ (8002ae4 <HAL_GPIO_Init+0x2a8>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d869      	bhi.n	800296a <HAL_GPIO_Init+0x12e>
 8002896:	4a94      	ldr	r2, [pc, #592]	@ (8002ae8 <HAL_GPIO_Init+0x2ac>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d04c      	beq.n	8002936 <HAL_GPIO_Init+0xfa>
 800289c:	4a92      	ldr	r2, [pc, #584]	@ (8002ae8 <HAL_GPIO_Init+0x2ac>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d863      	bhi.n	800296a <HAL_GPIO_Init+0x12e>
 80028a2:	4a92      	ldr	r2, [pc, #584]	@ (8002aec <HAL_GPIO_Init+0x2b0>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d046      	beq.n	8002936 <HAL_GPIO_Init+0xfa>
 80028a8:	4a90      	ldr	r2, [pc, #576]	@ (8002aec <HAL_GPIO_Init+0x2b0>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d85d      	bhi.n	800296a <HAL_GPIO_Init+0x12e>
 80028ae:	2b12      	cmp	r3, #18
 80028b0:	d82a      	bhi.n	8002908 <HAL_GPIO_Init+0xcc>
 80028b2:	2b12      	cmp	r3, #18
 80028b4:	d859      	bhi.n	800296a <HAL_GPIO_Init+0x12e>
 80028b6:	a201      	add	r2, pc, #4	@ (adr r2, 80028bc <HAL_GPIO_Init+0x80>)
 80028b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028bc:	08002937 	.word	0x08002937
 80028c0:	08002911 	.word	0x08002911
 80028c4:	08002923 	.word	0x08002923
 80028c8:	08002965 	.word	0x08002965
 80028cc:	0800296b 	.word	0x0800296b
 80028d0:	0800296b 	.word	0x0800296b
 80028d4:	0800296b 	.word	0x0800296b
 80028d8:	0800296b 	.word	0x0800296b
 80028dc:	0800296b 	.word	0x0800296b
 80028e0:	0800296b 	.word	0x0800296b
 80028e4:	0800296b 	.word	0x0800296b
 80028e8:	0800296b 	.word	0x0800296b
 80028ec:	0800296b 	.word	0x0800296b
 80028f0:	0800296b 	.word	0x0800296b
 80028f4:	0800296b 	.word	0x0800296b
 80028f8:	0800296b 	.word	0x0800296b
 80028fc:	0800296b 	.word	0x0800296b
 8002900:	08002919 	.word	0x08002919
 8002904:	0800292d 	.word	0x0800292d
 8002908:	4a79      	ldr	r2, [pc, #484]	@ (8002af0 <HAL_GPIO_Init+0x2b4>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d013      	beq.n	8002936 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800290e:	e02c      	b.n	800296a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	623b      	str	r3, [r7, #32]
          break;
 8002916:	e029      	b.n	800296c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	3304      	adds	r3, #4
 800291e:	623b      	str	r3, [r7, #32]
          break;
 8002920:	e024      	b.n	800296c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	3308      	adds	r3, #8
 8002928:	623b      	str	r3, [r7, #32]
          break;
 800292a:	e01f      	b.n	800296c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	330c      	adds	r3, #12
 8002932:	623b      	str	r3, [r7, #32]
          break;
 8002934:	e01a      	b.n	800296c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d102      	bne.n	8002944 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800293e:	2304      	movs	r3, #4
 8002940:	623b      	str	r3, [r7, #32]
          break;
 8002942:	e013      	b.n	800296c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d105      	bne.n	8002958 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800294c:	2308      	movs	r3, #8
 800294e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	69fa      	ldr	r2, [r7, #28]
 8002954:	611a      	str	r2, [r3, #16]
          break;
 8002956:	e009      	b.n	800296c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002958:	2308      	movs	r3, #8
 800295a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	69fa      	ldr	r2, [r7, #28]
 8002960:	615a      	str	r2, [r3, #20]
          break;
 8002962:	e003      	b.n	800296c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002964:	2300      	movs	r3, #0
 8002966:	623b      	str	r3, [r7, #32]
          break;
 8002968:	e000      	b.n	800296c <HAL_GPIO_Init+0x130>
          break;
 800296a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	2bff      	cmp	r3, #255	@ 0xff
 8002970:	d801      	bhi.n	8002976 <HAL_GPIO_Init+0x13a>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	e001      	b.n	800297a <HAL_GPIO_Init+0x13e>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	3304      	adds	r3, #4
 800297a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	2bff      	cmp	r3, #255	@ 0xff
 8002980:	d802      	bhi.n	8002988 <HAL_GPIO_Init+0x14c>
 8002982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	e002      	b.n	800298e <HAL_GPIO_Init+0x152>
 8002988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800298a:	3b08      	subs	r3, #8
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	210f      	movs	r1, #15
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	fa01 f303 	lsl.w	r3, r1, r3
 800299c:	43db      	mvns	r3, r3
 800299e:	401a      	ands	r2, r3
 80029a0:	6a39      	ldr	r1, [r7, #32]
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	fa01 f303 	lsl.w	r3, r1, r3
 80029a8:	431a      	orrs	r2, r3
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f000 80b1 	beq.w	8002b1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029bc:	4b4d      	ldr	r3, [pc, #308]	@ (8002af4 <HAL_GPIO_Init+0x2b8>)
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	4a4c      	ldr	r2, [pc, #304]	@ (8002af4 <HAL_GPIO_Init+0x2b8>)
 80029c2:	f043 0301 	orr.w	r3, r3, #1
 80029c6:	6193      	str	r3, [r2, #24]
 80029c8:	4b4a      	ldr	r3, [pc, #296]	@ (8002af4 <HAL_GPIO_Init+0x2b8>)
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	60bb      	str	r3, [r7, #8]
 80029d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80029d4:	4a48      	ldr	r2, [pc, #288]	@ (8002af8 <HAL_GPIO_Init+0x2bc>)
 80029d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d8:	089b      	lsrs	r3, r3, #2
 80029da:	3302      	adds	r3, #2
 80029dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e4:	f003 0303 	and.w	r3, r3, #3
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	220f      	movs	r2, #15
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	43db      	mvns	r3, r3
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	4013      	ands	r3, r2
 80029f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a40      	ldr	r2, [pc, #256]	@ (8002afc <HAL_GPIO_Init+0x2c0>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d013      	beq.n	8002a28 <HAL_GPIO_Init+0x1ec>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a3f      	ldr	r2, [pc, #252]	@ (8002b00 <HAL_GPIO_Init+0x2c4>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d00d      	beq.n	8002a24 <HAL_GPIO_Init+0x1e8>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a3e      	ldr	r2, [pc, #248]	@ (8002b04 <HAL_GPIO_Init+0x2c8>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d007      	beq.n	8002a20 <HAL_GPIO_Init+0x1e4>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a3d      	ldr	r2, [pc, #244]	@ (8002b08 <HAL_GPIO_Init+0x2cc>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d101      	bne.n	8002a1c <HAL_GPIO_Init+0x1e0>
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e006      	b.n	8002a2a <HAL_GPIO_Init+0x1ee>
 8002a1c:	2304      	movs	r3, #4
 8002a1e:	e004      	b.n	8002a2a <HAL_GPIO_Init+0x1ee>
 8002a20:	2302      	movs	r3, #2
 8002a22:	e002      	b.n	8002a2a <HAL_GPIO_Init+0x1ee>
 8002a24:	2301      	movs	r3, #1
 8002a26:	e000      	b.n	8002a2a <HAL_GPIO_Init+0x1ee>
 8002a28:	2300      	movs	r3, #0
 8002a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a2c:	f002 0203 	and.w	r2, r2, #3
 8002a30:	0092      	lsls	r2, r2, #2
 8002a32:	4093      	lsls	r3, r2
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a3a:	492f      	ldr	r1, [pc, #188]	@ (8002af8 <HAL_GPIO_Init+0x2bc>)
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3e:	089b      	lsrs	r3, r3, #2
 8002a40:	3302      	adds	r3, #2
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d006      	beq.n	8002a62 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a54:	4b2d      	ldr	r3, [pc, #180]	@ (8002b0c <HAL_GPIO_Init+0x2d0>)
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	492c      	ldr	r1, [pc, #176]	@ (8002b0c <HAL_GPIO_Init+0x2d0>)
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	608b      	str	r3, [r1, #8]
 8002a60:	e006      	b.n	8002a70 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a62:	4b2a      	ldr	r3, [pc, #168]	@ (8002b0c <HAL_GPIO_Init+0x2d0>)
 8002a64:	689a      	ldr	r2, [r3, #8]
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	4928      	ldr	r1, [pc, #160]	@ (8002b0c <HAL_GPIO_Init+0x2d0>)
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d006      	beq.n	8002a8a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a7c:	4b23      	ldr	r3, [pc, #140]	@ (8002b0c <HAL_GPIO_Init+0x2d0>)
 8002a7e:	68da      	ldr	r2, [r3, #12]
 8002a80:	4922      	ldr	r1, [pc, #136]	@ (8002b0c <HAL_GPIO_Init+0x2d0>)
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	60cb      	str	r3, [r1, #12]
 8002a88:	e006      	b.n	8002a98 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a8a:	4b20      	ldr	r3, [pc, #128]	@ (8002b0c <HAL_GPIO_Init+0x2d0>)
 8002a8c:	68da      	ldr	r2, [r3, #12]
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	43db      	mvns	r3, r3
 8002a92:	491e      	ldr	r1, [pc, #120]	@ (8002b0c <HAL_GPIO_Init+0x2d0>)
 8002a94:	4013      	ands	r3, r2
 8002a96:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d006      	beq.n	8002ab2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002aa4:	4b19      	ldr	r3, [pc, #100]	@ (8002b0c <HAL_GPIO_Init+0x2d0>)
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	4918      	ldr	r1, [pc, #96]	@ (8002b0c <HAL_GPIO_Init+0x2d0>)
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	604b      	str	r3, [r1, #4]
 8002ab0:	e006      	b.n	8002ac0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ab2:	4b16      	ldr	r3, [pc, #88]	@ (8002b0c <HAL_GPIO_Init+0x2d0>)
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	4914      	ldr	r1, [pc, #80]	@ (8002b0c <HAL_GPIO_Init+0x2d0>)
 8002abc:	4013      	ands	r3, r2
 8002abe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d021      	beq.n	8002b10 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002acc:	4b0f      	ldr	r3, [pc, #60]	@ (8002b0c <HAL_GPIO_Init+0x2d0>)
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	490e      	ldr	r1, [pc, #56]	@ (8002b0c <HAL_GPIO_Init+0x2d0>)
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	600b      	str	r3, [r1, #0]
 8002ad8:	e021      	b.n	8002b1e <HAL_GPIO_Init+0x2e2>
 8002ada:	bf00      	nop
 8002adc:	10320000 	.word	0x10320000
 8002ae0:	10310000 	.word	0x10310000
 8002ae4:	10220000 	.word	0x10220000
 8002ae8:	10210000 	.word	0x10210000
 8002aec:	10120000 	.word	0x10120000
 8002af0:	10110000 	.word	0x10110000
 8002af4:	40021000 	.word	0x40021000
 8002af8:	40010000 	.word	0x40010000
 8002afc:	40010800 	.word	0x40010800
 8002b00:	40010c00 	.word	0x40010c00
 8002b04:	40011000 	.word	0x40011000
 8002b08:	40011400 	.word	0x40011400
 8002b0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b10:	4b0b      	ldr	r3, [pc, #44]	@ (8002b40 <HAL_GPIO_Init+0x304>)
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	43db      	mvns	r3, r3
 8002b18:	4909      	ldr	r1, [pc, #36]	@ (8002b40 <HAL_GPIO_Init+0x304>)
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b20:	3301      	adds	r3, #1
 8002b22:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f47f ae8e 	bne.w	8002850 <HAL_GPIO_Init+0x14>
  }
}
 8002b34:	bf00      	nop
 8002b36:	bf00      	nop
 8002b38:	372c      	adds	r7, #44	@ 0x2c
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bc80      	pop	{r7}
 8002b3e:	4770      	bx	lr
 8002b40:	40010400 	.word	0x40010400

08002b44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	807b      	strh	r3, [r7, #2]
 8002b50:	4613      	mov	r3, r2
 8002b52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b54:	787b      	ldrb	r3, [r7, #1]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b5a:	887a      	ldrh	r2, [r7, #2]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b60:	e003      	b.n	8002b6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b62:	887b      	ldrh	r3, [r7, #2]
 8002b64:	041a      	lsls	r2, r3, #16
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	611a      	str	r2, [r3, #16]
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr

08002b74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e272      	b.n	800306c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 8087 	beq.w	8002ca2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b94:	4b92      	ldr	r3, [pc, #584]	@ (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f003 030c 	and.w	r3, r3, #12
 8002b9c:	2b04      	cmp	r3, #4
 8002b9e:	d00c      	beq.n	8002bba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ba0:	4b8f      	ldr	r3, [pc, #572]	@ (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f003 030c 	and.w	r3, r3, #12
 8002ba8:	2b08      	cmp	r3, #8
 8002baa:	d112      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x5e>
 8002bac:	4b8c      	ldr	r3, [pc, #560]	@ (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bb8:	d10b      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bba:	4b89      	ldr	r3, [pc, #548]	@ (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d06c      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x12c>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d168      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e24c      	b.n	800306c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bda:	d106      	bne.n	8002bea <HAL_RCC_OscConfig+0x76>
 8002bdc:	4b80      	ldr	r3, [pc, #512]	@ (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a7f      	ldr	r2, [pc, #508]	@ (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002be2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002be6:	6013      	str	r3, [r2, #0]
 8002be8:	e02e      	b.n	8002c48 <HAL_RCC_OscConfig+0xd4>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10c      	bne.n	8002c0c <HAL_RCC_OscConfig+0x98>
 8002bf2:	4b7b      	ldr	r3, [pc, #492]	@ (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a7a      	ldr	r2, [pc, #488]	@ (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002bf8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	4b78      	ldr	r3, [pc, #480]	@ (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a77      	ldr	r2, [pc, #476]	@ (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002c04:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	e01d      	b.n	8002c48 <HAL_RCC_OscConfig+0xd4>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c14:	d10c      	bne.n	8002c30 <HAL_RCC_OscConfig+0xbc>
 8002c16:	4b72      	ldr	r3, [pc, #456]	@ (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a71      	ldr	r2, [pc, #452]	@ (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002c1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	4b6f      	ldr	r3, [pc, #444]	@ (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a6e      	ldr	r2, [pc, #440]	@ (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002c28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	e00b      	b.n	8002c48 <HAL_RCC_OscConfig+0xd4>
 8002c30:	4b6b      	ldr	r3, [pc, #428]	@ (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a6a      	ldr	r2, [pc, #424]	@ (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002c36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c3a:	6013      	str	r3, [r2, #0]
 8002c3c:	4b68      	ldr	r3, [pc, #416]	@ (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a67      	ldr	r2, [pc, #412]	@ (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002c42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c46:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d013      	beq.n	8002c78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c50:	f7fe ff00 	bl	8001a54 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c58:	f7fe fefc 	bl	8001a54 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b64      	cmp	r3, #100	@ 0x64
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e200      	b.n	800306c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6a:	4b5d      	ldr	r3, [pc, #372]	@ (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0f0      	beq.n	8002c58 <HAL_RCC_OscConfig+0xe4>
 8002c76:	e014      	b.n	8002ca2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c78:	f7fe feec 	bl	8001a54 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c80:	f7fe fee8 	bl	8001a54 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b64      	cmp	r3, #100	@ 0x64
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e1ec      	b.n	800306c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c92:	4b53      	ldr	r3, [pc, #332]	@ (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1f0      	bne.n	8002c80 <HAL_RCC_OscConfig+0x10c>
 8002c9e:	e000      	b.n	8002ca2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d063      	beq.n	8002d76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cae:	4b4c      	ldr	r3, [pc, #304]	@ (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f003 030c 	and.w	r3, r3, #12
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00b      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cba:	4b49      	ldr	r3, [pc, #292]	@ (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f003 030c 	and.w	r3, r3, #12
 8002cc2:	2b08      	cmp	r3, #8
 8002cc4:	d11c      	bne.n	8002d00 <HAL_RCC_OscConfig+0x18c>
 8002cc6:	4b46      	ldr	r3, [pc, #280]	@ (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d116      	bne.n	8002d00 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cd2:	4b43      	ldr	r3, [pc, #268]	@ (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d005      	beq.n	8002cea <HAL_RCC_OscConfig+0x176>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d001      	beq.n	8002cea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e1c0      	b.n	800306c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cea:	4b3d      	ldr	r3, [pc, #244]	@ (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	4939      	ldr	r1, [pc, #228]	@ (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cfe:	e03a      	b.n	8002d76 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d020      	beq.n	8002d4a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d08:	4b36      	ldr	r3, [pc, #216]	@ (8002de4 <HAL_RCC_OscConfig+0x270>)
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d0e:	f7fe fea1 	bl	8001a54 <HAL_GetTick>
 8002d12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d14:	e008      	b.n	8002d28 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d16:	f7fe fe9d 	bl	8001a54 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e1a1      	b.n	800306c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d28:	4b2d      	ldr	r3, [pc, #180]	@ (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d0f0      	beq.n	8002d16 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d34:	4b2a      	ldr	r3, [pc, #168]	@ (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	695b      	ldr	r3, [r3, #20]
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	4927      	ldr	r1, [pc, #156]	@ (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	600b      	str	r3, [r1, #0]
 8002d48:	e015      	b.n	8002d76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d4a:	4b26      	ldr	r3, [pc, #152]	@ (8002de4 <HAL_RCC_OscConfig+0x270>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d50:	f7fe fe80 	bl	8001a54 <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d58:	f7fe fe7c 	bl	8001a54 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e180      	b.n	800306c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d6a:	4b1d      	ldr	r3, [pc, #116]	@ (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1f0      	bne.n	8002d58 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0308 	and.w	r3, r3, #8
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d03a      	beq.n	8002df8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d019      	beq.n	8002dbe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d8a:	4b17      	ldr	r3, [pc, #92]	@ (8002de8 <HAL_RCC_OscConfig+0x274>)
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d90:	f7fe fe60 	bl	8001a54 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d98:	f7fe fe5c 	bl	8001a54 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e160      	b.n	800306c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002daa:	4b0d      	ldr	r3, [pc, #52]	@ (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0f0      	beq.n	8002d98 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002db6:	2001      	movs	r0, #1
 8002db8:	f000 fa9c 	bl	80032f4 <RCC_Delay>
 8002dbc:	e01c      	b.n	8002df8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8002de8 <HAL_RCC_OscConfig+0x274>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc4:	f7fe fe46 	bl	8001a54 <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dca:	e00f      	b.n	8002dec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dcc:	f7fe fe42 	bl	8001a54 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d908      	bls.n	8002dec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e146      	b.n	800306c <HAL_RCC_OscConfig+0x4f8>
 8002dde:	bf00      	nop
 8002de0:	40021000 	.word	0x40021000
 8002de4:	42420000 	.word	0x42420000
 8002de8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dec:	4b92      	ldr	r3, [pc, #584]	@ (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1e9      	bne.n	8002dcc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 80a6 	beq.w	8002f52 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e06:	2300      	movs	r3, #0
 8002e08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e0a:	4b8b      	ldr	r3, [pc, #556]	@ (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10d      	bne.n	8002e32 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e16:	4b88      	ldr	r3, [pc, #544]	@ (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	4a87      	ldr	r2, [pc, #540]	@ (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002e1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e20:	61d3      	str	r3, [r2, #28]
 8002e22:	4b85      	ldr	r3, [pc, #532]	@ (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e2a:	60bb      	str	r3, [r7, #8]
 8002e2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e32:	4b82      	ldr	r3, [pc, #520]	@ (800303c <HAL_RCC_OscConfig+0x4c8>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d118      	bne.n	8002e70 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e3e:	4b7f      	ldr	r3, [pc, #508]	@ (800303c <HAL_RCC_OscConfig+0x4c8>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a7e      	ldr	r2, [pc, #504]	@ (800303c <HAL_RCC_OscConfig+0x4c8>)
 8002e44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e4a:	f7fe fe03 	bl	8001a54 <HAL_GetTick>
 8002e4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e50:	e008      	b.n	8002e64 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e52:	f7fe fdff 	bl	8001a54 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b64      	cmp	r3, #100	@ 0x64
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e103      	b.n	800306c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e64:	4b75      	ldr	r3, [pc, #468]	@ (800303c <HAL_RCC_OscConfig+0x4c8>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0f0      	beq.n	8002e52 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d106      	bne.n	8002e86 <HAL_RCC_OscConfig+0x312>
 8002e78:	4b6f      	ldr	r3, [pc, #444]	@ (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	4a6e      	ldr	r2, [pc, #440]	@ (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002e7e:	f043 0301 	orr.w	r3, r3, #1
 8002e82:	6213      	str	r3, [r2, #32]
 8002e84:	e02d      	b.n	8002ee2 <HAL_RCC_OscConfig+0x36e>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10c      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x334>
 8002e8e:	4b6a      	ldr	r3, [pc, #424]	@ (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	4a69      	ldr	r2, [pc, #420]	@ (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002e94:	f023 0301 	bic.w	r3, r3, #1
 8002e98:	6213      	str	r3, [r2, #32]
 8002e9a:	4b67      	ldr	r3, [pc, #412]	@ (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	4a66      	ldr	r2, [pc, #408]	@ (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002ea0:	f023 0304 	bic.w	r3, r3, #4
 8002ea4:	6213      	str	r3, [r2, #32]
 8002ea6:	e01c      	b.n	8002ee2 <HAL_RCC_OscConfig+0x36e>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	2b05      	cmp	r3, #5
 8002eae:	d10c      	bne.n	8002eca <HAL_RCC_OscConfig+0x356>
 8002eb0:	4b61      	ldr	r3, [pc, #388]	@ (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	4a60      	ldr	r2, [pc, #384]	@ (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002eb6:	f043 0304 	orr.w	r3, r3, #4
 8002eba:	6213      	str	r3, [r2, #32]
 8002ebc:	4b5e      	ldr	r3, [pc, #376]	@ (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	4a5d      	ldr	r2, [pc, #372]	@ (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002ec2:	f043 0301 	orr.w	r3, r3, #1
 8002ec6:	6213      	str	r3, [r2, #32]
 8002ec8:	e00b      	b.n	8002ee2 <HAL_RCC_OscConfig+0x36e>
 8002eca:	4b5b      	ldr	r3, [pc, #364]	@ (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	4a5a      	ldr	r2, [pc, #360]	@ (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002ed0:	f023 0301 	bic.w	r3, r3, #1
 8002ed4:	6213      	str	r3, [r2, #32]
 8002ed6:	4b58      	ldr	r3, [pc, #352]	@ (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	4a57      	ldr	r2, [pc, #348]	@ (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002edc:	f023 0304 	bic.w	r3, r3, #4
 8002ee0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d015      	beq.n	8002f16 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eea:	f7fe fdb3 	bl	8001a54 <HAL_GetTick>
 8002eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ef0:	e00a      	b.n	8002f08 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ef2:	f7fe fdaf 	bl	8001a54 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e0b1      	b.n	800306c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f08:	4b4b      	ldr	r3, [pc, #300]	@ (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d0ee      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x37e>
 8002f14:	e014      	b.n	8002f40 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f16:	f7fe fd9d 	bl	8001a54 <HAL_GetTick>
 8002f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f1c:	e00a      	b.n	8002f34 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f1e:	f7fe fd99 	bl	8001a54 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d901      	bls.n	8002f34 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e09b      	b.n	800306c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f34:	4b40      	ldr	r3, [pc, #256]	@ (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1ee      	bne.n	8002f1e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f40:	7dfb      	ldrb	r3, [r7, #23]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d105      	bne.n	8002f52 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f46:	4b3c      	ldr	r3, [pc, #240]	@ (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	4a3b      	ldr	r2, [pc, #236]	@ (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002f4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f50:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 8087 	beq.w	800306a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f5c:	4b36      	ldr	r3, [pc, #216]	@ (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f003 030c 	and.w	r3, r3, #12
 8002f64:	2b08      	cmp	r3, #8
 8002f66:	d061      	beq.n	800302c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	69db      	ldr	r3, [r3, #28]
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d146      	bne.n	8002ffe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f70:	4b33      	ldr	r3, [pc, #204]	@ (8003040 <HAL_RCC_OscConfig+0x4cc>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f76:	f7fe fd6d 	bl	8001a54 <HAL_GetTick>
 8002f7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f7c:	e008      	b.n	8002f90 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f7e:	f7fe fd69 	bl	8001a54 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e06d      	b.n	800306c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f90:	4b29      	ldr	r3, [pc, #164]	@ (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1f0      	bne.n	8002f7e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fa4:	d108      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fa6:	4b24      	ldr	r3, [pc, #144]	@ (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	4921      	ldr	r1, [pc, #132]	@ (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fb8:	4b1f      	ldr	r3, [pc, #124]	@ (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a19      	ldr	r1, [r3, #32]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc8:	430b      	orrs	r3, r1
 8002fca:	491b      	ldr	r1, [pc, #108]	@ (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fd0:	4b1b      	ldr	r3, [pc, #108]	@ (8003040 <HAL_RCC_OscConfig+0x4cc>)
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd6:	f7fe fd3d 	bl	8001a54 <HAL_GetTick>
 8002fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fdc:	e008      	b.n	8002ff0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fde:	f7fe fd39 	bl	8001a54 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e03d      	b.n	800306c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ff0:	4b11      	ldr	r3, [pc, #68]	@ (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d0f0      	beq.n	8002fde <HAL_RCC_OscConfig+0x46a>
 8002ffc:	e035      	b.n	800306a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ffe:	4b10      	ldr	r3, [pc, #64]	@ (8003040 <HAL_RCC_OscConfig+0x4cc>)
 8003000:	2200      	movs	r2, #0
 8003002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003004:	f7fe fd26 	bl	8001a54 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800300c:	f7fe fd22 	bl	8001a54 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e026      	b.n	800306c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800301e:	4b06      	ldr	r3, [pc, #24]	@ (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1f0      	bne.n	800300c <HAL_RCC_OscConfig+0x498>
 800302a:	e01e      	b.n	800306a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d107      	bne.n	8003044 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e019      	b.n	800306c <HAL_RCC_OscConfig+0x4f8>
 8003038:	40021000 	.word	0x40021000
 800303c:	40007000 	.word	0x40007000
 8003040:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003044:	4b0b      	ldr	r3, [pc, #44]	@ (8003074 <HAL_RCC_OscConfig+0x500>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	429a      	cmp	r2, r3
 8003056:	d106      	bne.n	8003066 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003062:	429a      	cmp	r2, r3
 8003064:	d001      	beq.n	800306a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e000      	b.n	800306c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3718      	adds	r7, #24
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40021000 	.word	0x40021000

08003078 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e0d0      	b.n	800322e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800308c:	4b6a      	ldr	r3, [pc, #424]	@ (8003238 <HAL_RCC_ClockConfig+0x1c0>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0307 	and.w	r3, r3, #7
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	429a      	cmp	r2, r3
 8003098:	d910      	bls.n	80030bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800309a:	4b67      	ldr	r3, [pc, #412]	@ (8003238 <HAL_RCC_ClockConfig+0x1c0>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f023 0207 	bic.w	r2, r3, #7
 80030a2:	4965      	ldr	r1, [pc, #404]	@ (8003238 <HAL_RCC_ClockConfig+0x1c0>)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030aa:	4b63      	ldr	r3, [pc, #396]	@ (8003238 <HAL_RCC_ClockConfig+0x1c0>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0307 	and.w	r3, r3, #7
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d001      	beq.n	80030bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e0b8      	b.n	800322e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d020      	beq.n	800310a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0304 	and.w	r3, r3, #4
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d005      	beq.n	80030e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030d4:	4b59      	ldr	r3, [pc, #356]	@ (800323c <HAL_RCC_ClockConfig+0x1c4>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	4a58      	ldr	r2, [pc, #352]	@ (800323c <HAL_RCC_ClockConfig+0x1c4>)
 80030da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80030de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0308 	and.w	r3, r3, #8
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d005      	beq.n	80030f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030ec:	4b53      	ldr	r3, [pc, #332]	@ (800323c <HAL_RCC_ClockConfig+0x1c4>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	4a52      	ldr	r2, [pc, #328]	@ (800323c <HAL_RCC_ClockConfig+0x1c4>)
 80030f2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80030f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030f8:	4b50      	ldr	r3, [pc, #320]	@ (800323c <HAL_RCC_ClockConfig+0x1c4>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	494d      	ldr	r1, [pc, #308]	@ (800323c <HAL_RCC_ClockConfig+0x1c4>)
 8003106:	4313      	orrs	r3, r2
 8003108:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b00      	cmp	r3, #0
 8003114:	d040      	beq.n	8003198 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d107      	bne.n	800312e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800311e:	4b47      	ldr	r3, [pc, #284]	@ (800323c <HAL_RCC_ClockConfig+0x1c4>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d115      	bne.n	8003156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e07f      	b.n	800322e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	2b02      	cmp	r3, #2
 8003134:	d107      	bne.n	8003146 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003136:	4b41      	ldr	r3, [pc, #260]	@ (800323c <HAL_RCC_ClockConfig+0x1c4>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d109      	bne.n	8003156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e073      	b.n	800322e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003146:	4b3d      	ldr	r3, [pc, #244]	@ (800323c <HAL_RCC_ClockConfig+0x1c4>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e06b      	b.n	800322e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003156:	4b39      	ldr	r3, [pc, #228]	@ (800323c <HAL_RCC_ClockConfig+0x1c4>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f023 0203 	bic.w	r2, r3, #3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	4936      	ldr	r1, [pc, #216]	@ (800323c <HAL_RCC_ClockConfig+0x1c4>)
 8003164:	4313      	orrs	r3, r2
 8003166:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003168:	f7fe fc74 	bl	8001a54 <HAL_GetTick>
 800316c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800316e:	e00a      	b.n	8003186 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003170:	f7fe fc70 	bl	8001a54 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800317e:	4293      	cmp	r3, r2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e053      	b.n	800322e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003186:	4b2d      	ldr	r3, [pc, #180]	@ (800323c <HAL_RCC_ClockConfig+0x1c4>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f003 020c 	and.w	r2, r3, #12
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	429a      	cmp	r2, r3
 8003196:	d1eb      	bne.n	8003170 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003198:	4b27      	ldr	r3, [pc, #156]	@ (8003238 <HAL_RCC_ClockConfig+0x1c0>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d210      	bcs.n	80031c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031a6:	4b24      	ldr	r3, [pc, #144]	@ (8003238 <HAL_RCC_ClockConfig+0x1c0>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f023 0207 	bic.w	r2, r3, #7
 80031ae:	4922      	ldr	r1, [pc, #136]	@ (8003238 <HAL_RCC_ClockConfig+0x1c0>)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031b6:	4b20      	ldr	r3, [pc, #128]	@ (8003238 <HAL_RCC_ClockConfig+0x1c0>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0307 	and.w	r3, r3, #7
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d001      	beq.n	80031c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e032      	b.n	800322e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0304 	and.w	r3, r3, #4
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d008      	beq.n	80031e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031d4:	4b19      	ldr	r3, [pc, #100]	@ (800323c <HAL_RCC_ClockConfig+0x1c4>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	4916      	ldr	r1, [pc, #88]	@ (800323c <HAL_RCC_ClockConfig+0x1c4>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0308 	and.w	r3, r3, #8
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d009      	beq.n	8003206 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031f2:	4b12      	ldr	r3, [pc, #72]	@ (800323c <HAL_RCC_ClockConfig+0x1c4>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	490e      	ldr	r1, [pc, #56]	@ (800323c <HAL_RCC_ClockConfig+0x1c4>)
 8003202:	4313      	orrs	r3, r2
 8003204:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003206:	f000 f821 	bl	800324c <HAL_RCC_GetSysClockFreq>
 800320a:	4602      	mov	r2, r0
 800320c:	4b0b      	ldr	r3, [pc, #44]	@ (800323c <HAL_RCC_ClockConfig+0x1c4>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	091b      	lsrs	r3, r3, #4
 8003212:	f003 030f 	and.w	r3, r3, #15
 8003216:	490a      	ldr	r1, [pc, #40]	@ (8003240 <HAL_RCC_ClockConfig+0x1c8>)
 8003218:	5ccb      	ldrb	r3, [r1, r3]
 800321a:	fa22 f303 	lsr.w	r3, r2, r3
 800321e:	4a09      	ldr	r2, [pc, #36]	@ (8003244 <HAL_RCC_ClockConfig+0x1cc>)
 8003220:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003222:	4b09      	ldr	r3, [pc, #36]	@ (8003248 <HAL_RCC_ClockConfig+0x1d0>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f7fe fbd2 	bl	80019d0 <HAL_InitTick>

  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	40022000 	.word	0x40022000
 800323c:	40021000 	.word	0x40021000
 8003240:	08005798 	.word	0x08005798
 8003244:	20000034 	.word	0x20000034
 8003248:	20000038 	.word	0x20000038

0800324c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800324c:	b480      	push	{r7}
 800324e:	b087      	sub	sp, #28
 8003250:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003252:	2300      	movs	r3, #0
 8003254:	60fb      	str	r3, [r7, #12]
 8003256:	2300      	movs	r3, #0
 8003258:	60bb      	str	r3, [r7, #8]
 800325a:	2300      	movs	r3, #0
 800325c:	617b      	str	r3, [r7, #20]
 800325e:	2300      	movs	r3, #0
 8003260:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003262:	2300      	movs	r3, #0
 8003264:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003266:	4b1e      	ldr	r3, [pc, #120]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f003 030c 	and.w	r3, r3, #12
 8003272:	2b04      	cmp	r3, #4
 8003274:	d002      	beq.n	800327c <HAL_RCC_GetSysClockFreq+0x30>
 8003276:	2b08      	cmp	r3, #8
 8003278:	d003      	beq.n	8003282 <HAL_RCC_GetSysClockFreq+0x36>
 800327a:	e027      	b.n	80032cc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800327c:	4b19      	ldr	r3, [pc, #100]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800327e:	613b      	str	r3, [r7, #16]
      break;
 8003280:	e027      	b.n	80032d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	0c9b      	lsrs	r3, r3, #18
 8003286:	f003 030f 	and.w	r3, r3, #15
 800328a:	4a17      	ldr	r2, [pc, #92]	@ (80032e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800328c:	5cd3      	ldrb	r3, [r2, r3]
 800328e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d010      	beq.n	80032bc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800329a:	4b11      	ldr	r3, [pc, #68]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x94>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	0c5b      	lsrs	r3, r3, #17
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	4a11      	ldr	r2, [pc, #68]	@ (80032ec <HAL_RCC_GetSysClockFreq+0xa0>)
 80032a6:	5cd3      	ldrb	r3, [r2, r3]
 80032a8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a0d      	ldr	r2, [pc, #52]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80032ae:	fb03 f202 	mul.w	r2, r3, r2
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b8:	617b      	str	r3, [r7, #20]
 80032ba:	e004      	b.n	80032c6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a0c      	ldr	r2, [pc, #48]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80032c0:	fb02 f303 	mul.w	r3, r2, r3
 80032c4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	613b      	str	r3, [r7, #16]
      break;
 80032ca:	e002      	b.n	80032d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032cc:	4b05      	ldr	r3, [pc, #20]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80032ce:	613b      	str	r3, [r7, #16]
      break;
 80032d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032d2:	693b      	ldr	r3, [r7, #16]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	371c      	adds	r7, #28
 80032d8:	46bd      	mov	sp, r7
 80032da:	bc80      	pop	{r7}
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	40021000 	.word	0x40021000
 80032e4:	007a1200 	.word	0x007a1200
 80032e8:	080057a8 	.word	0x080057a8
 80032ec:	080057b8 	.word	0x080057b8
 80032f0:	003d0900 	.word	0x003d0900

080032f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80032fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003328 <RCC_Delay+0x34>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a0a      	ldr	r2, [pc, #40]	@ (800332c <RCC_Delay+0x38>)
 8003302:	fba2 2303 	umull	r2, r3, r2, r3
 8003306:	0a5b      	lsrs	r3, r3, #9
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	fb02 f303 	mul.w	r3, r2, r3
 800330e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003310:	bf00      	nop
  }
  while (Delay --);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	1e5a      	subs	r2, r3, #1
 8003316:	60fa      	str	r2, [r7, #12]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1f9      	bne.n	8003310 <RCC_Delay+0x1c>
}
 800331c:	bf00      	nop
 800331e:	bf00      	nop
 8003320:	3714      	adds	r7, #20
 8003322:	46bd      	mov	sp, r7
 8003324:	bc80      	pop	{r7}
 8003326:	4770      	bx	lr
 8003328:	20000034 	.word	0x20000034
 800332c:	10624dd3 	.word	0x10624dd3

08003330 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003338:	2300      	movs	r3, #0
 800333a:	613b      	str	r3, [r7, #16]
 800333c:	2300      	movs	r3, #0
 800333e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	2b00      	cmp	r3, #0
 800334a:	d07d      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800334c:	2300      	movs	r3, #0
 800334e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003350:	4b4f      	ldr	r3, [pc, #316]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003352:	69db      	ldr	r3, [r3, #28]
 8003354:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10d      	bne.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800335c:	4b4c      	ldr	r3, [pc, #304]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800335e:	69db      	ldr	r3, [r3, #28]
 8003360:	4a4b      	ldr	r2, [pc, #300]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003362:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003366:	61d3      	str	r3, [r2, #28]
 8003368:	4b49      	ldr	r3, [pc, #292]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800336a:	69db      	ldr	r3, [r3, #28]
 800336c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003370:	60bb      	str	r3, [r7, #8]
 8003372:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003374:	2301      	movs	r3, #1
 8003376:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003378:	4b46      	ldr	r3, [pc, #280]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003380:	2b00      	cmp	r3, #0
 8003382:	d118      	bne.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003384:	4b43      	ldr	r3, [pc, #268]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a42      	ldr	r2, [pc, #264]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800338a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800338e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003390:	f7fe fb60 	bl	8001a54 <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003396:	e008      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003398:	f7fe fb5c 	bl	8001a54 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b64      	cmp	r3, #100	@ 0x64
 80033a4:	d901      	bls.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e06d      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033aa:	4b3a      	ldr	r3, [pc, #232]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d0f0      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033b6:	4b36      	ldr	r3, [pc, #216]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033be:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d02e      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d027      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033d4:	4b2e      	ldr	r3, [pc, #184]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033dc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033de:	4b2e      	ldr	r3, [pc, #184]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033e0:	2201      	movs	r2, #1
 80033e2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033e4:	4b2c      	ldr	r3, [pc, #176]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80033ea:	4a29      	ldr	r2, [pc, #164]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d014      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fa:	f7fe fb2b 	bl	8001a54 <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003400:	e00a      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003402:	f7fe fb27 	bl	8001a54 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003410:	4293      	cmp	r3, r2
 8003412:	d901      	bls.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e036      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003418:	4b1d      	ldr	r3, [pc, #116]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800341a:	6a1b      	ldr	r3, [r3, #32]
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d0ee      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003424:	4b1a      	ldr	r3, [pc, #104]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	4917      	ldr	r1, [pc, #92]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003432:	4313      	orrs	r3, r2
 8003434:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003436:	7dfb      	ldrb	r3, [r7, #23]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d105      	bne.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800343c:	4b14      	ldr	r3, [pc, #80]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800343e:	69db      	ldr	r3, [r3, #28]
 8003440:	4a13      	ldr	r2, [pc, #76]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003442:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003446:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d008      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003454:	4b0e      	ldr	r3, [pc, #56]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	490b      	ldr	r1, [pc, #44]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003462:	4313      	orrs	r3, r2
 8003464:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0310 	and.w	r3, r3, #16
 800346e:	2b00      	cmp	r3, #0
 8003470:	d008      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003472:	4b07      	ldr	r3, [pc, #28]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	4904      	ldr	r1, [pc, #16]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003480:	4313      	orrs	r3, r2
 8003482:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3718      	adds	r7, #24
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	40021000 	.word	0x40021000
 8003494:	40007000 	.word	0x40007000
 8003498:	42420440 	.word	0x42420440

0800349c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e041      	b.n	8003532 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d106      	bne.n	80034c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7fe f8cc 	bl	8001660 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2202      	movs	r2, #2
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	3304      	adds	r3, #4
 80034d8:	4619      	mov	r1, r3
 80034da:	4610      	mov	r0, r2
 80034dc:	f000 fd5a 	bl	8003f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b082      	sub	sp, #8
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e041      	b.n	80035d0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b00      	cmp	r3, #0
 8003556:	d106      	bne.n	8003566 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 f839 	bl	80035d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2202      	movs	r2, #2
 800356a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	3304      	adds	r3, #4
 8003576:	4619      	mov	r1, r3
 8003578:	4610      	mov	r0, r2
 800357a:	f000 fd0b 	bl	8003f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3708      	adds	r7, #8
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bc80      	pop	{r7}
 80035e8:	4770      	bx	lr
	...

080035ec <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
 80035f8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80035fa:	2300      	movs	r3, #0
 80035fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d109      	bne.n	8003618 <HAL_TIM_PWM_Start_DMA+0x2c>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	bf0c      	ite	eq
 8003610:	2301      	moveq	r3, #1
 8003612:	2300      	movne	r3, #0
 8003614:	b2db      	uxtb	r3, r3
 8003616:	e022      	b.n	800365e <HAL_TIM_PWM_Start_DMA+0x72>
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	2b04      	cmp	r3, #4
 800361c:	d109      	bne.n	8003632 <HAL_TIM_PWM_Start_DMA+0x46>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b02      	cmp	r3, #2
 8003628:	bf0c      	ite	eq
 800362a:	2301      	moveq	r3, #1
 800362c:	2300      	movne	r3, #0
 800362e:	b2db      	uxtb	r3, r3
 8003630:	e015      	b.n	800365e <HAL_TIM_PWM_Start_DMA+0x72>
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	2b08      	cmp	r3, #8
 8003636:	d109      	bne.n	800364c <HAL_TIM_PWM_Start_DMA+0x60>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	bf0c      	ite	eq
 8003644:	2301      	moveq	r3, #1
 8003646:	2300      	movne	r3, #0
 8003648:	b2db      	uxtb	r3, r3
 800364a:	e008      	b.n	800365e <HAL_TIM_PWM_Start_DMA+0x72>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	bf0c      	ite	eq
 8003658:	2301      	moveq	r3, #1
 800365a:	2300      	movne	r3, #0
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8003662:	2302      	movs	r3, #2
 8003664:	e153      	b.n	800390e <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d109      	bne.n	8003680 <HAL_TIM_PWM_Start_DMA+0x94>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b01      	cmp	r3, #1
 8003676:	bf0c      	ite	eq
 8003678:	2301      	moveq	r3, #1
 800367a:	2300      	movne	r3, #0
 800367c:	b2db      	uxtb	r3, r3
 800367e:	e022      	b.n	80036c6 <HAL_TIM_PWM_Start_DMA+0xda>
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	2b04      	cmp	r3, #4
 8003684:	d109      	bne.n	800369a <HAL_TIM_PWM_Start_DMA+0xae>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b01      	cmp	r3, #1
 8003690:	bf0c      	ite	eq
 8003692:	2301      	moveq	r3, #1
 8003694:	2300      	movne	r3, #0
 8003696:	b2db      	uxtb	r3, r3
 8003698:	e015      	b.n	80036c6 <HAL_TIM_PWM_Start_DMA+0xda>
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	2b08      	cmp	r3, #8
 800369e:	d109      	bne.n	80036b4 <HAL_TIM_PWM_Start_DMA+0xc8>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	bf0c      	ite	eq
 80036ac:	2301      	moveq	r3, #1
 80036ae:	2300      	movne	r3, #0
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	e008      	b.n	80036c6 <HAL_TIM_PWM_Start_DMA+0xda>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b01      	cmp	r3, #1
 80036be:	bf0c      	ite	eq
 80036c0:	2301      	moveq	r3, #1
 80036c2:	2300      	movne	r3, #0
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d024      	beq.n	8003714 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d002      	beq.n	80036d6 <HAL_TIM_PWM_Start_DMA+0xea>
 80036d0:	887b      	ldrh	r3, [r7, #2]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e119      	b.n	800390e <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d104      	bne.n	80036ea <HAL_TIM_PWM_Start_DMA+0xfe>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2202      	movs	r2, #2
 80036e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036e8:	e016      	b.n	8003718 <HAL_TIM_PWM_Start_DMA+0x12c>
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	2b04      	cmp	r3, #4
 80036ee:	d104      	bne.n	80036fa <HAL_TIM_PWM_Start_DMA+0x10e>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2202      	movs	r2, #2
 80036f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036f8:	e00e      	b.n	8003718 <HAL_TIM_PWM_Start_DMA+0x12c>
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	2b08      	cmp	r3, #8
 80036fe:	d104      	bne.n	800370a <HAL_TIM_PWM_Start_DMA+0x11e>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2202      	movs	r2, #2
 8003704:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003708:	e006      	b.n	8003718 <HAL_TIM_PWM_Start_DMA+0x12c>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2202      	movs	r2, #2
 800370e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003712:	e001      	b.n	8003718 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e0fa      	b.n	800390e <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	2b0c      	cmp	r3, #12
 800371c:	f200 80ae 	bhi.w	800387c <HAL_TIM_PWM_Start_DMA+0x290>
 8003720:	a201      	add	r2, pc, #4	@ (adr r2, 8003728 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8003722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003726:	bf00      	nop
 8003728:	0800375d 	.word	0x0800375d
 800372c:	0800387d 	.word	0x0800387d
 8003730:	0800387d 	.word	0x0800387d
 8003734:	0800387d 	.word	0x0800387d
 8003738:	080037a5 	.word	0x080037a5
 800373c:	0800387d 	.word	0x0800387d
 8003740:	0800387d 	.word	0x0800387d
 8003744:	0800387d 	.word	0x0800387d
 8003748:	080037ed 	.word	0x080037ed
 800374c:	0800387d 	.word	0x0800387d
 8003750:	0800387d 	.word	0x0800387d
 8003754:	0800387d 	.word	0x0800387d
 8003758:	08003835 	.word	0x08003835
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003760:	4a6d      	ldr	r2, [pc, #436]	@ (8003918 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003762:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003768:	4a6c      	ldr	r2, [pc, #432]	@ (800391c <HAL_TIM_PWM_Start_DMA+0x330>)
 800376a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003770:	4a6b      	ldr	r2, [pc, #428]	@ (8003920 <HAL_TIM_PWM_Start_DMA+0x334>)
 8003772:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003778:	6879      	ldr	r1, [r7, #4]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	3334      	adds	r3, #52	@ 0x34
 8003780:	461a      	mov	r2, r3
 8003782:	887b      	ldrh	r3, [r7, #2]
 8003784:	f7fe fe4e 	bl	8002424 <HAL_DMA_Start_IT>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e0bd      	b.n	800390e <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68da      	ldr	r2, [r3, #12]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037a0:	60da      	str	r2, [r3, #12]
      break;
 80037a2:	e06e      	b.n	8003882 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a8:	4a5b      	ldr	r2, [pc, #364]	@ (8003918 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80037aa:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b0:	4a5a      	ldr	r2, [pc, #360]	@ (800391c <HAL_TIM_PWM_Start_DMA+0x330>)
 80037b2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b8:	4a59      	ldr	r2, [pc, #356]	@ (8003920 <HAL_TIM_PWM_Start_DMA+0x334>)
 80037ba:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80037c0:	6879      	ldr	r1, [r7, #4]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	3338      	adds	r3, #56	@ 0x38
 80037c8:	461a      	mov	r2, r3
 80037ca:	887b      	ldrh	r3, [r7, #2]
 80037cc:	f7fe fe2a 	bl	8002424 <HAL_DMA_Start_IT>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e099      	b.n	800390e <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68da      	ldr	r2, [r3, #12]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80037e8:	60da      	str	r2, [r3, #12]
      break;
 80037ea:	e04a      	b.n	8003882 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f0:	4a49      	ldr	r2, [pc, #292]	@ (8003918 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80037f2:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f8:	4a48      	ldr	r2, [pc, #288]	@ (800391c <HAL_TIM_PWM_Start_DMA+0x330>)
 80037fa:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003800:	4a47      	ldr	r2, [pc, #284]	@ (8003920 <HAL_TIM_PWM_Start_DMA+0x334>)
 8003802:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8003808:	6879      	ldr	r1, [r7, #4]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	333c      	adds	r3, #60	@ 0x3c
 8003810:	461a      	mov	r2, r3
 8003812:	887b      	ldrh	r3, [r7, #2]
 8003814:	f7fe fe06 	bl	8002424 <HAL_DMA_Start_IT>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e075      	b.n	800390e <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68da      	ldr	r2, [r3, #12]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003830:	60da      	str	r2, [r3, #12]
      break;
 8003832:	e026      	b.n	8003882 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003838:	4a37      	ldr	r2, [pc, #220]	@ (8003918 <HAL_TIM_PWM_Start_DMA+0x32c>)
 800383a:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003840:	4a36      	ldr	r2, [pc, #216]	@ (800391c <HAL_TIM_PWM_Start_DMA+0x330>)
 8003842:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003848:	4a35      	ldr	r2, [pc, #212]	@ (8003920 <HAL_TIM_PWM_Start_DMA+0x334>)
 800384a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003850:	6879      	ldr	r1, [r7, #4]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	3340      	adds	r3, #64	@ 0x40
 8003858:	461a      	mov	r2, r3
 800385a:	887b      	ldrh	r3, [r7, #2]
 800385c:	f7fe fde2 	bl	8002424 <HAL_DMA_Start_IT>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e051      	b.n	800390e <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68da      	ldr	r2, [r3, #12]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003878:	60da      	str	r2, [r3, #12]
      break;
 800387a:	e002      	b.n	8003882 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	75fb      	strb	r3, [r7, #23]
      break;
 8003880:	bf00      	nop
  }

  if (status == HAL_OK)
 8003882:	7dfb      	ldrb	r3, [r7, #23]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d141      	bne.n	800390c <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2201      	movs	r2, #1
 800388e:	68b9      	ldr	r1, [r7, #8]
 8003890:	4618      	mov	r0, r3
 8003892:	f000 fe0b 	bl	80044ac <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a22      	ldr	r2, [pc, #136]	@ (8003924 <HAL_TIM_PWM_Start_DMA+0x338>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d107      	bne.n	80038b0 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038ae:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a1b      	ldr	r2, [pc, #108]	@ (8003924 <HAL_TIM_PWM_Start_DMA+0x338>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d00e      	beq.n	80038d8 <HAL_TIM_PWM_Start_DMA+0x2ec>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038c2:	d009      	beq.n	80038d8 <HAL_TIM_PWM_Start_DMA+0x2ec>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a17      	ldr	r2, [pc, #92]	@ (8003928 <HAL_TIM_PWM_Start_DMA+0x33c>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d004      	beq.n	80038d8 <HAL_TIM_PWM_Start_DMA+0x2ec>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a16      	ldr	r2, [pc, #88]	@ (800392c <HAL_TIM_PWM_Start_DMA+0x340>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d111      	bne.n	80038fc <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f003 0307 	and.w	r3, r3, #7
 80038e2:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	2b06      	cmp	r3, #6
 80038e8:	d010      	beq.n	800390c <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f042 0201 	orr.w	r2, r2, #1
 80038f8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038fa:	e007      	b.n	800390c <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f042 0201 	orr.w	r2, r2, #1
 800390a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800390c:	7dfb      	ldrb	r3, [r7, #23]
}
 800390e:	4618      	mov	r0, r3
 8003910:	3718      	adds	r7, #24
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	08003e85 	.word	0x08003e85
 800391c:	08003f2d 	.word	0x08003f2d
 8003920:	08003df3 	.word	0x08003df3
 8003924:	40012c00 	.word	0x40012c00
 8003928:	40000400 	.word	0x40000400
 800392c:	40000800 	.word	0x40000800

08003930 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800393a:	2300      	movs	r3, #0
 800393c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	2b0c      	cmp	r3, #12
 8003942:	d855      	bhi.n	80039f0 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8003944:	a201      	add	r2, pc, #4	@ (adr r2, 800394c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8003946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800394a:	bf00      	nop
 800394c:	08003981 	.word	0x08003981
 8003950:	080039f1 	.word	0x080039f1
 8003954:	080039f1 	.word	0x080039f1
 8003958:	080039f1 	.word	0x080039f1
 800395c:	0800399d 	.word	0x0800399d
 8003960:	080039f1 	.word	0x080039f1
 8003964:	080039f1 	.word	0x080039f1
 8003968:	080039f1 	.word	0x080039f1
 800396c:	080039b9 	.word	0x080039b9
 8003970:	080039f1 	.word	0x080039f1
 8003974:	080039f1 	.word	0x080039f1
 8003978:	080039f1 	.word	0x080039f1
 800397c:	080039d5 	.word	0x080039d5
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68da      	ldr	r2, [r3, #12]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800398e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003994:	4618      	mov	r0, r3
 8003996:	f7fe fda5 	bl	80024e4 <HAL_DMA_Abort_IT>
      break;
 800399a:	e02c      	b.n	80039f6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68da      	ldr	r2, [r3, #12]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039aa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7fe fd97 	bl	80024e4 <HAL_DMA_Abort_IT>
      break;
 80039b6:	e01e      	b.n	80039f6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68da      	ldr	r2, [r3, #12]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039c6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7fe fd89 	bl	80024e4 <HAL_DMA_Abort_IT>
      break;
 80039d2:	e010      	b.n	80039f6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68da      	ldr	r2, [r3, #12]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80039e2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7fe fd7b 	bl	80024e4 <HAL_DMA_Abort_IT>
      break;
 80039ee:	e002      	b.n	80039f6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	73fb      	strb	r3, [r7, #15]
      break;
 80039f4:	bf00      	nop
  }

  if (status == HAL_OK)
 80039f6:	7bfb      	ldrb	r3, [r7, #15]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d157      	bne.n	8003aac <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2200      	movs	r2, #0
 8003a02:	6839      	ldr	r1, [r7, #0]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f000 fd51 	bl	80044ac <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a2a      	ldr	r2, [pc, #168]	@ (8003ab8 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d117      	bne.n	8003a44 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	6a1a      	ldr	r2, [r3, #32]
 8003a1a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003a1e:	4013      	ands	r3, r2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10f      	bne.n	8003a44 <HAL_TIM_PWM_Stop_DMA+0x114>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	6a1a      	ldr	r2, [r3, #32]
 8003a2a:	f240 4344 	movw	r3, #1092	@ 0x444
 8003a2e:	4013      	ands	r3, r2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d107      	bne.n	8003a44 <HAL_TIM_PWM_Stop_DMA+0x114>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a42:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	6a1a      	ldr	r2, [r3, #32]
 8003a4a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003a4e:	4013      	ands	r3, r2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d10f      	bne.n	8003a74 <HAL_TIM_PWM_Stop_DMA+0x144>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6a1a      	ldr	r2, [r3, #32]
 8003a5a:	f240 4344 	movw	r3, #1092	@ 0x444
 8003a5e:	4013      	ands	r3, r2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d107      	bne.n	8003a74 <HAL_TIM_PWM_Stop_DMA+0x144>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0201 	bic.w	r2, r2, #1
 8003a72:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d104      	bne.n	8003a84 <HAL_TIM_PWM_Stop_DMA+0x154>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a82:	e013      	b.n	8003aac <HAL_TIM_PWM_Stop_DMA+0x17c>
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	2b04      	cmp	r3, #4
 8003a88:	d104      	bne.n	8003a94 <HAL_TIM_PWM_Stop_DMA+0x164>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a92:	e00b      	b.n	8003aac <HAL_TIM_PWM_Stop_DMA+0x17c>
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	2b08      	cmp	r3, #8
 8003a98:	d104      	bne.n	8003aa4 <HAL_TIM_PWM_Stop_DMA+0x174>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003aa2:	e003      	b.n	8003aac <HAL_TIM_PWM_Stop_DMA+0x17c>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8003aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	40012c00 	.word	0x40012c00

08003abc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d101      	bne.n	8003ada <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	e0ae      	b.n	8003c38 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2b0c      	cmp	r3, #12
 8003ae6:	f200 809f 	bhi.w	8003c28 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003aea:	a201      	add	r2, pc, #4	@ (adr r2, 8003af0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af0:	08003b25 	.word	0x08003b25
 8003af4:	08003c29 	.word	0x08003c29
 8003af8:	08003c29 	.word	0x08003c29
 8003afc:	08003c29 	.word	0x08003c29
 8003b00:	08003b65 	.word	0x08003b65
 8003b04:	08003c29 	.word	0x08003c29
 8003b08:	08003c29 	.word	0x08003c29
 8003b0c:	08003c29 	.word	0x08003c29
 8003b10:	08003ba7 	.word	0x08003ba7
 8003b14:	08003c29 	.word	0x08003c29
 8003b18:	08003c29 	.word	0x08003c29
 8003b1c:	08003c29 	.word	0x08003c29
 8003b20:	08003be7 	.word	0x08003be7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68b9      	ldr	r1, [r7, #8]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f000 faa0 	bl	8004070 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	699a      	ldr	r2, [r3, #24]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f042 0208 	orr.w	r2, r2, #8
 8003b3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	699a      	ldr	r2, [r3, #24]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 0204 	bic.w	r2, r2, #4
 8003b4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6999      	ldr	r1, [r3, #24]
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	691a      	ldr	r2, [r3, #16]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	619a      	str	r2, [r3, #24]
      break;
 8003b62:	e064      	b.n	8003c2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68b9      	ldr	r1, [r7, #8]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f000 fae6 	bl	800413c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	699a      	ldr	r2, [r3, #24]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	699a      	ldr	r2, [r3, #24]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6999      	ldr	r1, [r3, #24]
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	021a      	lsls	r2, r3, #8
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	619a      	str	r2, [r3, #24]
      break;
 8003ba4:	e043      	b.n	8003c2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68b9      	ldr	r1, [r7, #8]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f000 fb2f 	bl	8004210 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	69da      	ldr	r2, [r3, #28]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f042 0208 	orr.w	r2, r2, #8
 8003bc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	69da      	ldr	r2, [r3, #28]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 0204 	bic.w	r2, r2, #4
 8003bd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	69d9      	ldr	r1, [r3, #28]
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	691a      	ldr	r2, [r3, #16]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	430a      	orrs	r2, r1
 8003be2:	61da      	str	r2, [r3, #28]
      break;
 8003be4:	e023      	b.n	8003c2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68b9      	ldr	r1, [r7, #8]
 8003bec:	4618      	mov	r0, r3
 8003bee:	f000 fb79 	bl	80042e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	69da      	ldr	r2, [r3, #28]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	69da      	ldr	r2, [r3, #28]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	69d9      	ldr	r1, [r3, #28]
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	021a      	lsls	r2, r3, #8
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	61da      	str	r2, [r3, #28]
      break;
 8003c26:	e002      	b.n	8003c2e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	75fb      	strb	r3, [r7, #23]
      break;
 8003c2c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3718      	adds	r7, #24
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d101      	bne.n	8003c5c <HAL_TIM_ConfigClockSource+0x1c>
 8003c58:	2302      	movs	r3, #2
 8003c5a:	e0b4      	b.n	8003dc6 <HAL_TIM_ConfigClockSource+0x186>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2202      	movs	r2, #2
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003c7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68ba      	ldr	r2, [r7, #8]
 8003c8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c94:	d03e      	beq.n	8003d14 <HAL_TIM_ConfigClockSource+0xd4>
 8003c96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c9a:	f200 8087 	bhi.w	8003dac <HAL_TIM_ConfigClockSource+0x16c>
 8003c9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ca2:	f000 8086 	beq.w	8003db2 <HAL_TIM_ConfigClockSource+0x172>
 8003ca6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003caa:	d87f      	bhi.n	8003dac <HAL_TIM_ConfigClockSource+0x16c>
 8003cac:	2b70      	cmp	r3, #112	@ 0x70
 8003cae:	d01a      	beq.n	8003ce6 <HAL_TIM_ConfigClockSource+0xa6>
 8003cb0:	2b70      	cmp	r3, #112	@ 0x70
 8003cb2:	d87b      	bhi.n	8003dac <HAL_TIM_ConfigClockSource+0x16c>
 8003cb4:	2b60      	cmp	r3, #96	@ 0x60
 8003cb6:	d050      	beq.n	8003d5a <HAL_TIM_ConfigClockSource+0x11a>
 8003cb8:	2b60      	cmp	r3, #96	@ 0x60
 8003cba:	d877      	bhi.n	8003dac <HAL_TIM_ConfigClockSource+0x16c>
 8003cbc:	2b50      	cmp	r3, #80	@ 0x50
 8003cbe:	d03c      	beq.n	8003d3a <HAL_TIM_ConfigClockSource+0xfa>
 8003cc0:	2b50      	cmp	r3, #80	@ 0x50
 8003cc2:	d873      	bhi.n	8003dac <HAL_TIM_ConfigClockSource+0x16c>
 8003cc4:	2b40      	cmp	r3, #64	@ 0x40
 8003cc6:	d058      	beq.n	8003d7a <HAL_TIM_ConfigClockSource+0x13a>
 8003cc8:	2b40      	cmp	r3, #64	@ 0x40
 8003cca:	d86f      	bhi.n	8003dac <HAL_TIM_ConfigClockSource+0x16c>
 8003ccc:	2b30      	cmp	r3, #48	@ 0x30
 8003cce:	d064      	beq.n	8003d9a <HAL_TIM_ConfigClockSource+0x15a>
 8003cd0:	2b30      	cmp	r3, #48	@ 0x30
 8003cd2:	d86b      	bhi.n	8003dac <HAL_TIM_ConfigClockSource+0x16c>
 8003cd4:	2b20      	cmp	r3, #32
 8003cd6:	d060      	beq.n	8003d9a <HAL_TIM_ConfigClockSource+0x15a>
 8003cd8:	2b20      	cmp	r3, #32
 8003cda:	d867      	bhi.n	8003dac <HAL_TIM_ConfigClockSource+0x16c>
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d05c      	beq.n	8003d9a <HAL_TIM_ConfigClockSource+0x15a>
 8003ce0:	2b10      	cmp	r3, #16
 8003ce2:	d05a      	beq.n	8003d9a <HAL_TIM_ConfigClockSource+0x15a>
 8003ce4:	e062      	b.n	8003dac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003cf6:	f000 fbba 	bl	800446e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003d08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68ba      	ldr	r2, [r7, #8]
 8003d10:	609a      	str	r2, [r3, #8]
      break;
 8003d12:	e04f      	b.n	8003db4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d24:	f000 fba3 	bl	800446e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689a      	ldr	r2, [r3, #8]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d36:	609a      	str	r2, [r3, #8]
      break;
 8003d38:	e03c      	b.n	8003db4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d46:	461a      	mov	r2, r3
 8003d48:	f000 fb1a 	bl	8004380 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2150      	movs	r1, #80	@ 0x50
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 fb71 	bl	800443a <TIM_ITRx_SetConfig>
      break;
 8003d58:	e02c      	b.n	8003db4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d66:	461a      	mov	r2, r3
 8003d68:	f000 fb38 	bl	80043dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2160      	movs	r1, #96	@ 0x60
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 fb61 	bl	800443a <TIM_ITRx_SetConfig>
      break;
 8003d78:	e01c      	b.n	8003db4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d86:	461a      	mov	r2, r3
 8003d88:	f000 fafa 	bl	8004380 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2140      	movs	r1, #64	@ 0x40
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 fb51 	bl	800443a <TIM_ITRx_SetConfig>
      break;
 8003d98:	e00c      	b.n	8003db4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4619      	mov	r1, r3
 8003da4:	4610      	mov	r0, r2
 8003da6:	f000 fb48 	bl	800443a <TIM_ITRx_SetConfig>
      break;
 8003daa:	e003      	b.n	8003db4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	73fb      	strb	r3, [r7, #15]
      break;
 8003db0:	e000      	b.n	8003db4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003db2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b083      	sub	sp, #12
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003dd6:	bf00      	nop
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bc80      	pop	{r7}
 8003dde:	4770      	bx	lr

08003de0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bc80      	pop	{r7}
 8003df0:	4770      	bx	lr

08003df2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b084      	sub	sp, #16
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfe:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d107      	bne.n	8003e1a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e18:	e02a      	b.n	8003e70 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d107      	bne.n	8003e34 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2202      	movs	r2, #2
 8003e28:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e32:	e01d      	b.n	8003e70 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d107      	bne.n	8003e4e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2204      	movs	r2, #4
 8003e42:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e4c:	e010      	b.n	8003e70 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d107      	bne.n	8003e68 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2208      	movs	r2, #8
 8003e5c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003e66:	e003      	b.n	8003e70 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f7ff ffb5 	bl	8003de0 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	771a      	strb	r2, [r3, #28]
}
 8003e7c:	bf00      	nop
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e90:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d10b      	bne.n	8003eb4 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d136      	bne.n	8003f18 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003eb2:	e031      	b.n	8003f18 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d10b      	bne.n	8003ed6 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2202      	movs	r2, #2
 8003ec2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d125      	bne.n	8003f18 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ed4:	e020      	b.n	8003f18 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d10b      	bne.n	8003ef8 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2204      	movs	r2, #4
 8003ee4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d114      	bne.n	8003f18 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ef6:	e00f      	b.n	8003f18 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d10a      	bne.n	8003f18 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2208      	movs	r2, #8
 8003f06:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d103      	bne.n	8003f18 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f7fc fd6f 	bl	80009fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	771a      	strb	r2, [r3, #28]
}
 8003f24:	bf00      	nop
 8003f26:	3710      	adds	r7, #16
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f38:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d103      	bne.n	8003f4c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2201      	movs	r2, #1
 8003f48:	771a      	strb	r2, [r3, #28]
 8003f4a:	e019      	b.n	8003f80 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d103      	bne.n	8003f5e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2202      	movs	r2, #2
 8003f5a:	771a      	strb	r2, [r3, #28]
 8003f5c:	e010      	b.n	8003f80 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d103      	bne.n	8003f70 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2204      	movs	r2, #4
 8003f6c:	771a      	strb	r2, [r3, #28]
 8003f6e:	e007      	b.n	8003f80 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d102      	bne.n	8003f80 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2208      	movs	r2, #8
 8003f7e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f7ff ff24 	bl	8003dce <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	771a      	strb	r2, [r3, #28]
}
 8003f8c:	bf00      	nop
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a2f      	ldr	r2, [pc, #188]	@ (8004064 <TIM_Base_SetConfig+0xd0>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d00b      	beq.n	8003fc4 <TIM_Base_SetConfig+0x30>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fb2:	d007      	beq.n	8003fc4 <TIM_Base_SetConfig+0x30>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a2c      	ldr	r2, [pc, #176]	@ (8004068 <TIM_Base_SetConfig+0xd4>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d003      	beq.n	8003fc4 <TIM_Base_SetConfig+0x30>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a2b      	ldr	r2, [pc, #172]	@ (800406c <TIM_Base_SetConfig+0xd8>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d108      	bne.n	8003fd6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a22      	ldr	r2, [pc, #136]	@ (8004064 <TIM_Base_SetConfig+0xd0>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d00b      	beq.n	8003ff6 <TIM_Base_SetConfig+0x62>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fe4:	d007      	beq.n	8003ff6 <TIM_Base_SetConfig+0x62>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a1f      	ldr	r2, [pc, #124]	@ (8004068 <TIM_Base_SetConfig+0xd4>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d003      	beq.n	8003ff6 <TIM_Base_SetConfig+0x62>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a1e      	ldr	r2, [pc, #120]	@ (800406c <TIM_Base_SetConfig+0xd8>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d108      	bne.n	8004008 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ffc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	4313      	orrs	r3, r2
 8004006:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	4313      	orrs	r3, r2
 8004014:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	689a      	ldr	r2, [r3, #8]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a0d      	ldr	r2, [pc, #52]	@ (8004064 <TIM_Base_SetConfig+0xd0>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d103      	bne.n	800403c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	691a      	ldr	r2, [r3, #16]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	2b00      	cmp	r3, #0
 800404c:	d005      	beq.n	800405a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	f023 0201 	bic.w	r2, r3, #1
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	611a      	str	r2, [r3, #16]
  }
}
 800405a:	bf00      	nop
 800405c:	3714      	adds	r7, #20
 800405e:	46bd      	mov	sp, r7
 8004060:	bc80      	pop	{r7}
 8004062:	4770      	bx	lr
 8004064:	40012c00 	.word	0x40012c00
 8004068:	40000400 	.word	0x40000400
 800406c:	40000800 	.word	0x40000800

08004070 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004070:	b480      	push	{r7}
 8004072:	b087      	sub	sp, #28
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	f023 0201 	bic.w	r2, r3, #1
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800409e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f023 0303 	bic.w	r3, r3, #3
 80040a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f023 0302 	bic.w	r3, r3, #2
 80040b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a1c      	ldr	r2, [pc, #112]	@ (8004138 <TIM_OC1_SetConfig+0xc8>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d10c      	bne.n	80040e6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	f023 0308 	bic.w	r3, r3, #8
 80040d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	4313      	orrs	r3, r2
 80040dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	f023 0304 	bic.w	r3, r3, #4
 80040e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a13      	ldr	r2, [pc, #76]	@ (8004138 <TIM_OC1_SetConfig+0xc8>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d111      	bne.n	8004112 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80040fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	4313      	orrs	r3, r2
 8004106:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	4313      	orrs	r3, r2
 8004110:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	621a      	str	r2, [r3, #32]
}
 800412c:	bf00      	nop
 800412e:	371c      	adds	r7, #28
 8004130:	46bd      	mov	sp, r7
 8004132:	bc80      	pop	{r7}
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	40012c00 	.word	0x40012c00

0800413c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800413c:	b480      	push	{r7}
 800413e:	b087      	sub	sp, #28
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a1b      	ldr	r3, [r3, #32]
 8004150:	f023 0210 	bic.w	r2, r3, #16
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800416a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004172:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	021b      	lsls	r3, r3, #8
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	4313      	orrs	r3, r2
 800417e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	f023 0320 	bic.w	r3, r3, #32
 8004186:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	011b      	lsls	r3, r3, #4
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	4313      	orrs	r3, r2
 8004192:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a1d      	ldr	r2, [pc, #116]	@ (800420c <TIM_OC2_SetConfig+0xd0>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d10d      	bne.n	80041b8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	011b      	lsls	r3, r3, #4
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a14      	ldr	r2, [pc, #80]	@ (800420c <TIM_OC2_SetConfig+0xd0>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d113      	bne.n	80041e8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80041c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80041ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	4313      	orrs	r3, r2
 80041da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685a      	ldr	r2, [r3, #4]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	621a      	str	r2, [r3, #32]
}
 8004202:	bf00      	nop
 8004204:	371c      	adds	r7, #28
 8004206:	46bd      	mov	sp, r7
 8004208:	bc80      	pop	{r7}
 800420a:	4770      	bx	lr
 800420c:	40012c00 	.word	0x40012c00

08004210 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004210:	b480      	push	{r7}
 8004212:	b087      	sub	sp, #28
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a1b      	ldr	r3, [r3, #32]
 8004224:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	69db      	ldr	r3, [r3, #28]
 8004236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800423e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f023 0303 	bic.w	r3, r3, #3
 8004246:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	4313      	orrs	r3, r2
 8004250:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004258:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	021b      	lsls	r3, r3, #8
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	4313      	orrs	r3, r2
 8004264:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a1d      	ldr	r2, [pc, #116]	@ (80042e0 <TIM_OC3_SetConfig+0xd0>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d10d      	bne.n	800428a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004274:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	021b      	lsls	r3, r3, #8
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	4313      	orrs	r3, r2
 8004280:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004288:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a14      	ldr	r2, [pc, #80]	@ (80042e0 <TIM_OC3_SetConfig+0xd0>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d113      	bne.n	80042ba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004298:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80042a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	011b      	lsls	r3, r3, #4
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	011b      	lsls	r3, r3, #4
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	621a      	str	r2, [r3, #32]
}
 80042d4:	bf00      	nop
 80042d6:	371c      	adds	r7, #28
 80042d8:	46bd      	mov	sp, r7
 80042da:	bc80      	pop	{r7}
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	40012c00 	.word	0x40012c00

080042e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b087      	sub	sp, #28
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a1b      	ldr	r3, [r3, #32]
 80042f2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a1b      	ldr	r3, [r3, #32]
 80042f8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800431a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	021b      	lsls	r3, r3, #8
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	4313      	orrs	r3, r2
 8004326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800432e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	031b      	lsls	r3, r3, #12
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	4313      	orrs	r3, r2
 800433a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a0f      	ldr	r2, [pc, #60]	@ (800437c <TIM_OC4_SetConfig+0x98>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d109      	bne.n	8004358 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800434a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	695b      	ldr	r3, [r3, #20]
 8004350:	019b      	lsls	r3, r3, #6
 8004352:	697a      	ldr	r2, [r7, #20]
 8004354:	4313      	orrs	r3, r2
 8004356:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685a      	ldr	r2, [r3, #4]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	621a      	str	r2, [r3, #32]
}
 8004372:	bf00      	nop
 8004374:	371c      	adds	r7, #28
 8004376:	46bd      	mov	sp, r7
 8004378:	bc80      	pop	{r7}
 800437a:	4770      	bx	lr
 800437c:	40012c00 	.word	0x40012c00

08004380 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004380:	b480      	push	{r7}
 8004382:	b087      	sub	sp, #28
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6a1b      	ldr	r3, [r3, #32]
 8004390:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	f023 0201 	bic.w	r2, r3, #1
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80043aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	011b      	lsls	r3, r3, #4
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	f023 030a 	bic.w	r3, r3, #10
 80043bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	621a      	str	r2, [r3, #32]
}
 80043d2:	bf00      	nop
 80043d4:	371c      	adds	r7, #28
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bc80      	pop	{r7}
 80043da:	4770      	bx	lr

080043dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043dc:	b480      	push	{r7}
 80043de:	b087      	sub	sp, #28
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	f023 0210 	bic.w	r2, r3, #16
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004406:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	031b      	lsls	r3, r3, #12
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	4313      	orrs	r3, r2
 8004410:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004418:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	011b      	lsls	r3, r3, #4
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	4313      	orrs	r3, r2
 8004422:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	621a      	str	r2, [r3, #32]
}
 8004430:	bf00      	nop
 8004432:	371c      	adds	r7, #28
 8004434:	46bd      	mov	sp, r7
 8004436:	bc80      	pop	{r7}
 8004438:	4770      	bx	lr

0800443a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800443a:	b480      	push	{r7}
 800443c:	b085      	sub	sp, #20
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
 8004442:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004450:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004452:	683a      	ldr	r2, [r7, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4313      	orrs	r3, r2
 8004458:	f043 0307 	orr.w	r3, r3, #7
 800445c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	609a      	str	r2, [r3, #8]
}
 8004464:	bf00      	nop
 8004466:	3714      	adds	r7, #20
 8004468:	46bd      	mov	sp, r7
 800446a:	bc80      	pop	{r7}
 800446c:	4770      	bx	lr

0800446e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800446e:	b480      	push	{r7}
 8004470:	b087      	sub	sp, #28
 8004472:	af00      	add	r7, sp, #0
 8004474:	60f8      	str	r0, [r7, #12]
 8004476:	60b9      	str	r1, [r7, #8]
 8004478:	607a      	str	r2, [r7, #4]
 800447a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004488:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	021a      	lsls	r2, r3, #8
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	431a      	orrs	r2, r3
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	4313      	orrs	r3, r2
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	4313      	orrs	r3, r2
 800449a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	609a      	str	r2, [r3, #8]
}
 80044a2:	bf00      	nop
 80044a4:	371c      	adds	r7, #28
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bc80      	pop	{r7}
 80044aa:	4770      	bx	lr

080044ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b087      	sub	sp, #28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	f003 031f 	and.w	r3, r3, #31
 80044be:	2201      	movs	r2, #1
 80044c0:	fa02 f303 	lsl.w	r3, r2, r3
 80044c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6a1a      	ldr	r2, [r3, #32]
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	43db      	mvns	r3, r3
 80044ce:	401a      	ands	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6a1a      	ldr	r2, [r3, #32]
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	f003 031f 	and.w	r3, r3, #31
 80044de:	6879      	ldr	r1, [r7, #4]
 80044e0:	fa01 f303 	lsl.w	r3, r1, r3
 80044e4:	431a      	orrs	r2, r3
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	621a      	str	r2, [r3, #32]
}
 80044ea:	bf00      	nop
 80044ec:	371c      	adds	r7, #28
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bc80      	pop	{r7}
 80044f2:	4770      	bx	lr

080044f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004504:	2b01      	cmp	r3, #1
 8004506:	d101      	bne.n	800450c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004508:	2302      	movs	r3, #2
 800450a:	e046      	b.n	800459a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2202      	movs	r2, #2
 8004518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004532:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	4313      	orrs	r3, r2
 800453c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a16      	ldr	r2, [pc, #88]	@ (80045a4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d00e      	beq.n	800456e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004558:	d009      	beq.n	800456e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a12      	ldr	r2, [pc, #72]	@ (80045a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d004      	beq.n	800456e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a10      	ldr	r2, [pc, #64]	@ (80045ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d10c      	bne.n	8004588 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004574:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	4313      	orrs	r3, r2
 800457e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68ba      	ldr	r2, [r7, #8]
 8004586:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	bc80      	pop	{r7}
 80045a2:	4770      	bx	lr
 80045a4:	40012c00 	.word	0x40012c00
 80045a8:	40000400 	.word	0x40000400
 80045ac:	40000800 	.word	0x40000800

080045b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80045ba:	2300      	movs	r3, #0
 80045bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d101      	bne.n	80045cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80045c8:	2302      	movs	r3, #2
 80045ca:	e03d      	b.n	8004648 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	4313      	orrs	r3, r2
 80045e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4313      	orrs	r3, r2
 800460a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	4313      	orrs	r3, r2
 8004618:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	695b      	ldr	r3, [r3, #20]
 8004624:	4313      	orrs	r3, r2
 8004626:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	69db      	ldr	r3, [r3, #28]
 8004632:	4313      	orrs	r3, r2
 8004634:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3714      	adds	r7, #20
 800464c:	46bd      	mov	sp, r7
 800464e:	bc80      	pop	{r7}
 8004650:	4770      	bx	lr
	...

08004654 <rand>:
 8004654:	4b16      	ldr	r3, [pc, #88]	@ (80046b0 <rand+0x5c>)
 8004656:	b510      	push	{r4, lr}
 8004658:	681c      	ldr	r4, [r3, #0]
 800465a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800465c:	b9b3      	cbnz	r3, 800468c <rand+0x38>
 800465e:	2018      	movs	r0, #24
 8004660:	f000 fa2c 	bl	8004abc <malloc>
 8004664:	4602      	mov	r2, r0
 8004666:	6320      	str	r0, [r4, #48]	@ 0x30
 8004668:	b920      	cbnz	r0, 8004674 <rand+0x20>
 800466a:	2152      	movs	r1, #82	@ 0x52
 800466c:	4b11      	ldr	r3, [pc, #68]	@ (80046b4 <rand+0x60>)
 800466e:	4812      	ldr	r0, [pc, #72]	@ (80046b8 <rand+0x64>)
 8004670:	f000 f9be 	bl	80049f0 <__assert_func>
 8004674:	4911      	ldr	r1, [pc, #68]	@ (80046bc <rand+0x68>)
 8004676:	4b12      	ldr	r3, [pc, #72]	@ (80046c0 <rand+0x6c>)
 8004678:	e9c0 1300 	strd	r1, r3, [r0]
 800467c:	4b11      	ldr	r3, [pc, #68]	@ (80046c4 <rand+0x70>)
 800467e:	2100      	movs	r1, #0
 8004680:	6083      	str	r3, [r0, #8]
 8004682:	230b      	movs	r3, #11
 8004684:	8183      	strh	r3, [r0, #12]
 8004686:	2001      	movs	r0, #1
 8004688:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800468c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800468e:	480e      	ldr	r0, [pc, #56]	@ (80046c8 <rand+0x74>)
 8004690:	690b      	ldr	r3, [r1, #16]
 8004692:	694c      	ldr	r4, [r1, #20]
 8004694:	4358      	muls	r0, r3
 8004696:	4a0d      	ldr	r2, [pc, #52]	@ (80046cc <rand+0x78>)
 8004698:	fb02 0004 	mla	r0, r2, r4, r0
 800469c:	fba3 3202 	umull	r3, r2, r3, r2
 80046a0:	3301      	adds	r3, #1
 80046a2:	eb40 0002 	adc.w	r0, r0, r2
 80046a6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80046aa:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80046ae:	bd10      	pop	{r4, pc}
 80046b0:	2000004c 	.word	0x2000004c
 80046b4:	080057ba 	.word	0x080057ba
 80046b8:	080057d1 	.word	0x080057d1
 80046bc:	abcd330e 	.word	0xabcd330e
 80046c0:	e66d1234 	.word	0xe66d1234
 80046c4:	0005deec 	.word	0x0005deec
 80046c8:	5851f42d 	.word	0x5851f42d
 80046cc:	4c957f2d 	.word	0x4c957f2d

080046d0 <std>:
 80046d0:	2300      	movs	r3, #0
 80046d2:	b510      	push	{r4, lr}
 80046d4:	4604      	mov	r4, r0
 80046d6:	e9c0 3300 	strd	r3, r3, [r0]
 80046da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80046de:	6083      	str	r3, [r0, #8]
 80046e0:	8181      	strh	r1, [r0, #12]
 80046e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80046e4:	81c2      	strh	r2, [r0, #14]
 80046e6:	6183      	str	r3, [r0, #24]
 80046e8:	4619      	mov	r1, r3
 80046ea:	2208      	movs	r2, #8
 80046ec:	305c      	adds	r0, #92	@ 0x5c
 80046ee:	f000 f8f4 	bl	80048da <memset>
 80046f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004728 <std+0x58>)
 80046f4:	6224      	str	r4, [r4, #32]
 80046f6:	6263      	str	r3, [r4, #36]	@ 0x24
 80046f8:	4b0c      	ldr	r3, [pc, #48]	@ (800472c <std+0x5c>)
 80046fa:	62a3      	str	r3, [r4, #40]	@ 0x28
 80046fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004730 <std+0x60>)
 80046fe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004700:	4b0c      	ldr	r3, [pc, #48]	@ (8004734 <std+0x64>)
 8004702:	6323      	str	r3, [r4, #48]	@ 0x30
 8004704:	4b0c      	ldr	r3, [pc, #48]	@ (8004738 <std+0x68>)
 8004706:	429c      	cmp	r4, r3
 8004708:	d006      	beq.n	8004718 <std+0x48>
 800470a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800470e:	4294      	cmp	r4, r2
 8004710:	d002      	beq.n	8004718 <std+0x48>
 8004712:	33d0      	adds	r3, #208	@ 0xd0
 8004714:	429c      	cmp	r4, r3
 8004716:	d105      	bne.n	8004724 <std+0x54>
 8004718:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800471c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004720:	f000 b954 	b.w	80049cc <__retarget_lock_init_recursive>
 8004724:	bd10      	pop	{r4, pc}
 8004726:	bf00      	nop
 8004728:	08004855 	.word	0x08004855
 800472c:	08004877 	.word	0x08004877
 8004730:	080048af 	.word	0x080048af
 8004734:	080048d3 	.word	0x080048d3
 8004738:	20000f88 	.word	0x20000f88

0800473c <stdio_exit_handler>:
 800473c:	4a02      	ldr	r2, [pc, #8]	@ (8004748 <stdio_exit_handler+0xc>)
 800473e:	4903      	ldr	r1, [pc, #12]	@ (800474c <stdio_exit_handler+0x10>)
 8004740:	4803      	ldr	r0, [pc, #12]	@ (8004750 <stdio_exit_handler+0x14>)
 8004742:	f000 b869 	b.w	8004818 <_fwalk_sglue>
 8004746:	bf00      	nop
 8004748:	20000040 	.word	0x20000040
 800474c:	08005049 	.word	0x08005049
 8004750:	20000050 	.word	0x20000050

08004754 <cleanup_stdio>:
 8004754:	6841      	ldr	r1, [r0, #4]
 8004756:	4b0c      	ldr	r3, [pc, #48]	@ (8004788 <cleanup_stdio+0x34>)
 8004758:	b510      	push	{r4, lr}
 800475a:	4299      	cmp	r1, r3
 800475c:	4604      	mov	r4, r0
 800475e:	d001      	beq.n	8004764 <cleanup_stdio+0x10>
 8004760:	f000 fc72 	bl	8005048 <_fflush_r>
 8004764:	68a1      	ldr	r1, [r4, #8]
 8004766:	4b09      	ldr	r3, [pc, #36]	@ (800478c <cleanup_stdio+0x38>)
 8004768:	4299      	cmp	r1, r3
 800476a:	d002      	beq.n	8004772 <cleanup_stdio+0x1e>
 800476c:	4620      	mov	r0, r4
 800476e:	f000 fc6b 	bl	8005048 <_fflush_r>
 8004772:	68e1      	ldr	r1, [r4, #12]
 8004774:	4b06      	ldr	r3, [pc, #24]	@ (8004790 <cleanup_stdio+0x3c>)
 8004776:	4299      	cmp	r1, r3
 8004778:	d004      	beq.n	8004784 <cleanup_stdio+0x30>
 800477a:	4620      	mov	r0, r4
 800477c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004780:	f000 bc62 	b.w	8005048 <_fflush_r>
 8004784:	bd10      	pop	{r4, pc}
 8004786:	bf00      	nop
 8004788:	20000f88 	.word	0x20000f88
 800478c:	20000ff0 	.word	0x20000ff0
 8004790:	20001058 	.word	0x20001058

08004794 <global_stdio_init.part.0>:
 8004794:	b510      	push	{r4, lr}
 8004796:	4b0b      	ldr	r3, [pc, #44]	@ (80047c4 <global_stdio_init.part.0+0x30>)
 8004798:	4c0b      	ldr	r4, [pc, #44]	@ (80047c8 <global_stdio_init.part.0+0x34>)
 800479a:	4a0c      	ldr	r2, [pc, #48]	@ (80047cc <global_stdio_init.part.0+0x38>)
 800479c:	4620      	mov	r0, r4
 800479e:	601a      	str	r2, [r3, #0]
 80047a0:	2104      	movs	r1, #4
 80047a2:	2200      	movs	r2, #0
 80047a4:	f7ff ff94 	bl	80046d0 <std>
 80047a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80047ac:	2201      	movs	r2, #1
 80047ae:	2109      	movs	r1, #9
 80047b0:	f7ff ff8e 	bl	80046d0 <std>
 80047b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80047b8:	2202      	movs	r2, #2
 80047ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047be:	2112      	movs	r1, #18
 80047c0:	f7ff bf86 	b.w	80046d0 <std>
 80047c4:	200010c0 	.word	0x200010c0
 80047c8:	20000f88 	.word	0x20000f88
 80047cc:	0800473d 	.word	0x0800473d

080047d0 <__sfp_lock_acquire>:
 80047d0:	4801      	ldr	r0, [pc, #4]	@ (80047d8 <__sfp_lock_acquire+0x8>)
 80047d2:	f000 b8fc 	b.w	80049ce <__retarget_lock_acquire_recursive>
 80047d6:	bf00      	nop
 80047d8:	200010c9 	.word	0x200010c9

080047dc <__sfp_lock_release>:
 80047dc:	4801      	ldr	r0, [pc, #4]	@ (80047e4 <__sfp_lock_release+0x8>)
 80047de:	f000 b8f7 	b.w	80049d0 <__retarget_lock_release_recursive>
 80047e2:	bf00      	nop
 80047e4:	200010c9 	.word	0x200010c9

080047e8 <__sinit>:
 80047e8:	b510      	push	{r4, lr}
 80047ea:	4604      	mov	r4, r0
 80047ec:	f7ff fff0 	bl	80047d0 <__sfp_lock_acquire>
 80047f0:	6a23      	ldr	r3, [r4, #32]
 80047f2:	b11b      	cbz	r3, 80047fc <__sinit+0x14>
 80047f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047f8:	f7ff bff0 	b.w	80047dc <__sfp_lock_release>
 80047fc:	4b04      	ldr	r3, [pc, #16]	@ (8004810 <__sinit+0x28>)
 80047fe:	6223      	str	r3, [r4, #32]
 8004800:	4b04      	ldr	r3, [pc, #16]	@ (8004814 <__sinit+0x2c>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1f5      	bne.n	80047f4 <__sinit+0xc>
 8004808:	f7ff ffc4 	bl	8004794 <global_stdio_init.part.0>
 800480c:	e7f2      	b.n	80047f4 <__sinit+0xc>
 800480e:	bf00      	nop
 8004810:	08004755 	.word	0x08004755
 8004814:	200010c0 	.word	0x200010c0

08004818 <_fwalk_sglue>:
 8004818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800481c:	4607      	mov	r7, r0
 800481e:	4688      	mov	r8, r1
 8004820:	4614      	mov	r4, r2
 8004822:	2600      	movs	r6, #0
 8004824:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004828:	f1b9 0901 	subs.w	r9, r9, #1
 800482c:	d505      	bpl.n	800483a <_fwalk_sglue+0x22>
 800482e:	6824      	ldr	r4, [r4, #0]
 8004830:	2c00      	cmp	r4, #0
 8004832:	d1f7      	bne.n	8004824 <_fwalk_sglue+0xc>
 8004834:	4630      	mov	r0, r6
 8004836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800483a:	89ab      	ldrh	r3, [r5, #12]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d907      	bls.n	8004850 <_fwalk_sglue+0x38>
 8004840:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004844:	3301      	adds	r3, #1
 8004846:	d003      	beq.n	8004850 <_fwalk_sglue+0x38>
 8004848:	4629      	mov	r1, r5
 800484a:	4638      	mov	r0, r7
 800484c:	47c0      	blx	r8
 800484e:	4306      	orrs	r6, r0
 8004850:	3568      	adds	r5, #104	@ 0x68
 8004852:	e7e9      	b.n	8004828 <_fwalk_sglue+0x10>

08004854 <__sread>:
 8004854:	b510      	push	{r4, lr}
 8004856:	460c      	mov	r4, r1
 8004858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800485c:	f000 f868 	bl	8004930 <_read_r>
 8004860:	2800      	cmp	r0, #0
 8004862:	bfab      	itete	ge
 8004864:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004866:	89a3      	ldrhlt	r3, [r4, #12]
 8004868:	181b      	addge	r3, r3, r0
 800486a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800486e:	bfac      	ite	ge
 8004870:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004872:	81a3      	strhlt	r3, [r4, #12]
 8004874:	bd10      	pop	{r4, pc}

08004876 <__swrite>:
 8004876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800487a:	461f      	mov	r7, r3
 800487c:	898b      	ldrh	r3, [r1, #12]
 800487e:	4605      	mov	r5, r0
 8004880:	05db      	lsls	r3, r3, #23
 8004882:	460c      	mov	r4, r1
 8004884:	4616      	mov	r6, r2
 8004886:	d505      	bpl.n	8004894 <__swrite+0x1e>
 8004888:	2302      	movs	r3, #2
 800488a:	2200      	movs	r2, #0
 800488c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004890:	f000 f83c 	bl	800490c <_lseek_r>
 8004894:	89a3      	ldrh	r3, [r4, #12]
 8004896:	4632      	mov	r2, r6
 8004898:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800489c:	81a3      	strh	r3, [r4, #12]
 800489e:	4628      	mov	r0, r5
 80048a0:	463b      	mov	r3, r7
 80048a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048aa:	f000 b853 	b.w	8004954 <_write_r>

080048ae <__sseek>:
 80048ae:	b510      	push	{r4, lr}
 80048b0:	460c      	mov	r4, r1
 80048b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048b6:	f000 f829 	bl	800490c <_lseek_r>
 80048ba:	1c43      	adds	r3, r0, #1
 80048bc:	89a3      	ldrh	r3, [r4, #12]
 80048be:	bf15      	itete	ne
 80048c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80048c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80048c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80048ca:	81a3      	strheq	r3, [r4, #12]
 80048cc:	bf18      	it	ne
 80048ce:	81a3      	strhne	r3, [r4, #12]
 80048d0:	bd10      	pop	{r4, pc}

080048d2 <__sclose>:
 80048d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048d6:	f000 b809 	b.w	80048ec <_close_r>

080048da <memset>:
 80048da:	4603      	mov	r3, r0
 80048dc:	4402      	add	r2, r0
 80048de:	4293      	cmp	r3, r2
 80048e0:	d100      	bne.n	80048e4 <memset+0xa>
 80048e2:	4770      	bx	lr
 80048e4:	f803 1b01 	strb.w	r1, [r3], #1
 80048e8:	e7f9      	b.n	80048de <memset+0x4>
	...

080048ec <_close_r>:
 80048ec:	b538      	push	{r3, r4, r5, lr}
 80048ee:	2300      	movs	r3, #0
 80048f0:	4d05      	ldr	r5, [pc, #20]	@ (8004908 <_close_r+0x1c>)
 80048f2:	4604      	mov	r4, r0
 80048f4:	4608      	mov	r0, r1
 80048f6:	602b      	str	r3, [r5, #0]
 80048f8:	f7fc ffc1 	bl	800187e <_close>
 80048fc:	1c43      	adds	r3, r0, #1
 80048fe:	d102      	bne.n	8004906 <_close_r+0x1a>
 8004900:	682b      	ldr	r3, [r5, #0]
 8004902:	b103      	cbz	r3, 8004906 <_close_r+0x1a>
 8004904:	6023      	str	r3, [r4, #0]
 8004906:	bd38      	pop	{r3, r4, r5, pc}
 8004908:	200010c4 	.word	0x200010c4

0800490c <_lseek_r>:
 800490c:	b538      	push	{r3, r4, r5, lr}
 800490e:	4604      	mov	r4, r0
 8004910:	4608      	mov	r0, r1
 8004912:	4611      	mov	r1, r2
 8004914:	2200      	movs	r2, #0
 8004916:	4d05      	ldr	r5, [pc, #20]	@ (800492c <_lseek_r+0x20>)
 8004918:	602a      	str	r2, [r5, #0]
 800491a:	461a      	mov	r2, r3
 800491c:	f7fc ffd3 	bl	80018c6 <_lseek>
 8004920:	1c43      	adds	r3, r0, #1
 8004922:	d102      	bne.n	800492a <_lseek_r+0x1e>
 8004924:	682b      	ldr	r3, [r5, #0]
 8004926:	b103      	cbz	r3, 800492a <_lseek_r+0x1e>
 8004928:	6023      	str	r3, [r4, #0]
 800492a:	bd38      	pop	{r3, r4, r5, pc}
 800492c:	200010c4 	.word	0x200010c4

08004930 <_read_r>:
 8004930:	b538      	push	{r3, r4, r5, lr}
 8004932:	4604      	mov	r4, r0
 8004934:	4608      	mov	r0, r1
 8004936:	4611      	mov	r1, r2
 8004938:	2200      	movs	r2, #0
 800493a:	4d05      	ldr	r5, [pc, #20]	@ (8004950 <_read_r+0x20>)
 800493c:	602a      	str	r2, [r5, #0]
 800493e:	461a      	mov	r2, r3
 8004940:	f7fc ff64 	bl	800180c <_read>
 8004944:	1c43      	adds	r3, r0, #1
 8004946:	d102      	bne.n	800494e <_read_r+0x1e>
 8004948:	682b      	ldr	r3, [r5, #0]
 800494a:	b103      	cbz	r3, 800494e <_read_r+0x1e>
 800494c:	6023      	str	r3, [r4, #0]
 800494e:	bd38      	pop	{r3, r4, r5, pc}
 8004950:	200010c4 	.word	0x200010c4

08004954 <_write_r>:
 8004954:	b538      	push	{r3, r4, r5, lr}
 8004956:	4604      	mov	r4, r0
 8004958:	4608      	mov	r0, r1
 800495a:	4611      	mov	r1, r2
 800495c:	2200      	movs	r2, #0
 800495e:	4d05      	ldr	r5, [pc, #20]	@ (8004974 <_write_r+0x20>)
 8004960:	602a      	str	r2, [r5, #0]
 8004962:	461a      	mov	r2, r3
 8004964:	f7fc ff6f 	bl	8001846 <_write>
 8004968:	1c43      	adds	r3, r0, #1
 800496a:	d102      	bne.n	8004972 <_write_r+0x1e>
 800496c:	682b      	ldr	r3, [r5, #0]
 800496e:	b103      	cbz	r3, 8004972 <_write_r+0x1e>
 8004970:	6023      	str	r3, [r4, #0]
 8004972:	bd38      	pop	{r3, r4, r5, pc}
 8004974:	200010c4 	.word	0x200010c4

08004978 <__errno>:
 8004978:	4b01      	ldr	r3, [pc, #4]	@ (8004980 <__errno+0x8>)
 800497a:	6818      	ldr	r0, [r3, #0]
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	2000004c 	.word	0x2000004c

08004984 <__libc_init_array>:
 8004984:	b570      	push	{r4, r5, r6, lr}
 8004986:	2600      	movs	r6, #0
 8004988:	4d0c      	ldr	r5, [pc, #48]	@ (80049bc <__libc_init_array+0x38>)
 800498a:	4c0d      	ldr	r4, [pc, #52]	@ (80049c0 <__libc_init_array+0x3c>)
 800498c:	1b64      	subs	r4, r4, r5
 800498e:	10a4      	asrs	r4, r4, #2
 8004990:	42a6      	cmp	r6, r4
 8004992:	d109      	bne.n	80049a8 <__libc_init_array+0x24>
 8004994:	f000 fe52 	bl	800563c <_init>
 8004998:	2600      	movs	r6, #0
 800499a:	4d0a      	ldr	r5, [pc, #40]	@ (80049c4 <__libc_init_array+0x40>)
 800499c:	4c0a      	ldr	r4, [pc, #40]	@ (80049c8 <__libc_init_array+0x44>)
 800499e:	1b64      	subs	r4, r4, r5
 80049a0:	10a4      	asrs	r4, r4, #2
 80049a2:	42a6      	cmp	r6, r4
 80049a4:	d105      	bne.n	80049b2 <__libc_init_array+0x2e>
 80049a6:	bd70      	pop	{r4, r5, r6, pc}
 80049a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80049ac:	4798      	blx	r3
 80049ae:	3601      	adds	r6, #1
 80049b0:	e7ee      	b.n	8004990 <__libc_init_array+0xc>
 80049b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80049b6:	4798      	blx	r3
 80049b8:	3601      	adds	r6, #1
 80049ba:	e7f2      	b.n	80049a2 <__libc_init_array+0x1e>
 80049bc:	08005898 	.word	0x08005898
 80049c0:	08005898 	.word	0x08005898
 80049c4:	08005898 	.word	0x08005898
 80049c8:	0800589c 	.word	0x0800589c

080049cc <__retarget_lock_init_recursive>:
 80049cc:	4770      	bx	lr

080049ce <__retarget_lock_acquire_recursive>:
 80049ce:	4770      	bx	lr

080049d0 <__retarget_lock_release_recursive>:
 80049d0:	4770      	bx	lr

080049d2 <memcpy>:
 80049d2:	440a      	add	r2, r1
 80049d4:	4291      	cmp	r1, r2
 80049d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80049da:	d100      	bne.n	80049de <memcpy+0xc>
 80049dc:	4770      	bx	lr
 80049de:	b510      	push	{r4, lr}
 80049e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049e4:	4291      	cmp	r1, r2
 80049e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049ea:	d1f9      	bne.n	80049e0 <memcpy+0xe>
 80049ec:	bd10      	pop	{r4, pc}
	...

080049f0 <__assert_func>:
 80049f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80049f2:	4614      	mov	r4, r2
 80049f4:	461a      	mov	r2, r3
 80049f6:	4b09      	ldr	r3, [pc, #36]	@ (8004a1c <__assert_func+0x2c>)
 80049f8:	4605      	mov	r5, r0
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68d8      	ldr	r0, [r3, #12]
 80049fe:	b14c      	cbz	r4, 8004a14 <__assert_func+0x24>
 8004a00:	4b07      	ldr	r3, [pc, #28]	@ (8004a20 <__assert_func+0x30>)
 8004a02:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004a06:	9100      	str	r1, [sp, #0]
 8004a08:	462b      	mov	r3, r5
 8004a0a:	4906      	ldr	r1, [pc, #24]	@ (8004a24 <__assert_func+0x34>)
 8004a0c:	f000 fb44 	bl	8005098 <fiprintf>
 8004a10:	f000 fb72 	bl	80050f8 <abort>
 8004a14:	4b04      	ldr	r3, [pc, #16]	@ (8004a28 <__assert_func+0x38>)
 8004a16:	461c      	mov	r4, r3
 8004a18:	e7f3      	b.n	8004a02 <__assert_func+0x12>
 8004a1a:	bf00      	nop
 8004a1c:	2000004c 	.word	0x2000004c
 8004a20:	08005829 	.word	0x08005829
 8004a24:	08005836 	.word	0x08005836
 8004a28:	08005864 	.word	0x08005864

08004a2c <_free_r>:
 8004a2c:	b538      	push	{r3, r4, r5, lr}
 8004a2e:	4605      	mov	r5, r0
 8004a30:	2900      	cmp	r1, #0
 8004a32:	d040      	beq.n	8004ab6 <_free_r+0x8a>
 8004a34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a38:	1f0c      	subs	r4, r1, #4
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	bfb8      	it	lt
 8004a3e:	18e4      	addlt	r4, r4, r3
 8004a40:	f000 f8e6 	bl	8004c10 <__malloc_lock>
 8004a44:	4a1c      	ldr	r2, [pc, #112]	@ (8004ab8 <_free_r+0x8c>)
 8004a46:	6813      	ldr	r3, [r2, #0]
 8004a48:	b933      	cbnz	r3, 8004a58 <_free_r+0x2c>
 8004a4a:	6063      	str	r3, [r4, #4]
 8004a4c:	6014      	str	r4, [r2, #0]
 8004a4e:	4628      	mov	r0, r5
 8004a50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a54:	f000 b8e2 	b.w	8004c1c <__malloc_unlock>
 8004a58:	42a3      	cmp	r3, r4
 8004a5a:	d908      	bls.n	8004a6e <_free_r+0x42>
 8004a5c:	6820      	ldr	r0, [r4, #0]
 8004a5e:	1821      	adds	r1, r4, r0
 8004a60:	428b      	cmp	r3, r1
 8004a62:	bf01      	itttt	eq
 8004a64:	6819      	ldreq	r1, [r3, #0]
 8004a66:	685b      	ldreq	r3, [r3, #4]
 8004a68:	1809      	addeq	r1, r1, r0
 8004a6a:	6021      	streq	r1, [r4, #0]
 8004a6c:	e7ed      	b.n	8004a4a <_free_r+0x1e>
 8004a6e:	461a      	mov	r2, r3
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	b10b      	cbz	r3, 8004a78 <_free_r+0x4c>
 8004a74:	42a3      	cmp	r3, r4
 8004a76:	d9fa      	bls.n	8004a6e <_free_r+0x42>
 8004a78:	6811      	ldr	r1, [r2, #0]
 8004a7a:	1850      	adds	r0, r2, r1
 8004a7c:	42a0      	cmp	r0, r4
 8004a7e:	d10b      	bne.n	8004a98 <_free_r+0x6c>
 8004a80:	6820      	ldr	r0, [r4, #0]
 8004a82:	4401      	add	r1, r0
 8004a84:	1850      	adds	r0, r2, r1
 8004a86:	4283      	cmp	r3, r0
 8004a88:	6011      	str	r1, [r2, #0]
 8004a8a:	d1e0      	bne.n	8004a4e <_free_r+0x22>
 8004a8c:	6818      	ldr	r0, [r3, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	4408      	add	r0, r1
 8004a92:	6010      	str	r0, [r2, #0]
 8004a94:	6053      	str	r3, [r2, #4]
 8004a96:	e7da      	b.n	8004a4e <_free_r+0x22>
 8004a98:	d902      	bls.n	8004aa0 <_free_r+0x74>
 8004a9a:	230c      	movs	r3, #12
 8004a9c:	602b      	str	r3, [r5, #0]
 8004a9e:	e7d6      	b.n	8004a4e <_free_r+0x22>
 8004aa0:	6820      	ldr	r0, [r4, #0]
 8004aa2:	1821      	adds	r1, r4, r0
 8004aa4:	428b      	cmp	r3, r1
 8004aa6:	bf01      	itttt	eq
 8004aa8:	6819      	ldreq	r1, [r3, #0]
 8004aaa:	685b      	ldreq	r3, [r3, #4]
 8004aac:	1809      	addeq	r1, r1, r0
 8004aae:	6021      	streq	r1, [r4, #0]
 8004ab0:	6063      	str	r3, [r4, #4]
 8004ab2:	6054      	str	r4, [r2, #4]
 8004ab4:	e7cb      	b.n	8004a4e <_free_r+0x22>
 8004ab6:	bd38      	pop	{r3, r4, r5, pc}
 8004ab8:	200010d0 	.word	0x200010d0

08004abc <malloc>:
 8004abc:	4b02      	ldr	r3, [pc, #8]	@ (8004ac8 <malloc+0xc>)
 8004abe:	4601      	mov	r1, r0
 8004ac0:	6818      	ldr	r0, [r3, #0]
 8004ac2:	f000 b825 	b.w	8004b10 <_malloc_r>
 8004ac6:	bf00      	nop
 8004ac8:	2000004c 	.word	0x2000004c

08004acc <sbrk_aligned>:
 8004acc:	b570      	push	{r4, r5, r6, lr}
 8004ace:	4e0f      	ldr	r6, [pc, #60]	@ (8004b0c <sbrk_aligned+0x40>)
 8004ad0:	460c      	mov	r4, r1
 8004ad2:	6831      	ldr	r1, [r6, #0]
 8004ad4:	4605      	mov	r5, r0
 8004ad6:	b911      	cbnz	r1, 8004ade <sbrk_aligned+0x12>
 8004ad8:	f000 faf0 	bl	80050bc <_sbrk_r>
 8004adc:	6030      	str	r0, [r6, #0]
 8004ade:	4621      	mov	r1, r4
 8004ae0:	4628      	mov	r0, r5
 8004ae2:	f000 faeb 	bl	80050bc <_sbrk_r>
 8004ae6:	1c43      	adds	r3, r0, #1
 8004ae8:	d103      	bne.n	8004af2 <sbrk_aligned+0x26>
 8004aea:	f04f 34ff 	mov.w	r4, #4294967295
 8004aee:	4620      	mov	r0, r4
 8004af0:	bd70      	pop	{r4, r5, r6, pc}
 8004af2:	1cc4      	adds	r4, r0, #3
 8004af4:	f024 0403 	bic.w	r4, r4, #3
 8004af8:	42a0      	cmp	r0, r4
 8004afa:	d0f8      	beq.n	8004aee <sbrk_aligned+0x22>
 8004afc:	1a21      	subs	r1, r4, r0
 8004afe:	4628      	mov	r0, r5
 8004b00:	f000 fadc 	bl	80050bc <_sbrk_r>
 8004b04:	3001      	adds	r0, #1
 8004b06:	d1f2      	bne.n	8004aee <sbrk_aligned+0x22>
 8004b08:	e7ef      	b.n	8004aea <sbrk_aligned+0x1e>
 8004b0a:	bf00      	nop
 8004b0c:	200010cc 	.word	0x200010cc

08004b10 <_malloc_r>:
 8004b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b14:	1ccd      	adds	r5, r1, #3
 8004b16:	f025 0503 	bic.w	r5, r5, #3
 8004b1a:	3508      	adds	r5, #8
 8004b1c:	2d0c      	cmp	r5, #12
 8004b1e:	bf38      	it	cc
 8004b20:	250c      	movcc	r5, #12
 8004b22:	2d00      	cmp	r5, #0
 8004b24:	4606      	mov	r6, r0
 8004b26:	db01      	blt.n	8004b2c <_malloc_r+0x1c>
 8004b28:	42a9      	cmp	r1, r5
 8004b2a:	d904      	bls.n	8004b36 <_malloc_r+0x26>
 8004b2c:	230c      	movs	r3, #12
 8004b2e:	6033      	str	r3, [r6, #0]
 8004b30:	2000      	movs	r0, #0
 8004b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c0c <_malloc_r+0xfc>
 8004b3a:	f000 f869 	bl	8004c10 <__malloc_lock>
 8004b3e:	f8d8 3000 	ldr.w	r3, [r8]
 8004b42:	461c      	mov	r4, r3
 8004b44:	bb44      	cbnz	r4, 8004b98 <_malloc_r+0x88>
 8004b46:	4629      	mov	r1, r5
 8004b48:	4630      	mov	r0, r6
 8004b4a:	f7ff ffbf 	bl	8004acc <sbrk_aligned>
 8004b4e:	1c43      	adds	r3, r0, #1
 8004b50:	4604      	mov	r4, r0
 8004b52:	d158      	bne.n	8004c06 <_malloc_r+0xf6>
 8004b54:	f8d8 4000 	ldr.w	r4, [r8]
 8004b58:	4627      	mov	r7, r4
 8004b5a:	2f00      	cmp	r7, #0
 8004b5c:	d143      	bne.n	8004be6 <_malloc_r+0xd6>
 8004b5e:	2c00      	cmp	r4, #0
 8004b60:	d04b      	beq.n	8004bfa <_malloc_r+0xea>
 8004b62:	6823      	ldr	r3, [r4, #0]
 8004b64:	4639      	mov	r1, r7
 8004b66:	4630      	mov	r0, r6
 8004b68:	eb04 0903 	add.w	r9, r4, r3
 8004b6c:	f000 faa6 	bl	80050bc <_sbrk_r>
 8004b70:	4581      	cmp	r9, r0
 8004b72:	d142      	bne.n	8004bfa <_malloc_r+0xea>
 8004b74:	6821      	ldr	r1, [r4, #0]
 8004b76:	4630      	mov	r0, r6
 8004b78:	1a6d      	subs	r5, r5, r1
 8004b7a:	4629      	mov	r1, r5
 8004b7c:	f7ff ffa6 	bl	8004acc <sbrk_aligned>
 8004b80:	3001      	adds	r0, #1
 8004b82:	d03a      	beq.n	8004bfa <_malloc_r+0xea>
 8004b84:	6823      	ldr	r3, [r4, #0]
 8004b86:	442b      	add	r3, r5
 8004b88:	6023      	str	r3, [r4, #0]
 8004b8a:	f8d8 3000 	ldr.w	r3, [r8]
 8004b8e:	685a      	ldr	r2, [r3, #4]
 8004b90:	bb62      	cbnz	r2, 8004bec <_malloc_r+0xdc>
 8004b92:	f8c8 7000 	str.w	r7, [r8]
 8004b96:	e00f      	b.n	8004bb8 <_malloc_r+0xa8>
 8004b98:	6822      	ldr	r2, [r4, #0]
 8004b9a:	1b52      	subs	r2, r2, r5
 8004b9c:	d420      	bmi.n	8004be0 <_malloc_r+0xd0>
 8004b9e:	2a0b      	cmp	r2, #11
 8004ba0:	d917      	bls.n	8004bd2 <_malloc_r+0xc2>
 8004ba2:	1961      	adds	r1, r4, r5
 8004ba4:	42a3      	cmp	r3, r4
 8004ba6:	6025      	str	r5, [r4, #0]
 8004ba8:	bf18      	it	ne
 8004baa:	6059      	strne	r1, [r3, #4]
 8004bac:	6863      	ldr	r3, [r4, #4]
 8004bae:	bf08      	it	eq
 8004bb0:	f8c8 1000 	streq.w	r1, [r8]
 8004bb4:	5162      	str	r2, [r4, r5]
 8004bb6:	604b      	str	r3, [r1, #4]
 8004bb8:	4630      	mov	r0, r6
 8004bba:	f000 f82f 	bl	8004c1c <__malloc_unlock>
 8004bbe:	f104 000b 	add.w	r0, r4, #11
 8004bc2:	1d23      	adds	r3, r4, #4
 8004bc4:	f020 0007 	bic.w	r0, r0, #7
 8004bc8:	1ac2      	subs	r2, r0, r3
 8004bca:	bf1c      	itt	ne
 8004bcc:	1a1b      	subne	r3, r3, r0
 8004bce:	50a3      	strne	r3, [r4, r2]
 8004bd0:	e7af      	b.n	8004b32 <_malloc_r+0x22>
 8004bd2:	6862      	ldr	r2, [r4, #4]
 8004bd4:	42a3      	cmp	r3, r4
 8004bd6:	bf0c      	ite	eq
 8004bd8:	f8c8 2000 	streq.w	r2, [r8]
 8004bdc:	605a      	strne	r2, [r3, #4]
 8004bde:	e7eb      	b.n	8004bb8 <_malloc_r+0xa8>
 8004be0:	4623      	mov	r3, r4
 8004be2:	6864      	ldr	r4, [r4, #4]
 8004be4:	e7ae      	b.n	8004b44 <_malloc_r+0x34>
 8004be6:	463c      	mov	r4, r7
 8004be8:	687f      	ldr	r7, [r7, #4]
 8004bea:	e7b6      	b.n	8004b5a <_malloc_r+0x4a>
 8004bec:	461a      	mov	r2, r3
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	42a3      	cmp	r3, r4
 8004bf2:	d1fb      	bne.n	8004bec <_malloc_r+0xdc>
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	6053      	str	r3, [r2, #4]
 8004bf8:	e7de      	b.n	8004bb8 <_malloc_r+0xa8>
 8004bfa:	230c      	movs	r3, #12
 8004bfc:	4630      	mov	r0, r6
 8004bfe:	6033      	str	r3, [r6, #0]
 8004c00:	f000 f80c 	bl	8004c1c <__malloc_unlock>
 8004c04:	e794      	b.n	8004b30 <_malloc_r+0x20>
 8004c06:	6005      	str	r5, [r0, #0]
 8004c08:	e7d6      	b.n	8004bb8 <_malloc_r+0xa8>
 8004c0a:	bf00      	nop
 8004c0c:	200010d0 	.word	0x200010d0

08004c10 <__malloc_lock>:
 8004c10:	4801      	ldr	r0, [pc, #4]	@ (8004c18 <__malloc_lock+0x8>)
 8004c12:	f7ff bedc 	b.w	80049ce <__retarget_lock_acquire_recursive>
 8004c16:	bf00      	nop
 8004c18:	200010c8 	.word	0x200010c8

08004c1c <__malloc_unlock>:
 8004c1c:	4801      	ldr	r0, [pc, #4]	@ (8004c24 <__malloc_unlock+0x8>)
 8004c1e:	f7ff bed7 	b.w	80049d0 <__retarget_lock_release_recursive>
 8004c22:	bf00      	nop
 8004c24:	200010c8 	.word	0x200010c8

08004c28 <_printf_common>:
 8004c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c2c:	4616      	mov	r6, r2
 8004c2e:	4698      	mov	r8, r3
 8004c30:	688a      	ldr	r2, [r1, #8]
 8004c32:	690b      	ldr	r3, [r1, #16]
 8004c34:	4607      	mov	r7, r0
 8004c36:	4293      	cmp	r3, r2
 8004c38:	bfb8      	it	lt
 8004c3a:	4613      	movlt	r3, r2
 8004c3c:	6033      	str	r3, [r6, #0]
 8004c3e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004c42:	460c      	mov	r4, r1
 8004c44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004c48:	b10a      	cbz	r2, 8004c4e <_printf_common+0x26>
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	6033      	str	r3, [r6, #0]
 8004c4e:	6823      	ldr	r3, [r4, #0]
 8004c50:	0699      	lsls	r1, r3, #26
 8004c52:	bf42      	ittt	mi
 8004c54:	6833      	ldrmi	r3, [r6, #0]
 8004c56:	3302      	addmi	r3, #2
 8004c58:	6033      	strmi	r3, [r6, #0]
 8004c5a:	6825      	ldr	r5, [r4, #0]
 8004c5c:	f015 0506 	ands.w	r5, r5, #6
 8004c60:	d106      	bne.n	8004c70 <_printf_common+0x48>
 8004c62:	f104 0a19 	add.w	sl, r4, #25
 8004c66:	68e3      	ldr	r3, [r4, #12]
 8004c68:	6832      	ldr	r2, [r6, #0]
 8004c6a:	1a9b      	subs	r3, r3, r2
 8004c6c:	42ab      	cmp	r3, r5
 8004c6e:	dc2b      	bgt.n	8004cc8 <_printf_common+0xa0>
 8004c70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004c74:	6822      	ldr	r2, [r4, #0]
 8004c76:	3b00      	subs	r3, #0
 8004c78:	bf18      	it	ne
 8004c7a:	2301      	movne	r3, #1
 8004c7c:	0692      	lsls	r2, r2, #26
 8004c7e:	d430      	bmi.n	8004ce2 <_printf_common+0xba>
 8004c80:	4641      	mov	r1, r8
 8004c82:	4638      	mov	r0, r7
 8004c84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004c88:	47c8      	blx	r9
 8004c8a:	3001      	adds	r0, #1
 8004c8c:	d023      	beq.n	8004cd6 <_printf_common+0xae>
 8004c8e:	6823      	ldr	r3, [r4, #0]
 8004c90:	6922      	ldr	r2, [r4, #16]
 8004c92:	f003 0306 	and.w	r3, r3, #6
 8004c96:	2b04      	cmp	r3, #4
 8004c98:	bf14      	ite	ne
 8004c9a:	2500      	movne	r5, #0
 8004c9c:	6833      	ldreq	r3, [r6, #0]
 8004c9e:	f04f 0600 	mov.w	r6, #0
 8004ca2:	bf08      	it	eq
 8004ca4:	68e5      	ldreq	r5, [r4, #12]
 8004ca6:	f104 041a 	add.w	r4, r4, #26
 8004caa:	bf08      	it	eq
 8004cac:	1aed      	subeq	r5, r5, r3
 8004cae:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004cb2:	bf08      	it	eq
 8004cb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	bfc4      	itt	gt
 8004cbc:	1a9b      	subgt	r3, r3, r2
 8004cbe:	18ed      	addgt	r5, r5, r3
 8004cc0:	42b5      	cmp	r5, r6
 8004cc2:	d11a      	bne.n	8004cfa <_printf_common+0xd2>
 8004cc4:	2000      	movs	r0, #0
 8004cc6:	e008      	b.n	8004cda <_printf_common+0xb2>
 8004cc8:	2301      	movs	r3, #1
 8004cca:	4652      	mov	r2, sl
 8004ccc:	4641      	mov	r1, r8
 8004cce:	4638      	mov	r0, r7
 8004cd0:	47c8      	blx	r9
 8004cd2:	3001      	adds	r0, #1
 8004cd4:	d103      	bne.n	8004cde <_printf_common+0xb6>
 8004cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8004cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cde:	3501      	adds	r5, #1
 8004ce0:	e7c1      	b.n	8004c66 <_printf_common+0x3e>
 8004ce2:	2030      	movs	r0, #48	@ 0x30
 8004ce4:	18e1      	adds	r1, r4, r3
 8004ce6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004cea:	1c5a      	adds	r2, r3, #1
 8004cec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004cf0:	4422      	add	r2, r4
 8004cf2:	3302      	adds	r3, #2
 8004cf4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004cf8:	e7c2      	b.n	8004c80 <_printf_common+0x58>
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	4622      	mov	r2, r4
 8004cfe:	4641      	mov	r1, r8
 8004d00:	4638      	mov	r0, r7
 8004d02:	47c8      	blx	r9
 8004d04:	3001      	adds	r0, #1
 8004d06:	d0e6      	beq.n	8004cd6 <_printf_common+0xae>
 8004d08:	3601      	adds	r6, #1
 8004d0a:	e7d9      	b.n	8004cc0 <_printf_common+0x98>

08004d0c <_printf_i>:
 8004d0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d10:	7e0f      	ldrb	r7, [r1, #24]
 8004d12:	4691      	mov	r9, r2
 8004d14:	2f78      	cmp	r7, #120	@ 0x78
 8004d16:	4680      	mov	r8, r0
 8004d18:	460c      	mov	r4, r1
 8004d1a:	469a      	mov	sl, r3
 8004d1c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004d1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004d22:	d807      	bhi.n	8004d34 <_printf_i+0x28>
 8004d24:	2f62      	cmp	r7, #98	@ 0x62
 8004d26:	d80a      	bhi.n	8004d3e <_printf_i+0x32>
 8004d28:	2f00      	cmp	r7, #0
 8004d2a:	f000 80d1 	beq.w	8004ed0 <_printf_i+0x1c4>
 8004d2e:	2f58      	cmp	r7, #88	@ 0x58
 8004d30:	f000 80b8 	beq.w	8004ea4 <_printf_i+0x198>
 8004d34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004d3c:	e03a      	b.n	8004db4 <_printf_i+0xa8>
 8004d3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004d42:	2b15      	cmp	r3, #21
 8004d44:	d8f6      	bhi.n	8004d34 <_printf_i+0x28>
 8004d46:	a101      	add	r1, pc, #4	@ (adr r1, 8004d4c <_printf_i+0x40>)
 8004d48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d4c:	08004da5 	.word	0x08004da5
 8004d50:	08004db9 	.word	0x08004db9
 8004d54:	08004d35 	.word	0x08004d35
 8004d58:	08004d35 	.word	0x08004d35
 8004d5c:	08004d35 	.word	0x08004d35
 8004d60:	08004d35 	.word	0x08004d35
 8004d64:	08004db9 	.word	0x08004db9
 8004d68:	08004d35 	.word	0x08004d35
 8004d6c:	08004d35 	.word	0x08004d35
 8004d70:	08004d35 	.word	0x08004d35
 8004d74:	08004d35 	.word	0x08004d35
 8004d78:	08004eb7 	.word	0x08004eb7
 8004d7c:	08004de3 	.word	0x08004de3
 8004d80:	08004e71 	.word	0x08004e71
 8004d84:	08004d35 	.word	0x08004d35
 8004d88:	08004d35 	.word	0x08004d35
 8004d8c:	08004ed9 	.word	0x08004ed9
 8004d90:	08004d35 	.word	0x08004d35
 8004d94:	08004de3 	.word	0x08004de3
 8004d98:	08004d35 	.word	0x08004d35
 8004d9c:	08004d35 	.word	0x08004d35
 8004da0:	08004e79 	.word	0x08004e79
 8004da4:	6833      	ldr	r3, [r6, #0]
 8004da6:	1d1a      	adds	r2, r3, #4
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	6032      	str	r2, [r6, #0]
 8004dac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004db0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004db4:	2301      	movs	r3, #1
 8004db6:	e09c      	b.n	8004ef2 <_printf_i+0x1e6>
 8004db8:	6833      	ldr	r3, [r6, #0]
 8004dba:	6820      	ldr	r0, [r4, #0]
 8004dbc:	1d19      	adds	r1, r3, #4
 8004dbe:	6031      	str	r1, [r6, #0]
 8004dc0:	0606      	lsls	r6, r0, #24
 8004dc2:	d501      	bpl.n	8004dc8 <_printf_i+0xbc>
 8004dc4:	681d      	ldr	r5, [r3, #0]
 8004dc6:	e003      	b.n	8004dd0 <_printf_i+0xc4>
 8004dc8:	0645      	lsls	r5, r0, #25
 8004dca:	d5fb      	bpl.n	8004dc4 <_printf_i+0xb8>
 8004dcc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004dd0:	2d00      	cmp	r5, #0
 8004dd2:	da03      	bge.n	8004ddc <_printf_i+0xd0>
 8004dd4:	232d      	movs	r3, #45	@ 0x2d
 8004dd6:	426d      	negs	r5, r5
 8004dd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ddc:	230a      	movs	r3, #10
 8004dde:	4858      	ldr	r0, [pc, #352]	@ (8004f40 <_printf_i+0x234>)
 8004de0:	e011      	b.n	8004e06 <_printf_i+0xfa>
 8004de2:	6821      	ldr	r1, [r4, #0]
 8004de4:	6833      	ldr	r3, [r6, #0]
 8004de6:	0608      	lsls	r0, r1, #24
 8004de8:	f853 5b04 	ldr.w	r5, [r3], #4
 8004dec:	d402      	bmi.n	8004df4 <_printf_i+0xe8>
 8004dee:	0649      	lsls	r1, r1, #25
 8004df0:	bf48      	it	mi
 8004df2:	b2ad      	uxthmi	r5, r5
 8004df4:	2f6f      	cmp	r7, #111	@ 0x6f
 8004df6:	6033      	str	r3, [r6, #0]
 8004df8:	bf14      	ite	ne
 8004dfa:	230a      	movne	r3, #10
 8004dfc:	2308      	moveq	r3, #8
 8004dfe:	4850      	ldr	r0, [pc, #320]	@ (8004f40 <_printf_i+0x234>)
 8004e00:	2100      	movs	r1, #0
 8004e02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004e06:	6866      	ldr	r6, [r4, #4]
 8004e08:	2e00      	cmp	r6, #0
 8004e0a:	60a6      	str	r6, [r4, #8]
 8004e0c:	db05      	blt.n	8004e1a <_printf_i+0x10e>
 8004e0e:	6821      	ldr	r1, [r4, #0]
 8004e10:	432e      	orrs	r6, r5
 8004e12:	f021 0104 	bic.w	r1, r1, #4
 8004e16:	6021      	str	r1, [r4, #0]
 8004e18:	d04b      	beq.n	8004eb2 <_printf_i+0x1a6>
 8004e1a:	4616      	mov	r6, r2
 8004e1c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e20:	fb03 5711 	mls	r7, r3, r1, r5
 8004e24:	5dc7      	ldrb	r7, [r0, r7]
 8004e26:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e2a:	462f      	mov	r7, r5
 8004e2c:	42bb      	cmp	r3, r7
 8004e2e:	460d      	mov	r5, r1
 8004e30:	d9f4      	bls.n	8004e1c <_printf_i+0x110>
 8004e32:	2b08      	cmp	r3, #8
 8004e34:	d10b      	bne.n	8004e4e <_printf_i+0x142>
 8004e36:	6823      	ldr	r3, [r4, #0]
 8004e38:	07df      	lsls	r7, r3, #31
 8004e3a:	d508      	bpl.n	8004e4e <_printf_i+0x142>
 8004e3c:	6923      	ldr	r3, [r4, #16]
 8004e3e:	6861      	ldr	r1, [r4, #4]
 8004e40:	4299      	cmp	r1, r3
 8004e42:	bfde      	ittt	le
 8004e44:	2330      	movle	r3, #48	@ 0x30
 8004e46:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e4a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004e4e:	1b92      	subs	r2, r2, r6
 8004e50:	6122      	str	r2, [r4, #16]
 8004e52:	464b      	mov	r3, r9
 8004e54:	4621      	mov	r1, r4
 8004e56:	4640      	mov	r0, r8
 8004e58:	f8cd a000 	str.w	sl, [sp]
 8004e5c:	aa03      	add	r2, sp, #12
 8004e5e:	f7ff fee3 	bl	8004c28 <_printf_common>
 8004e62:	3001      	adds	r0, #1
 8004e64:	d14a      	bne.n	8004efc <_printf_i+0x1f0>
 8004e66:	f04f 30ff 	mov.w	r0, #4294967295
 8004e6a:	b004      	add	sp, #16
 8004e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e70:	6823      	ldr	r3, [r4, #0]
 8004e72:	f043 0320 	orr.w	r3, r3, #32
 8004e76:	6023      	str	r3, [r4, #0]
 8004e78:	2778      	movs	r7, #120	@ 0x78
 8004e7a:	4832      	ldr	r0, [pc, #200]	@ (8004f44 <_printf_i+0x238>)
 8004e7c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004e80:	6823      	ldr	r3, [r4, #0]
 8004e82:	6831      	ldr	r1, [r6, #0]
 8004e84:	061f      	lsls	r7, r3, #24
 8004e86:	f851 5b04 	ldr.w	r5, [r1], #4
 8004e8a:	d402      	bmi.n	8004e92 <_printf_i+0x186>
 8004e8c:	065f      	lsls	r7, r3, #25
 8004e8e:	bf48      	it	mi
 8004e90:	b2ad      	uxthmi	r5, r5
 8004e92:	6031      	str	r1, [r6, #0]
 8004e94:	07d9      	lsls	r1, r3, #31
 8004e96:	bf44      	itt	mi
 8004e98:	f043 0320 	orrmi.w	r3, r3, #32
 8004e9c:	6023      	strmi	r3, [r4, #0]
 8004e9e:	b11d      	cbz	r5, 8004ea8 <_printf_i+0x19c>
 8004ea0:	2310      	movs	r3, #16
 8004ea2:	e7ad      	b.n	8004e00 <_printf_i+0xf4>
 8004ea4:	4826      	ldr	r0, [pc, #152]	@ (8004f40 <_printf_i+0x234>)
 8004ea6:	e7e9      	b.n	8004e7c <_printf_i+0x170>
 8004ea8:	6823      	ldr	r3, [r4, #0]
 8004eaa:	f023 0320 	bic.w	r3, r3, #32
 8004eae:	6023      	str	r3, [r4, #0]
 8004eb0:	e7f6      	b.n	8004ea0 <_printf_i+0x194>
 8004eb2:	4616      	mov	r6, r2
 8004eb4:	e7bd      	b.n	8004e32 <_printf_i+0x126>
 8004eb6:	6833      	ldr	r3, [r6, #0]
 8004eb8:	6825      	ldr	r5, [r4, #0]
 8004eba:	1d18      	adds	r0, r3, #4
 8004ebc:	6961      	ldr	r1, [r4, #20]
 8004ebe:	6030      	str	r0, [r6, #0]
 8004ec0:	062e      	lsls	r6, r5, #24
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	d501      	bpl.n	8004eca <_printf_i+0x1be>
 8004ec6:	6019      	str	r1, [r3, #0]
 8004ec8:	e002      	b.n	8004ed0 <_printf_i+0x1c4>
 8004eca:	0668      	lsls	r0, r5, #25
 8004ecc:	d5fb      	bpl.n	8004ec6 <_printf_i+0x1ba>
 8004ece:	8019      	strh	r1, [r3, #0]
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	4616      	mov	r6, r2
 8004ed4:	6123      	str	r3, [r4, #16]
 8004ed6:	e7bc      	b.n	8004e52 <_printf_i+0x146>
 8004ed8:	6833      	ldr	r3, [r6, #0]
 8004eda:	2100      	movs	r1, #0
 8004edc:	1d1a      	adds	r2, r3, #4
 8004ede:	6032      	str	r2, [r6, #0]
 8004ee0:	681e      	ldr	r6, [r3, #0]
 8004ee2:	6862      	ldr	r2, [r4, #4]
 8004ee4:	4630      	mov	r0, r6
 8004ee6:	f000 f8f9 	bl	80050dc <memchr>
 8004eea:	b108      	cbz	r0, 8004ef0 <_printf_i+0x1e4>
 8004eec:	1b80      	subs	r0, r0, r6
 8004eee:	6060      	str	r0, [r4, #4]
 8004ef0:	6863      	ldr	r3, [r4, #4]
 8004ef2:	6123      	str	r3, [r4, #16]
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004efa:	e7aa      	b.n	8004e52 <_printf_i+0x146>
 8004efc:	4632      	mov	r2, r6
 8004efe:	4649      	mov	r1, r9
 8004f00:	4640      	mov	r0, r8
 8004f02:	6923      	ldr	r3, [r4, #16]
 8004f04:	47d0      	blx	sl
 8004f06:	3001      	adds	r0, #1
 8004f08:	d0ad      	beq.n	8004e66 <_printf_i+0x15a>
 8004f0a:	6823      	ldr	r3, [r4, #0]
 8004f0c:	079b      	lsls	r3, r3, #30
 8004f0e:	d413      	bmi.n	8004f38 <_printf_i+0x22c>
 8004f10:	68e0      	ldr	r0, [r4, #12]
 8004f12:	9b03      	ldr	r3, [sp, #12]
 8004f14:	4298      	cmp	r0, r3
 8004f16:	bfb8      	it	lt
 8004f18:	4618      	movlt	r0, r3
 8004f1a:	e7a6      	b.n	8004e6a <_printf_i+0x15e>
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	4632      	mov	r2, r6
 8004f20:	4649      	mov	r1, r9
 8004f22:	4640      	mov	r0, r8
 8004f24:	47d0      	blx	sl
 8004f26:	3001      	adds	r0, #1
 8004f28:	d09d      	beq.n	8004e66 <_printf_i+0x15a>
 8004f2a:	3501      	adds	r5, #1
 8004f2c:	68e3      	ldr	r3, [r4, #12]
 8004f2e:	9903      	ldr	r1, [sp, #12]
 8004f30:	1a5b      	subs	r3, r3, r1
 8004f32:	42ab      	cmp	r3, r5
 8004f34:	dcf2      	bgt.n	8004f1c <_printf_i+0x210>
 8004f36:	e7eb      	b.n	8004f10 <_printf_i+0x204>
 8004f38:	2500      	movs	r5, #0
 8004f3a:	f104 0619 	add.w	r6, r4, #25
 8004f3e:	e7f5      	b.n	8004f2c <_printf_i+0x220>
 8004f40:	08005865 	.word	0x08005865
 8004f44:	08005876 	.word	0x08005876

08004f48 <__sflush_r>:
 8004f48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f4e:	0716      	lsls	r6, r2, #28
 8004f50:	4605      	mov	r5, r0
 8004f52:	460c      	mov	r4, r1
 8004f54:	d454      	bmi.n	8005000 <__sflush_r+0xb8>
 8004f56:	684b      	ldr	r3, [r1, #4]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	dc02      	bgt.n	8004f62 <__sflush_r+0x1a>
 8004f5c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	dd48      	ble.n	8004ff4 <__sflush_r+0xac>
 8004f62:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004f64:	2e00      	cmp	r6, #0
 8004f66:	d045      	beq.n	8004ff4 <__sflush_r+0xac>
 8004f68:	2300      	movs	r3, #0
 8004f6a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004f6e:	682f      	ldr	r7, [r5, #0]
 8004f70:	6a21      	ldr	r1, [r4, #32]
 8004f72:	602b      	str	r3, [r5, #0]
 8004f74:	d030      	beq.n	8004fd8 <__sflush_r+0x90>
 8004f76:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004f78:	89a3      	ldrh	r3, [r4, #12]
 8004f7a:	0759      	lsls	r1, r3, #29
 8004f7c:	d505      	bpl.n	8004f8a <__sflush_r+0x42>
 8004f7e:	6863      	ldr	r3, [r4, #4]
 8004f80:	1ad2      	subs	r2, r2, r3
 8004f82:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004f84:	b10b      	cbz	r3, 8004f8a <__sflush_r+0x42>
 8004f86:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004f88:	1ad2      	subs	r2, r2, r3
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	4628      	mov	r0, r5
 8004f8e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004f90:	6a21      	ldr	r1, [r4, #32]
 8004f92:	47b0      	blx	r6
 8004f94:	1c43      	adds	r3, r0, #1
 8004f96:	89a3      	ldrh	r3, [r4, #12]
 8004f98:	d106      	bne.n	8004fa8 <__sflush_r+0x60>
 8004f9a:	6829      	ldr	r1, [r5, #0]
 8004f9c:	291d      	cmp	r1, #29
 8004f9e:	d82b      	bhi.n	8004ff8 <__sflush_r+0xb0>
 8004fa0:	4a28      	ldr	r2, [pc, #160]	@ (8005044 <__sflush_r+0xfc>)
 8004fa2:	40ca      	lsrs	r2, r1
 8004fa4:	07d6      	lsls	r6, r2, #31
 8004fa6:	d527      	bpl.n	8004ff8 <__sflush_r+0xb0>
 8004fa8:	2200      	movs	r2, #0
 8004faa:	6062      	str	r2, [r4, #4]
 8004fac:	6922      	ldr	r2, [r4, #16]
 8004fae:	04d9      	lsls	r1, r3, #19
 8004fb0:	6022      	str	r2, [r4, #0]
 8004fb2:	d504      	bpl.n	8004fbe <__sflush_r+0x76>
 8004fb4:	1c42      	adds	r2, r0, #1
 8004fb6:	d101      	bne.n	8004fbc <__sflush_r+0x74>
 8004fb8:	682b      	ldr	r3, [r5, #0]
 8004fba:	b903      	cbnz	r3, 8004fbe <__sflush_r+0x76>
 8004fbc:	6560      	str	r0, [r4, #84]	@ 0x54
 8004fbe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004fc0:	602f      	str	r7, [r5, #0]
 8004fc2:	b1b9      	cbz	r1, 8004ff4 <__sflush_r+0xac>
 8004fc4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004fc8:	4299      	cmp	r1, r3
 8004fca:	d002      	beq.n	8004fd2 <__sflush_r+0x8a>
 8004fcc:	4628      	mov	r0, r5
 8004fce:	f7ff fd2d 	bl	8004a2c <_free_r>
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	6363      	str	r3, [r4, #52]	@ 0x34
 8004fd6:	e00d      	b.n	8004ff4 <__sflush_r+0xac>
 8004fd8:	2301      	movs	r3, #1
 8004fda:	4628      	mov	r0, r5
 8004fdc:	47b0      	blx	r6
 8004fde:	4602      	mov	r2, r0
 8004fe0:	1c50      	adds	r0, r2, #1
 8004fe2:	d1c9      	bne.n	8004f78 <__sflush_r+0x30>
 8004fe4:	682b      	ldr	r3, [r5, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d0c6      	beq.n	8004f78 <__sflush_r+0x30>
 8004fea:	2b1d      	cmp	r3, #29
 8004fec:	d001      	beq.n	8004ff2 <__sflush_r+0xaa>
 8004fee:	2b16      	cmp	r3, #22
 8004ff0:	d11d      	bne.n	800502e <__sflush_r+0xe6>
 8004ff2:	602f      	str	r7, [r5, #0]
 8004ff4:	2000      	movs	r0, #0
 8004ff6:	e021      	b.n	800503c <__sflush_r+0xf4>
 8004ff8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ffc:	b21b      	sxth	r3, r3
 8004ffe:	e01a      	b.n	8005036 <__sflush_r+0xee>
 8005000:	690f      	ldr	r7, [r1, #16]
 8005002:	2f00      	cmp	r7, #0
 8005004:	d0f6      	beq.n	8004ff4 <__sflush_r+0xac>
 8005006:	0793      	lsls	r3, r2, #30
 8005008:	bf18      	it	ne
 800500a:	2300      	movne	r3, #0
 800500c:	680e      	ldr	r6, [r1, #0]
 800500e:	bf08      	it	eq
 8005010:	694b      	ldreq	r3, [r1, #20]
 8005012:	1bf6      	subs	r6, r6, r7
 8005014:	600f      	str	r7, [r1, #0]
 8005016:	608b      	str	r3, [r1, #8]
 8005018:	2e00      	cmp	r6, #0
 800501a:	ddeb      	ble.n	8004ff4 <__sflush_r+0xac>
 800501c:	4633      	mov	r3, r6
 800501e:	463a      	mov	r2, r7
 8005020:	4628      	mov	r0, r5
 8005022:	6a21      	ldr	r1, [r4, #32]
 8005024:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005028:	47e0      	blx	ip
 800502a:	2800      	cmp	r0, #0
 800502c:	dc07      	bgt.n	800503e <__sflush_r+0xf6>
 800502e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005032:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005036:	f04f 30ff 	mov.w	r0, #4294967295
 800503a:	81a3      	strh	r3, [r4, #12]
 800503c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800503e:	4407      	add	r7, r0
 8005040:	1a36      	subs	r6, r6, r0
 8005042:	e7e9      	b.n	8005018 <__sflush_r+0xd0>
 8005044:	20400001 	.word	0x20400001

08005048 <_fflush_r>:
 8005048:	b538      	push	{r3, r4, r5, lr}
 800504a:	690b      	ldr	r3, [r1, #16]
 800504c:	4605      	mov	r5, r0
 800504e:	460c      	mov	r4, r1
 8005050:	b913      	cbnz	r3, 8005058 <_fflush_r+0x10>
 8005052:	2500      	movs	r5, #0
 8005054:	4628      	mov	r0, r5
 8005056:	bd38      	pop	{r3, r4, r5, pc}
 8005058:	b118      	cbz	r0, 8005062 <_fflush_r+0x1a>
 800505a:	6a03      	ldr	r3, [r0, #32]
 800505c:	b90b      	cbnz	r3, 8005062 <_fflush_r+0x1a>
 800505e:	f7ff fbc3 	bl	80047e8 <__sinit>
 8005062:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d0f3      	beq.n	8005052 <_fflush_r+0xa>
 800506a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800506c:	07d0      	lsls	r0, r2, #31
 800506e:	d404      	bmi.n	800507a <_fflush_r+0x32>
 8005070:	0599      	lsls	r1, r3, #22
 8005072:	d402      	bmi.n	800507a <_fflush_r+0x32>
 8005074:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005076:	f7ff fcaa 	bl	80049ce <__retarget_lock_acquire_recursive>
 800507a:	4628      	mov	r0, r5
 800507c:	4621      	mov	r1, r4
 800507e:	f7ff ff63 	bl	8004f48 <__sflush_r>
 8005082:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005084:	4605      	mov	r5, r0
 8005086:	07da      	lsls	r2, r3, #31
 8005088:	d4e4      	bmi.n	8005054 <_fflush_r+0xc>
 800508a:	89a3      	ldrh	r3, [r4, #12]
 800508c:	059b      	lsls	r3, r3, #22
 800508e:	d4e1      	bmi.n	8005054 <_fflush_r+0xc>
 8005090:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005092:	f7ff fc9d 	bl	80049d0 <__retarget_lock_release_recursive>
 8005096:	e7dd      	b.n	8005054 <_fflush_r+0xc>

08005098 <fiprintf>:
 8005098:	b40e      	push	{r1, r2, r3}
 800509a:	b503      	push	{r0, r1, lr}
 800509c:	4601      	mov	r1, r0
 800509e:	ab03      	add	r3, sp, #12
 80050a0:	4805      	ldr	r0, [pc, #20]	@ (80050b8 <fiprintf+0x20>)
 80050a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80050a6:	6800      	ldr	r0, [r0, #0]
 80050a8:	9301      	str	r3, [sp, #4]
 80050aa:	f000 f853 	bl	8005154 <_vfiprintf_r>
 80050ae:	b002      	add	sp, #8
 80050b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80050b4:	b003      	add	sp, #12
 80050b6:	4770      	bx	lr
 80050b8:	2000004c 	.word	0x2000004c

080050bc <_sbrk_r>:
 80050bc:	b538      	push	{r3, r4, r5, lr}
 80050be:	2300      	movs	r3, #0
 80050c0:	4d05      	ldr	r5, [pc, #20]	@ (80050d8 <_sbrk_r+0x1c>)
 80050c2:	4604      	mov	r4, r0
 80050c4:	4608      	mov	r0, r1
 80050c6:	602b      	str	r3, [r5, #0]
 80050c8:	f7fc fc0a 	bl	80018e0 <_sbrk>
 80050cc:	1c43      	adds	r3, r0, #1
 80050ce:	d102      	bne.n	80050d6 <_sbrk_r+0x1a>
 80050d0:	682b      	ldr	r3, [r5, #0]
 80050d2:	b103      	cbz	r3, 80050d6 <_sbrk_r+0x1a>
 80050d4:	6023      	str	r3, [r4, #0]
 80050d6:	bd38      	pop	{r3, r4, r5, pc}
 80050d8:	200010c4 	.word	0x200010c4

080050dc <memchr>:
 80050dc:	4603      	mov	r3, r0
 80050de:	b510      	push	{r4, lr}
 80050e0:	b2c9      	uxtb	r1, r1
 80050e2:	4402      	add	r2, r0
 80050e4:	4293      	cmp	r3, r2
 80050e6:	4618      	mov	r0, r3
 80050e8:	d101      	bne.n	80050ee <memchr+0x12>
 80050ea:	2000      	movs	r0, #0
 80050ec:	e003      	b.n	80050f6 <memchr+0x1a>
 80050ee:	7804      	ldrb	r4, [r0, #0]
 80050f0:	3301      	adds	r3, #1
 80050f2:	428c      	cmp	r4, r1
 80050f4:	d1f6      	bne.n	80050e4 <memchr+0x8>
 80050f6:	bd10      	pop	{r4, pc}

080050f8 <abort>:
 80050f8:	2006      	movs	r0, #6
 80050fa:	b508      	push	{r3, lr}
 80050fc:	f000 f9fe 	bl	80054fc <raise>
 8005100:	2001      	movs	r0, #1
 8005102:	f7fc fb78 	bl	80017f6 <_exit>

08005106 <__sfputc_r>:
 8005106:	6893      	ldr	r3, [r2, #8]
 8005108:	b410      	push	{r4}
 800510a:	3b01      	subs	r3, #1
 800510c:	2b00      	cmp	r3, #0
 800510e:	6093      	str	r3, [r2, #8]
 8005110:	da07      	bge.n	8005122 <__sfputc_r+0x1c>
 8005112:	6994      	ldr	r4, [r2, #24]
 8005114:	42a3      	cmp	r3, r4
 8005116:	db01      	blt.n	800511c <__sfputc_r+0x16>
 8005118:	290a      	cmp	r1, #10
 800511a:	d102      	bne.n	8005122 <__sfputc_r+0x1c>
 800511c:	bc10      	pop	{r4}
 800511e:	f000 b931 	b.w	8005384 <__swbuf_r>
 8005122:	6813      	ldr	r3, [r2, #0]
 8005124:	1c58      	adds	r0, r3, #1
 8005126:	6010      	str	r0, [r2, #0]
 8005128:	7019      	strb	r1, [r3, #0]
 800512a:	4608      	mov	r0, r1
 800512c:	bc10      	pop	{r4}
 800512e:	4770      	bx	lr

08005130 <__sfputs_r>:
 8005130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005132:	4606      	mov	r6, r0
 8005134:	460f      	mov	r7, r1
 8005136:	4614      	mov	r4, r2
 8005138:	18d5      	adds	r5, r2, r3
 800513a:	42ac      	cmp	r4, r5
 800513c:	d101      	bne.n	8005142 <__sfputs_r+0x12>
 800513e:	2000      	movs	r0, #0
 8005140:	e007      	b.n	8005152 <__sfputs_r+0x22>
 8005142:	463a      	mov	r2, r7
 8005144:	4630      	mov	r0, r6
 8005146:	f814 1b01 	ldrb.w	r1, [r4], #1
 800514a:	f7ff ffdc 	bl	8005106 <__sfputc_r>
 800514e:	1c43      	adds	r3, r0, #1
 8005150:	d1f3      	bne.n	800513a <__sfputs_r+0xa>
 8005152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005154 <_vfiprintf_r>:
 8005154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005158:	460d      	mov	r5, r1
 800515a:	4614      	mov	r4, r2
 800515c:	4698      	mov	r8, r3
 800515e:	4606      	mov	r6, r0
 8005160:	b09d      	sub	sp, #116	@ 0x74
 8005162:	b118      	cbz	r0, 800516c <_vfiprintf_r+0x18>
 8005164:	6a03      	ldr	r3, [r0, #32]
 8005166:	b90b      	cbnz	r3, 800516c <_vfiprintf_r+0x18>
 8005168:	f7ff fb3e 	bl	80047e8 <__sinit>
 800516c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800516e:	07d9      	lsls	r1, r3, #31
 8005170:	d405      	bmi.n	800517e <_vfiprintf_r+0x2a>
 8005172:	89ab      	ldrh	r3, [r5, #12]
 8005174:	059a      	lsls	r2, r3, #22
 8005176:	d402      	bmi.n	800517e <_vfiprintf_r+0x2a>
 8005178:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800517a:	f7ff fc28 	bl	80049ce <__retarget_lock_acquire_recursive>
 800517e:	89ab      	ldrh	r3, [r5, #12]
 8005180:	071b      	lsls	r3, r3, #28
 8005182:	d501      	bpl.n	8005188 <_vfiprintf_r+0x34>
 8005184:	692b      	ldr	r3, [r5, #16]
 8005186:	b99b      	cbnz	r3, 80051b0 <_vfiprintf_r+0x5c>
 8005188:	4629      	mov	r1, r5
 800518a:	4630      	mov	r0, r6
 800518c:	f000 f938 	bl	8005400 <__swsetup_r>
 8005190:	b170      	cbz	r0, 80051b0 <_vfiprintf_r+0x5c>
 8005192:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005194:	07dc      	lsls	r4, r3, #31
 8005196:	d504      	bpl.n	80051a2 <_vfiprintf_r+0x4e>
 8005198:	f04f 30ff 	mov.w	r0, #4294967295
 800519c:	b01d      	add	sp, #116	@ 0x74
 800519e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051a2:	89ab      	ldrh	r3, [r5, #12]
 80051a4:	0598      	lsls	r0, r3, #22
 80051a6:	d4f7      	bmi.n	8005198 <_vfiprintf_r+0x44>
 80051a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80051aa:	f7ff fc11 	bl	80049d0 <__retarget_lock_release_recursive>
 80051ae:	e7f3      	b.n	8005198 <_vfiprintf_r+0x44>
 80051b0:	2300      	movs	r3, #0
 80051b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80051b4:	2320      	movs	r3, #32
 80051b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80051ba:	2330      	movs	r3, #48	@ 0x30
 80051bc:	f04f 0901 	mov.w	r9, #1
 80051c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80051c4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005370 <_vfiprintf_r+0x21c>
 80051c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80051cc:	4623      	mov	r3, r4
 80051ce:	469a      	mov	sl, r3
 80051d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051d4:	b10a      	cbz	r2, 80051da <_vfiprintf_r+0x86>
 80051d6:	2a25      	cmp	r2, #37	@ 0x25
 80051d8:	d1f9      	bne.n	80051ce <_vfiprintf_r+0x7a>
 80051da:	ebba 0b04 	subs.w	fp, sl, r4
 80051de:	d00b      	beq.n	80051f8 <_vfiprintf_r+0xa4>
 80051e0:	465b      	mov	r3, fp
 80051e2:	4622      	mov	r2, r4
 80051e4:	4629      	mov	r1, r5
 80051e6:	4630      	mov	r0, r6
 80051e8:	f7ff ffa2 	bl	8005130 <__sfputs_r>
 80051ec:	3001      	adds	r0, #1
 80051ee:	f000 80a7 	beq.w	8005340 <_vfiprintf_r+0x1ec>
 80051f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80051f4:	445a      	add	r2, fp
 80051f6:	9209      	str	r2, [sp, #36]	@ 0x24
 80051f8:	f89a 3000 	ldrb.w	r3, [sl]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f000 809f 	beq.w	8005340 <_vfiprintf_r+0x1ec>
 8005202:	2300      	movs	r3, #0
 8005204:	f04f 32ff 	mov.w	r2, #4294967295
 8005208:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800520c:	f10a 0a01 	add.w	sl, sl, #1
 8005210:	9304      	str	r3, [sp, #16]
 8005212:	9307      	str	r3, [sp, #28]
 8005214:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005218:	931a      	str	r3, [sp, #104]	@ 0x68
 800521a:	4654      	mov	r4, sl
 800521c:	2205      	movs	r2, #5
 800521e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005222:	4853      	ldr	r0, [pc, #332]	@ (8005370 <_vfiprintf_r+0x21c>)
 8005224:	f7ff ff5a 	bl	80050dc <memchr>
 8005228:	9a04      	ldr	r2, [sp, #16]
 800522a:	b9d8      	cbnz	r0, 8005264 <_vfiprintf_r+0x110>
 800522c:	06d1      	lsls	r1, r2, #27
 800522e:	bf44      	itt	mi
 8005230:	2320      	movmi	r3, #32
 8005232:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005236:	0713      	lsls	r3, r2, #28
 8005238:	bf44      	itt	mi
 800523a:	232b      	movmi	r3, #43	@ 0x2b
 800523c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005240:	f89a 3000 	ldrb.w	r3, [sl]
 8005244:	2b2a      	cmp	r3, #42	@ 0x2a
 8005246:	d015      	beq.n	8005274 <_vfiprintf_r+0x120>
 8005248:	4654      	mov	r4, sl
 800524a:	2000      	movs	r0, #0
 800524c:	f04f 0c0a 	mov.w	ip, #10
 8005250:	9a07      	ldr	r2, [sp, #28]
 8005252:	4621      	mov	r1, r4
 8005254:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005258:	3b30      	subs	r3, #48	@ 0x30
 800525a:	2b09      	cmp	r3, #9
 800525c:	d94b      	bls.n	80052f6 <_vfiprintf_r+0x1a2>
 800525e:	b1b0      	cbz	r0, 800528e <_vfiprintf_r+0x13a>
 8005260:	9207      	str	r2, [sp, #28]
 8005262:	e014      	b.n	800528e <_vfiprintf_r+0x13a>
 8005264:	eba0 0308 	sub.w	r3, r0, r8
 8005268:	fa09 f303 	lsl.w	r3, r9, r3
 800526c:	4313      	orrs	r3, r2
 800526e:	46a2      	mov	sl, r4
 8005270:	9304      	str	r3, [sp, #16]
 8005272:	e7d2      	b.n	800521a <_vfiprintf_r+0xc6>
 8005274:	9b03      	ldr	r3, [sp, #12]
 8005276:	1d19      	adds	r1, r3, #4
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	9103      	str	r1, [sp, #12]
 800527c:	2b00      	cmp	r3, #0
 800527e:	bfbb      	ittet	lt
 8005280:	425b      	neglt	r3, r3
 8005282:	f042 0202 	orrlt.w	r2, r2, #2
 8005286:	9307      	strge	r3, [sp, #28]
 8005288:	9307      	strlt	r3, [sp, #28]
 800528a:	bfb8      	it	lt
 800528c:	9204      	strlt	r2, [sp, #16]
 800528e:	7823      	ldrb	r3, [r4, #0]
 8005290:	2b2e      	cmp	r3, #46	@ 0x2e
 8005292:	d10a      	bne.n	80052aa <_vfiprintf_r+0x156>
 8005294:	7863      	ldrb	r3, [r4, #1]
 8005296:	2b2a      	cmp	r3, #42	@ 0x2a
 8005298:	d132      	bne.n	8005300 <_vfiprintf_r+0x1ac>
 800529a:	9b03      	ldr	r3, [sp, #12]
 800529c:	3402      	adds	r4, #2
 800529e:	1d1a      	adds	r2, r3, #4
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	9203      	str	r2, [sp, #12]
 80052a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80052a8:	9305      	str	r3, [sp, #20]
 80052aa:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005374 <_vfiprintf_r+0x220>
 80052ae:	2203      	movs	r2, #3
 80052b0:	4650      	mov	r0, sl
 80052b2:	7821      	ldrb	r1, [r4, #0]
 80052b4:	f7ff ff12 	bl	80050dc <memchr>
 80052b8:	b138      	cbz	r0, 80052ca <_vfiprintf_r+0x176>
 80052ba:	2240      	movs	r2, #64	@ 0x40
 80052bc:	9b04      	ldr	r3, [sp, #16]
 80052be:	eba0 000a 	sub.w	r0, r0, sl
 80052c2:	4082      	lsls	r2, r0
 80052c4:	4313      	orrs	r3, r2
 80052c6:	3401      	adds	r4, #1
 80052c8:	9304      	str	r3, [sp, #16]
 80052ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052ce:	2206      	movs	r2, #6
 80052d0:	4829      	ldr	r0, [pc, #164]	@ (8005378 <_vfiprintf_r+0x224>)
 80052d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80052d6:	f7ff ff01 	bl	80050dc <memchr>
 80052da:	2800      	cmp	r0, #0
 80052dc:	d03f      	beq.n	800535e <_vfiprintf_r+0x20a>
 80052de:	4b27      	ldr	r3, [pc, #156]	@ (800537c <_vfiprintf_r+0x228>)
 80052e0:	bb1b      	cbnz	r3, 800532a <_vfiprintf_r+0x1d6>
 80052e2:	9b03      	ldr	r3, [sp, #12]
 80052e4:	3307      	adds	r3, #7
 80052e6:	f023 0307 	bic.w	r3, r3, #7
 80052ea:	3308      	adds	r3, #8
 80052ec:	9303      	str	r3, [sp, #12]
 80052ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052f0:	443b      	add	r3, r7
 80052f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80052f4:	e76a      	b.n	80051cc <_vfiprintf_r+0x78>
 80052f6:	460c      	mov	r4, r1
 80052f8:	2001      	movs	r0, #1
 80052fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80052fe:	e7a8      	b.n	8005252 <_vfiprintf_r+0xfe>
 8005300:	2300      	movs	r3, #0
 8005302:	f04f 0c0a 	mov.w	ip, #10
 8005306:	4619      	mov	r1, r3
 8005308:	3401      	adds	r4, #1
 800530a:	9305      	str	r3, [sp, #20]
 800530c:	4620      	mov	r0, r4
 800530e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005312:	3a30      	subs	r2, #48	@ 0x30
 8005314:	2a09      	cmp	r2, #9
 8005316:	d903      	bls.n	8005320 <_vfiprintf_r+0x1cc>
 8005318:	2b00      	cmp	r3, #0
 800531a:	d0c6      	beq.n	80052aa <_vfiprintf_r+0x156>
 800531c:	9105      	str	r1, [sp, #20]
 800531e:	e7c4      	b.n	80052aa <_vfiprintf_r+0x156>
 8005320:	4604      	mov	r4, r0
 8005322:	2301      	movs	r3, #1
 8005324:	fb0c 2101 	mla	r1, ip, r1, r2
 8005328:	e7f0      	b.n	800530c <_vfiprintf_r+0x1b8>
 800532a:	ab03      	add	r3, sp, #12
 800532c:	9300      	str	r3, [sp, #0]
 800532e:	462a      	mov	r2, r5
 8005330:	4630      	mov	r0, r6
 8005332:	4b13      	ldr	r3, [pc, #76]	@ (8005380 <_vfiprintf_r+0x22c>)
 8005334:	a904      	add	r1, sp, #16
 8005336:	f3af 8000 	nop.w
 800533a:	4607      	mov	r7, r0
 800533c:	1c78      	adds	r0, r7, #1
 800533e:	d1d6      	bne.n	80052ee <_vfiprintf_r+0x19a>
 8005340:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005342:	07d9      	lsls	r1, r3, #31
 8005344:	d405      	bmi.n	8005352 <_vfiprintf_r+0x1fe>
 8005346:	89ab      	ldrh	r3, [r5, #12]
 8005348:	059a      	lsls	r2, r3, #22
 800534a:	d402      	bmi.n	8005352 <_vfiprintf_r+0x1fe>
 800534c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800534e:	f7ff fb3f 	bl	80049d0 <__retarget_lock_release_recursive>
 8005352:	89ab      	ldrh	r3, [r5, #12]
 8005354:	065b      	lsls	r3, r3, #25
 8005356:	f53f af1f 	bmi.w	8005198 <_vfiprintf_r+0x44>
 800535a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800535c:	e71e      	b.n	800519c <_vfiprintf_r+0x48>
 800535e:	ab03      	add	r3, sp, #12
 8005360:	9300      	str	r3, [sp, #0]
 8005362:	462a      	mov	r2, r5
 8005364:	4630      	mov	r0, r6
 8005366:	4b06      	ldr	r3, [pc, #24]	@ (8005380 <_vfiprintf_r+0x22c>)
 8005368:	a904      	add	r1, sp, #16
 800536a:	f7ff fccf 	bl	8004d0c <_printf_i>
 800536e:	e7e4      	b.n	800533a <_vfiprintf_r+0x1e6>
 8005370:	08005887 	.word	0x08005887
 8005374:	0800588d 	.word	0x0800588d
 8005378:	08005891 	.word	0x08005891
 800537c:	00000000 	.word	0x00000000
 8005380:	08005131 	.word	0x08005131

08005384 <__swbuf_r>:
 8005384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005386:	460e      	mov	r6, r1
 8005388:	4614      	mov	r4, r2
 800538a:	4605      	mov	r5, r0
 800538c:	b118      	cbz	r0, 8005396 <__swbuf_r+0x12>
 800538e:	6a03      	ldr	r3, [r0, #32]
 8005390:	b90b      	cbnz	r3, 8005396 <__swbuf_r+0x12>
 8005392:	f7ff fa29 	bl	80047e8 <__sinit>
 8005396:	69a3      	ldr	r3, [r4, #24]
 8005398:	60a3      	str	r3, [r4, #8]
 800539a:	89a3      	ldrh	r3, [r4, #12]
 800539c:	071a      	lsls	r2, r3, #28
 800539e:	d501      	bpl.n	80053a4 <__swbuf_r+0x20>
 80053a0:	6923      	ldr	r3, [r4, #16]
 80053a2:	b943      	cbnz	r3, 80053b6 <__swbuf_r+0x32>
 80053a4:	4621      	mov	r1, r4
 80053a6:	4628      	mov	r0, r5
 80053a8:	f000 f82a 	bl	8005400 <__swsetup_r>
 80053ac:	b118      	cbz	r0, 80053b6 <__swbuf_r+0x32>
 80053ae:	f04f 37ff 	mov.w	r7, #4294967295
 80053b2:	4638      	mov	r0, r7
 80053b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053b6:	6823      	ldr	r3, [r4, #0]
 80053b8:	6922      	ldr	r2, [r4, #16]
 80053ba:	b2f6      	uxtb	r6, r6
 80053bc:	1a98      	subs	r0, r3, r2
 80053be:	6963      	ldr	r3, [r4, #20]
 80053c0:	4637      	mov	r7, r6
 80053c2:	4283      	cmp	r3, r0
 80053c4:	dc05      	bgt.n	80053d2 <__swbuf_r+0x4e>
 80053c6:	4621      	mov	r1, r4
 80053c8:	4628      	mov	r0, r5
 80053ca:	f7ff fe3d 	bl	8005048 <_fflush_r>
 80053ce:	2800      	cmp	r0, #0
 80053d0:	d1ed      	bne.n	80053ae <__swbuf_r+0x2a>
 80053d2:	68a3      	ldr	r3, [r4, #8]
 80053d4:	3b01      	subs	r3, #1
 80053d6:	60a3      	str	r3, [r4, #8]
 80053d8:	6823      	ldr	r3, [r4, #0]
 80053da:	1c5a      	adds	r2, r3, #1
 80053dc:	6022      	str	r2, [r4, #0]
 80053de:	701e      	strb	r6, [r3, #0]
 80053e0:	6962      	ldr	r2, [r4, #20]
 80053e2:	1c43      	adds	r3, r0, #1
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d004      	beq.n	80053f2 <__swbuf_r+0x6e>
 80053e8:	89a3      	ldrh	r3, [r4, #12]
 80053ea:	07db      	lsls	r3, r3, #31
 80053ec:	d5e1      	bpl.n	80053b2 <__swbuf_r+0x2e>
 80053ee:	2e0a      	cmp	r6, #10
 80053f0:	d1df      	bne.n	80053b2 <__swbuf_r+0x2e>
 80053f2:	4621      	mov	r1, r4
 80053f4:	4628      	mov	r0, r5
 80053f6:	f7ff fe27 	bl	8005048 <_fflush_r>
 80053fa:	2800      	cmp	r0, #0
 80053fc:	d0d9      	beq.n	80053b2 <__swbuf_r+0x2e>
 80053fe:	e7d6      	b.n	80053ae <__swbuf_r+0x2a>

08005400 <__swsetup_r>:
 8005400:	b538      	push	{r3, r4, r5, lr}
 8005402:	4b29      	ldr	r3, [pc, #164]	@ (80054a8 <__swsetup_r+0xa8>)
 8005404:	4605      	mov	r5, r0
 8005406:	6818      	ldr	r0, [r3, #0]
 8005408:	460c      	mov	r4, r1
 800540a:	b118      	cbz	r0, 8005414 <__swsetup_r+0x14>
 800540c:	6a03      	ldr	r3, [r0, #32]
 800540e:	b90b      	cbnz	r3, 8005414 <__swsetup_r+0x14>
 8005410:	f7ff f9ea 	bl	80047e8 <__sinit>
 8005414:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005418:	0719      	lsls	r1, r3, #28
 800541a:	d422      	bmi.n	8005462 <__swsetup_r+0x62>
 800541c:	06da      	lsls	r2, r3, #27
 800541e:	d407      	bmi.n	8005430 <__swsetup_r+0x30>
 8005420:	2209      	movs	r2, #9
 8005422:	602a      	str	r2, [r5, #0]
 8005424:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005428:	f04f 30ff 	mov.w	r0, #4294967295
 800542c:	81a3      	strh	r3, [r4, #12]
 800542e:	e033      	b.n	8005498 <__swsetup_r+0x98>
 8005430:	0758      	lsls	r0, r3, #29
 8005432:	d512      	bpl.n	800545a <__swsetup_r+0x5a>
 8005434:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005436:	b141      	cbz	r1, 800544a <__swsetup_r+0x4a>
 8005438:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800543c:	4299      	cmp	r1, r3
 800543e:	d002      	beq.n	8005446 <__swsetup_r+0x46>
 8005440:	4628      	mov	r0, r5
 8005442:	f7ff faf3 	bl	8004a2c <_free_r>
 8005446:	2300      	movs	r3, #0
 8005448:	6363      	str	r3, [r4, #52]	@ 0x34
 800544a:	89a3      	ldrh	r3, [r4, #12]
 800544c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005450:	81a3      	strh	r3, [r4, #12]
 8005452:	2300      	movs	r3, #0
 8005454:	6063      	str	r3, [r4, #4]
 8005456:	6923      	ldr	r3, [r4, #16]
 8005458:	6023      	str	r3, [r4, #0]
 800545a:	89a3      	ldrh	r3, [r4, #12]
 800545c:	f043 0308 	orr.w	r3, r3, #8
 8005460:	81a3      	strh	r3, [r4, #12]
 8005462:	6923      	ldr	r3, [r4, #16]
 8005464:	b94b      	cbnz	r3, 800547a <__swsetup_r+0x7a>
 8005466:	89a3      	ldrh	r3, [r4, #12]
 8005468:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800546c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005470:	d003      	beq.n	800547a <__swsetup_r+0x7a>
 8005472:	4621      	mov	r1, r4
 8005474:	4628      	mov	r0, r5
 8005476:	f000 f882 	bl	800557e <__smakebuf_r>
 800547a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800547e:	f013 0201 	ands.w	r2, r3, #1
 8005482:	d00a      	beq.n	800549a <__swsetup_r+0x9a>
 8005484:	2200      	movs	r2, #0
 8005486:	60a2      	str	r2, [r4, #8]
 8005488:	6962      	ldr	r2, [r4, #20]
 800548a:	4252      	negs	r2, r2
 800548c:	61a2      	str	r2, [r4, #24]
 800548e:	6922      	ldr	r2, [r4, #16]
 8005490:	b942      	cbnz	r2, 80054a4 <__swsetup_r+0xa4>
 8005492:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005496:	d1c5      	bne.n	8005424 <__swsetup_r+0x24>
 8005498:	bd38      	pop	{r3, r4, r5, pc}
 800549a:	0799      	lsls	r1, r3, #30
 800549c:	bf58      	it	pl
 800549e:	6962      	ldrpl	r2, [r4, #20]
 80054a0:	60a2      	str	r2, [r4, #8]
 80054a2:	e7f4      	b.n	800548e <__swsetup_r+0x8e>
 80054a4:	2000      	movs	r0, #0
 80054a6:	e7f7      	b.n	8005498 <__swsetup_r+0x98>
 80054a8:	2000004c 	.word	0x2000004c

080054ac <_raise_r>:
 80054ac:	291f      	cmp	r1, #31
 80054ae:	b538      	push	{r3, r4, r5, lr}
 80054b0:	4605      	mov	r5, r0
 80054b2:	460c      	mov	r4, r1
 80054b4:	d904      	bls.n	80054c0 <_raise_r+0x14>
 80054b6:	2316      	movs	r3, #22
 80054b8:	6003      	str	r3, [r0, #0]
 80054ba:	f04f 30ff 	mov.w	r0, #4294967295
 80054be:	bd38      	pop	{r3, r4, r5, pc}
 80054c0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80054c2:	b112      	cbz	r2, 80054ca <_raise_r+0x1e>
 80054c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80054c8:	b94b      	cbnz	r3, 80054de <_raise_r+0x32>
 80054ca:	4628      	mov	r0, r5
 80054cc:	f000 f830 	bl	8005530 <_getpid_r>
 80054d0:	4622      	mov	r2, r4
 80054d2:	4601      	mov	r1, r0
 80054d4:	4628      	mov	r0, r5
 80054d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054da:	f000 b817 	b.w	800550c <_kill_r>
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d00a      	beq.n	80054f8 <_raise_r+0x4c>
 80054e2:	1c59      	adds	r1, r3, #1
 80054e4:	d103      	bne.n	80054ee <_raise_r+0x42>
 80054e6:	2316      	movs	r3, #22
 80054e8:	6003      	str	r3, [r0, #0]
 80054ea:	2001      	movs	r0, #1
 80054ec:	e7e7      	b.n	80054be <_raise_r+0x12>
 80054ee:	2100      	movs	r1, #0
 80054f0:	4620      	mov	r0, r4
 80054f2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80054f6:	4798      	blx	r3
 80054f8:	2000      	movs	r0, #0
 80054fa:	e7e0      	b.n	80054be <_raise_r+0x12>

080054fc <raise>:
 80054fc:	4b02      	ldr	r3, [pc, #8]	@ (8005508 <raise+0xc>)
 80054fe:	4601      	mov	r1, r0
 8005500:	6818      	ldr	r0, [r3, #0]
 8005502:	f7ff bfd3 	b.w	80054ac <_raise_r>
 8005506:	bf00      	nop
 8005508:	2000004c 	.word	0x2000004c

0800550c <_kill_r>:
 800550c:	b538      	push	{r3, r4, r5, lr}
 800550e:	2300      	movs	r3, #0
 8005510:	4d06      	ldr	r5, [pc, #24]	@ (800552c <_kill_r+0x20>)
 8005512:	4604      	mov	r4, r0
 8005514:	4608      	mov	r0, r1
 8005516:	4611      	mov	r1, r2
 8005518:	602b      	str	r3, [r5, #0]
 800551a:	f7fc f95c 	bl	80017d6 <_kill>
 800551e:	1c43      	adds	r3, r0, #1
 8005520:	d102      	bne.n	8005528 <_kill_r+0x1c>
 8005522:	682b      	ldr	r3, [r5, #0]
 8005524:	b103      	cbz	r3, 8005528 <_kill_r+0x1c>
 8005526:	6023      	str	r3, [r4, #0]
 8005528:	bd38      	pop	{r3, r4, r5, pc}
 800552a:	bf00      	nop
 800552c:	200010c4 	.word	0x200010c4

08005530 <_getpid_r>:
 8005530:	f7fc b94a 	b.w	80017c8 <_getpid>

08005534 <__swhatbuf_r>:
 8005534:	b570      	push	{r4, r5, r6, lr}
 8005536:	460c      	mov	r4, r1
 8005538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800553c:	4615      	mov	r5, r2
 800553e:	2900      	cmp	r1, #0
 8005540:	461e      	mov	r6, r3
 8005542:	b096      	sub	sp, #88	@ 0x58
 8005544:	da0c      	bge.n	8005560 <__swhatbuf_r+0x2c>
 8005546:	89a3      	ldrh	r3, [r4, #12]
 8005548:	2100      	movs	r1, #0
 800554a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800554e:	bf14      	ite	ne
 8005550:	2340      	movne	r3, #64	@ 0x40
 8005552:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005556:	2000      	movs	r0, #0
 8005558:	6031      	str	r1, [r6, #0]
 800555a:	602b      	str	r3, [r5, #0]
 800555c:	b016      	add	sp, #88	@ 0x58
 800555e:	bd70      	pop	{r4, r5, r6, pc}
 8005560:	466a      	mov	r2, sp
 8005562:	f000 f849 	bl	80055f8 <_fstat_r>
 8005566:	2800      	cmp	r0, #0
 8005568:	dbed      	blt.n	8005546 <__swhatbuf_r+0x12>
 800556a:	9901      	ldr	r1, [sp, #4]
 800556c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005570:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005574:	4259      	negs	r1, r3
 8005576:	4159      	adcs	r1, r3
 8005578:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800557c:	e7eb      	b.n	8005556 <__swhatbuf_r+0x22>

0800557e <__smakebuf_r>:
 800557e:	898b      	ldrh	r3, [r1, #12]
 8005580:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005582:	079d      	lsls	r5, r3, #30
 8005584:	4606      	mov	r6, r0
 8005586:	460c      	mov	r4, r1
 8005588:	d507      	bpl.n	800559a <__smakebuf_r+0x1c>
 800558a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800558e:	6023      	str	r3, [r4, #0]
 8005590:	6123      	str	r3, [r4, #16]
 8005592:	2301      	movs	r3, #1
 8005594:	6163      	str	r3, [r4, #20]
 8005596:	b003      	add	sp, #12
 8005598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800559a:	466a      	mov	r2, sp
 800559c:	ab01      	add	r3, sp, #4
 800559e:	f7ff ffc9 	bl	8005534 <__swhatbuf_r>
 80055a2:	9f00      	ldr	r7, [sp, #0]
 80055a4:	4605      	mov	r5, r0
 80055a6:	4639      	mov	r1, r7
 80055a8:	4630      	mov	r0, r6
 80055aa:	f7ff fab1 	bl	8004b10 <_malloc_r>
 80055ae:	b948      	cbnz	r0, 80055c4 <__smakebuf_r+0x46>
 80055b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055b4:	059a      	lsls	r2, r3, #22
 80055b6:	d4ee      	bmi.n	8005596 <__smakebuf_r+0x18>
 80055b8:	f023 0303 	bic.w	r3, r3, #3
 80055bc:	f043 0302 	orr.w	r3, r3, #2
 80055c0:	81a3      	strh	r3, [r4, #12]
 80055c2:	e7e2      	b.n	800558a <__smakebuf_r+0xc>
 80055c4:	89a3      	ldrh	r3, [r4, #12]
 80055c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80055ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055ce:	81a3      	strh	r3, [r4, #12]
 80055d0:	9b01      	ldr	r3, [sp, #4]
 80055d2:	6020      	str	r0, [r4, #0]
 80055d4:	b15b      	cbz	r3, 80055ee <__smakebuf_r+0x70>
 80055d6:	4630      	mov	r0, r6
 80055d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055dc:	f000 f81e 	bl	800561c <_isatty_r>
 80055e0:	b128      	cbz	r0, 80055ee <__smakebuf_r+0x70>
 80055e2:	89a3      	ldrh	r3, [r4, #12]
 80055e4:	f023 0303 	bic.w	r3, r3, #3
 80055e8:	f043 0301 	orr.w	r3, r3, #1
 80055ec:	81a3      	strh	r3, [r4, #12]
 80055ee:	89a3      	ldrh	r3, [r4, #12]
 80055f0:	431d      	orrs	r5, r3
 80055f2:	81a5      	strh	r5, [r4, #12]
 80055f4:	e7cf      	b.n	8005596 <__smakebuf_r+0x18>
	...

080055f8 <_fstat_r>:
 80055f8:	b538      	push	{r3, r4, r5, lr}
 80055fa:	2300      	movs	r3, #0
 80055fc:	4d06      	ldr	r5, [pc, #24]	@ (8005618 <_fstat_r+0x20>)
 80055fe:	4604      	mov	r4, r0
 8005600:	4608      	mov	r0, r1
 8005602:	4611      	mov	r1, r2
 8005604:	602b      	str	r3, [r5, #0]
 8005606:	f7fc f945 	bl	8001894 <_fstat>
 800560a:	1c43      	adds	r3, r0, #1
 800560c:	d102      	bne.n	8005614 <_fstat_r+0x1c>
 800560e:	682b      	ldr	r3, [r5, #0]
 8005610:	b103      	cbz	r3, 8005614 <_fstat_r+0x1c>
 8005612:	6023      	str	r3, [r4, #0]
 8005614:	bd38      	pop	{r3, r4, r5, pc}
 8005616:	bf00      	nop
 8005618:	200010c4 	.word	0x200010c4

0800561c <_isatty_r>:
 800561c:	b538      	push	{r3, r4, r5, lr}
 800561e:	2300      	movs	r3, #0
 8005620:	4d05      	ldr	r5, [pc, #20]	@ (8005638 <_isatty_r+0x1c>)
 8005622:	4604      	mov	r4, r0
 8005624:	4608      	mov	r0, r1
 8005626:	602b      	str	r3, [r5, #0]
 8005628:	f7fc f943 	bl	80018b2 <_isatty>
 800562c:	1c43      	adds	r3, r0, #1
 800562e:	d102      	bne.n	8005636 <_isatty_r+0x1a>
 8005630:	682b      	ldr	r3, [r5, #0]
 8005632:	b103      	cbz	r3, 8005636 <_isatty_r+0x1a>
 8005634:	6023      	str	r3, [r4, #0]
 8005636:	bd38      	pop	{r3, r4, r5, pc}
 8005638:	200010c4 	.word	0x200010c4

0800563c <_init>:
 800563c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800563e:	bf00      	nop
 8005640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005642:	bc08      	pop	{r3}
 8005644:	469e      	mov	lr, r3
 8005646:	4770      	bx	lr

08005648 <_fini>:
 8005648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800564a:	bf00      	nop
 800564c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800564e:	bc08      	pop	{r3}
 8005650:	469e      	mov	lr, r3
 8005652:	4770      	bx	lr
