
led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004530  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  0800463c  0800463c  0000563c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004748  08004748  000060e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004748  08004748  00005748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004750  08004750  000060e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004750  08004750  00005750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004754  08004754  00005754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e0  20000000  08004758  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f98  200000e0  08004838  000060e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001078  08004838  00007078  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000060e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000939d  00000000  00000000  00006109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b98  00000000  00000000  0000f4a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  00011040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000087c  00000000  00000000  00011b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d04  00000000  00000000  000123bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c297  00000000  00000000  0002a0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000894e5  00000000  00000000  00036357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bf83c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003260  00000000  00000000  000bf880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000c2ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000e0 	.word	0x200000e0
 8000128:	00000000 	.word	0x00000000
 800012c:	08004624 	.word	0x08004624

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000e4 	.word	0x200000e4
 8000148:	08004624 	.word	0x08004624

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <LCD_Parallel_Init>:
#include "lcd_parallel.h"
#include <string.h>
#include <stdio.h>

void LCD_Parallel_Init(void) {
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
    // Initialize GPIO pins
    LCD_Parallel_GPIO_Init();
 8000160:	f000 f832 	bl	80001c8 <LCD_Parallel_GPIO_Init>
    
    // Wait for LCD to power up
    HAL_Delay(50);
 8000164:	2032      	movs	r0, #50	@ 0x32
 8000166:	f001 fb93 	bl	8001890 <HAL_Delay>
    
    // Initialize LCD in 4-bit mode
    // Set RS = 0 (command mode)
    HAL_GPIO_WritePin(LCD_RS_PORT, LCD_RS_PIN, GPIO_PIN_RESET);
 800016a:	2200      	movs	r2, #0
 800016c:	2101      	movs	r1, #1
 800016e:	4815      	ldr	r0, [pc, #84]	@ (80001c4 <LCD_Parallel_Init+0x68>)
 8000170:	f002 f8c1 	bl	80022f6 <HAL_GPIO_WritePin>
    
    // Send initial 8-bit commands for 4-bit mode setup
    LCD_Parallel_Write4Bits(0x03);
 8000174:	2003      	movs	r0, #3
 8000176:	f000 f90d 	bl	8000394 <LCD_Parallel_Write4Bits>
    HAL_Delay(5);
 800017a:	2005      	movs	r0, #5
 800017c:	f001 fb88 	bl	8001890 <HAL_Delay>
    
    LCD_Parallel_Write4Bits(0x03);
 8000180:	2003      	movs	r0, #3
 8000182:	f000 f907 	bl	8000394 <LCD_Parallel_Write4Bits>
    HAL_Delay(5);
 8000186:	2005      	movs	r0, #5
 8000188:	f001 fb82 	bl	8001890 <HAL_Delay>
    
    LCD_Parallel_Write4Bits(0x03);
 800018c:	2003      	movs	r0, #3
 800018e:	f000 f901 	bl	8000394 <LCD_Parallel_Write4Bits>
    HAL_Delay(1);
 8000192:	2001      	movs	r0, #1
 8000194:	f001 fb7c 	bl	8001890 <HAL_Delay>
    
    // Set 4-bit mode
    LCD_Parallel_Write4Bits(0x02);
 8000198:	2002      	movs	r0, #2
 800019a:	f000 f8fb 	bl	8000394 <LCD_Parallel_Write4Bits>
    HAL_Delay(1);
 800019e:	2001      	movs	r0, #1
 80001a0:	f001 fb76 	bl	8001890 <HAL_Delay>
    
    // Function set: 4-bit, 2 line, 5x8 dots
    LCD_Parallel_SendCommand(LCD_FUNCTION_SET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
 80001a4:	2028      	movs	r0, #40	@ 0x28
 80001a6:	f000 f8b3 	bl	8000310 <LCD_Parallel_SendCommand>
    
    // Display control: display on, cursor off, blink off
    LCD_Parallel_SendCommand(LCD_DISPLAY_CONTROL | LCD_DISPLAY_ON | LCD_CURSOR_OFF | LCD_BLINK_OFF);
 80001aa:	200c      	movs	r0, #12
 80001ac:	f000 f8b0 	bl	8000310 <LCD_Parallel_SendCommand>
    
    // Clear display
    LCD_Parallel_Clear();
 80001b0:	f000 f858 	bl	8000264 <LCD_Parallel_Clear>
    
    // Entry mode: left to right
    LCD_Parallel_SendCommand(LCD_ENTRY_MODE_SET | LCD_ENTRY_LEFT | LCD_ENTRY_SHIFT_DECREMENT);
 80001b4:	2006      	movs	r0, #6
 80001b6:	f000 f8ab 	bl	8000310 <LCD_Parallel_SendCommand>
    
    HAL_Delay(1);
 80001ba:	2001      	movs	r0, #1
 80001bc:	f001 fb68 	bl	8001890 <HAL_Delay>
}
 80001c0:	bf00      	nop
 80001c2:	bd80      	pop	{r7, pc}
 80001c4:	40010c00 	.word	0x40010c00

080001c8 <LCD_Parallel_GPIO_Init>:

void LCD_Parallel_GPIO_Init(void) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ce:	f107 0308 	add.w	r3, r7, #8
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
 80001da:	60da      	str	r2, [r3, #12]
    
    // Enable GPIOB clock
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80001dc:	4b1f      	ldr	r3, [pc, #124]	@ (800025c <LCD_Parallel_GPIO_Init+0x94>)
 80001de:	699b      	ldr	r3, [r3, #24]
 80001e0:	4a1e      	ldr	r2, [pc, #120]	@ (800025c <LCD_Parallel_GPIO_Init+0x94>)
 80001e2:	f043 0308 	orr.w	r3, r3, #8
 80001e6:	6193      	str	r3, [r2, #24]
 80001e8:	4b1c      	ldr	r3, [pc, #112]	@ (800025c <LCD_Parallel_GPIO_Init+0x94>)
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	f003 0308 	and.w	r3, r3, #8
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	687b      	ldr	r3, [r7, #4]
    
    // Configure RS pin (PB0)
    GPIO_InitStruct.Pin = LCD_RS_PIN;
 80001f4:	2301      	movs	r3, #1
 80001f6:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001f8:	2301      	movs	r3, #1
 80001fa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001fc:	2300      	movs	r3, #0
 80001fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000200:	2302      	movs	r3, #2
 8000202:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LCD_RS_PORT, &GPIO_InitStruct);
 8000204:	f107 0308 	add.w	r3, r7, #8
 8000208:	4619      	mov	r1, r3
 800020a:	4815      	ldr	r0, [pc, #84]	@ (8000260 <LCD_Parallel_GPIO_Init+0x98>)
 800020c:	f001 fed8 	bl	8001fc0 <HAL_GPIO_Init>
    
    // Configure E pin (PB1)
    GPIO_InitStruct.Pin = LCD_E_PIN;
 8000210:	2302      	movs	r3, #2
 8000212:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(LCD_E_PORT, &GPIO_InitStruct);
 8000214:	f107 0308 	add.w	r3, r7, #8
 8000218:	4619      	mov	r1, r3
 800021a:	4811      	ldr	r0, [pc, #68]	@ (8000260 <LCD_Parallel_GPIO_Init+0x98>)
 800021c:	f001 fed0 	bl	8001fc0 <HAL_GPIO_Init>
    
    // Configure Data pins (PB12, PB13, PB14, PB15)
    GPIO_InitStruct.Pin = LCD_D4_PIN | LCD_D5_PIN | LCD_D6_PIN | LCD_D7_PIN;
 8000220:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000224:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(LCD_D4_PORT, &GPIO_InitStruct);
 8000226:	f107 0308 	add.w	r3, r7, #8
 800022a:	4619      	mov	r1, r3
 800022c:	480c      	ldr	r0, [pc, #48]	@ (8000260 <LCD_Parallel_GPIO_Init+0x98>)
 800022e:	f001 fec7 	bl	8001fc0 <HAL_GPIO_Init>
    
    // Initialize all pins to LOW
    HAL_GPIO_WritePin(LCD_RS_PORT, LCD_RS_PIN, GPIO_PIN_RESET);
 8000232:	2200      	movs	r2, #0
 8000234:	2101      	movs	r1, #1
 8000236:	480a      	ldr	r0, [pc, #40]	@ (8000260 <LCD_Parallel_GPIO_Init+0x98>)
 8000238:	f002 f85d 	bl	80022f6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_E_PORT, LCD_E_PIN, GPIO_PIN_RESET);
 800023c:	2200      	movs	r2, #0
 800023e:	2102      	movs	r1, #2
 8000240:	4807      	ldr	r0, [pc, #28]	@ (8000260 <LCD_Parallel_GPIO_Init+0x98>)
 8000242:	f002 f858 	bl	80022f6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D4_PORT, LCD_D4_PIN | LCD_D5_PIN | LCD_D6_PIN | LCD_D7_PIN, GPIO_PIN_RESET);
 8000246:	2200      	movs	r2, #0
 8000248:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800024c:	4804      	ldr	r0, [pc, #16]	@ (8000260 <LCD_Parallel_GPIO_Init+0x98>)
 800024e:	f002 f852 	bl	80022f6 <HAL_GPIO_WritePin>
}
 8000252:	bf00      	nop
 8000254:	3718      	adds	r7, #24
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	40021000 	.word	0x40021000
 8000260:	40010c00 	.word	0x40010c00

08000264 <LCD_Parallel_Clear>:

void LCD_Parallel_Clear(void) {
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
    LCD_Parallel_SendCommand(LCD_CLEAR_DISPLAY);
 8000268:	2001      	movs	r0, #1
 800026a:	f000 f851 	bl	8000310 <LCD_Parallel_SendCommand>
    HAL_Delay(2);
 800026e:	2002      	movs	r0, #2
 8000270:	f001 fb0e 	bl	8001890 <HAL_Delay>
}
 8000274:	bf00      	nop
 8000276:	bd80      	pop	{r7, pc}

08000278 <LCD_Parallel_SetCursor>:

void LCD_Parallel_SetCursor(uint8_t row, uint8_t col) {
 8000278:	b580      	push	{r7, lr}
 800027a:	b084      	sub	sp, #16
 800027c:	af00      	add	r7, sp, #0
 800027e:	4603      	mov	r3, r0
 8000280:	460a      	mov	r2, r1
 8000282:	71fb      	strb	r3, [r7, #7]
 8000284:	4613      	mov	r3, r2
 8000286:	71bb      	strb	r3, [r7, #6]
    uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 8000288:	4b0f      	ldr	r3, [pc, #60]	@ (80002c8 <LCD_Parallel_SetCursor+0x50>)
 800028a:	60fb      	str	r3, [r7, #12]
    if (row >= LCD_ROWS) {
 800028c:	79fb      	ldrb	r3, [r7, #7]
 800028e:	2b01      	cmp	r3, #1
 8000290:	d901      	bls.n	8000296 <LCD_Parallel_SetCursor+0x1e>
        row = LCD_ROWS - 1;
 8000292:	2301      	movs	r3, #1
 8000294:	71fb      	strb	r3, [r7, #7]
    }
    if (col >= LCD_COLS) {
 8000296:	79bb      	ldrb	r3, [r7, #6]
 8000298:	2b0f      	cmp	r3, #15
 800029a:	d901      	bls.n	80002a0 <LCD_Parallel_SetCursor+0x28>
        col = LCD_COLS - 1;
 800029c:	230f      	movs	r3, #15
 800029e:	71bb      	strb	r3, [r7, #6]
    }
    LCD_Parallel_SendCommand(LCD_SET_DDRAM_ADDR | (col + row_offsets[row]));
 80002a0:	79fb      	ldrb	r3, [r7, #7]
 80002a2:	3310      	adds	r3, #16
 80002a4:	443b      	add	r3, r7
 80002a6:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 80002aa:	79bb      	ldrb	r3, [r7, #6]
 80002ac:	4413      	add	r3, r2
 80002ae:	b2db      	uxtb	r3, r3
 80002b0:	b25b      	sxtb	r3, r3
 80002b2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80002b6:	b25b      	sxtb	r3, r3
 80002b8:	b2db      	uxtb	r3, r3
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 f828 	bl	8000310 <LCD_Parallel_SendCommand>
}
 80002c0:	bf00      	nop
 80002c2:	3710      	adds	r7, #16
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	54144000 	.word	0x54144000

080002cc <LCD_Parallel_Print>:

void LCD_Parallel_Print(char *str) {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
    while (*str) {
 80002d4:	e006      	b.n	80002e4 <LCD_Parallel_Print+0x18>
        LCD_Parallel_SendData(*str++);
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	1c5a      	adds	r2, r3, #1
 80002da:	607a      	str	r2, [r7, #4]
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	4618      	mov	r0, r3
 80002e0:	f000 f824 	bl	800032c <LCD_Parallel_SendData>
    while (*str) {
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d1f4      	bne.n	80002d6 <LCD_Parallel_Print+0xa>
    }
}
 80002ec:	bf00      	nop
 80002ee:	bf00      	nop
 80002f0:	3708      	adds	r7, #8
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}

080002f6 <LCD_Parallel_PrintChar>:

void LCD_Parallel_PrintChar(char c) {
 80002f6:	b580      	push	{r7, lr}
 80002f8:	b082      	sub	sp, #8
 80002fa:	af00      	add	r7, sp, #0
 80002fc:	4603      	mov	r3, r0
 80002fe:	71fb      	strb	r3, [r7, #7]
    LCD_Parallel_SendData(c);
 8000300:	79fb      	ldrb	r3, [r7, #7]
 8000302:	4618      	mov	r0, r3
 8000304:	f000 f812 	bl	800032c <LCD_Parallel_SendData>
}
 8000308:	bf00      	nop
 800030a:	3708      	adds	r7, #8
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}

08000310 <LCD_Parallel_SendCommand>:

void LCD_Parallel_WriteCustomChar(uint8_t location) {
    LCD_Parallel_SendData(location);
}

void LCD_Parallel_SendCommand(uint8_t cmd) {
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	71fb      	strb	r3, [r7, #7]
    LCD_Parallel_Send(cmd, 0);
 800031a:	79fb      	ldrb	r3, [r7, #7]
 800031c:	2100      	movs	r1, #0
 800031e:	4618      	mov	r0, r3
 8000320:	f000 f812 	bl	8000348 <LCD_Parallel_Send>
}
 8000324:	bf00      	nop
 8000326:	3708      	adds	r7, #8
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}

0800032c <LCD_Parallel_SendData>:

void LCD_Parallel_SendData(uint8_t data) {
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	4603      	mov	r3, r0
 8000334:	71fb      	strb	r3, [r7, #7]
    LCD_Parallel_Send(data, 1);
 8000336:	79fb      	ldrb	r3, [r7, #7]
 8000338:	2101      	movs	r1, #1
 800033a:	4618      	mov	r0, r3
 800033c:	f000 f804 	bl	8000348 <LCD_Parallel_Send>
}
 8000340:	bf00      	nop
 8000342:	3708      	adds	r7, #8
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}

08000348 <LCD_Parallel_Send>:

void LCD_Parallel_Send(uint8_t data, uint8_t rs) {
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	4603      	mov	r3, r0
 8000350:	460a      	mov	r2, r1
 8000352:	71fb      	strb	r3, [r7, #7]
 8000354:	4613      	mov	r3, r2
 8000356:	71bb      	strb	r3, [r7, #6]
    // Set RS pin (0 = command, 1 = data)
    HAL_GPIO_WritePin(LCD_RS_PORT, LCD_RS_PIN, rs ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000358:	79bb      	ldrb	r3, [r7, #6]
 800035a:	2b00      	cmp	r3, #0
 800035c:	bf14      	ite	ne
 800035e:	2301      	movne	r3, #1
 8000360:	2300      	moveq	r3, #0
 8000362:	b2db      	uxtb	r3, r3
 8000364:	461a      	mov	r2, r3
 8000366:	2101      	movs	r1, #1
 8000368:	4809      	ldr	r0, [pc, #36]	@ (8000390 <LCD_Parallel_Send+0x48>)
 800036a:	f001 ffc4 	bl	80022f6 <HAL_GPIO_WritePin>
    
    // Send upper 4 bits
    LCD_Parallel_Write4Bits(data >> 4);
 800036e:	79fb      	ldrb	r3, [r7, #7]
 8000370:	091b      	lsrs	r3, r3, #4
 8000372:	b2db      	uxtb	r3, r3
 8000374:	4618      	mov	r0, r3
 8000376:	f000 f80d 	bl	8000394 <LCD_Parallel_Write4Bits>
    
    // Send lower 4 bits
    LCD_Parallel_Write4Bits(data & 0x0F);
 800037a:	79fb      	ldrb	r3, [r7, #7]
 800037c:	f003 030f 	and.w	r3, r3, #15
 8000380:	b2db      	uxtb	r3, r3
 8000382:	4618      	mov	r0, r3
 8000384:	f000 f806 	bl	8000394 <LCD_Parallel_Write4Bits>
}
 8000388:	bf00      	nop
 800038a:	3708      	adds	r7, #8
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	40010c00 	.word	0x40010c00

08000394 <LCD_Parallel_Write4Bits>:

void LCD_Parallel_Write4Bits(uint8_t data) {
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
 800039a:	4603      	mov	r3, r0
 800039c:	71fb      	strb	r3, [r7, #7]
    // Set data on D4-D7 pins (PB12-PB15)
    HAL_GPIO_WritePin(LCD_D4_PORT, LCD_D4_PIN, (data & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800039e:	79fb      	ldrb	r3, [r7, #7]
 80003a0:	f003 0301 	and.w	r3, r3, #1
 80003a4:	b2db      	uxtb	r3, r3
 80003a6:	461a      	mov	r2, r3
 80003a8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80003ac:	4816      	ldr	r0, [pc, #88]	@ (8000408 <LCD_Parallel_Write4Bits+0x74>)
 80003ae:	f001 ffa2 	bl	80022f6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_PORT, LCD_D5_PIN, (data & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80003b2:	79fb      	ldrb	r3, [r7, #7]
 80003b4:	105b      	asrs	r3, r3, #1
 80003b6:	b2db      	uxtb	r3, r3
 80003b8:	f003 0301 	and.w	r3, r3, #1
 80003bc:	b2db      	uxtb	r3, r3
 80003be:	461a      	mov	r2, r3
 80003c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003c4:	4810      	ldr	r0, [pc, #64]	@ (8000408 <LCD_Parallel_Write4Bits+0x74>)
 80003c6:	f001 ff96 	bl	80022f6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_PORT, LCD_D6_PIN, (data & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80003ca:	79fb      	ldrb	r3, [r7, #7]
 80003cc:	109b      	asrs	r3, r3, #2
 80003ce:	b2db      	uxtb	r3, r3
 80003d0:	f003 0301 	and.w	r3, r3, #1
 80003d4:	b2db      	uxtb	r3, r3
 80003d6:	461a      	mov	r2, r3
 80003d8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80003dc:	480a      	ldr	r0, [pc, #40]	@ (8000408 <LCD_Parallel_Write4Bits+0x74>)
 80003de:	f001 ff8a 	bl	80022f6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_PORT, LCD_D7_PIN, (data & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80003e2:	79fb      	ldrb	r3, [r7, #7]
 80003e4:	10db      	asrs	r3, r3, #3
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	f003 0301 	and.w	r3, r3, #1
 80003ec:	b2db      	uxtb	r3, r3
 80003ee:	461a      	mov	r2, r3
 80003f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80003f4:	4804      	ldr	r0, [pc, #16]	@ (8000408 <LCD_Parallel_Write4Bits+0x74>)
 80003f6:	f001 ff7e 	bl	80022f6 <HAL_GPIO_WritePin>
    
    // Pulse Enable pin
    LCD_Parallel_EnablePulse();
 80003fa:	f000 f807 	bl	800040c <LCD_Parallel_EnablePulse>
}
 80003fe:	bf00      	nop
 8000400:	3708      	adds	r7, #8
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	40010c00 	.word	0x40010c00

0800040c <LCD_Parallel_EnablePulse>:

void LCD_Parallel_EnablePulse(void) {
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LCD_E_PORT, LCD_E_PIN, GPIO_PIN_SET);
 8000410:	2201      	movs	r2, #1
 8000412:	2102      	movs	r1, #2
 8000414:	4807      	ldr	r0, [pc, #28]	@ (8000434 <LCD_Parallel_EnablePulse+0x28>)
 8000416:	f001 ff6e 	bl	80022f6 <HAL_GPIO_WritePin>
    HAL_Delay(1); // Enable pulse width
 800041a:	2001      	movs	r0, #1
 800041c:	f001 fa38 	bl	8001890 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_E_PORT, LCD_E_PIN, GPIO_PIN_RESET);
 8000420:	2200      	movs	r2, #0
 8000422:	2102      	movs	r1, #2
 8000424:	4803      	ldr	r0, [pc, #12]	@ (8000434 <LCD_Parallel_EnablePulse+0x28>)
 8000426:	f001 ff66 	bl	80022f6 <HAL_GPIO_WritePin>
    HAL_Delay(1); // Commands need > 37us to settle
 800042a:	2001      	movs	r0, #1
 800042c:	f001 fa30 	bl	8001890 <HAL_Delay>
}
 8000430:	bf00      	nop
 8000432:	bd80      	pop	{r7, pc}
 8000434:	40010c00 	.word	0x40010c00

08000438 <LCD_Parallel_DisplayEffect>:

// Utility functions for displaying LED status
void LCD_Parallel_DisplayEffect(const char* effect_name) {
 8000438:	b580      	push	{r7, lr}
 800043a:	b084      	sub	sp, #16
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
    LCD_Parallel_SetCursor(0, 0);
 8000440:	2100      	movs	r1, #0
 8000442:	2000      	movs	r0, #0
 8000444:	f7ff ff18 	bl	8000278 <LCD_Parallel_SetCursor>
    LCD_Parallel_Print("Mode: ");
 8000448:	480d      	ldr	r0, [pc, #52]	@ (8000480 <LCD_Parallel_DisplayEffect+0x48>)
 800044a:	f7ff ff3f 	bl	80002cc <LCD_Parallel_Print>
    LCD_Parallel_Print((char*)effect_name);
 800044e:	6878      	ldr	r0, [r7, #4]
 8000450:	f7ff ff3c 	bl	80002cc <LCD_Parallel_Print>
    
    // Clear remaining characters on first line
    for(int i = strlen("Mode: ") + strlen(effect_name); i < LCD_COLS; i++) {
 8000454:	6878      	ldr	r0, [r7, #4]
 8000456:	f7ff fe79 	bl	800014c <strlen>
 800045a:	4603      	mov	r3, r0
 800045c:	3306      	adds	r3, #6
 800045e:	60fb      	str	r3, [r7, #12]
 8000460:	e005      	b.n	800046e <LCD_Parallel_DisplayEffect+0x36>
        LCD_Parallel_PrintChar(' ');
 8000462:	2020      	movs	r0, #32
 8000464:	f7ff ff47 	bl	80002f6 <LCD_Parallel_PrintChar>
    for(int i = strlen("Mode: ") + strlen(effect_name); i < LCD_COLS; i++) {
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	3301      	adds	r3, #1
 800046c:	60fb      	str	r3, [r7, #12]
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	2b0f      	cmp	r3, #15
 8000472:	ddf6      	ble.n	8000462 <LCD_Parallel_DisplayEffect+0x2a>
    }
}
 8000474:	bf00      	nop
 8000476:	bf00      	nop
 8000478:	3710      	adds	r7, #16
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	0800463c 	.word	0x0800463c

08000484 <LCD_Parallel_DisplayStatus>:

void LCD_Parallel_DisplayStatus(const char* color, int speed, int brightness) {
 8000484:	b580      	push	{r7, lr}
 8000486:	b08c      	sub	sp, #48	@ 0x30
 8000488:	af02      	add	r7, sp, #8
 800048a:	60f8      	str	r0, [r7, #12]
 800048c:	60b9      	str	r1, [r7, #8]
 800048e:	607a      	str	r2, [r7, #4]
    char buffer[17];
    
    LCD_Parallel_SetCursor(1, 0);
 8000490:	2100      	movs	r1, #0
 8000492:	2001      	movs	r0, #1
 8000494:	f7ff fef0 	bl	8000278 <LCD_Parallel_SetCursor>
    snprintf(buffer, sizeof(buffer), "%s S:%d B:%d%%", color, speed, brightness);
 8000498:	f107 0010 	add.w	r0, r7, #16
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	9301      	str	r3, [sp, #4]
 80004a0:	68bb      	ldr	r3, [r7, #8]
 80004a2:	9300      	str	r3, [sp, #0]
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	4a0f      	ldr	r2, [pc, #60]	@ (80004e4 <LCD_Parallel_DisplayStatus+0x60>)
 80004a8:	2111      	movs	r1, #17
 80004aa:	f003 fbf7 	bl	8003c9c <sniprintf>
    LCD_Parallel_Print(buffer);
 80004ae:	f107 0310 	add.w	r3, r7, #16
 80004b2:	4618      	mov	r0, r3
 80004b4:	f7ff ff0a 	bl	80002cc <LCD_Parallel_Print>
    
    // Clear remaining characters on second line
    for(int i = strlen(buffer); i < LCD_COLS; i++) {
 80004b8:	f107 0310 	add.w	r3, r7, #16
 80004bc:	4618      	mov	r0, r3
 80004be:	f7ff fe45 	bl	800014c <strlen>
 80004c2:	4603      	mov	r3, r0
 80004c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80004c6:	e005      	b.n	80004d4 <LCD_Parallel_DisplayStatus+0x50>
        LCD_Parallel_PrintChar(' ');
 80004c8:	2020      	movs	r0, #32
 80004ca:	f7ff ff14 	bl	80002f6 <LCD_Parallel_PrintChar>
    for(int i = strlen(buffer); i < LCD_COLS; i++) {
 80004ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80004d0:	3301      	adds	r3, #1
 80004d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80004d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80004d6:	2b0f      	cmp	r3, #15
 80004d8:	ddf6      	ble.n	80004c8 <LCD_Parallel_DisplayStatus+0x44>
    }
 80004da:	bf00      	nop
 80004dc:	bf00      	nop
 80004de:	3728      	adds	r7, #40	@ 0x28
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	08004644 	.word	0x08004644

080004e8 <HAL_TIM_PWM_PulseFinishedCallback>:
// Color and speed control
volatile int current_color = COLOR_BLUE;  // Start with blue
volatile int current_speed = 5;           // Speed from 1 (slow) to 10 (fast)
volatile int current_brightness = 50;     // Brightness from 1 (dim) to 100 (bright)

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 80004f0:	2100      	movs	r1, #0
 80004f2:	4805      	ldr	r0, [pc, #20]	@ (8000508 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 80004f4:	f002 fd40 	bl	8002f78 <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;
 80004f8:	4b04      	ldr	r3, [pc, #16]	@ (800050c <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 80004fa:	2201      	movs	r2, #1
 80004fc:	601a      	str	r2, [r3, #0]
}
 80004fe:	bf00      	nop
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	2000010c 	.word	0x2000010c
 800050c:	2000037c 	.word	0x2000037c

08000510 <Keypad_Init>:

// Keypad functions
void Keypad_Init(void) {
 8000510:	b580      	push	{r7, lr}
 8000512:	b088      	sub	sp, #32
 8000514:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000516:	f107 0308 	add.w	r3, r7, #8
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]
 8000522:	60da      	str	r2, [r3, #12]
    
    // Enable GPIOA clock (changed from GPIOB)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000524:	4b2b      	ldr	r3, [pc, #172]	@ (80005d4 <Keypad_Init+0xc4>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	4a2a      	ldr	r2, [pc, #168]	@ (80005d4 <Keypad_Init+0xc4>)
 800052a:	f043 0304 	orr.w	r3, r3, #4
 800052e:	6193      	str	r3, [r2, #24]
 8000530:	4b28      	ldr	r3, [pc, #160]	@ (80005d4 <Keypad_Init+0xc4>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	f003 0304 	and.w	r3, r3, #4
 8000538:	607b      	str	r3, [r7, #4]
 800053a:	687b      	ldr	r3, [r7, #4]
    
    // Configure row pins as output
    for(int i = 0; i < KEYPAD_ROWS; i++) {
 800053c:	2300      	movs	r3, #0
 800053e:	61fb      	str	r3, [r7, #28]
 8000540:	e023      	b.n	800058a <Keypad_Init+0x7a>
        GPIO_InitStruct.Pin = keypad_row_pins[i];
 8000542:	4a25      	ldr	r2, [pc, #148]	@ (80005d8 <Keypad_Init+0xc8>)
 8000544:	69fb      	ldr	r3, [r7, #28]
 8000546:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800054a:	60bb      	str	r3, [r7, #8]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800054c:	2301      	movs	r3, #1
 800054e:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000550:	2300      	movs	r3, #0
 8000552:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000554:	2302      	movs	r3, #2
 8000556:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(keypad_row_ports[i], &GPIO_InitStruct);
 8000558:	4a20      	ldr	r2, [pc, #128]	@ (80005dc <Keypad_Init+0xcc>)
 800055a:	69fb      	ldr	r3, [r7, #28]
 800055c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000560:	f107 0208 	add.w	r2, r7, #8
 8000564:	4611      	mov	r1, r2
 8000566:	4618      	mov	r0, r3
 8000568:	f001 fd2a 	bl	8001fc0 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(keypad_row_ports[i], keypad_row_pins[i], GPIO_PIN_SET);
 800056c:	4a1b      	ldr	r2, [pc, #108]	@ (80005dc <Keypad_Init+0xcc>)
 800056e:	69fb      	ldr	r3, [r7, #28]
 8000570:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000574:	4a18      	ldr	r2, [pc, #96]	@ (80005d8 <Keypad_Init+0xc8>)
 8000576:	69fb      	ldr	r3, [r7, #28]
 8000578:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800057c:	2201      	movs	r2, #1
 800057e:	4619      	mov	r1, r3
 8000580:	f001 feb9 	bl	80022f6 <HAL_GPIO_WritePin>
    for(int i = 0; i < KEYPAD_ROWS; i++) {
 8000584:	69fb      	ldr	r3, [r7, #28]
 8000586:	3301      	adds	r3, #1
 8000588:	61fb      	str	r3, [r7, #28]
 800058a:	69fb      	ldr	r3, [r7, #28]
 800058c:	2b03      	cmp	r3, #3
 800058e:	ddd8      	ble.n	8000542 <Keypad_Init+0x32>
    }
    
    // Configure column pins as input with pull-up
    for(int i = 0; i < KEYPAD_COLS; i++) {
 8000590:	2300      	movs	r3, #0
 8000592:	61bb      	str	r3, [r7, #24]
 8000594:	e015      	b.n	80005c2 <Keypad_Init+0xb2>
        GPIO_InitStruct.Pin = keypad_col_pins[i];
 8000596:	4a12      	ldr	r2, [pc, #72]	@ (80005e0 <Keypad_Init+0xd0>)
 8000598:	69bb      	ldr	r3, [r7, #24]
 800059a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800059e:	60bb      	str	r3, [r7, #8]
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005a0:	2300      	movs	r3, #0
 80005a2:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005a4:	2301      	movs	r3, #1
 80005a6:	613b      	str	r3, [r7, #16]
        HAL_GPIO_Init(keypad_col_ports[i], &GPIO_InitStruct);
 80005a8:	4a0e      	ldr	r2, [pc, #56]	@ (80005e4 <Keypad_Init+0xd4>)
 80005aa:	69bb      	ldr	r3, [r7, #24]
 80005ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005b0:	f107 0208 	add.w	r2, r7, #8
 80005b4:	4611      	mov	r1, r2
 80005b6:	4618      	mov	r0, r3
 80005b8:	f001 fd02 	bl	8001fc0 <HAL_GPIO_Init>
    for(int i = 0; i < KEYPAD_COLS; i++) {
 80005bc:	69bb      	ldr	r3, [r7, #24]
 80005be:	3301      	adds	r3, #1
 80005c0:	61bb      	str	r3, [r7, #24]
 80005c2:	69bb      	ldr	r3, [r7, #24]
 80005c4:	2b03      	cmp	r3, #3
 80005c6:	dde6      	ble.n	8000596 <Keypad_Init+0x86>
    }
}
 80005c8:	bf00      	nop
 80005ca:	bf00      	nop
 80005cc:	3720      	adds	r7, #32
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40021000 	.word	0x40021000
 80005d8:	20000044 	.word	0x20000044
 80005dc:	20000034 	.word	0x20000034
 80005e0:	2000005c 	.word	0x2000005c
 80005e4:	2000004c 	.word	0x2000004c

080005e8 <Update_LCD_Display>:

void Update_LCD_Display(void) {
 80005e8:	b5b0      	push	{r4, r5, r7, lr}
 80005ea:	b08a      	sub	sp, #40	@ 0x28
 80005ec:	af00      	add	r7, sp, #0
    // Effect names
    const char* effect_names[] = {"Fade", "Rainbow", "Run", "Flash", "Off", "Music"};
 80005ee:	4b25      	ldr	r3, [pc, #148]	@ (8000684 <Update_LCD_Display+0x9c>)
 80005f0:	f107 0410 	add.w	r4, r7, #16
 80005f4:	461d      	mov	r5, r3
 80005f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005fe:	e884 0003 	stmia.w	r4, {r0, r1}
    const char* color_names[] = {"Blue", "Red", "Pink", "Green"};
 8000602:	4b21      	ldr	r3, [pc, #132]	@ (8000688 <Update_LCD_Display+0xa0>)
 8000604:	463c      	mov	r4, r7
 8000606:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000608:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Display current effect
    if(current_effect < MAX_EFFECTS) {
 800060c:	4b1f      	ldr	r3, [pc, #124]	@ (800068c <Update_LCD_Display+0xa4>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2b05      	cmp	r3, #5
 8000612:	dc09      	bgt.n	8000628 <Update_LCD_Display+0x40>
        LCD_Parallel_DisplayEffect(effect_names[current_effect]);
 8000614:	4b1d      	ldr	r3, [pc, #116]	@ (800068c <Update_LCD_Display+0xa4>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	009b      	lsls	r3, r3, #2
 800061a:	3328      	adds	r3, #40	@ 0x28
 800061c:	443b      	add	r3, r7
 800061e:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff ff08 	bl	8000438 <LCD_Parallel_DisplayEffect>
    }

    // Display status (color, speed, brightness)
    if(current_effect == EFFECT_RAINBOW) {
 8000628:	4b18      	ldr	r3, [pc, #96]	@ (800068c <Update_LCD_Display+0xa4>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2b01      	cmp	r3, #1
 800062e:	d108      	bne.n	8000642 <Update_LCD_Display+0x5a>
        LCD_Parallel_DisplayStatus("Rainbow", current_speed, current_brightness);
 8000630:	4b17      	ldr	r3, [pc, #92]	@ (8000690 <Update_LCD_Display+0xa8>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a17      	ldr	r2, [pc, #92]	@ (8000694 <Update_LCD_Display+0xac>)
 8000636:	6812      	ldr	r2, [r2, #0]
 8000638:	4619      	mov	r1, r3
 800063a:	4817      	ldr	r0, [pc, #92]	@ (8000698 <Update_LCD_Display+0xb0>)
 800063c:	f7ff ff22 	bl	8000484 <LCD_Parallel_DisplayStatus>
    } else if(current_effect == EFFECT_OFF) {
        LCD_Parallel_DisplayStatus("OFF", 0, 0);
    } else if(current_color < MAX_COLORS) {
        LCD_Parallel_DisplayStatus(color_names[current_color], current_speed, current_brightness);
    }
}
 8000640:	e01b      	b.n	800067a <Update_LCD_Display+0x92>
    } else if(current_effect == EFFECT_OFF) {
 8000642:	4b12      	ldr	r3, [pc, #72]	@ (800068c <Update_LCD_Display+0xa4>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	2b04      	cmp	r3, #4
 8000648:	d105      	bne.n	8000656 <Update_LCD_Display+0x6e>
        LCD_Parallel_DisplayStatus("OFF", 0, 0);
 800064a:	2200      	movs	r2, #0
 800064c:	2100      	movs	r1, #0
 800064e:	4813      	ldr	r0, [pc, #76]	@ (800069c <Update_LCD_Display+0xb4>)
 8000650:	f7ff ff18 	bl	8000484 <LCD_Parallel_DisplayStatus>
}
 8000654:	e011      	b.n	800067a <Update_LCD_Display+0x92>
    } else if(current_color < MAX_COLORS) {
 8000656:	4b12      	ldr	r3, [pc, #72]	@ (80006a0 <Update_LCD_Display+0xb8>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	2b03      	cmp	r3, #3
 800065c:	dc0d      	bgt.n	800067a <Update_LCD_Display+0x92>
        LCD_Parallel_DisplayStatus(color_names[current_color], current_speed, current_brightness);
 800065e:	4b10      	ldr	r3, [pc, #64]	@ (80006a0 <Update_LCD_Display+0xb8>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	009b      	lsls	r3, r3, #2
 8000664:	3328      	adds	r3, #40	@ 0x28
 8000666:	443b      	add	r3, r7
 8000668:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800066c:	4a08      	ldr	r2, [pc, #32]	@ (8000690 <Update_LCD_Display+0xa8>)
 800066e:	6811      	ldr	r1, [r2, #0]
 8000670:	4a08      	ldr	r2, [pc, #32]	@ (8000694 <Update_LCD_Display+0xac>)
 8000672:	6812      	ldr	r2, [r2, #0]
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff ff05 	bl	8000484 <LCD_Parallel_DisplayStatus>
}
 800067a:	bf00      	nop
 800067c:	3728      	adds	r7, #40	@ 0x28
 800067e:	46bd      	mov	sp, r7
 8000680:	bdb0      	pop	{r4, r5, r7, pc}
 8000682:	bf00      	nop
 8000684:	08004680 	.word	0x08004680
 8000688:	080046b4 	.word	0x080046b4
 800068c:	20000074 	.word	0x20000074
 8000690:	2000007c 	.word	0x2000007c
 8000694:	20000080 	.word	0x20000080
 8000698:	08004654 	.word	0x08004654
 800069c:	0800465c 	.word	0x0800465c
 80006a0:	20000380 	.word	0x20000380

080006a4 <Keypad_Read>:

char Keypad_Read(void) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
    for(int row = 0; row < KEYPAD_ROWS; row++) {
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
 80006ae:	e061      	b.n	8000774 <Keypad_Read+0xd0>
        // Set current row LOW, others HIGH
        for(int i = 0; i < KEYPAD_ROWS; i++) {
 80006b0:	2300      	movs	r3, #0
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	e01f      	b.n	80006f6 <Keypad_Read+0x52>
            if(i == row) {
 80006b6:	68ba      	ldr	r2, [r7, #8]
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	429a      	cmp	r2, r3
 80006bc:	d10c      	bne.n	80006d8 <Keypad_Read+0x34>
                HAL_GPIO_WritePin(keypad_row_ports[i], keypad_row_pins[i], GPIO_PIN_RESET);
 80006be:	4a31      	ldr	r2, [pc, #196]	@ (8000784 <Keypad_Read+0xe0>)
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80006c6:	4a30      	ldr	r2, [pc, #192]	@ (8000788 <Keypad_Read+0xe4>)
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006ce:	2200      	movs	r2, #0
 80006d0:	4619      	mov	r1, r3
 80006d2:	f001 fe10 	bl	80022f6 <HAL_GPIO_WritePin>
 80006d6:	e00b      	b.n	80006f0 <Keypad_Read+0x4c>
            } else {
                HAL_GPIO_WritePin(keypad_row_ports[i], keypad_row_pins[i], GPIO_PIN_SET);
 80006d8:	4a2a      	ldr	r2, [pc, #168]	@ (8000784 <Keypad_Read+0xe0>)
 80006da:	68bb      	ldr	r3, [r7, #8]
 80006dc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80006e0:	4a29      	ldr	r2, [pc, #164]	@ (8000788 <Keypad_Read+0xe4>)
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006e8:	2201      	movs	r2, #1
 80006ea:	4619      	mov	r1, r3
 80006ec:	f001 fe03 	bl	80022f6 <HAL_GPIO_WritePin>
        for(int i = 0; i < KEYPAD_ROWS; i++) {
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	3301      	adds	r3, #1
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	2b03      	cmp	r3, #3
 80006fa:	dddc      	ble.n	80006b6 <Keypad_Read+0x12>
            }
        }
        
        HAL_Delay(2); // Small delay for stabilization
 80006fc:	2002      	movs	r0, #2
 80006fe:	f001 f8c7 	bl	8001890 <HAL_Delay>
        
        // Read columns
        for(int col = 0; col < KEYPAD_COLS; col++) {
 8000702:	2300      	movs	r3, #0
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	e02f      	b.n	8000768 <Keypad_Read+0xc4>
            if(HAL_GPIO_ReadPin(keypad_col_ports[col], keypad_col_pins[col]) == GPIO_PIN_RESET) {
 8000708:	4a20      	ldr	r2, [pc, #128]	@ (800078c <Keypad_Read+0xe8>)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000710:	491f      	ldr	r1, [pc, #124]	@ (8000790 <Keypad_Read+0xec>)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000718:	4619      	mov	r1, r3
 800071a:	4610      	mov	r0, r2
 800071c:	f001 fdd4 	bl	80022c8 <HAL_GPIO_ReadPin>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d11d      	bne.n	8000762 <Keypad_Read+0xbe>
                // Button pressed, wait for release
                while(HAL_GPIO_ReadPin(keypad_col_ports[col], keypad_col_pins[col]) == GPIO_PIN_RESET) {
 8000726:	e002      	b.n	800072e <Keypad_Read+0x8a>
                    HAL_Delay(10);
 8000728:	200a      	movs	r0, #10
 800072a:	f001 f8b1 	bl	8001890 <HAL_Delay>
                while(HAL_GPIO_ReadPin(keypad_col_ports[col], keypad_col_pins[col]) == GPIO_PIN_RESET) {
 800072e:	4a17      	ldr	r2, [pc, #92]	@ (800078c <Keypad_Read+0xe8>)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000736:	4916      	ldr	r1, [pc, #88]	@ (8000790 <Keypad_Read+0xec>)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800073e:	4619      	mov	r1, r3
 8000740:	4610      	mov	r0, r2
 8000742:	f001 fdc1 	bl	80022c8 <HAL_GPIO_ReadPin>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d0ed      	beq.n	8000728 <Keypad_Read+0x84>
                }
                HAL_Delay(50); // Debounce delay
 800074c:	2032      	movs	r0, #50	@ 0x32
 800074e:	f001 f89f 	bl	8001890 <HAL_Delay>
                return keypad_layout[row][col];
 8000752:	4a10      	ldr	r2, [pc, #64]	@ (8000794 <Keypad_Read+0xf0>)
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	441a      	add	r2, r3
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4413      	add	r3, r2
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	e00c      	b.n	800077c <Keypad_Read+0xd8>
        for(int col = 0; col < KEYPAD_COLS; col++) {
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	3301      	adds	r3, #1
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2b03      	cmp	r3, #3
 800076c:	ddcc      	ble.n	8000708 <Keypad_Read+0x64>
    for(int row = 0; row < KEYPAD_ROWS; row++) {
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	3301      	adds	r3, #1
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	2b03      	cmp	r3, #3
 8000778:	dd9a      	ble.n	80006b0 <Keypad_Read+0xc>
            }
        }
    }
    return 0; // No key pressed
 800077a:	2300      	movs	r3, #0
}
 800077c:	4618      	mov	r0, r3
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000034 	.word	0x20000034
 8000788:	20000044 	.word	0x20000044
 800078c:	2000004c 	.word	0x2000004c
 8000790:	2000005c 	.word	0x2000005c
 8000794:	20000064 	.word	0x20000064

08000798 <Process_Keypad_Input>:

void Process_Keypad_Input(char key) {
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	71fb      	strb	r3, [r7, #7]
    switch(key) {
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	3b31      	subs	r3, #49	@ 0x31
 80007a6:	2b15      	cmp	r3, #21
 80007a8:	f200 80bd 	bhi.w	8000926 <Process_Keypad_Input+0x18e>
 80007ac:	a201      	add	r2, pc, #4	@ (adr r2, 80007b4 <Process_Keypad_Input+0x1c>)
 80007ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007b2:	bf00      	nop
 80007b4:	0800080d 	.word	0x0800080d
 80007b8:	0800085d 	.word	0x0800085d
 80007bc:	08000877 	.word	0x08000877
 80007c0:	08000927 	.word	0x08000927
 80007c4:	08000821 	.word	0x08000821
 80007c8:	08000891 	.word	0x08000891
 80007cc:	080008b1 	.word	0x080008b1
 80007d0:	08000927 	.word	0x08000927
 80007d4:	08000835 	.word	0x08000835
 80007d8:	08000927 	.word	0x08000927
 80007dc:	08000927 	.word	0x08000927
 80007e0:	08000927 	.word	0x08000927
 80007e4:	08000927 	.word	0x08000927
 80007e8:	08000927 	.word	0x08000927
 80007ec:	08000927 	.word	0x08000927
 80007f0:	08000927 	.word	0x08000927
 80007f4:	080008d1 	.word	0x080008d1
 80007f8:	08000927 	.word	0x08000927
 80007fc:	08000927 	.word	0x08000927
 8000800:	08000849 	.word	0x08000849
 8000804:	080008f9 	.word	0x080008f9
 8000808:	08000913 	.word	0x08000913
        // Effects
        case '1':  // S1 - Fade effect
            current_effect = EFFECT_FADE;
 800080c:	4b4a      	ldr	r3, [pc, #296]	@ (8000938 <Process_Keypad_Input+0x1a0>)
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
            effect_changed = 1;
 8000812:	4b4a      	ldr	r3, [pc, #296]	@ (800093c <Process_Keypad_Input+0x1a4>)
 8000814:	2201      	movs	r2, #1
 8000816:	601a      	str	r2, [r3, #0]
            lcd_update_needed = 1;
 8000818:	4b49      	ldr	r3, [pc, #292]	@ (8000940 <Process_Keypad_Input+0x1a8>)
 800081a:	2201      	movs	r2, #1
 800081c:	601a      	str	r2, [r3, #0]
            break;
 800081e:	e085      	b.n	800092c <Process_Keypad_Input+0x194>
        case '5':  // S5 - Rainbow effect  
            current_effect = EFFECT_RAINBOW;
 8000820:	4b45      	ldr	r3, [pc, #276]	@ (8000938 <Process_Keypad_Input+0x1a0>)
 8000822:	2201      	movs	r2, #1
 8000824:	601a      	str	r2, [r3, #0]
            effect_changed = 1;
 8000826:	4b45      	ldr	r3, [pc, #276]	@ (800093c <Process_Keypad_Input+0x1a4>)
 8000828:	2201      	movs	r2, #1
 800082a:	601a      	str	r2, [r3, #0]
            lcd_update_needed = 1;
 800082c:	4b44      	ldr	r3, [pc, #272]	@ (8000940 <Process_Keypad_Input+0x1a8>)
 800082e:	2201      	movs	r2, #1
 8000830:	601a      	str	r2, [r3, #0]
            break;
 8000832:	e07b      	b.n	800092c <Process_Keypad_Input+0x194>
        case '9':  // S9 - Run effect
            current_effect = EFFECT_RUN;
 8000834:	4b40      	ldr	r3, [pc, #256]	@ (8000938 <Process_Keypad_Input+0x1a0>)
 8000836:	2202      	movs	r2, #2
 8000838:	601a      	str	r2, [r3, #0]
            effect_changed = 1;
 800083a:	4b40      	ldr	r3, [pc, #256]	@ (800093c <Process_Keypad_Input+0x1a4>)
 800083c:	2201      	movs	r2, #1
 800083e:	601a      	str	r2, [r3, #0]
            lcd_update_needed = 1;
 8000840:	4b3f      	ldr	r3, [pc, #252]	@ (8000940 <Process_Keypad_Input+0x1a8>)
 8000842:	2201      	movs	r2, #1
 8000844:	601a      	str	r2, [r3, #0]
            break;
 8000846:	e071      	b.n	800092c <Process_Keypad_Input+0x194>
        case 'D':  // S13 - Flashing effect
            current_effect = EFFECT_FLASHING;
 8000848:	4b3b      	ldr	r3, [pc, #236]	@ (8000938 <Process_Keypad_Input+0x1a0>)
 800084a:	2203      	movs	r2, #3
 800084c:	601a      	str	r2, [r3, #0]
            effect_changed = 1;
 800084e:	4b3b      	ldr	r3, [pc, #236]	@ (800093c <Process_Keypad_Input+0x1a4>)
 8000850:	2201      	movs	r2, #1
 8000852:	601a      	str	r2, [r3, #0]
            lcd_update_needed = 1;
 8000854:	4b3a      	ldr	r3, [pc, #232]	@ (8000940 <Process_Keypad_Input+0x1a8>)
 8000856:	2201      	movs	r2, #1
 8000858:	601a      	str	r2, [r3, #0]
            break;
 800085a:	e067      	b.n	800092c <Process_Keypad_Input+0x194>
            
        // Speed control
        case '2':  // S2 - Decrease speed
            if(current_speed > 1) current_speed--;
 800085c:	4b39      	ldr	r3, [pc, #228]	@ (8000944 <Process_Keypad_Input+0x1ac>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2b01      	cmp	r3, #1
 8000862:	dd04      	ble.n	800086e <Process_Keypad_Input+0xd6>
 8000864:	4b37      	ldr	r3, [pc, #220]	@ (8000944 <Process_Keypad_Input+0x1ac>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	3b01      	subs	r3, #1
 800086a:	4a36      	ldr	r2, [pc, #216]	@ (8000944 <Process_Keypad_Input+0x1ac>)
 800086c:	6013      	str	r3, [r2, #0]
            lcd_update_needed = 1;
 800086e:	4b34      	ldr	r3, [pc, #208]	@ (8000940 <Process_Keypad_Input+0x1a8>)
 8000870:	2201      	movs	r2, #1
 8000872:	601a      	str	r2, [r3, #0]
            break;
 8000874:	e05a      	b.n	800092c <Process_Keypad_Input+0x194>
        case '3':  // S3 - Increase speed
            if(current_speed < 10) current_speed++;
 8000876:	4b33      	ldr	r3, [pc, #204]	@ (8000944 <Process_Keypad_Input+0x1ac>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	2b09      	cmp	r3, #9
 800087c:	dc04      	bgt.n	8000888 <Process_Keypad_Input+0xf0>
 800087e:	4b31      	ldr	r3, [pc, #196]	@ (8000944 <Process_Keypad_Input+0x1ac>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	3301      	adds	r3, #1
 8000884:	4a2f      	ldr	r2, [pc, #188]	@ (8000944 <Process_Keypad_Input+0x1ac>)
 8000886:	6013      	str	r3, [r2, #0]
            lcd_update_needed = 1;
 8000888:	4b2d      	ldr	r3, [pc, #180]	@ (8000940 <Process_Keypad_Input+0x1a8>)
 800088a:	2201      	movs	r2, #1
 800088c:	601a      	str	r2, [r3, #0]
            break;
 800088e:	e04d      	b.n	800092c <Process_Keypad_Input+0x194>
            
        // Brightness control
        case '6':  // S6 - Decrease brightness
            current_brightness -= 10;
 8000890:	4b2d      	ldr	r3, [pc, #180]	@ (8000948 <Process_Keypad_Input+0x1b0>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	3b0a      	subs	r3, #10
 8000896:	4a2c      	ldr	r2, [pc, #176]	@ (8000948 <Process_Keypad_Input+0x1b0>)
 8000898:	6013      	str	r3, [r2, #0]
            if(current_brightness < 1) current_brightness = 1;
 800089a:	4b2b      	ldr	r3, [pc, #172]	@ (8000948 <Process_Keypad_Input+0x1b0>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	dc02      	bgt.n	80008a8 <Process_Keypad_Input+0x110>
 80008a2:	4b29      	ldr	r3, [pc, #164]	@ (8000948 <Process_Keypad_Input+0x1b0>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	601a      	str	r2, [r3, #0]
            lcd_update_needed = 1;
 80008a8:	4b25      	ldr	r3, [pc, #148]	@ (8000940 <Process_Keypad_Input+0x1a8>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	601a      	str	r2, [r3, #0]
            break;
 80008ae:	e03d      	b.n	800092c <Process_Keypad_Input+0x194>
        case '7':  // S7 - Increase brightness
            current_brightness += 10;
 80008b0:	4b25      	ldr	r3, [pc, #148]	@ (8000948 <Process_Keypad_Input+0x1b0>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	330a      	adds	r3, #10
 80008b6:	4a24      	ldr	r2, [pc, #144]	@ (8000948 <Process_Keypad_Input+0x1b0>)
 80008b8:	6013      	str	r3, [r2, #0]
            if(current_brightness > 100) current_brightness = 100;
 80008ba:	4b23      	ldr	r3, [pc, #140]	@ (8000948 <Process_Keypad_Input+0x1b0>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	2b64      	cmp	r3, #100	@ 0x64
 80008c0:	dd02      	ble.n	80008c8 <Process_Keypad_Input+0x130>
 80008c2:	4b21      	ldr	r3, [pc, #132]	@ (8000948 <Process_Keypad_Input+0x1b0>)
 80008c4:	2264      	movs	r2, #100	@ 0x64
 80008c6:	601a      	str	r2, [r3, #0]
            lcd_update_needed = 1;
 80008c8:	4b1d      	ldr	r3, [pc, #116]	@ (8000940 <Process_Keypad_Input+0x1a8>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	601a      	str	r2, [r3, #0]
            break;
 80008ce:	e02d      	b.n	800092c <Process_Keypad_Input+0x194>
            
        // Color and control
        case 'A':  // S10 - Change color (not for Rainbow)
            if(current_effect != EFFECT_RAINBOW) {
 80008d0:	4b19      	ldr	r3, [pc, #100]	@ (8000938 <Process_Keypad_Input+0x1a0>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d028      	beq.n	800092a <Process_Keypad_Input+0x192>
                current_color = (current_color + 1) % MAX_COLORS;
 80008d8:	4b1c      	ldr	r3, [pc, #112]	@ (800094c <Process_Keypad_Input+0x1b4>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	3301      	adds	r3, #1
 80008de:	425a      	negs	r2, r3
 80008e0:	f003 0303 	and.w	r3, r3, #3
 80008e4:	f002 0203 	and.w	r2, r2, #3
 80008e8:	bf58      	it	pl
 80008ea:	4253      	negpl	r3, r2
 80008ec:	4a17      	ldr	r2, [pc, #92]	@ (800094c <Process_Keypad_Input+0x1b4>)
 80008ee:	6013      	str	r3, [r2, #0]
                lcd_update_needed = 1;
 80008f0:	4b13      	ldr	r3, [pc, #76]	@ (8000940 <Process_Keypad_Input+0x1a8>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	601a      	str	r2, [r3, #0]
            }
            break;
 80008f6:	e018      	b.n	800092a <Process_Keypad_Input+0x192>
        case 'E':  // S14 - Music mode
            current_effect = EFFECT_MUSIC;
 80008f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000938 <Process_Keypad_Input+0x1a0>)
 80008fa:	2205      	movs	r2, #5
 80008fc:	601a      	str	r2, [r3, #0]
            effect_changed = 1;
 80008fe:	4b0f      	ldr	r3, [pc, #60]	@ (800093c <Process_Keypad_Input+0x1a4>)
 8000900:	2201      	movs	r2, #1
 8000902:	601a      	str	r2, [r3, #0]
            music_mode_active = 1;
 8000904:	4b12      	ldr	r3, [pc, #72]	@ (8000950 <Process_Keypad_Input+0x1b8>)
 8000906:	2201      	movs	r2, #1
 8000908:	601a      	str	r2, [r3, #0]
            lcd_update_needed = 1;
 800090a:	4b0d      	ldr	r3, [pc, #52]	@ (8000940 <Process_Keypad_Input+0x1a8>)
 800090c:	2201      	movs	r2, #1
 800090e:	601a      	str	r2, [r3, #0]
            break;
 8000910:	e00c      	b.n	800092c <Process_Keypad_Input+0x194>
        case 'F':  // S15 - Turn off
            current_effect = EFFECT_OFF;
 8000912:	4b09      	ldr	r3, [pc, #36]	@ (8000938 <Process_Keypad_Input+0x1a0>)
 8000914:	2204      	movs	r2, #4
 8000916:	601a      	str	r2, [r3, #0]
            effect_changed = 1;
 8000918:	4b08      	ldr	r3, [pc, #32]	@ (800093c <Process_Keypad_Input+0x1a4>)
 800091a:	2201      	movs	r2, #1
 800091c:	601a      	str	r2, [r3, #0]
            lcd_update_needed = 1;
 800091e:	4b08      	ldr	r3, [pc, #32]	@ (8000940 <Process_Keypad_Input+0x1a8>)
 8000920:	2201      	movs	r2, #1
 8000922:	601a      	str	r2, [r3, #0]
            break;
 8000924:	e002      	b.n	800092c <Process_Keypad_Input+0x194>
        case '4':  // S4 - Disabled (problematic) 
        case '8':  // S8 - Disabled (problematic)
        case 'C':  // S12 - Disabled (problematic)
        default:
            // Do nothing for problematic keys and others
            break;
 8000926:	bf00      	nop
 8000928:	e000      	b.n	800092c <Process_Keypad_Input+0x194>
            break;
 800092a:	bf00      	nop
    }
}
 800092c:	bf00      	nop
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	20000074 	.word	0x20000074
 800093c:	20000078 	.word	0x20000078
 8000940:	20000030 	.word	0x20000030
 8000944:	2000007c 	.word	0x2000007c
 8000948:	20000080 	.word	0x20000080
 800094c:	20000380 	.word	0x20000380
 8000950:	200000fc 	.word	0x200000fc

08000954 <Set_LED>:

void Set_LED (int LEDnum, int Red, int Green, int Blue) {
 8000954:	b480      	push	{r7}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
 800095a:	60f8      	str	r0, [r7, #12]
 800095c:	60b9      	str	r1, [r7, #8]
 800095e:	607a      	str	r2, [r7, #4]
 8000960:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	b2d9      	uxtb	r1, r3
 8000966:	4a10      	ldr	r2, [pc, #64]	@ (80009a8 <Set_LED+0x54>)
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	b2d9      	uxtb	r1, r3
 8000972:	4a0d      	ldr	r2, [pc, #52]	@ (80009a8 <Set_LED+0x54>)
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	4413      	add	r3, r2
 800097a:	460a      	mov	r2, r1
 800097c:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	b2d9      	uxtb	r1, r3
 8000982:	4a09      	ldr	r2, [pc, #36]	@ (80009a8 <Set_LED+0x54>)
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	4413      	add	r3, r2
 800098a:	460a      	mov	r2, r1
 800098c:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	b2d9      	uxtb	r1, r3
 8000992:	4a05      	ldr	r2, [pc, #20]	@ (80009a8 <Set_LED+0x54>)
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	4413      	add	r3, r2
 800099a:	460a      	mov	r2, r1
 800099c:	70da      	strb	r2, [r3, #3]
}
 800099e:	bf00      	nop
 80009a0:	3714      	adds	r7, #20
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr
 80009a8:	2000019c 	.word	0x2000019c

080009ac <Set_All_LEDs_Same_Color>:

// Function to set all LEDs to the same color
void Set_All_LEDs_Same_Color(int Red, int Green, int Blue) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b086      	sub	sp, #24
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	60b9      	str	r1, [r7, #8]
 80009b6:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < MAX_LED; i++) {
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]
 80009bc:	e008      	b.n	80009d0 <Set_All_LEDs_Same_Color+0x24>
        Set_LED(i, Red, Green, Blue);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	68ba      	ldr	r2, [r7, #8]
 80009c2:	68f9      	ldr	r1, [r7, #12]
 80009c4:	6978      	ldr	r0, [r7, #20]
 80009c6:	f7ff ffc5 	bl	8000954 <Set_LED>
    for (int i = 0; i < MAX_LED; i++) {
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	3301      	adds	r3, #1
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	2b3b      	cmp	r3, #59	@ 0x3b
 80009d4:	ddf3      	ble.n	80009be <Set_All_LEDs_Same_Color+0x12>
    }
}
 80009d6:	bf00      	nop
 80009d8:	bf00      	nop
 80009da:	3718      	adds	r7, #24
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <Set_Brightness>:

#define PI 3.14159265

void Set_Brightness (int brightness) {
 80009e0:	b480      	push	{r7}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if (brightness > 100) brightness = 100;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2b64      	cmp	r3, #100	@ 0x64
 80009ec:	dd01      	ble.n	80009f2 <Set_Brightness+0x12>
 80009ee:	2364      	movs	r3, #100	@ 0x64
 80009f0:	607b      	str	r3, [r7, #4]
	if (brightness < 0) brightness = 0;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	da01      	bge.n	80009fc <Set_Brightness+0x1c>
 80009f8:	2300      	movs	r3, #0
 80009fa:	607b      	str	r3, [r7, #4]
	
	for (int i=0; i < MAX_LED; i++) {
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	e02d      	b.n	8000a5e <Set_Brightness+0x7e>
		LED_Mod[i][0] = LED_Data[i][0];
 8000a02:	4a1b      	ldr	r2, [pc, #108]	@ (8000a70 <Set_Brightness+0x90>)
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8000a0a:	4a1a      	ldr	r2, [pc, #104]	@ (8000a74 <Set_Brightness+0x94>)
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j = 1; j < 4; ++j) {
 8000a12:	2301      	movs	r3, #1
 8000a14:	60bb      	str	r3, [r7, #8]
 8000a16:	e01c      	b.n	8000a52 <Set_Brightness+0x72>
			// Simple percentage calculation: brightness from 0-100%
			LED_Mod[i][j] = (LED_Data[i][j] * brightness) / 100;
 8000a18:	4a15      	ldr	r2, [pc, #84]	@ (8000a70 <Set_Brightness+0x90>)
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	441a      	add	r2, r3
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	4413      	add	r3, r2
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	461a      	mov	r2, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	fb02 f303 	mul.w	r3, r2, r3
 8000a2e:	4a12      	ldr	r2, [pc, #72]	@ (8000a78 <Set_Brightness+0x98>)
 8000a30:	fb82 1203 	smull	r1, r2, r2, r3
 8000a34:	1152      	asrs	r2, r2, #5
 8000a36:	17db      	asrs	r3, r3, #31
 8000a38:	1ad3      	subs	r3, r2, r3
 8000a3a:	b2d9      	uxtb	r1, r3
 8000a3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a74 <Set_Brightness+0x94>)
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	441a      	add	r2, r3
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	4413      	add	r3, r2
 8000a48:	460a      	mov	r2, r1
 8000a4a:	701a      	strb	r2, [r3, #0]
		for (int j = 1; j < 4; ++j) {
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	60bb      	str	r3, [r7, #8]
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	2b03      	cmp	r3, #3
 8000a56:	dddf      	ble.n	8000a18 <Set_Brightness+0x38>
	for (int i=0; i < MAX_LED; i++) {
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	2b3b      	cmp	r3, #59	@ 0x3b
 8000a62:	ddce      	ble.n	8000a02 <Set_Brightness+0x22>
		}
	}

#endif
}
 8000a64:	bf00      	nop
 8000a66:	bf00      	nop
 8000a68:	3714      	adds	r7, #20
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bc80      	pop	{r7}
 8000a6e:	4770      	bx	lr
 8000a70:	2000019c 	.word	0x2000019c
 8000a74:	2000028c 	.word	0x2000028c
 8000a78:	51eb851f 	.word	0x51eb851f

08000a7c <WS2812_Send>:
//
//	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, 24);
//}


void WS2812_Send (void) {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0
	uint32_t indx = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	617b      	str	r3, [r7, #20]
	uint32_t color;

	for (int i = 0; i < MAX_LED; ++i) {
 8000a86:	2300      	movs	r3, #0
 8000a88:	613b      	str	r3, [r7, #16]
 8000a8a:	e036      	b.n	8000afa <WS2812_Send+0x7e>
		color = ((LED_Mod[i][1] << 16) | (LED_Mod[i][2] << 8) | (LED_Mod[i][3]));
 8000a8c:	4a39      	ldr	r2, [pc, #228]	@ (8000b74 <WS2812_Send+0xf8>)
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	4413      	add	r3, r2
 8000a94:	785b      	ldrb	r3, [r3, #1]
 8000a96:	041a      	lsls	r2, r3, #16
 8000a98:	4936      	ldr	r1, [pc, #216]	@ (8000b74 <WS2812_Send+0xf8>)
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	440b      	add	r3, r1
 8000aa0:	789b      	ldrb	r3, [r3, #2]
 8000aa2:	021b      	lsls	r3, r3, #8
 8000aa4:	431a      	orrs	r2, r3
 8000aa6:	4933      	ldr	r1, [pc, #204]	@ (8000b74 <WS2812_Send+0xf8>)
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	440b      	add	r3, r1
 8000aae:	78db      	ldrb	r3, [r3, #3]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	603b      	str	r3, [r7, #0]

		for (int j = 23; j >= 0; j--) {
 8000ab4:	2317      	movs	r3, #23
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	e019      	b.n	8000aee <WS2812_Send+0x72>
			if (color&(1<<j)) {
 8000aba:	2201      	movs	r2, #1
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d005      	beq.n	8000ad8 <WS2812_Send+0x5c>
				pwmData[indx] = 60;
 8000acc:	4a2a      	ldr	r2, [pc, #168]	@ (8000b78 <WS2812_Send+0xfc>)
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	213c      	movs	r1, #60	@ 0x3c
 8000ad2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000ad6:	e004      	b.n	8000ae2 <WS2812_Send+0x66>
			} else {
				pwmData[indx] = 30;
 8000ad8:	4a27      	ldr	r2, [pc, #156]	@ (8000b78 <WS2812_Send+0xfc>)
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	211e      	movs	r1, #30
 8000ade:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}

			indx++;
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	617b      	str	r3, [r7, #20]
		for (int j = 23; j >= 0; j--) {
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	3b01      	subs	r3, #1
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	dae2      	bge.n	8000aba <WS2812_Send+0x3e>
	for (int i = 0; i < MAX_LED; ++i) {
 8000af4:	693b      	ldr	r3, [r7, #16]
 8000af6:	3301      	adds	r3, #1
 8000af8:	613b      	str	r3, [r7, #16]
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	2b3b      	cmp	r3, #59	@ 0x3b
 8000afe:	ddc5      	ble.n	8000a8c <WS2812_Send+0x10>
		}
	}

	for (int i = 0; i < 50; ++i) {
 8000b00:	2300      	movs	r3, #0
 8000b02:	60bb      	str	r3, [r7, #8]
 8000b04:	e00a      	b.n	8000b1c <WS2812_Send+0xa0>
		pwmData[indx] = 0;
 8000b06:	4a1c      	ldr	r2, [pc, #112]	@ (8000b78 <WS2812_Send+0xfc>)
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	3301      	adds	r3, #1
 8000b14:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 50; ++i) {
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	60bb      	str	r3, [r7, #8]
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	2b31      	cmp	r3, #49	@ 0x31
 8000b20:	ddf1      	ble.n	8000b06 <WS2812_Send+0x8a>
	}

	// Reset flag before starting DMA
	datasentflag = 0;
 8000b22:	4b16      	ldr	r3, [pc, #88]	@ (8000b7c <WS2812_Send+0x100>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
	
	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	4a12      	ldr	r2, [pc, #72]	@ (8000b78 <WS2812_Send+0xfc>)
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4813      	ldr	r0, [pc, #76]	@ (8000b80 <WS2812_Send+0x104>)
 8000b32:	f002 f87f 	bl	8002c34 <HAL_TIM_PWM_Start_DMA>
	
	// Add timeout to prevent infinite loop
	uint32_t timeout = 1000000;  // Adjust timeout value
 8000b36:	4b13      	ldr	r3, [pc, #76]	@ (8000b84 <WS2812_Send+0x108>)
 8000b38:	607b      	str	r3, [r7, #4]
	while(!datasentflag && timeout > 0) {
 8000b3a:	e002      	b.n	8000b42 <WS2812_Send+0xc6>
		timeout--;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	607b      	str	r3, [r7, #4]
	while(!datasentflag && timeout > 0) {
 8000b42:	4b0e      	ldr	r3, [pc, #56]	@ (8000b7c <WS2812_Send+0x100>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d102      	bne.n	8000b50 <WS2812_Send+0xd4>
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d1f5      	bne.n	8000b3c <WS2812_Send+0xc0>
	}
	
	// Force stop if timeout occurred
	if (timeout == 0) {
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d106      	bne.n	8000b64 <WS2812_Send+0xe8>
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8000b56:	2100      	movs	r1, #0
 8000b58:	4809      	ldr	r0, [pc, #36]	@ (8000b80 <WS2812_Send+0x104>)
 8000b5a:	f002 fa0d 	bl	8002f78 <HAL_TIM_PWM_Stop_DMA>
		datasentflag = 1;
 8000b5e:	4b07      	ldr	r3, [pc, #28]	@ (8000b7c <WS2812_Send+0x100>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	601a      	str	r2, [r3, #0]
	}
	
	datasentflag = 0;
 8000b64:	4b05      	ldr	r3, [pc, #20]	@ (8000b7c <WS2812_Send+0x100>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
}
 8000b6a:	bf00      	nop
 8000b6c:	3718      	adds	r7, #24
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	2000028c 	.word	0x2000028c
 8000b78:	20000384 	.word	0x20000384
 8000b7c:	2000037c 	.word	0x2000037c
 8000b80:	2000010c 	.word	0x2000010c
 8000b84:	000f4240 	.word	0x000f4240

08000b88 <Rainbow_Effect>:
		WS2812_Send();
		HAL_Delay(LED_DELAY/speed);
	}
}

void Rainbow_Effect (int speed) {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	@ 0x28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
	if (speed > 10) speed = 10;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2b0a      	cmp	r3, #10
 8000b94:	dd01      	ble.n	8000b9a <Rainbow_Effect+0x12>
 8000b96:	230a      	movs	r3, #10
 8000b98:	607b      	str	r3, [r7, #4]
	if (speed < 1)	speed = 1;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	dc01      	bgt.n	8000ba4 <Rainbow_Effect+0x1c>
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	607b      	str	r3, [r7, #4]

	for (int hue = 0; hue < 360; hue += 36) {
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ba8:	e0d4      	b.n	8000d54 <Rainbow_Effect+0x1cc>
		int red, green, blue;

		for (int led_num = 0; led_num < MAX_LED; ++led_num) {
 8000baa:	2300      	movs	r3, #0
 8000bac:	617b      	str	r3, [r7, #20]
 8000bae:	e0af      	b.n	8000d10 <Rainbow_Effect+0x188>
			if (hue > 359) hue = 0;
 8000bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bb2:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8000bb6:	db01      	blt.n	8000bbc <Rainbow_Effect+0x34>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	627b      	str	r3, [r7, #36]	@ 0x24
			hue += led_num;
 8000bbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	627b      	str	r3, [r7, #36]	@ 0x24
			int sector = hue / 60;
 8000bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bc6:	4a68      	ldr	r2, [pc, #416]	@ (8000d68 <Rainbow_Effect+0x1e0>)
 8000bc8:	fb82 1203 	smull	r1, r2, r2, r3
 8000bcc:	441a      	add	r2, r3
 8000bce:	1152      	asrs	r2, r2, #5
 8000bd0:	17db      	asrs	r3, r3, #31
 8000bd2:	1ad3      	subs	r3, r2, r3
 8000bd4:	60fb      	str	r3, [r7, #12]
			int remainder = hue % 60;
 8000bd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bd8:	4b63      	ldr	r3, [pc, #396]	@ (8000d68 <Rainbow_Effect+0x1e0>)
 8000bda:	fb83 1302 	smull	r1, r3, r3, r2
 8000bde:	4413      	add	r3, r2
 8000be0:	1159      	asrs	r1, r3, #5
 8000be2:	17d3      	asrs	r3, r2, #31
 8000be4:	1ac9      	subs	r1, r1, r3
 8000be6:	460b      	mov	r3, r1
 8000be8:	011b      	lsls	r3, r3, #4
 8000bea:	1a5b      	subs	r3, r3, r1
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	1ad3      	subs	r3, r2, r3
 8000bf0:	60bb      	str	r3, [r7, #8]

			switch(sector) {
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	2b05      	cmp	r3, #5
 8000bf6:	d878      	bhi.n	8000cea <Rainbow_Effect+0x162>
 8000bf8:	a201      	add	r2, pc, #4	@ (adr r2, 8000c00 <Rainbow_Effect+0x78>)
 8000bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bfe:	bf00      	nop
 8000c00:	08000c19 	.word	0x08000c19
 8000c04:	08000c3b 	.word	0x08000c3b
 8000c08:	08000c5f 	.word	0x08000c5f
 8000c0c:	08000c81 	.word	0x08000c81
 8000c10:	08000ca5 	.word	0x08000ca5
 8000c14:	08000cc7 	.word	0x08000cc7
				case 0: red = 255; green = (remainder * 255) / 60; blue = 0; break;
 8000c18:	23ff      	movs	r3, #255	@ 0xff
 8000c1a:	623b      	str	r3, [r7, #32]
 8000c1c:	68ba      	ldr	r2, [r7, #8]
 8000c1e:	4613      	mov	r3, r2
 8000c20:	021b      	lsls	r3, r3, #8
 8000c22:	1a9b      	subs	r3, r3, r2
 8000c24:	4a50      	ldr	r2, [pc, #320]	@ (8000d68 <Rainbow_Effect+0x1e0>)
 8000c26:	fb82 1203 	smull	r1, r2, r2, r3
 8000c2a:	441a      	add	r2, r3
 8000c2c:	1152      	asrs	r2, r2, #5
 8000c2e:	17db      	asrs	r3, r3, #31
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	61fb      	str	r3, [r7, #28]
 8000c34:	2300      	movs	r3, #0
 8000c36:	61bb      	str	r3, [r7, #24]
 8000c38:	e05e      	b.n	8000cf8 <Rainbow_Effect+0x170>
				case 1: red = 255 - ((remainder * 255) / 60); green = 255; blue = 0; break;
 8000c3a:	68ba      	ldr	r2, [r7, #8]
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	021b      	lsls	r3, r3, #8
 8000c40:	1a9b      	subs	r3, r3, r2
 8000c42:	4a49      	ldr	r2, [pc, #292]	@ (8000d68 <Rainbow_Effect+0x1e0>)
 8000c44:	fb82 1203 	smull	r1, r2, r2, r3
 8000c48:	441a      	add	r2, r3
 8000c4a:	1152      	asrs	r2, r2, #5
 8000c4c:	17db      	asrs	r3, r3, #31
 8000c4e:	1a9b      	subs	r3, r3, r2
 8000c50:	33ff      	adds	r3, #255	@ 0xff
 8000c52:	623b      	str	r3, [r7, #32]
 8000c54:	23ff      	movs	r3, #255	@ 0xff
 8000c56:	61fb      	str	r3, [r7, #28]
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61bb      	str	r3, [r7, #24]
 8000c5c:	e04c      	b.n	8000cf8 <Rainbow_Effect+0x170>
				case 2: red = 0; green = 255; blue = (remainder * 255) / 60; break;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	623b      	str	r3, [r7, #32]
 8000c62:	23ff      	movs	r3, #255	@ 0xff
 8000c64:	61fb      	str	r3, [r7, #28]
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	021b      	lsls	r3, r3, #8
 8000c6c:	1a9b      	subs	r3, r3, r2
 8000c6e:	4a3e      	ldr	r2, [pc, #248]	@ (8000d68 <Rainbow_Effect+0x1e0>)
 8000c70:	fb82 1203 	smull	r1, r2, r2, r3
 8000c74:	441a      	add	r2, r3
 8000c76:	1152      	asrs	r2, r2, #5
 8000c78:	17db      	asrs	r3, r3, #31
 8000c7a:	1ad3      	subs	r3, r2, r3
 8000c7c:	61bb      	str	r3, [r7, #24]
 8000c7e:	e03b      	b.n	8000cf8 <Rainbow_Effect+0x170>
				case 3: red = 0; green = 255 - ((remainder * 255) / 60); blue = 255; break;
 8000c80:	2300      	movs	r3, #0
 8000c82:	623b      	str	r3, [r7, #32]
 8000c84:	68ba      	ldr	r2, [r7, #8]
 8000c86:	4613      	mov	r3, r2
 8000c88:	021b      	lsls	r3, r3, #8
 8000c8a:	1a9b      	subs	r3, r3, r2
 8000c8c:	4a36      	ldr	r2, [pc, #216]	@ (8000d68 <Rainbow_Effect+0x1e0>)
 8000c8e:	fb82 1203 	smull	r1, r2, r2, r3
 8000c92:	441a      	add	r2, r3
 8000c94:	1152      	asrs	r2, r2, #5
 8000c96:	17db      	asrs	r3, r3, #31
 8000c98:	1a9b      	subs	r3, r3, r2
 8000c9a:	33ff      	adds	r3, #255	@ 0xff
 8000c9c:	61fb      	str	r3, [r7, #28]
 8000c9e:	23ff      	movs	r3, #255	@ 0xff
 8000ca0:	61bb      	str	r3, [r7, #24]
 8000ca2:	e029      	b.n	8000cf8 <Rainbow_Effect+0x170>
				case 4: red = (remainder * 255) / 60; green = 0; blue = 255; break;
 8000ca4:	68ba      	ldr	r2, [r7, #8]
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	021b      	lsls	r3, r3, #8
 8000caa:	1a9b      	subs	r3, r3, r2
 8000cac:	4a2e      	ldr	r2, [pc, #184]	@ (8000d68 <Rainbow_Effect+0x1e0>)
 8000cae:	fb82 1203 	smull	r1, r2, r2, r3
 8000cb2:	441a      	add	r2, r3
 8000cb4:	1152      	asrs	r2, r2, #5
 8000cb6:	17db      	asrs	r3, r3, #31
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	623b      	str	r3, [r7, #32]
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	61fb      	str	r3, [r7, #28]
 8000cc0:	23ff      	movs	r3, #255	@ 0xff
 8000cc2:	61bb      	str	r3, [r7, #24]
 8000cc4:	e018      	b.n	8000cf8 <Rainbow_Effect+0x170>
				case 5: red = 255; green = 0; blue = 255 - ((remainder * 255) / 60); break;
 8000cc6:	23ff      	movs	r3, #255	@ 0xff
 8000cc8:	623b      	str	r3, [r7, #32]
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61fb      	str	r3, [r7, #28]
 8000cce:	68ba      	ldr	r2, [r7, #8]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	021b      	lsls	r3, r3, #8
 8000cd4:	1a9b      	subs	r3, r3, r2
 8000cd6:	4a24      	ldr	r2, [pc, #144]	@ (8000d68 <Rainbow_Effect+0x1e0>)
 8000cd8:	fb82 1203 	smull	r1, r2, r2, r3
 8000cdc:	441a      	add	r2, r3
 8000cde:	1152      	asrs	r2, r2, #5
 8000ce0:	17db      	asrs	r3, r3, #31
 8000ce2:	1a9b      	subs	r3, r3, r2
 8000ce4:	33ff      	adds	r3, #255	@ 0xff
 8000ce6:	61bb      	str	r3, [r7, #24]
 8000ce8:	e006      	b.n	8000cf8 <Rainbow_Effect+0x170>
				default: red = 255; green = 0; blue = 0; break;
 8000cea:	23ff      	movs	r3, #255	@ 0xff
 8000cec:	623b      	str	r3, [r7, #32]
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61fb      	str	r3, [r7, #28]
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61bb      	str	r3, [r7, #24]
 8000cf6:	bf00      	nop
			}

			//Set_All_LEDs_Same_Color(red, green, blue);

			Set_LED(led_num, red, green, blue);
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	69fa      	ldr	r2, [r7, #28]
 8000cfc:	6a39      	ldr	r1, [r7, #32]
 8000cfe:	6978      	ldr	r0, [r7, #20]
 8000d00:	f7ff fe28 	bl	8000954 <Set_LED>
			HAL_Delay(1);
 8000d04:	2001      	movs	r0, #1
 8000d06:	f000 fdc3 	bl	8001890 <HAL_Delay>
		for (int led_num = 0; led_num < MAX_LED; ++led_num) {
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	2b3b      	cmp	r3, #59	@ 0x3b
 8000d14:	f77f af4c 	ble.w	8000bb0 <Rainbow_Effect+0x28>
		}

		Set_Brightness(current_brightness);
 8000d18:	4b14      	ldr	r3, [pc, #80]	@ (8000d6c <Rainbow_Effect+0x1e4>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff fe5f 	bl	80009e0 <Set_Brightness>
		WS2812_Send();
 8000d22:	f7ff feab 	bl	8000a7c <WS2812_Send>
		HAL_Delay(LED_DELAY/speed);
 8000d26:	220a      	movs	r2, #10
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 fdae 	bl	8001890 <HAL_Delay>
		
		// Check keypad during rainbow effect
		char key_rainbow = Keypad_Read();
 8000d34:	f7ff fcb6 	bl	80006a4 <Keypad_Read>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	74fb      	strb	r3, [r7, #19]
		if(key_rainbow != 0) {
 8000d3c:	7cfb      	ldrb	r3, [r7, #19]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d005      	beq.n	8000d4e <Rainbow_Effect+0x1c6>
			Process_Keypad_Input(key_rainbow);
 8000d42:	7cfb      	ldrb	r3, [r7, #19]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fd27 	bl	8000798 <Process_Keypad_Input>
			Update_LCD_Display();
 8000d4a:	f7ff fc4d 	bl	80005e8 <Update_LCD_Display>
	for (int hue = 0; hue < 360; hue += 36) {
 8000d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d50:	3324      	adds	r3, #36	@ 0x24
 8000d52:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d56:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8000d5a:	f6ff af26 	blt.w	8000baa <Rainbow_Effect+0x22>
		}
	}
}
 8000d5e:	bf00      	nop
 8000d60:	bf00      	nop
 8000d62:	3728      	adds	r7, #40	@ 0x28
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	88888889 	.word	0x88888889
 8000d6c:	20000080 	.word	0x20000080

08000d70 <Pixel_Run_Effect>:

void Pixel_Run_Effect (int speed, int red, int green, int blue) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
 8000d7c:	603b      	str	r3, [r7, #0]
	if (speed > 10) speed = 10;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	2b0a      	cmp	r3, #10
 8000d82:	dd01      	ble.n	8000d88 <Pixel_Run_Effect+0x18>
 8000d84:	230a      	movs	r3, #10
 8000d86:	60fb      	str	r3, [r7, #12]
	if (speed < 1)	speed = 1;
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	dc01      	bgt.n	8000d92 <Pixel_Run_Effect+0x22>
 8000d8e:	2301      	movs	r3, #1
 8000d90:	60fb      	str	r3, [r7, #12]

	Set_LED(MAX_LED-1, 0, 0 , 0);
 8000d92:	2300      	movs	r3, #0
 8000d94:	2200      	movs	r2, #0
 8000d96:	2100      	movs	r1, #0
 8000d98:	203b      	movs	r0, #59	@ 0x3b
 8000d9a:	f7ff fddb 	bl	8000954 <Set_LED>
	for (int i = 1; i < MAX_LED; ++i) {
 8000d9e:	2301      	movs	r3, #1
 8000da0:	617b      	str	r3, [r7, #20]
 8000da2:	e02a      	b.n	8000dfa <Pixel_Run_Effect+0x8a>
		Set_LED(i, red, green, blue);
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	68b9      	ldr	r1, [r7, #8]
 8000daa:	6978      	ldr	r0, [r7, #20]
 8000dac:	f7ff fdd2 	bl	8000954 <Set_LED>
		Set_LED(i-1, 0, 0 , 0);
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	1e58      	subs	r0, r3, #1
 8000db4:	2300      	movs	r3, #0
 8000db6:	2200      	movs	r2, #0
 8000db8:	2100      	movs	r1, #0
 8000dba:	f7ff fdcb 	bl	8000954 <Set_LED>
		Set_Brightness(current_brightness);
 8000dbe:	4b13      	ldr	r3, [pc, #76]	@ (8000e0c <Pixel_Run_Effect+0x9c>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff fe0c 	bl	80009e0 <Set_Brightness>
		WS2812_Send();
 8000dc8:	f7ff fe58 	bl	8000a7c <WS2812_Send>
		HAL_Delay((LED_DELAY*3)/speed);
 8000dcc:	221e      	movs	r2, #30
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	fb92 f3f3 	sdiv	r3, r2, r3
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f000 fd5b 	bl	8001890 <HAL_Delay>
		
		// Check keypad during run effect
		char key_run = Keypad_Read();
 8000dda:	f7ff fc63 	bl	80006a4 <Keypad_Read>
 8000dde:	4603      	mov	r3, r0
 8000de0:	74fb      	strb	r3, [r7, #19]
		if(key_run != 0) {
 8000de2:	7cfb      	ldrb	r3, [r7, #19]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d005      	beq.n	8000df4 <Pixel_Run_Effect+0x84>
			Process_Keypad_Input(key_run);
 8000de8:	7cfb      	ldrb	r3, [r7, #19]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff fcd4 	bl	8000798 <Process_Keypad_Input>
			Update_LCD_Display();
 8000df0:	f7ff fbfa 	bl	80005e8 <Update_LCD_Display>
	for (int i = 1; i < MAX_LED; ++i) {
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	3301      	adds	r3, #1
 8000df8:	617b      	str	r3, [r7, #20]
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	2b3b      	cmp	r3, #59	@ 0x3b
 8000dfe:	ddd1      	ble.n	8000da4 <Pixel_Run_Effect+0x34>
		}
	}
}
 8000e00:	bf00      	nop
 8000e02:	bf00      	nop
 8000e04:	3718      	adds	r7, #24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000080 	.word	0x20000080

08000e10 <All_LEDs_Off>:
    LCD_Parallel_Print("LCD Working!");
    HAL_Delay(2000);
}

// All LEDs off (effect OFF)
void All_LEDs_Off(void) {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
    for(int i = 0; i < MAX_LED; i++) {
 8000e16:	2300      	movs	r3, #0
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	e008      	b.n	8000e2e <All_LEDs_Off+0x1e>
        Set_LED(i, 0, 0, 0);
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2100      	movs	r1, #0
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f7ff fd96 	bl	8000954 <Set_LED>
    for(int i = 0; i < MAX_LED; i++) {
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	607b      	str	r3, [r7, #4]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2b3b      	cmp	r3, #59	@ 0x3b
 8000e32:	ddf3      	ble.n	8000e1c <All_LEDs_Off+0xc>
    }
    WS2812_Send();
 8000e34:	f7ff fe22 	bl	8000a7c <WS2812_Send>
}
 8000e38:	bf00      	nop
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <Read_Sound_Detection>:

// Read sound detection from GYMAX4466
uint8_t Read_Sound_Detection(void) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(MUSIC_OUT_PORT, MUSIC_OUT_PIN);
 8000e44:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e48:	4802      	ldr	r0, [pc, #8]	@ (8000e54 <Read_Sound_Detection+0x14>)
 8000e4a:	f001 fa3d 	bl	80022c8 <HAL_GPIO_ReadPin>
 8000e4e:	4603      	mov	r3, r0
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40011000 	.word	0x40011000

08000e58 <Music_Effect>:

// Music-reactive LED effect - Beat Detection Style
void Music_Effect(void) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b088      	sub	sp, #32
 8000e5c:	af00      	add	r7, sp, #0
    uint8_t sound_detected = Read_Sound_Detection();
 8000e5e:	f7ff ffef 	bl	8000e40 <Read_Sound_Detection>
 8000e62:	4603      	mov	r3, r0
 8000e64:	75fb      	strb	r3, [r7, #23]
    uint32_t current_time = HAL_GetTick();
 8000e66:	f000 fd09 	bl	800187c <HAL_GetTick>
 8000e6a:	6138      	str	r0, [r7, #16]
    
    if(sound_detected) {
 8000e6c:	7dfb      	ldrb	r3, [r7, #23]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d024      	beq.n	8000ebc <Music_Effect+0x64>
        sound_active = 1;
 8000e72:	4b24      	ldr	r3, [pc, #144]	@ (8000f04 <Music_Effect+0xac>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	701a      	strb	r2, [r3, #0]
        last_sound_time = current_time;
 8000e78:	4a23      	ldr	r2, [pc, #140]	@ (8000f08 <Music_Effect+0xb0>)
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	6013      	str	r3, [r2, #0]
        
        // Random color khi có beat
        int red = (current_time % 256);
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	60fb      	str	r3, [r7, #12]
        int green = ((current_time * 3) % 256);
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	4613      	mov	r3, r2
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	4413      	add	r3, r2
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	60bb      	str	r3, [r7, #8]
        int blue = ((current_time * 7) % 256);
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	4613      	mov	r3, r2
 8000e94:	00db      	lsls	r3, r3, #3
 8000e96:	1a9b      	subs	r3, r3, r2
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	607b      	str	r3, [r7, #4]
        
        // Hiệu ứng flash toàn bộ strip
        for(int i = 0; i < MAX_LED; i++) {
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61fb      	str	r3, [r7, #28]
 8000ea0:	e008      	b.n	8000eb4 <Music_Effect+0x5c>
            Set_LED(i, red, green, blue);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	68ba      	ldr	r2, [r7, #8]
 8000ea6:	68f9      	ldr	r1, [r7, #12]
 8000ea8:	69f8      	ldr	r0, [r7, #28]
 8000eaa:	f7ff fd53 	bl	8000954 <Set_LED>
        for(int i = 0; i < MAX_LED; i++) {
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	61fb      	str	r3, [r7, #28]
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	2b3b      	cmp	r3, #59	@ 0x3b
 8000eb8:	ddf3      	ble.n	8000ea2 <Music_Effect+0x4a>
 8000eba:	e017      	b.n	8000eec <Music_Effect+0x94>
        }
    } else {
        // Fade out nếu không còn âm thanh
        if(current_time - last_sound_time > SOUND_TIMEOUT) {
 8000ebc:	4b12      	ldr	r3, [pc, #72]	@ (8000f08 <Music_Effect+0xb0>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	2bc8      	cmp	r3, #200	@ 0xc8
 8000ec6:	d911      	bls.n	8000eec <Music_Effect+0x94>
            sound_active = 0;
 8000ec8:	4b0e      	ldr	r3, [pc, #56]	@ (8000f04 <Music_Effect+0xac>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < MAX_LED; i++) {
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61bb      	str	r3, [r7, #24]
 8000ed2:	e008      	b.n	8000ee6 <Music_Effect+0x8e>
                Set_LED(i, 0, 0, 0);
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2100      	movs	r1, #0
 8000eda:	69b8      	ldr	r0, [r7, #24]
 8000edc:	f7ff fd3a 	bl	8000954 <Set_LED>
            for(int i = 0; i < MAX_LED; i++) {
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	61bb      	str	r3, [r7, #24]
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	2b3b      	cmp	r3, #59	@ 0x3b
 8000eea:	ddf3      	ble.n	8000ed4 <Music_Effect+0x7c>
            }
        }
    }
    
    Set_Brightness(current_brightness);
 8000eec:	4b07      	ldr	r3, [pc, #28]	@ (8000f0c <Music_Effect+0xb4>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff fd75 	bl	80009e0 <Set_Brightness>
    WS2812_Send();
 8000ef6:	f7ff fdc1 	bl	8000a7c <WS2812_Send>
}
 8000efa:	bf00      	nop
 8000efc:	3720      	adds	r7, #32
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000108 	.word	0x20000108
 8000f08:	20000104 	.word	0x20000104
 8000f0c:	20000080 	.word	0x20000080

08000f10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f10:	b5b0      	push	{r4, r5, r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f16:	f000 fc59 	bl	80017cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f1a:	f000 f9ad 	bl	8001278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f1e:	f000 faaf 	bl	8001480 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f22:	f000 fa8f 	bl	8001444 <MX_DMA_Init>
  MX_TIM1_Init();
 8000f26:	f000 f9ed 	bl	8001304 <MX_TIM1_Init>
  
  /* USER CODE BEGIN 2 */
  
  // Initialize keypad
  Keypad_Init();
 8000f2a:	f7ff faf1 	bl	8000510 <Keypad_Init>
  
  // Initialize LCD Parallel
  LCD_Parallel_Init();
 8000f2e:	f7ff f915 	bl	800015c <LCD_Parallel_Init>
  LCD_Parallel_Clear();
 8000f32:	f7ff f997 	bl	8000264 <LCD_Parallel_Clear>
  LCD_Parallel_DisplayEffect("LED Control");
 8000f36:	48b0      	ldr	r0, [pc, #704]	@ (80011f8 <main+0x2e8>)
 8000f38:	f7ff fa7e 	bl	8000438 <LCD_Parallel_DisplayEffect>
  HAL_Delay(2000);  // Show welcome message for 2 seconds
 8000f3c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f40:	f000 fca6 	bl	8001890 <HAL_Delay>
  
  // Turn off all LEDs initially
  Set_All_LEDs_Same_Color(0, 0, 0);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2100      	movs	r1, #0
 8000f48:	2000      	movs	r0, #0
 8000f4a:	f7ff fd2f 	bl	80009ac <Set_All_LEDs_Same_Color>
  Set_Brightness(0);
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f7ff fd46 	bl	80009e0 <Set_Brightness>
  WS2812_Send();
 8000f54:	f7ff fd92 	bl	8000a7c <WS2812_Send>
  
  // Update LCD with initial status
  Update_LCD_Display();
 8000f58:	f7ff fb46 	bl	80005e8 <Update_LCD_Display>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // Check for keypad input
    char key = Keypad_Read();
 8000f5c:	f7ff fba2 	bl	80006a4 <Keypad_Read>
 8000f60:	4603      	mov	r3, r0
 8000f62:	71fb      	strb	r3, [r7, #7]
    if(key != 0) {
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d00a      	beq.n	8000f80 <main+0x70>
        Process_Keypad_Input(key);
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fc13 	bl	8000798 <Process_Keypad_Input>
        // Update LCD immediately when key is pressed
        Update_LCD_Display();
 8000f72:	f7ff fb39 	bl	80005e8 <Update_LCD_Display>
        last_lcd_update = HAL_GetTick();
 8000f76:	f000 fc81 	bl	800187c <HAL_GetTick>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	4a9f      	ldr	r2, [pc, #636]	@ (80011fc <main+0x2ec>)
 8000f7e:	6013      	str	r3, [r2, #0]
    }
    
    // Update LCD display periodically (independent of LED effects)
    if(HAL_GetTick() - last_lcd_update > LCD_UPDATE_INTERVAL) {
 8000f80:	f000 fc7c 	bl	800187c <HAL_GetTick>
 8000f84:	4602      	mov	r2, r0
 8000f86:	4b9d      	ldr	r3, [pc, #628]	@ (80011fc <main+0x2ec>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000f90:	d906      	bls.n	8000fa0 <main+0x90>
        Update_LCD_Display();
 8000f92:	f7ff fb29 	bl	80005e8 <Update_LCD_Display>
        last_lcd_update = HAL_GetTick();
 8000f96:	f000 fc71 	bl	800187c <HAL_GetTick>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	4a97      	ldr	r2, [pc, #604]	@ (80011fc <main+0x2ec>)
 8000f9e:	6013      	str	r3, [r2, #0]
    }
    
    // Run current effect based on state
    switch(current_effect) {
 8000fa0:	4b97      	ldr	r3, [pc, #604]	@ (8001200 <main+0x2f0>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2b05      	cmp	r3, #5
 8000fa6:	f200 8157 	bhi.w	8001258 <main+0x348>
 8000faa:	a201      	add	r2, pc, #4	@ (adr r2, 8000fb0 <main+0xa0>)
 8000fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fb0:	08000fc9 	.word	0x08000fc9
 8000fb4:	080010b1 	.word	0x080010b1
 8000fb8:	080010bd 	.word	0x080010bd
 8000fbc:	08001103 	.word	0x08001103
 8000fc0:	080011c9 	.word	0x080011c9
 8000fc4:	08001215 	.word	0x08001215
        case EFFECT_FADE:
            Set_All_LEDs_Same_Color(color_values[current_color][0], 
 8000fc8:	4b8e      	ldr	r3, [pc, #568]	@ (8001204 <main+0x2f4>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	498e      	ldr	r1, [pc, #568]	@ (8001208 <main+0x2f8>)
 8000fce:	4613      	mov	r3, r2
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	4413      	add	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	440b      	add	r3, r1
 8000fd8:	6818      	ldr	r0, [r3, #0]
 8000fda:	4b8a      	ldr	r3, [pc, #552]	@ (8001204 <main+0x2f4>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	498a      	ldr	r1, [pc, #552]	@ (8001208 <main+0x2f8>)
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	4413      	add	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	440b      	add	r3, r1
 8000fea:	3304      	adds	r3, #4
 8000fec:	6819      	ldr	r1, [r3, #0]
 8000fee:	4b85      	ldr	r3, [pc, #532]	@ (8001204 <main+0x2f4>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	4c85      	ldr	r4, [pc, #532]	@ (8001208 <main+0x2f8>)
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	4413      	add	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4423      	add	r3, r4
 8000ffe:	3308      	adds	r3, #8
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	461a      	mov	r2, r3
 8001004:	f7ff fcd2 	bl	80009ac <Set_All_LEDs_Same_Color>
                                  color_values[current_color][1], 
                                  color_values[current_color][2]);
            // Apply fade with current brightness
            for (int brightness = 0; brightness <= current_brightness; brightness += 2) {
 8001008:	2300      	movs	r3, #0
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	e021      	b.n	8001052 <main+0x142>
                Set_Brightness(brightness);
 800100e:	68f8      	ldr	r0, [r7, #12]
 8001010:	f7ff fce6 	bl	80009e0 <Set_Brightness>
                WS2812_Send();
 8001014:	f7ff fd32 	bl	8000a7c <WS2812_Send>
                HAL_Delay((LED_DELAY * 5) / current_speed);
 8001018:	4b7c      	ldr	r3, [pc, #496]	@ (800120c <main+0x2fc>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2232      	movs	r2, #50	@ 0x32
 800101e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001022:	4618      	mov	r0, r3
 8001024:	f000 fc34 	bl	8001890 <HAL_Delay>
                
                // Check keypad during effect
                char key_during_effect = Keypad_Read();
 8001028:	f7ff fb3c 	bl	80006a4 <Keypad_Read>
 800102c:	4603      	mov	r3, r0
 800102e:	707b      	strb	r3, [r7, #1]
                if(key_during_effect != 0) {
 8001030:	787b      	ldrb	r3, [r7, #1]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d00a      	beq.n	800104c <main+0x13c>
                    Process_Keypad_Input(key_during_effect);
 8001036:	787b      	ldrb	r3, [r7, #1]
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff fbad 	bl	8000798 <Process_Keypad_Input>
                    Update_LCD_Display();
 800103e:	f7ff fad3 	bl	80005e8 <Update_LCD_Display>
                    last_lcd_update = HAL_GetTick();
 8001042:	f000 fc1b 	bl	800187c <HAL_GetTick>
 8001046:	4603      	mov	r3, r0
 8001048:	4a6c      	ldr	r2, [pc, #432]	@ (80011fc <main+0x2ec>)
 800104a:	6013      	str	r3, [r2, #0]
            for (int brightness = 0; brightness <= current_brightness; brightness += 2) {
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	3302      	adds	r3, #2
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	4b6f      	ldr	r3, [pc, #444]	@ (8001210 <main+0x300>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	429a      	cmp	r2, r3
 800105a:	ddd8      	ble.n	800100e <main+0xfe>
                }
            }
            for (int brightness = current_brightness; brightness >= 0; brightness -= 2) {
 800105c:	4b6c      	ldr	r3, [pc, #432]	@ (8001210 <main+0x300>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	e021      	b.n	80010a8 <main+0x198>
                Set_Brightness(brightness);
 8001064:	68b8      	ldr	r0, [r7, #8]
 8001066:	f7ff fcbb 	bl	80009e0 <Set_Brightness>
                WS2812_Send();
 800106a:	f7ff fd07 	bl	8000a7c <WS2812_Send>
                HAL_Delay((LED_DELAY * 5) / current_speed);
 800106e:	4b67      	ldr	r3, [pc, #412]	@ (800120c <main+0x2fc>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2232      	movs	r2, #50	@ 0x32
 8001074:	fb92 f3f3 	sdiv	r3, r2, r3
 8001078:	4618      	mov	r0, r3
 800107a:	f000 fc09 	bl	8001890 <HAL_Delay>
                
                // Check keypad during effect
                char key_during_effect = Keypad_Read();
 800107e:	f7ff fb11 	bl	80006a4 <Keypad_Read>
 8001082:	4603      	mov	r3, r0
 8001084:	70bb      	strb	r3, [r7, #2]
                if(key_during_effect != 0) {
 8001086:	78bb      	ldrb	r3, [r7, #2]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d00a      	beq.n	80010a2 <main+0x192>
                    Process_Keypad_Input(key_during_effect);
 800108c:	78bb      	ldrb	r3, [r7, #2]
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff fb82 	bl	8000798 <Process_Keypad_Input>
                    Update_LCD_Display();
 8001094:	f7ff faa8 	bl	80005e8 <Update_LCD_Display>
                    last_lcd_update = HAL_GetTick();
 8001098:	f000 fbf0 	bl	800187c <HAL_GetTick>
 800109c:	4603      	mov	r3, r0
 800109e:	4a57      	ldr	r2, [pc, #348]	@ (80011fc <main+0x2ec>)
 80010a0:	6013      	str	r3, [r2, #0]
            for (int brightness = current_brightness; brightness >= 0; brightness -= 2) {
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	3b02      	subs	r3, #2
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	dada      	bge.n	8001064 <main+0x154>
                }
            }
            break;
 80010ae:	e0de      	b.n	800126e <main+0x35e>
            
        case EFFECT_RAINBOW:
            Rainbow_Effect(current_speed);
 80010b0:	4b56      	ldr	r3, [pc, #344]	@ (800120c <main+0x2fc>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff fd67 	bl	8000b88 <Rainbow_Effect>
            // Rainbow effect handles its own brightness, but we can limit it
            break;
 80010ba:	e0d8      	b.n	800126e <main+0x35e>
            
        case EFFECT_RUN:
            Pixel_Run_Effect(current_speed, color_values[current_color][0], 
 80010bc:	4b53      	ldr	r3, [pc, #332]	@ (800120c <main+0x2fc>)
 80010be:	6818      	ldr	r0, [r3, #0]
 80010c0:	4b50      	ldr	r3, [pc, #320]	@ (8001204 <main+0x2f4>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	4950      	ldr	r1, [pc, #320]	@ (8001208 <main+0x2f8>)
 80010c6:	4613      	mov	r3, r2
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	4413      	add	r3, r2
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	440b      	add	r3, r1
 80010d0:	6819      	ldr	r1, [r3, #0]
 80010d2:	4b4c      	ldr	r3, [pc, #304]	@ (8001204 <main+0x2f4>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	4c4c      	ldr	r4, [pc, #304]	@ (8001208 <main+0x2f8>)
 80010d8:	4613      	mov	r3, r2
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	4413      	add	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	4423      	add	r3, r4
 80010e2:	3304      	adds	r3, #4
 80010e4:	681c      	ldr	r4, [r3, #0]
 80010e6:	4b47      	ldr	r3, [pc, #284]	@ (8001204 <main+0x2f4>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	4d47      	ldr	r5, [pc, #284]	@ (8001208 <main+0x2f8>)
 80010ec:	4613      	mov	r3, r2
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	4413      	add	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	442b      	add	r3, r5
 80010f6:	3308      	adds	r3, #8
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4622      	mov	r2, r4
 80010fc:	f7ff fe38 	bl	8000d70 <Pixel_Run_Effect>
                           color_values[current_color][1], 
                           color_values[current_color][2]);
            break;
 8001100:	e0b5      	b.n	800126e <main+0x35e>
            
        case EFFECT_FLASHING:
            Set_All_LEDs_Same_Color(color_values[current_color][0], 
 8001102:	4b40      	ldr	r3, [pc, #256]	@ (8001204 <main+0x2f4>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	4940      	ldr	r1, [pc, #256]	@ (8001208 <main+0x2f8>)
 8001108:	4613      	mov	r3, r2
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	4413      	add	r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	440b      	add	r3, r1
 8001112:	6818      	ldr	r0, [r3, #0]
 8001114:	4b3b      	ldr	r3, [pc, #236]	@ (8001204 <main+0x2f4>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	493b      	ldr	r1, [pc, #236]	@ (8001208 <main+0x2f8>)
 800111a:	4613      	mov	r3, r2
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	4413      	add	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	440b      	add	r3, r1
 8001124:	3304      	adds	r3, #4
 8001126:	6819      	ldr	r1, [r3, #0]
 8001128:	4b36      	ldr	r3, [pc, #216]	@ (8001204 <main+0x2f4>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4c36      	ldr	r4, [pc, #216]	@ (8001208 <main+0x2f8>)
 800112e:	4613      	mov	r3, r2
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	4413      	add	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4423      	add	r3, r4
 8001138:	3308      	adds	r3, #8
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	461a      	mov	r2, r3
 800113e:	f7ff fc35 	bl	80009ac <Set_All_LEDs_Same_Color>
                                  color_values[current_color][1], 
                                  color_values[current_color][2]);
            Set_Brightness(current_brightness);
 8001142:	4b33      	ldr	r3, [pc, #204]	@ (8001210 <main+0x300>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff fc4a 	bl	80009e0 <Set_Brightness>
            WS2812_Send();
 800114c:	f7ff fc96 	bl	8000a7c <WS2812_Send>
            HAL_Delay((LED_DELAY * 30) / current_speed);
 8001150:	4b2e      	ldr	r3, [pc, #184]	@ (800120c <main+0x2fc>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001158:	fb92 f3f3 	sdiv	r3, r2, r3
 800115c:	4618      	mov	r0, r3
 800115e:	f000 fb97 	bl	8001890 <HAL_Delay>
            
            // Check keypad during flash ON
            char key_flash_on = Keypad_Read();
 8001162:	f7ff fa9f 	bl	80006a4 <Keypad_Read>
 8001166:	4603      	mov	r3, r0
 8001168:	713b      	strb	r3, [r7, #4]
            if(key_flash_on != 0) {
 800116a:	793b      	ldrb	r3, [r7, #4]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d00a      	beq.n	8001186 <main+0x276>
                Process_Keypad_Input(key_flash_on);
 8001170:	793b      	ldrb	r3, [r7, #4]
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff fb10 	bl	8000798 <Process_Keypad_Input>
                Update_LCD_Display();
 8001178:	f7ff fa36 	bl	80005e8 <Update_LCD_Display>
                last_lcd_update = HAL_GetTick();
 800117c:	f000 fb7e 	bl	800187c <HAL_GetTick>
 8001180:	4603      	mov	r3, r0
 8001182:	4a1e      	ldr	r2, [pc, #120]	@ (80011fc <main+0x2ec>)
 8001184:	6013      	str	r3, [r2, #0]
            }
            
            Set_Brightness(0);
 8001186:	2000      	movs	r0, #0
 8001188:	f7ff fc2a 	bl	80009e0 <Set_Brightness>
            WS2812_Send();
 800118c:	f7ff fc76 	bl	8000a7c <WS2812_Send>
            HAL_Delay((LED_DELAY * 30) / current_speed);
 8001190:	4b1e      	ldr	r3, [pc, #120]	@ (800120c <main+0x2fc>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001198:	fb92 f3f3 	sdiv	r3, r2, r3
 800119c:	4618      	mov	r0, r3
 800119e:	f000 fb77 	bl	8001890 <HAL_Delay>
            
            // Check keypad during flash OFF
            char key_flash_off = Keypad_Read();
 80011a2:	f7ff fa7f 	bl	80006a4 <Keypad_Read>
 80011a6:	4603      	mov	r3, r0
 80011a8:	70fb      	strb	r3, [r7, #3]
            if(key_flash_off != 0) {
 80011aa:	78fb      	ldrb	r3, [r7, #3]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d059      	beq.n	8001264 <main+0x354>
                Process_Keypad_Input(key_flash_off);
 80011b0:	78fb      	ldrb	r3, [r7, #3]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff faf0 	bl	8000798 <Process_Keypad_Input>
                Update_LCD_Display();
 80011b8:	f7ff fa16 	bl	80005e8 <Update_LCD_Display>
                last_lcd_update = HAL_GetTick();
 80011bc:	f000 fb5e 	bl	800187c <HAL_GetTick>
 80011c0:	4603      	mov	r3, r0
 80011c2:	4a0e      	ldr	r2, [pc, #56]	@ (80011fc <main+0x2ec>)
 80011c4:	6013      	str	r3, [r2, #0]
            }
            break;
 80011c6:	e04d      	b.n	8001264 <main+0x354>
            
        case EFFECT_OFF:
            All_LEDs_Off();
 80011c8:	f7ff fe22 	bl	8000e10 <All_LEDs_Off>
            HAL_Delay(100);
 80011cc:	2064      	movs	r0, #100	@ 0x64
 80011ce:	f000 fb5f 	bl	8001890 <HAL_Delay>
            
            // Check keypad when OFF
            char key_off = Keypad_Read();
 80011d2:	f7ff fa67 	bl	80006a4 <Keypad_Read>
 80011d6:	4603      	mov	r3, r0
 80011d8:	717b      	strb	r3, [r7, #5]
            if(key_off != 0) {
 80011da:	797b      	ldrb	r3, [r7, #5]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d043      	beq.n	8001268 <main+0x358>
                Process_Keypad_Input(key_off);
 80011e0:	797b      	ldrb	r3, [r7, #5]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff fad8 	bl	8000798 <Process_Keypad_Input>
                Update_LCD_Display();
 80011e8:	f7ff f9fe 	bl	80005e8 <Update_LCD_Display>
                last_lcd_update = HAL_GetTick();
 80011ec:	f000 fb46 	bl	800187c <HAL_GetTick>
 80011f0:	4603      	mov	r3, r0
 80011f2:	4a02      	ldr	r2, [pc, #8]	@ (80011fc <main+0x2ec>)
 80011f4:	6013      	str	r3, [r2, #0]
            }
            break;
 80011f6:	e037      	b.n	8001268 <main+0x358>
 80011f8:	080046e4 	.word	0x080046e4
 80011fc:	20000198 	.word	0x20000198
 8001200:	20000074 	.word	0x20000074
 8001204:	20000380 	.word	0x20000380
 8001208:	20000000 	.word	0x20000000
 800120c:	2000007c 	.word	0x2000007c
 8001210:	20000080 	.word	0x20000080
            
        case EFFECT_MUSIC:
            if(HAL_GetTick() - last_music_update > MUSIC_UPDATE_INTERVAL) {
 8001214:	f000 fb32 	bl	800187c <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	4b15      	ldr	r3, [pc, #84]	@ (8001270 <main+0x360>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	2b32      	cmp	r3, #50	@ 0x32
 8001222:	d906      	bls.n	8001232 <main+0x322>
                Music_Effect();         // Beat flash style
 8001224:	f7ff fe18 	bl	8000e58 <Music_Effect>
                // Music_VU_Effect();   // VU meter style (uncomment để dùng)
                last_music_update = HAL_GetTick();
 8001228:	f000 fb28 	bl	800187c <HAL_GetTick>
 800122c:	4603      	mov	r3, r0
 800122e:	4a10      	ldr	r2, [pc, #64]	@ (8001270 <main+0x360>)
 8001230:	6013      	str	r3, [r2, #0]
            }
            
            // Check keypad during music effect
            char key_music = Keypad_Read();
 8001232:	f7ff fa37 	bl	80006a4 <Keypad_Read>
 8001236:	4603      	mov	r3, r0
 8001238:	71bb      	strb	r3, [r7, #6]
            if(key_music != 0) {
 800123a:	79bb      	ldrb	r3, [r7, #6]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d015      	beq.n	800126c <main+0x35c>
                Process_Keypad_Input(key_music);
 8001240:	79bb      	ldrb	r3, [r7, #6]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff faa8 	bl	8000798 <Process_Keypad_Input>
                Update_LCD_Display();
 8001248:	f7ff f9ce 	bl	80005e8 <Update_LCD_Display>
                last_lcd_update = HAL_GetTick();
 800124c:	f000 fb16 	bl	800187c <HAL_GetTick>
 8001250:	4603      	mov	r3, r0
 8001252:	4a08      	ldr	r2, [pc, #32]	@ (8001274 <main+0x364>)
 8001254:	6013      	str	r3, [r2, #0]
            }
            break;
 8001256:	e009      	b.n	800126c <main+0x35c>
            
        default:
            All_LEDs_Off();
 8001258:	f7ff fdda 	bl	8000e10 <All_LEDs_Off>
            HAL_Delay(100);
 800125c:	2064      	movs	r0, #100	@ 0x64
 800125e:	f000 fb17 	bl	8001890 <HAL_Delay>
            break;
 8001262:	e004      	b.n	800126e <main+0x35e>
            break;
 8001264:	bf00      	nop
 8001266:	e679      	b.n	8000f5c <main+0x4c>
            break;
 8001268:	bf00      	nop
 800126a:	e677      	b.n	8000f5c <main+0x4c>
            break;
 800126c:	bf00      	nop
  {
 800126e:	e675      	b.n	8000f5c <main+0x4c>
 8001270:	20000100 	.word	0x20000100
 8001274:	20000198 	.word	0x20000198

08001278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b090      	sub	sp, #64	@ 0x40
 800127c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800127e:	f107 0318 	add.w	r3, r7, #24
 8001282:	2228      	movs	r2, #40	@ 0x28
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f002 fd3e 	bl	8003d08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800128c:	1d3b      	adds	r3, r7, #4
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
 8001298:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800129a:	2301      	movs	r3, #1
 800129c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800129e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012a4:	2300      	movs	r3, #0
 80012a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012a8:	2301      	movs	r3, #1
 80012aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ac:	2302      	movs	r3, #2
 80012ae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012b6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80012ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012bc:	f107 0318 	add.w	r3, r7, #24
 80012c0:	4618      	mov	r0, r3
 80012c2:	f001 f831 	bl	8002328 <HAL_RCC_OscConfig>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80012cc:	f000 f930 	bl	8001530 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012d0:	230f      	movs	r3, #15
 80012d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012d4:	2302      	movs	r3, #2
 80012d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d8:	2300      	movs	r3, #0
 80012da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012e2:	2300      	movs	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	2102      	movs	r1, #2
 80012ea:	4618      	mov	r0, r3
 80012ec:	f001 fa9e 	bl	800282c <HAL_RCC_ClockConfig>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80012f6:	f000 f91b 	bl	8001530 <Error_Handler>
  }
}
 80012fa:	bf00      	nop
 80012fc:	3740      	adds	r7, #64	@ 0x40
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
	...

08001304 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b096      	sub	sp, #88	@ 0x58
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001318:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001322:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
 8001330:	611a      	str	r2, [r3, #16]
 8001332:	615a      	str	r2, [r3, #20]
 8001334:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	2220      	movs	r2, #32
 800133a:	2100      	movs	r1, #0
 800133c:	4618      	mov	r0, r3
 800133e:	f002 fce3 	bl	8003d08 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001342:	4b3e      	ldr	r3, [pc, #248]	@ (800143c <MX_TIM1_Init+0x138>)
 8001344:	4a3e      	ldr	r2, [pc, #248]	@ (8001440 <MX_TIM1_Init+0x13c>)
 8001346:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001348:	4b3c      	ldr	r3, [pc, #240]	@ (800143c <MX_TIM1_Init+0x138>)
 800134a:	2200      	movs	r2, #0
 800134c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800134e:	4b3b      	ldr	r3, [pc, #236]	@ (800143c <MX_TIM1_Init+0x138>)
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 8001354:	4b39      	ldr	r3, [pc, #228]	@ (800143c <MX_TIM1_Init+0x138>)
 8001356:	2259      	movs	r2, #89	@ 0x59
 8001358:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800135a:	4b38      	ldr	r3, [pc, #224]	@ (800143c <MX_TIM1_Init+0x138>)
 800135c:	2200      	movs	r2, #0
 800135e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001360:	4b36      	ldr	r3, [pc, #216]	@ (800143c <MX_TIM1_Init+0x138>)
 8001362:	2200      	movs	r2, #0
 8001364:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001366:	4b35      	ldr	r3, [pc, #212]	@ (800143c <MX_TIM1_Init+0x138>)
 8001368:	2200      	movs	r2, #0
 800136a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800136c:	4833      	ldr	r0, [pc, #204]	@ (800143c <MX_TIM1_Init+0x138>)
 800136e:	f001 fbb9 	bl	8002ae4 <HAL_TIM_Base_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001378:	f000 f8da 	bl	8001530 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800137c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001380:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001382:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001386:	4619      	mov	r1, r3
 8001388:	482c      	ldr	r0, [pc, #176]	@ (800143c <MX_TIM1_Init+0x138>)
 800138a:	f001 ff7d 	bl	8003288 <HAL_TIM_ConfigClockSource>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001394:	f000 f8cc 	bl	8001530 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001398:	4828      	ldr	r0, [pc, #160]	@ (800143c <MX_TIM1_Init+0x138>)
 800139a:	f001 fbf2 	bl	8002b82 <HAL_TIM_PWM_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80013a4:	f000 f8c4 	bl	8001530 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a8:	2300      	movs	r3, #0
 80013aa:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ac:	2300      	movs	r3, #0
 80013ae:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013b0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80013b4:	4619      	mov	r1, r3
 80013b6:	4821      	ldr	r0, [pc, #132]	@ (800143c <MX_TIM1_Init+0x138>)
 80013b8:	f002 fbc0 	bl	8003b3c <HAL_TIMEx_MasterConfigSynchronization>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80013c2:	f000 f8b5 	bl	8001530 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013c6:	2360      	movs	r3, #96	@ 0x60
 80013c8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013ce:	2300      	movs	r3, #0
 80013d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013d2:	2300      	movs	r3, #0
 80013d4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013da:	2300      	movs	r3, #0
 80013dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013de:	2300      	movs	r3, #0
 80013e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013e6:	2200      	movs	r2, #0
 80013e8:	4619      	mov	r1, r3
 80013ea:	4814      	ldr	r0, [pc, #80]	@ (800143c <MX_TIM1_Init+0x138>)
 80013ec:	f001 fe8a 	bl	8003104 <HAL_TIM_PWM_ConfigChannel>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80013f6:	f000 f89b 	bl	8001530 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013fa:	2300      	movs	r3, #0
 80013fc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013fe:	2300      	movs	r3, #0
 8001400:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800140a:	2300      	movs	r3, #0
 800140c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800140e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001412:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001414:	2300      	movs	r3, #0
 8001416:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001418:	1d3b      	adds	r3, r7, #4
 800141a:	4619      	mov	r1, r3
 800141c:	4807      	ldr	r0, [pc, #28]	@ (800143c <MX_TIM1_Init+0x138>)
 800141e:	f002 fbeb 	bl	8003bf8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001428:	f000 f882 	bl	8001530 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800142c:	4803      	ldr	r0, [pc, #12]	@ (800143c <MX_TIM1_Init+0x138>)
 800142e:	f000 f901 	bl	8001634 <HAL_TIM_MspPostInit>

}
 8001432:	bf00      	nop
 8001434:	3758      	adds	r7, #88	@ 0x58
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	2000010c 	.word	0x2000010c
 8001440:	40012c00 	.word	0x40012c00

08001444 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800144a:	4b0c      	ldr	r3, [pc, #48]	@ (800147c <MX_DMA_Init+0x38>)
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	4a0b      	ldr	r2, [pc, #44]	@ (800147c <MX_DMA_Init+0x38>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	6153      	str	r3, [r2, #20]
 8001456:	4b09      	ldr	r3, [pc, #36]	@ (800147c <MX_DMA_Init+0x38>)
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	2100      	movs	r1, #0
 8001466:	200c      	movs	r0, #12
 8001468:	f000 fb0d 	bl	8001a86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800146c:	200c      	movs	r0, #12
 800146e:	f000 fb26 	bl	8001abe <HAL_NVIC_EnableIRQ>

}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40021000 	.word	0x40021000

08001480 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b088      	sub	sp, #32
 8001484:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001486:	f107 0310 	add.w	r3, r7, #16
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001494:	4b24      	ldr	r3, [pc, #144]	@ (8001528 <MX_GPIO_Init+0xa8>)
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	4a23      	ldr	r2, [pc, #140]	@ (8001528 <MX_GPIO_Init+0xa8>)
 800149a:	f043 0310 	orr.w	r3, r3, #16
 800149e:	6193      	str	r3, [r2, #24]
 80014a0:	4b21      	ldr	r3, [pc, #132]	@ (8001528 <MX_GPIO_Init+0xa8>)
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	f003 0310 	and.w	r3, r3, #16
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001528 <MX_GPIO_Init+0xa8>)
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	4a1d      	ldr	r2, [pc, #116]	@ (8001528 <MX_GPIO_Init+0xa8>)
 80014b2:	f043 0320 	orr.w	r3, r3, #32
 80014b6:	6193      	str	r3, [r2, #24]
 80014b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001528 <MX_GPIO_Init+0xa8>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	f003 0320 	and.w	r3, r3, #32
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c4:	4b18      	ldr	r3, [pc, #96]	@ (8001528 <MX_GPIO_Init+0xa8>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	4a17      	ldr	r2, [pc, #92]	@ (8001528 <MX_GPIO_Init+0xa8>)
 80014ca:	f043 0304 	orr.w	r3, r3, #4
 80014ce:	6193      	str	r3, [r2, #24]
 80014d0:	4b15      	ldr	r3, [pc, #84]	@ (8001528 <MX_GPIO_Init+0xa8>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	607b      	str	r3, [r7, #4]
 80014da:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80014dc:	2200      	movs	r2, #0
 80014de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014e2:	4812      	ldr	r0, [pc, #72]	@ (800152c <MX_GPIO_Init+0xac>)
 80014e4:	f000 ff07 	bl	80022f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80014e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ee:	2301      	movs	r3, #1
 80014f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f6:	2302      	movs	r3, #2
 80014f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014fa:	f107 0310 	add.w	r3, r7, #16
 80014fe:	4619      	mov	r1, r3
 8001500:	480a      	ldr	r0, [pc, #40]	@ (800152c <MX_GPIO_Init+0xac>)
 8001502:	f000 fd5d 	bl	8001fc0 <HAL_GPIO_Init>
  
  /*Configure GPIO pin PC15 for GYMAX4466 sound detection */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001506:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800150a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001510:	2302      	movs	r3, #2
 8001512:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001514:	f107 0310 	add.w	r3, r7, #16
 8001518:	4619      	mov	r1, r3
 800151a:	4804      	ldr	r0, [pc, #16]	@ (800152c <MX_GPIO_Init+0xac>)
 800151c:	f000 fd50 	bl	8001fc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001520:	bf00      	nop
 8001522:	3720      	adds	r7, #32
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40021000 	.word	0x40021000
 800152c:	40011000 	.word	0x40011000

08001530 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001534:	b672      	cpsid	i
}
 8001536:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001538:	bf00      	nop
 800153a:	e7fd      	b.n	8001538 <Error_Handler+0x8>

0800153c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001542:	4b15      	ldr	r3, [pc, #84]	@ (8001598 <HAL_MspInit+0x5c>)
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	4a14      	ldr	r2, [pc, #80]	@ (8001598 <HAL_MspInit+0x5c>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	6193      	str	r3, [r2, #24]
 800154e:	4b12      	ldr	r3, [pc, #72]	@ (8001598 <HAL_MspInit+0x5c>)
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800155a:	4b0f      	ldr	r3, [pc, #60]	@ (8001598 <HAL_MspInit+0x5c>)
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	4a0e      	ldr	r2, [pc, #56]	@ (8001598 <HAL_MspInit+0x5c>)
 8001560:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001564:	61d3      	str	r3, [r2, #28]
 8001566:	4b0c      	ldr	r3, [pc, #48]	@ (8001598 <HAL_MspInit+0x5c>)
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001572:	4b0a      	ldr	r3, [pc, #40]	@ (800159c <HAL_MspInit+0x60>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	4a04      	ldr	r2, [pc, #16]	@ (800159c <HAL_MspInit+0x60>)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800158e:	bf00      	nop
 8001590:	3714      	adds	r7, #20
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr
 8001598:	40021000 	.word	0x40021000
 800159c:	40010000 	.word	0x40010000

080015a0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a1d      	ldr	r2, [pc, #116]	@ (8001624 <HAL_TIM_Base_MspInit+0x84>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d133      	bne.n	800161a <HAL_TIM_Base_MspInit+0x7a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001628 <HAL_TIM_Base_MspInit+0x88>)
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001628 <HAL_TIM_Base_MspInit+0x88>)
 80015b8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80015bc:	6193      	str	r3, [r2, #24]
 80015be:	4b1a      	ldr	r3, [pc, #104]	@ (8001628 <HAL_TIM_Base_MspInit+0x88>)
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 80015ca:	4b18      	ldr	r3, [pc, #96]	@ (800162c <HAL_TIM_Base_MspInit+0x8c>)
 80015cc:	4a18      	ldr	r2, [pc, #96]	@ (8001630 <HAL_TIM_Base_MspInit+0x90>)
 80015ce:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015d0:	4b16      	ldr	r3, [pc, #88]	@ (800162c <HAL_TIM_Base_MspInit+0x8c>)
 80015d2:	2210      	movs	r2, #16
 80015d4:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015d6:	4b15      	ldr	r3, [pc, #84]	@ (800162c <HAL_TIM_Base_MspInit+0x8c>)
 80015d8:	2200      	movs	r2, #0
 80015da:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80015dc:	4b13      	ldr	r3, [pc, #76]	@ (800162c <HAL_TIM_Base_MspInit+0x8c>)
 80015de:	2280      	movs	r2, #128	@ 0x80
 80015e0:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015e2:	4b12      	ldr	r3, [pc, #72]	@ (800162c <HAL_TIM_Base_MspInit+0x8c>)
 80015e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015e8:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015ea:	4b10      	ldr	r3, [pc, #64]	@ (800162c <HAL_TIM_Base_MspInit+0x8c>)
 80015ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015f0:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80015f2:	4b0e      	ldr	r3, [pc, #56]	@ (800162c <HAL_TIM_Base_MspInit+0x8c>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80015f8:	4b0c      	ldr	r3, [pc, #48]	@ (800162c <HAL_TIM_Base_MspInit+0x8c>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80015fe:	480b      	ldr	r0, [pc, #44]	@ (800162c <HAL_TIM_Base_MspInit+0x8c>)
 8001600:	f000 fa78 	bl	8001af4 <HAL_DMA_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 800160a:	f7ff ff91 	bl	8001530 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a06      	ldr	r2, [pc, #24]	@ (800162c <HAL_TIM_Base_MspInit+0x8c>)
 8001612:	625a      	str	r2, [r3, #36]	@ 0x24
 8001614:	4a05      	ldr	r2, [pc, #20]	@ (800162c <HAL_TIM_Base_MspInit+0x8c>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800161a:	bf00      	nop
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40012c00 	.word	0x40012c00
 8001628:	40021000 	.word	0x40021000
 800162c:	20000154 	.word	0x20000154
 8001630:	4002001c 	.word	0x4002001c

08001634 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b088      	sub	sp, #32
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	f107 0310 	add.w	r3, r7, #16
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a10      	ldr	r2, [pc, #64]	@ (8001690 <HAL_TIM_MspPostInit+0x5c>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d118      	bne.n	8001686 <HAL_TIM_MspPostInit+0x52>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001654:	4b0f      	ldr	r3, [pc, #60]	@ (8001694 <HAL_TIM_MspPostInit+0x60>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	4a0e      	ldr	r2, [pc, #56]	@ (8001694 <HAL_TIM_MspPostInit+0x60>)
 800165a:	f043 0304 	orr.w	r3, r3, #4
 800165e:	6193      	str	r3, [r2, #24]
 8001660:	4b0c      	ldr	r3, [pc, #48]	@ (8001694 <HAL_TIM_MspPostInit+0x60>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	f003 0304 	and.w	r3, r3, #4
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800166c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001670:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001672:	2302      	movs	r3, #2
 8001674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001676:	2302      	movs	r3, #2
 8001678:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167a:	f107 0310 	add.w	r3, r7, #16
 800167e:	4619      	mov	r1, r3
 8001680:	4805      	ldr	r0, [pc, #20]	@ (8001698 <HAL_TIM_MspPostInit+0x64>)
 8001682:	f000 fc9d 	bl	8001fc0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001686:	bf00      	nop
 8001688:	3720      	adds	r7, #32
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40012c00 	.word	0x40012c00
 8001694:	40021000 	.word	0x40021000
 8001698:	40010800 	.word	0x40010800

0800169c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016a0:	bf00      	nop
 80016a2:	e7fd      	b.n	80016a0 <NMI_Handler+0x4>

080016a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016a8:	bf00      	nop
 80016aa:	e7fd      	b.n	80016a8 <HardFault_Handler+0x4>

080016ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b0:	bf00      	nop
 80016b2:	e7fd      	b.n	80016b0 <MemManage_Handler+0x4>

080016b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016b8:	bf00      	nop
 80016ba:	e7fd      	b.n	80016b8 <BusFault_Handler+0x4>

080016bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c0:	bf00      	nop
 80016c2:	e7fd      	b.n	80016c0 <UsageFault_Handler+0x4>

080016c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr

080016d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr

080016dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr

080016e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ec:	f000 f8b4 	bl	8001858 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80016f8:	4802      	ldr	r0, [pc, #8]	@ (8001704 <DMA1_Channel2_IRQHandler+0x10>)
 80016fa:	f000 fb2d 	bl	8001d58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000154 	.word	0x20000154

08001708 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001710:	4a14      	ldr	r2, [pc, #80]	@ (8001764 <_sbrk+0x5c>)
 8001712:	4b15      	ldr	r3, [pc, #84]	@ (8001768 <_sbrk+0x60>)
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800171c:	4b13      	ldr	r3, [pc, #76]	@ (800176c <_sbrk+0x64>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d102      	bne.n	800172a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001724:	4b11      	ldr	r3, [pc, #68]	@ (800176c <_sbrk+0x64>)
 8001726:	4a12      	ldr	r2, [pc, #72]	@ (8001770 <_sbrk+0x68>)
 8001728:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800172a:	4b10      	ldr	r3, [pc, #64]	@ (800176c <_sbrk+0x64>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4413      	add	r3, r2
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	429a      	cmp	r2, r3
 8001736:	d207      	bcs.n	8001748 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001738:	f002 faee 	bl	8003d18 <__errno>
 800173c:	4603      	mov	r3, r0
 800173e:	220c      	movs	r2, #12
 8001740:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001742:	f04f 33ff 	mov.w	r3, #4294967295
 8001746:	e009      	b.n	800175c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001748:	4b08      	ldr	r3, [pc, #32]	@ (800176c <_sbrk+0x64>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800174e:	4b07      	ldr	r3, [pc, #28]	@ (800176c <_sbrk+0x64>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	4a05      	ldr	r2, [pc, #20]	@ (800176c <_sbrk+0x64>)
 8001758:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800175a:	68fb      	ldr	r3, [r7, #12]
}
 800175c:	4618      	mov	r0, r3
 800175e:	3718      	adds	r7, #24
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20005000 	.word	0x20005000
 8001768:	00000400 	.word	0x00000400
 800176c:	20000f28 	.word	0x20000f28
 8001770:	20001078 	.word	0x20001078

08001774 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr

08001780 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001780:	f7ff fff8 	bl	8001774 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001784:	480b      	ldr	r0, [pc, #44]	@ (80017b4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001786:	490c      	ldr	r1, [pc, #48]	@ (80017b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001788:	4a0c      	ldr	r2, [pc, #48]	@ (80017bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800178a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800178c:	e002      	b.n	8001794 <LoopCopyDataInit>

0800178e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800178e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001790:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001792:	3304      	adds	r3, #4

08001794 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001794:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001796:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001798:	d3f9      	bcc.n	800178e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800179a:	4a09      	ldr	r2, [pc, #36]	@ (80017c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800179c:	4c09      	ldr	r4, [pc, #36]	@ (80017c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800179e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a0:	e001      	b.n	80017a6 <LoopFillZerobss>

080017a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a4:	3204      	adds	r2, #4

080017a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017a8:	d3fb      	bcc.n	80017a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017aa:	f002 fabb 	bl	8003d24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017ae:	f7ff fbaf 	bl	8000f10 <main>
  bx lr
 80017b2:	4770      	bx	lr
  ldr r0, =_sdata
 80017b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017b8:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 80017bc:	08004758 	.word	0x08004758
  ldr r2, =_sbss
 80017c0:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 80017c4:	20001078 	.word	0x20001078

080017c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017c8:	e7fe      	b.n	80017c8 <ADC1_2_IRQHandler>
	...

080017cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017d0:	4b08      	ldr	r3, [pc, #32]	@ (80017f4 <HAL_Init+0x28>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a07      	ldr	r2, [pc, #28]	@ (80017f4 <HAL_Init+0x28>)
 80017d6:	f043 0310 	orr.w	r3, r3, #16
 80017da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017dc:	2003      	movs	r0, #3
 80017de:	f000 f947 	bl	8001a70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017e2:	200f      	movs	r0, #15
 80017e4:	f000 f808 	bl	80017f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017e8:	f7ff fea8 	bl	800153c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40022000 	.word	0x40022000

080017f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001800:	4b12      	ldr	r3, [pc, #72]	@ (800184c <HAL_InitTick+0x54>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4b12      	ldr	r3, [pc, #72]	@ (8001850 <HAL_InitTick+0x58>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	4619      	mov	r1, r3
 800180a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800180e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001812:	fbb2 f3f3 	udiv	r3, r2, r3
 8001816:	4618      	mov	r0, r3
 8001818:	f000 f95f 	bl	8001ada <HAL_SYSTICK_Config>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e00e      	b.n	8001844 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2b0f      	cmp	r3, #15
 800182a:	d80a      	bhi.n	8001842 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800182c:	2200      	movs	r2, #0
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	f04f 30ff 	mov.w	r0, #4294967295
 8001834:	f000 f927 	bl	8001a86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001838:	4a06      	ldr	r2, [pc, #24]	@ (8001854 <HAL_InitTick+0x5c>)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800183e:	2300      	movs	r3, #0
 8001840:	e000      	b.n	8001844 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
}
 8001844:	4618      	mov	r0, r3
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20000084 	.word	0x20000084
 8001850:	2000008c 	.word	0x2000008c
 8001854:	20000088 	.word	0x20000088

08001858 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800185c:	4b05      	ldr	r3, [pc, #20]	@ (8001874 <HAL_IncTick+0x1c>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	461a      	mov	r2, r3
 8001862:	4b05      	ldr	r3, [pc, #20]	@ (8001878 <HAL_IncTick+0x20>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4413      	add	r3, r2
 8001868:	4a03      	ldr	r2, [pc, #12]	@ (8001878 <HAL_IncTick+0x20>)
 800186a:	6013      	str	r3, [r2, #0]
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr
 8001874:	2000008c 	.word	0x2000008c
 8001878:	20000f2c 	.word	0x20000f2c

0800187c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  return uwTick;
 8001880:	4b02      	ldr	r3, [pc, #8]	@ (800188c <HAL_GetTick+0x10>)
 8001882:	681b      	ldr	r3, [r3, #0]
}
 8001884:	4618      	mov	r0, r3
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr
 800188c:	20000f2c 	.word	0x20000f2c

08001890 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001898:	f7ff fff0 	bl	800187c <HAL_GetTick>
 800189c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a8:	d005      	beq.n	80018b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018aa:	4b0a      	ldr	r3, [pc, #40]	@ (80018d4 <HAL_Delay+0x44>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	461a      	mov	r2, r3
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	4413      	add	r3, r2
 80018b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018b6:	bf00      	nop
 80018b8:	f7ff ffe0 	bl	800187c <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	68fa      	ldr	r2, [r7, #12]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d8f7      	bhi.n	80018b8 <HAL_Delay+0x28>
  {
  }
}
 80018c8:	bf00      	nop
 80018ca:	bf00      	nop
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	2000008c 	.word	0x2000008c

080018d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018e8:	4b0c      	ldr	r3, [pc, #48]	@ (800191c <__NVIC_SetPriorityGrouping+0x44>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ee:	68ba      	ldr	r2, [r7, #8]
 80018f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018f4:	4013      	ands	r3, r2
 80018f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001900:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001904:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001908:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800190a:	4a04      	ldr	r2, [pc, #16]	@ (800191c <__NVIC_SetPriorityGrouping+0x44>)
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	60d3      	str	r3, [r2, #12]
}
 8001910:	bf00      	nop
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	bc80      	pop	{r7}
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001924:	4b04      	ldr	r3, [pc, #16]	@ (8001938 <__NVIC_GetPriorityGrouping+0x18>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	0a1b      	lsrs	r3, r3, #8
 800192a:	f003 0307 	and.w	r3, r3, #7
}
 800192e:	4618      	mov	r0, r3
 8001930:	46bd      	mov	sp, r7
 8001932:	bc80      	pop	{r7}
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194a:	2b00      	cmp	r3, #0
 800194c:	db0b      	blt.n	8001966 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800194e:	79fb      	ldrb	r3, [r7, #7]
 8001950:	f003 021f 	and.w	r2, r3, #31
 8001954:	4906      	ldr	r1, [pc, #24]	@ (8001970 <__NVIC_EnableIRQ+0x34>)
 8001956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195a:	095b      	lsrs	r3, r3, #5
 800195c:	2001      	movs	r0, #1
 800195e:	fa00 f202 	lsl.w	r2, r0, r2
 8001962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr
 8001970:	e000e100 	.word	0xe000e100

08001974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	6039      	str	r1, [r7, #0]
 800197e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001984:	2b00      	cmp	r3, #0
 8001986:	db0a      	blt.n	800199e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	b2da      	uxtb	r2, r3
 800198c:	490c      	ldr	r1, [pc, #48]	@ (80019c0 <__NVIC_SetPriority+0x4c>)
 800198e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001992:	0112      	lsls	r2, r2, #4
 8001994:	b2d2      	uxtb	r2, r2
 8001996:	440b      	add	r3, r1
 8001998:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800199c:	e00a      	b.n	80019b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	4908      	ldr	r1, [pc, #32]	@ (80019c4 <__NVIC_SetPriority+0x50>)
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	f003 030f 	and.w	r3, r3, #15
 80019aa:	3b04      	subs	r3, #4
 80019ac:	0112      	lsls	r2, r2, #4
 80019ae:	b2d2      	uxtb	r2, r2
 80019b0:	440b      	add	r3, r1
 80019b2:	761a      	strb	r2, [r3, #24]
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bc80      	pop	{r7}
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	e000e100 	.word	0xe000e100
 80019c4:	e000ed00 	.word	0xe000ed00

080019c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b089      	sub	sp, #36	@ 0x24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	f1c3 0307 	rsb	r3, r3, #7
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	bf28      	it	cs
 80019e6:	2304      	movcs	r3, #4
 80019e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	3304      	adds	r3, #4
 80019ee:	2b06      	cmp	r3, #6
 80019f0:	d902      	bls.n	80019f8 <NVIC_EncodePriority+0x30>
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	3b03      	subs	r3, #3
 80019f6:	e000      	b.n	80019fa <NVIC_EncodePriority+0x32>
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	43da      	mvns	r2, r3
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	401a      	ands	r2, r3
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a10:	f04f 31ff 	mov.w	r1, #4294967295
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1a:	43d9      	mvns	r1, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a20:	4313      	orrs	r3, r2
         );
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3724      	adds	r7, #36	@ 0x24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr

08001a2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3b01      	subs	r3, #1
 8001a38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a3c:	d301      	bcc.n	8001a42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e00f      	b.n	8001a62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a42:	4a0a      	ldr	r2, [pc, #40]	@ (8001a6c <SysTick_Config+0x40>)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a4a:	210f      	movs	r1, #15
 8001a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a50:	f7ff ff90 	bl	8001974 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a54:	4b05      	ldr	r3, [pc, #20]	@ (8001a6c <SysTick_Config+0x40>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a5a:	4b04      	ldr	r3, [pc, #16]	@ (8001a6c <SysTick_Config+0x40>)
 8001a5c:	2207      	movs	r2, #7
 8001a5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	e000e010 	.word	0xe000e010

08001a70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f7ff ff2d 	bl	80018d8 <__NVIC_SetPriorityGrouping>
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b086      	sub	sp, #24
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	60b9      	str	r1, [r7, #8]
 8001a90:	607a      	str	r2, [r7, #4]
 8001a92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a98:	f7ff ff42 	bl	8001920 <__NVIC_GetPriorityGrouping>
 8001a9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	68b9      	ldr	r1, [r7, #8]
 8001aa2:	6978      	ldr	r0, [r7, #20]
 8001aa4:	f7ff ff90 	bl	80019c8 <NVIC_EncodePriority>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aae:	4611      	mov	r1, r2
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff ff5f 	bl	8001974 <__NVIC_SetPriority>
}
 8001ab6:	bf00      	nop
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b082      	sub	sp, #8
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff ff35 	bl	800193c <__NVIC_EnableIRQ>
}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b082      	sub	sp, #8
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7ff ffa2 	bl	8001a2c <SysTick_Config>
 8001ae8:	4603      	mov	r3, r0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001afc:	2300      	movs	r3, #0
 8001afe:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e043      	b.n	8001b92 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	4b22      	ldr	r3, [pc, #136]	@ (8001b9c <HAL_DMA_Init+0xa8>)
 8001b12:	4413      	add	r3, r2
 8001b14:	4a22      	ldr	r2, [pc, #136]	@ (8001ba0 <HAL_DMA_Init+0xac>)
 8001b16:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1a:	091b      	lsrs	r3, r3, #4
 8001b1c:	009a      	lsls	r2, r3, #2
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a1f      	ldr	r2, [pc, #124]	@ (8001ba4 <HAL_DMA_Init+0xb0>)
 8001b26:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001b3e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001b42:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001b4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3714      	adds	r7, #20
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr
 8001b9c:	bffdfff8 	.word	0xbffdfff8
 8001ba0:	cccccccd 	.word	0xcccccccd
 8001ba4:	40020000 	.word	0x40020000

08001ba8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
 8001bb4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d101      	bne.n	8001bc8 <HAL_DMA_Start_IT+0x20>
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	e04b      	b.n	8001c60 <HAL_DMA_Start_IT+0xb8>
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d13a      	bne.n	8001c52 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2202      	movs	r2, #2
 8001be0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2200      	movs	r2, #0
 8001be8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 0201 	bic.w	r2, r2, #1
 8001bf8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	68b9      	ldr	r1, [r7, #8]
 8001c00:	68f8      	ldr	r0, [r7, #12]
 8001c02:	f000 f9af 	bl	8001f64 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d008      	beq.n	8001c20 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f042 020e 	orr.w	r2, r2, #14
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	e00f      	b.n	8001c40 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f022 0204 	bic.w	r2, r2, #4
 8001c2e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f042 020a 	orr.w	r2, r2, #10
 8001c3e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f042 0201 	orr.w	r2, r2, #1
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	e005      	b.n	8001c5e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001c5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c70:	2300      	movs	r3, #0
 8001c72:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d005      	beq.n	8001c8c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2204      	movs	r2, #4
 8001c84:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	73fb      	strb	r3, [r7, #15]
 8001c8a:	e051      	b.n	8001d30 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f022 020e 	bic.w	r2, r2, #14
 8001c9a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 0201 	bic.w	r2, r2, #1
 8001caa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a22      	ldr	r2, [pc, #136]	@ (8001d3c <HAL_DMA_Abort_IT+0xd4>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d029      	beq.n	8001d0a <HAL_DMA_Abort_IT+0xa2>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a21      	ldr	r2, [pc, #132]	@ (8001d40 <HAL_DMA_Abort_IT+0xd8>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d022      	beq.n	8001d06 <HAL_DMA_Abort_IT+0x9e>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a1f      	ldr	r2, [pc, #124]	@ (8001d44 <HAL_DMA_Abort_IT+0xdc>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d01a      	beq.n	8001d00 <HAL_DMA_Abort_IT+0x98>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a1e      	ldr	r2, [pc, #120]	@ (8001d48 <HAL_DMA_Abort_IT+0xe0>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d012      	beq.n	8001cfa <HAL_DMA_Abort_IT+0x92>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a1c      	ldr	r2, [pc, #112]	@ (8001d4c <HAL_DMA_Abort_IT+0xe4>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d00a      	beq.n	8001cf4 <HAL_DMA_Abort_IT+0x8c>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a1b      	ldr	r2, [pc, #108]	@ (8001d50 <HAL_DMA_Abort_IT+0xe8>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d102      	bne.n	8001cee <HAL_DMA_Abort_IT+0x86>
 8001ce8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001cec:	e00e      	b.n	8001d0c <HAL_DMA_Abort_IT+0xa4>
 8001cee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001cf2:	e00b      	b.n	8001d0c <HAL_DMA_Abort_IT+0xa4>
 8001cf4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001cf8:	e008      	b.n	8001d0c <HAL_DMA_Abort_IT+0xa4>
 8001cfa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cfe:	e005      	b.n	8001d0c <HAL_DMA_Abort_IT+0xa4>
 8001d00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d04:	e002      	b.n	8001d0c <HAL_DMA_Abort_IT+0xa4>
 8001d06:	2310      	movs	r3, #16
 8001d08:	e000      	b.n	8001d0c <HAL_DMA_Abort_IT+0xa4>
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	4a11      	ldr	r2, [pc, #68]	@ (8001d54 <HAL_DMA_Abort_IT+0xec>)
 8001d0e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d003      	beq.n	8001d30 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	4798      	blx	r3
    } 
  }
  return status;
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40020008 	.word	0x40020008
 8001d40:	4002001c 	.word	0x4002001c
 8001d44:	40020030 	.word	0x40020030
 8001d48:	40020044 	.word	0x40020044
 8001d4c:	40020058 	.word	0x40020058
 8001d50:	4002006c 	.word	0x4002006c
 8001d54:	40020000 	.word	0x40020000

08001d58 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d74:	2204      	movs	r2, #4
 8001d76:	409a      	lsls	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d04f      	beq.n	8001e20 <HAL_DMA_IRQHandler+0xc8>
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	f003 0304 	and.w	r3, r3, #4
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d04a      	beq.n	8001e20 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0320 	and.w	r3, r3, #32
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d107      	bne.n	8001da8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f022 0204 	bic.w	r2, r2, #4
 8001da6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a66      	ldr	r2, [pc, #408]	@ (8001f48 <HAL_DMA_IRQHandler+0x1f0>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d029      	beq.n	8001e06 <HAL_DMA_IRQHandler+0xae>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a65      	ldr	r2, [pc, #404]	@ (8001f4c <HAL_DMA_IRQHandler+0x1f4>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d022      	beq.n	8001e02 <HAL_DMA_IRQHandler+0xaa>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a63      	ldr	r2, [pc, #396]	@ (8001f50 <HAL_DMA_IRQHandler+0x1f8>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d01a      	beq.n	8001dfc <HAL_DMA_IRQHandler+0xa4>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a62      	ldr	r2, [pc, #392]	@ (8001f54 <HAL_DMA_IRQHandler+0x1fc>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d012      	beq.n	8001df6 <HAL_DMA_IRQHandler+0x9e>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a60      	ldr	r2, [pc, #384]	@ (8001f58 <HAL_DMA_IRQHandler+0x200>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d00a      	beq.n	8001df0 <HAL_DMA_IRQHandler+0x98>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a5f      	ldr	r2, [pc, #380]	@ (8001f5c <HAL_DMA_IRQHandler+0x204>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d102      	bne.n	8001dea <HAL_DMA_IRQHandler+0x92>
 8001de4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001de8:	e00e      	b.n	8001e08 <HAL_DMA_IRQHandler+0xb0>
 8001dea:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001dee:	e00b      	b.n	8001e08 <HAL_DMA_IRQHandler+0xb0>
 8001df0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001df4:	e008      	b.n	8001e08 <HAL_DMA_IRQHandler+0xb0>
 8001df6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001dfa:	e005      	b.n	8001e08 <HAL_DMA_IRQHandler+0xb0>
 8001dfc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e00:	e002      	b.n	8001e08 <HAL_DMA_IRQHandler+0xb0>
 8001e02:	2340      	movs	r3, #64	@ 0x40
 8001e04:	e000      	b.n	8001e08 <HAL_DMA_IRQHandler+0xb0>
 8001e06:	2304      	movs	r3, #4
 8001e08:	4a55      	ldr	r2, [pc, #340]	@ (8001f60 <HAL_DMA_IRQHandler+0x208>)
 8001e0a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f000 8094 	beq.w	8001f3e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001e1e:	e08e      	b.n	8001f3e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e24:	2202      	movs	r2, #2
 8001e26:	409a      	lsls	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d056      	beq.n	8001ede <HAL_DMA_IRQHandler+0x186>
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d051      	beq.n	8001ede <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0320 	and.w	r3, r3, #32
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d10b      	bne.n	8001e60 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 020a 	bic.w	r2, r2, #10
 8001e56:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a38      	ldr	r2, [pc, #224]	@ (8001f48 <HAL_DMA_IRQHandler+0x1f0>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d029      	beq.n	8001ebe <HAL_DMA_IRQHandler+0x166>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a37      	ldr	r2, [pc, #220]	@ (8001f4c <HAL_DMA_IRQHandler+0x1f4>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d022      	beq.n	8001eba <HAL_DMA_IRQHandler+0x162>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a35      	ldr	r2, [pc, #212]	@ (8001f50 <HAL_DMA_IRQHandler+0x1f8>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d01a      	beq.n	8001eb4 <HAL_DMA_IRQHandler+0x15c>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a34      	ldr	r2, [pc, #208]	@ (8001f54 <HAL_DMA_IRQHandler+0x1fc>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d012      	beq.n	8001eae <HAL_DMA_IRQHandler+0x156>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a32      	ldr	r2, [pc, #200]	@ (8001f58 <HAL_DMA_IRQHandler+0x200>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d00a      	beq.n	8001ea8 <HAL_DMA_IRQHandler+0x150>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a31      	ldr	r2, [pc, #196]	@ (8001f5c <HAL_DMA_IRQHandler+0x204>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d102      	bne.n	8001ea2 <HAL_DMA_IRQHandler+0x14a>
 8001e9c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001ea0:	e00e      	b.n	8001ec0 <HAL_DMA_IRQHandler+0x168>
 8001ea2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ea6:	e00b      	b.n	8001ec0 <HAL_DMA_IRQHandler+0x168>
 8001ea8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001eac:	e008      	b.n	8001ec0 <HAL_DMA_IRQHandler+0x168>
 8001eae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001eb2:	e005      	b.n	8001ec0 <HAL_DMA_IRQHandler+0x168>
 8001eb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001eb8:	e002      	b.n	8001ec0 <HAL_DMA_IRQHandler+0x168>
 8001eba:	2320      	movs	r3, #32
 8001ebc:	e000      	b.n	8001ec0 <HAL_DMA_IRQHandler+0x168>
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	4a27      	ldr	r2, [pc, #156]	@ (8001f60 <HAL_DMA_IRQHandler+0x208>)
 8001ec2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d034      	beq.n	8001f3e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001edc:	e02f      	b.n	8001f3e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee2:	2208      	movs	r2, #8
 8001ee4:	409a      	lsls	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d028      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x1e8>
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	f003 0308 	and.w	r3, r3, #8
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d023      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 020e 	bic.w	r2, r2, #14
 8001f06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f10:	2101      	movs	r1, #1
 8001f12:	fa01 f202 	lsl.w	r2, r1, r2
 8001f16:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d004      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	4798      	blx	r3
    }
  }
  return;
 8001f3e:	bf00      	nop
 8001f40:	bf00      	nop
}
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40020008 	.word	0x40020008
 8001f4c:	4002001c 	.word	0x4002001c
 8001f50:	40020030 	.word	0x40020030
 8001f54:	40020044 	.word	0x40020044
 8001f58:	40020058 	.word	0x40020058
 8001f5c:	4002006c 	.word	0x4002006c
 8001f60:	40020000 	.word	0x40020000

08001f64 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
 8001f70:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f80:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b10      	cmp	r3, #16
 8001f90:	d108      	bne.n	8001fa4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68ba      	ldr	r2, [r7, #8]
 8001fa0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001fa2:	e007      	b.n	8001fb4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68ba      	ldr	r2, [r7, #8]
 8001faa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	60da      	str	r2, [r3, #12]
}
 8001fb4:	bf00      	nop
 8001fb6:	3714      	adds	r7, #20
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bc80      	pop	{r7}
 8001fbc:	4770      	bx	lr
	...

08001fc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b08b      	sub	sp, #44	@ 0x2c
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fd2:	e169      	b.n	80022a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	69fa      	ldr	r2, [r7, #28]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	f040 8158 	bne.w	80022a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	4a9a      	ldr	r2, [pc, #616]	@ (8002260 <HAL_GPIO_Init+0x2a0>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d05e      	beq.n	80020ba <HAL_GPIO_Init+0xfa>
 8001ffc:	4a98      	ldr	r2, [pc, #608]	@ (8002260 <HAL_GPIO_Init+0x2a0>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d875      	bhi.n	80020ee <HAL_GPIO_Init+0x12e>
 8002002:	4a98      	ldr	r2, [pc, #608]	@ (8002264 <HAL_GPIO_Init+0x2a4>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d058      	beq.n	80020ba <HAL_GPIO_Init+0xfa>
 8002008:	4a96      	ldr	r2, [pc, #600]	@ (8002264 <HAL_GPIO_Init+0x2a4>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d86f      	bhi.n	80020ee <HAL_GPIO_Init+0x12e>
 800200e:	4a96      	ldr	r2, [pc, #600]	@ (8002268 <HAL_GPIO_Init+0x2a8>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d052      	beq.n	80020ba <HAL_GPIO_Init+0xfa>
 8002014:	4a94      	ldr	r2, [pc, #592]	@ (8002268 <HAL_GPIO_Init+0x2a8>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d869      	bhi.n	80020ee <HAL_GPIO_Init+0x12e>
 800201a:	4a94      	ldr	r2, [pc, #592]	@ (800226c <HAL_GPIO_Init+0x2ac>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d04c      	beq.n	80020ba <HAL_GPIO_Init+0xfa>
 8002020:	4a92      	ldr	r2, [pc, #584]	@ (800226c <HAL_GPIO_Init+0x2ac>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d863      	bhi.n	80020ee <HAL_GPIO_Init+0x12e>
 8002026:	4a92      	ldr	r2, [pc, #584]	@ (8002270 <HAL_GPIO_Init+0x2b0>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d046      	beq.n	80020ba <HAL_GPIO_Init+0xfa>
 800202c:	4a90      	ldr	r2, [pc, #576]	@ (8002270 <HAL_GPIO_Init+0x2b0>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d85d      	bhi.n	80020ee <HAL_GPIO_Init+0x12e>
 8002032:	2b12      	cmp	r3, #18
 8002034:	d82a      	bhi.n	800208c <HAL_GPIO_Init+0xcc>
 8002036:	2b12      	cmp	r3, #18
 8002038:	d859      	bhi.n	80020ee <HAL_GPIO_Init+0x12e>
 800203a:	a201      	add	r2, pc, #4	@ (adr r2, 8002040 <HAL_GPIO_Init+0x80>)
 800203c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002040:	080020bb 	.word	0x080020bb
 8002044:	08002095 	.word	0x08002095
 8002048:	080020a7 	.word	0x080020a7
 800204c:	080020e9 	.word	0x080020e9
 8002050:	080020ef 	.word	0x080020ef
 8002054:	080020ef 	.word	0x080020ef
 8002058:	080020ef 	.word	0x080020ef
 800205c:	080020ef 	.word	0x080020ef
 8002060:	080020ef 	.word	0x080020ef
 8002064:	080020ef 	.word	0x080020ef
 8002068:	080020ef 	.word	0x080020ef
 800206c:	080020ef 	.word	0x080020ef
 8002070:	080020ef 	.word	0x080020ef
 8002074:	080020ef 	.word	0x080020ef
 8002078:	080020ef 	.word	0x080020ef
 800207c:	080020ef 	.word	0x080020ef
 8002080:	080020ef 	.word	0x080020ef
 8002084:	0800209d 	.word	0x0800209d
 8002088:	080020b1 	.word	0x080020b1
 800208c:	4a79      	ldr	r2, [pc, #484]	@ (8002274 <HAL_GPIO_Init+0x2b4>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d013      	beq.n	80020ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002092:	e02c      	b.n	80020ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	623b      	str	r3, [r7, #32]
          break;
 800209a:	e029      	b.n	80020f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	3304      	adds	r3, #4
 80020a2:	623b      	str	r3, [r7, #32]
          break;
 80020a4:	e024      	b.n	80020f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	3308      	adds	r3, #8
 80020ac:	623b      	str	r3, [r7, #32]
          break;
 80020ae:	e01f      	b.n	80020f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	330c      	adds	r3, #12
 80020b6:	623b      	str	r3, [r7, #32]
          break;
 80020b8:	e01a      	b.n	80020f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d102      	bne.n	80020c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020c2:	2304      	movs	r3, #4
 80020c4:	623b      	str	r3, [r7, #32]
          break;
 80020c6:	e013      	b.n	80020f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d105      	bne.n	80020dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020d0:	2308      	movs	r3, #8
 80020d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	69fa      	ldr	r2, [r7, #28]
 80020d8:	611a      	str	r2, [r3, #16]
          break;
 80020da:	e009      	b.n	80020f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020dc:	2308      	movs	r3, #8
 80020de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	69fa      	ldr	r2, [r7, #28]
 80020e4:	615a      	str	r2, [r3, #20]
          break;
 80020e6:	e003      	b.n	80020f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020e8:	2300      	movs	r3, #0
 80020ea:	623b      	str	r3, [r7, #32]
          break;
 80020ec:	e000      	b.n	80020f0 <HAL_GPIO_Init+0x130>
          break;
 80020ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	2bff      	cmp	r3, #255	@ 0xff
 80020f4:	d801      	bhi.n	80020fa <HAL_GPIO_Init+0x13a>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	e001      	b.n	80020fe <HAL_GPIO_Init+0x13e>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	3304      	adds	r3, #4
 80020fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	2bff      	cmp	r3, #255	@ 0xff
 8002104:	d802      	bhi.n	800210c <HAL_GPIO_Init+0x14c>
 8002106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	e002      	b.n	8002112 <HAL_GPIO_Init+0x152>
 800210c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210e:	3b08      	subs	r3, #8
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	210f      	movs	r1, #15
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	fa01 f303 	lsl.w	r3, r1, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	401a      	ands	r2, r3
 8002124:	6a39      	ldr	r1, [r7, #32]
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	fa01 f303 	lsl.w	r3, r1, r3
 800212c:	431a      	orrs	r2, r3
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800213a:	2b00      	cmp	r3, #0
 800213c:	f000 80b1 	beq.w	80022a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002140:	4b4d      	ldr	r3, [pc, #308]	@ (8002278 <HAL_GPIO_Init+0x2b8>)
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	4a4c      	ldr	r2, [pc, #304]	@ (8002278 <HAL_GPIO_Init+0x2b8>)
 8002146:	f043 0301 	orr.w	r3, r3, #1
 800214a:	6193      	str	r3, [r2, #24]
 800214c:	4b4a      	ldr	r3, [pc, #296]	@ (8002278 <HAL_GPIO_Init+0x2b8>)
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	60bb      	str	r3, [r7, #8]
 8002156:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002158:	4a48      	ldr	r2, [pc, #288]	@ (800227c <HAL_GPIO_Init+0x2bc>)
 800215a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215c:	089b      	lsrs	r3, r3, #2
 800215e:	3302      	adds	r3, #2
 8002160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002164:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002168:	f003 0303 	and.w	r3, r3, #3
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	220f      	movs	r2, #15
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	4013      	ands	r3, r2
 800217a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a40      	ldr	r2, [pc, #256]	@ (8002280 <HAL_GPIO_Init+0x2c0>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d013      	beq.n	80021ac <HAL_GPIO_Init+0x1ec>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a3f      	ldr	r2, [pc, #252]	@ (8002284 <HAL_GPIO_Init+0x2c4>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d00d      	beq.n	80021a8 <HAL_GPIO_Init+0x1e8>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a3e      	ldr	r2, [pc, #248]	@ (8002288 <HAL_GPIO_Init+0x2c8>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d007      	beq.n	80021a4 <HAL_GPIO_Init+0x1e4>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a3d      	ldr	r2, [pc, #244]	@ (800228c <HAL_GPIO_Init+0x2cc>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d101      	bne.n	80021a0 <HAL_GPIO_Init+0x1e0>
 800219c:	2303      	movs	r3, #3
 800219e:	e006      	b.n	80021ae <HAL_GPIO_Init+0x1ee>
 80021a0:	2304      	movs	r3, #4
 80021a2:	e004      	b.n	80021ae <HAL_GPIO_Init+0x1ee>
 80021a4:	2302      	movs	r3, #2
 80021a6:	e002      	b.n	80021ae <HAL_GPIO_Init+0x1ee>
 80021a8:	2301      	movs	r3, #1
 80021aa:	e000      	b.n	80021ae <HAL_GPIO_Init+0x1ee>
 80021ac:	2300      	movs	r3, #0
 80021ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021b0:	f002 0203 	and.w	r2, r2, #3
 80021b4:	0092      	lsls	r2, r2, #2
 80021b6:	4093      	lsls	r3, r2
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021be:	492f      	ldr	r1, [pc, #188]	@ (800227c <HAL_GPIO_Init+0x2bc>)
 80021c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c2:	089b      	lsrs	r3, r3, #2
 80021c4:	3302      	adds	r3, #2
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d006      	beq.n	80021e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021d8:	4b2d      	ldr	r3, [pc, #180]	@ (8002290 <HAL_GPIO_Init+0x2d0>)
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	492c      	ldr	r1, [pc, #176]	@ (8002290 <HAL_GPIO_Init+0x2d0>)
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	608b      	str	r3, [r1, #8]
 80021e4:	e006      	b.n	80021f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021e6:	4b2a      	ldr	r3, [pc, #168]	@ (8002290 <HAL_GPIO_Init+0x2d0>)
 80021e8:	689a      	ldr	r2, [r3, #8]
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	43db      	mvns	r3, r3
 80021ee:	4928      	ldr	r1, [pc, #160]	@ (8002290 <HAL_GPIO_Init+0x2d0>)
 80021f0:	4013      	ands	r3, r2
 80021f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d006      	beq.n	800220e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002200:	4b23      	ldr	r3, [pc, #140]	@ (8002290 <HAL_GPIO_Init+0x2d0>)
 8002202:	68da      	ldr	r2, [r3, #12]
 8002204:	4922      	ldr	r1, [pc, #136]	@ (8002290 <HAL_GPIO_Init+0x2d0>)
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	4313      	orrs	r3, r2
 800220a:	60cb      	str	r3, [r1, #12]
 800220c:	e006      	b.n	800221c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800220e:	4b20      	ldr	r3, [pc, #128]	@ (8002290 <HAL_GPIO_Init+0x2d0>)
 8002210:	68da      	ldr	r2, [r3, #12]
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	43db      	mvns	r3, r3
 8002216:	491e      	ldr	r1, [pc, #120]	@ (8002290 <HAL_GPIO_Init+0x2d0>)
 8002218:	4013      	ands	r3, r2
 800221a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d006      	beq.n	8002236 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002228:	4b19      	ldr	r3, [pc, #100]	@ (8002290 <HAL_GPIO_Init+0x2d0>)
 800222a:	685a      	ldr	r2, [r3, #4]
 800222c:	4918      	ldr	r1, [pc, #96]	@ (8002290 <HAL_GPIO_Init+0x2d0>)
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	4313      	orrs	r3, r2
 8002232:	604b      	str	r3, [r1, #4]
 8002234:	e006      	b.n	8002244 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002236:	4b16      	ldr	r3, [pc, #88]	@ (8002290 <HAL_GPIO_Init+0x2d0>)
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	43db      	mvns	r3, r3
 800223e:	4914      	ldr	r1, [pc, #80]	@ (8002290 <HAL_GPIO_Init+0x2d0>)
 8002240:	4013      	ands	r3, r2
 8002242:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d021      	beq.n	8002294 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002250:	4b0f      	ldr	r3, [pc, #60]	@ (8002290 <HAL_GPIO_Init+0x2d0>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	490e      	ldr	r1, [pc, #56]	@ (8002290 <HAL_GPIO_Init+0x2d0>)
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	4313      	orrs	r3, r2
 800225a:	600b      	str	r3, [r1, #0]
 800225c:	e021      	b.n	80022a2 <HAL_GPIO_Init+0x2e2>
 800225e:	bf00      	nop
 8002260:	10320000 	.word	0x10320000
 8002264:	10310000 	.word	0x10310000
 8002268:	10220000 	.word	0x10220000
 800226c:	10210000 	.word	0x10210000
 8002270:	10120000 	.word	0x10120000
 8002274:	10110000 	.word	0x10110000
 8002278:	40021000 	.word	0x40021000
 800227c:	40010000 	.word	0x40010000
 8002280:	40010800 	.word	0x40010800
 8002284:	40010c00 	.word	0x40010c00
 8002288:	40011000 	.word	0x40011000
 800228c:	40011400 	.word	0x40011400
 8002290:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002294:	4b0b      	ldr	r3, [pc, #44]	@ (80022c4 <HAL_GPIO_Init+0x304>)
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	43db      	mvns	r3, r3
 800229c:	4909      	ldr	r1, [pc, #36]	@ (80022c4 <HAL_GPIO_Init+0x304>)
 800229e:	4013      	ands	r3, r2
 80022a0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80022a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a4:	3301      	adds	r3, #1
 80022a6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ae:	fa22 f303 	lsr.w	r3, r2, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f47f ae8e 	bne.w	8001fd4 <HAL_GPIO_Init+0x14>
  }
}
 80022b8:	bf00      	nop
 80022ba:	bf00      	nop
 80022bc:	372c      	adds	r7, #44	@ 0x2c
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr
 80022c4:	40010400 	.word	0x40010400

080022c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	887b      	ldrh	r3, [r7, #2]
 80022da:	4013      	ands	r3, r2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d002      	beq.n	80022e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022e0:	2301      	movs	r3, #1
 80022e2:	73fb      	strb	r3, [r7, #15]
 80022e4:	e001      	b.n	80022ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022e6:	2300      	movs	r3, #0
 80022e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc80      	pop	{r7}
 80022f4:	4770      	bx	lr

080022f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b083      	sub	sp, #12
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
 80022fe:	460b      	mov	r3, r1
 8002300:	807b      	strh	r3, [r7, #2]
 8002302:	4613      	mov	r3, r2
 8002304:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002306:	787b      	ldrb	r3, [r7, #1]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800230c:	887a      	ldrh	r2, [r7, #2]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002312:	e003      	b.n	800231c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002314:	887b      	ldrh	r3, [r7, #2]
 8002316:	041a      	lsls	r2, r3, #16
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	611a      	str	r2, [r3, #16]
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	bc80      	pop	{r7}
 8002324:	4770      	bx	lr
	...

08002328 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e272      	b.n	8002820 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	f000 8087 	beq.w	8002456 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002348:	4b92      	ldr	r3, [pc, #584]	@ (8002594 <HAL_RCC_OscConfig+0x26c>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 030c 	and.w	r3, r3, #12
 8002350:	2b04      	cmp	r3, #4
 8002352:	d00c      	beq.n	800236e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002354:	4b8f      	ldr	r3, [pc, #572]	@ (8002594 <HAL_RCC_OscConfig+0x26c>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f003 030c 	and.w	r3, r3, #12
 800235c:	2b08      	cmp	r3, #8
 800235e:	d112      	bne.n	8002386 <HAL_RCC_OscConfig+0x5e>
 8002360:	4b8c      	ldr	r3, [pc, #560]	@ (8002594 <HAL_RCC_OscConfig+0x26c>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002368:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800236c:	d10b      	bne.n	8002386 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800236e:	4b89      	ldr	r3, [pc, #548]	@ (8002594 <HAL_RCC_OscConfig+0x26c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d06c      	beq.n	8002454 <HAL_RCC_OscConfig+0x12c>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d168      	bne.n	8002454 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e24c      	b.n	8002820 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800238e:	d106      	bne.n	800239e <HAL_RCC_OscConfig+0x76>
 8002390:	4b80      	ldr	r3, [pc, #512]	@ (8002594 <HAL_RCC_OscConfig+0x26c>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a7f      	ldr	r2, [pc, #508]	@ (8002594 <HAL_RCC_OscConfig+0x26c>)
 8002396:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800239a:	6013      	str	r3, [r2, #0]
 800239c:	e02e      	b.n	80023fc <HAL_RCC_OscConfig+0xd4>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10c      	bne.n	80023c0 <HAL_RCC_OscConfig+0x98>
 80023a6:	4b7b      	ldr	r3, [pc, #492]	@ (8002594 <HAL_RCC_OscConfig+0x26c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a7a      	ldr	r2, [pc, #488]	@ (8002594 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023b0:	6013      	str	r3, [r2, #0]
 80023b2:	4b78      	ldr	r3, [pc, #480]	@ (8002594 <HAL_RCC_OscConfig+0x26c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a77      	ldr	r2, [pc, #476]	@ (8002594 <HAL_RCC_OscConfig+0x26c>)
 80023b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	e01d      	b.n	80023fc <HAL_RCC_OscConfig+0xd4>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023c8:	d10c      	bne.n	80023e4 <HAL_RCC_OscConfig+0xbc>
 80023ca:	4b72      	ldr	r3, [pc, #456]	@ (8002594 <HAL_RCC_OscConfig+0x26c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a71      	ldr	r2, [pc, #452]	@ (8002594 <HAL_RCC_OscConfig+0x26c>)
 80023d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	4b6f      	ldr	r3, [pc, #444]	@ (8002594 <HAL_RCC_OscConfig+0x26c>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a6e      	ldr	r2, [pc, #440]	@ (8002594 <HAL_RCC_OscConfig+0x26c>)
 80023dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023e0:	6013      	str	r3, [r2, #0]
 80023e2:	e00b      	b.n	80023fc <HAL_RCC_OscConfig+0xd4>
 80023e4:	4b6b      	ldr	r3, [pc, #428]	@ (8002594 <HAL_RCC_OscConfig+0x26c>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a6a      	ldr	r2, [pc, #424]	@ (8002594 <HAL_RCC_OscConfig+0x26c>)
 80023ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023ee:	6013      	str	r3, [r2, #0]
 80023f0:	4b68      	ldr	r3, [pc, #416]	@ (8002594 <HAL_RCC_OscConfig+0x26c>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a67      	ldr	r2, [pc, #412]	@ (8002594 <HAL_RCC_OscConfig+0x26c>)
 80023f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d013      	beq.n	800242c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002404:	f7ff fa3a 	bl	800187c <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800240c:	f7ff fa36 	bl	800187c <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b64      	cmp	r3, #100	@ 0x64
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e200      	b.n	8002820 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800241e:	4b5d      	ldr	r3, [pc, #372]	@ (8002594 <HAL_RCC_OscConfig+0x26c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d0f0      	beq.n	800240c <HAL_RCC_OscConfig+0xe4>
 800242a:	e014      	b.n	8002456 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242c:	f7ff fa26 	bl	800187c <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002434:	f7ff fa22 	bl	800187c <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b64      	cmp	r3, #100	@ 0x64
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e1ec      	b.n	8002820 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002446:	4b53      	ldr	r3, [pc, #332]	@ (8002594 <HAL_RCC_OscConfig+0x26c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1f0      	bne.n	8002434 <HAL_RCC_OscConfig+0x10c>
 8002452:	e000      	b.n	8002456 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002454:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d063      	beq.n	800252a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002462:	4b4c      	ldr	r3, [pc, #304]	@ (8002594 <HAL_RCC_OscConfig+0x26c>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f003 030c 	and.w	r3, r3, #12
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00b      	beq.n	8002486 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800246e:	4b49      	ldr	r3, [pc, #292]	@ (8002594 <HAL_RCC_OscConfig+0x26c>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f003 030c 	and.w	r3, r3, #12
 8002476:	2b08      	cmp	r3, #8
 8002478:	d11c      	bne.n	80024b4 <HAL_RCC_OscConfig+0x18c>
 800247a:	4b46      	ldr	r3, [pc, #280]	@ (8002594 <HAL_RCC_OscConfig+0x26c>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d116      	bne.n	80024b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002486:	4b43      	ldr	r3, [pc, #268]	@ (8002594 <HAL_RCC_OscConfig+0x26c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d005      	beq.n	800249e <HAL_RCC_OscConfig+0x176>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d001      	beq.n	800249e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e1c0      	b.n	8002820 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800249e:	4b3d      	ldr	r3, [pc, #244]	@ (8002594 <HAL_RCC_OscConfig+0x26c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	4939      	ldr	r1, [pc, #228]	@ (8002594 <HAL_RCC_OscConfig+0x26c>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024b2:	e03a      	b.n	800252a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d020      	beq.n	80024fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024bc:	4b36      	ldr	r3, [pc, #216]	@ (8002598 <HAL_RCC_OscConfig+0x270>)
 80024be:	2201      	movs	r2, #1
 80024c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c2:	f7ff f9db 	bl	800187c <HAL_GetTick>
 80024c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c8:	e008      	b.n	80024dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ca:	f7ff f9d7 	bl	800187c <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e1a1      	b.n	8002820 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024dc:	4b2d      	ldr	r3, [pc, #180]	@ (8002594 <HAL_RCC_OscConfig+0x26c>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d0f0      	beq.n	80024ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e8:	4b2a      	ldr	r3, [pc, #168]	@ (8002594 <HAL_RCC_OscConfig+0x26c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	4927      	ldr	r1, [pc, #156]	@ (8002594 <HAL_RCC_OscConfig+0x26c>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	600b      	str	r3, [r1, #0]
 80024fc:	e015      	b.n	800252a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024fe:	4b26      	ldr	r3, [pc, #152]	@ (8002598 <HAL_RCC_OscConfig+0x270>)
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002504:	f7ff f9ba 	bl	800187c <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800250c:	f7ff f9b6 	bl	800187c <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e180      	b.n	8002820 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800251e:	4b1d      	ldr	r3, [pc, #116]	@ (8002594 <HAL_RCC_OscConfig+0x26c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1f0      	bne.n	800250c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0308 	and.w	r3, r3, #8
 8002532:	2b00      	cmp	r3, #0
 8002534:	d03a      	beq.n	80025ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d019      	beq.n	8002572 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800253e:	4b17      	ldr	r3, [pc, #92]	@ (800259c <HAL_RCC_OscConfig+0x274>)
 8002540:	2201      	movs	r2, #1
 8002542:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002544:	f7ff f99a 	bl	800187c <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800254c:	f7ff f996 	bl	800187c <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e160      	b.n	8002820 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800255e:	4b0d      	ldr	r3, [pc, #52]	@ (8002594 <HAL_RCC_OscConfig+0x26c>)
 8002560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d0f0      	beq.n	800254c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800256a:	2001      	movs	r0, #1
 800256c:	f000 fa9c 	bl	8002aa8 <RCC_Delay>
 8002570:	e01c      	b.n	80025ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002572:	4b0a      	ldr	r3, [pc, #40]	@ (800259c <HAL_RCC_OscConfig+0x274>)
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002578:	f7ff f980 	bl	800187c <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800257e:	e00f      	b.n	80025a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002580:	f7ff f97c 	bl	800187c <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d908      	bls.n	80025a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e146      	b.n	8002820 <HAL_RCC_OscConfig+0x4f8>
 8002592:	bf00      	nop
 8002594:	40021000 	.word	0x40021000
 8002598:	42420000 	.word	0x42420000
 800259c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025a0:	4b92      	ldr	r3, [pc, #584]	@ (80027ec <HAL_RCC_OscConfig+0x4c4>)
 80025a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1e9      	bne.n	8002580 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 80a6 	beq.w	8002706 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ba:	2300      	movs	r3, #0
 80025bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025be:	4b8b      	ldr	r3, [pc, #556]	@ (80027ec <HAL_RCC_OscConfig+0x4c4>)
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10d      	bne.n	80025e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ca:	4b88      	ldr	r3, [pc, #544]	@ (80027ec <HAL_RCC_OscConfig+0x4c4>)
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	4a87      	ldr	r2, [pc, #540]	@ (80027ec <HAL_RCC_OscConfig+0x4c4>)
 80025d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025d4:	61d3      	str	r3, [r2, #28]
 80025d6:	4b85      	ldr	r3, [pc, #532]	@ (80027ec <HAL_RCC_OscConfig+0x4c4>)
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025de:	60bb      	str	r3, [r7, #8]
 80025e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025e2:	2301      	movs	r3, #1
 80025e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e6:	4b82      	ldr	r3, [pc, #520]	@ (80027f0 <HAL_RCC_OscConfig+0x4c8>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d118      	bne.n	8002624 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025f2:	4b7f      	ldr	r3, [pc, #508]	@ (80027f0 <HAL_RCC_OscConfig+0x4c8>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a7e      	ldr	r2, [pc, #504]	@ (80027f0 <HAL_RCC_OscConfig+0x4c8>)
 80025f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025fe:	f7ff f93d 	bl	800187c <HAL_GetTick>
 8002602:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002604:	e008      	b.n	8002618 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002606:	f7ff f939 	bl	800187c <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b64      	cmp	r3, #100	@ 0x64
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e103      	b.n	8002820 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002618:	4b75      	ldr	r3, [pc, #468]	@ (80027f0 <HAL_RCC_OscConfig+0x4c8>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002620:	2b00      	cmp	r3, #0
 8002622:	d0f0      	beq.n	8002606 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d106      	bne.n	800263a <HAL_RCC_OscConfig+0x312>
 800262c:	4b6f      	ldr	r3, [pc, #444]	@ (80027ec <HAL_RCC_OscConfig+0x4c4>)
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	4a6e      	ldr	r2, [pc, #440]	@ (80027ec <HAL_RCC_OscConfig+0x4c4>)
 8002632:	f043 0301 	orr.w	r3, r3, #1
 8002636:	6213      	str	r3, [r2, #32]
 8002638:	e02d      	b.n	8002696 <HAL_RCC_OscConfig+0x36e>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d10c      	bne.n	800265c <HAL_RCC_OscConfig+0x334>
 8002642:	4b6a      	ldr	r3, [pc, #424]	@ (80027ec <HAL_RCC_OscConfig+0x4c4>)
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	4a69      	ldr	r2, [pc, #420]	@ (80027ec <HAL_RCC_OscConfig+0x4c4>)
 8002648:	f023 0301 	bic.w	r3, r3, #1
 800264c:	6213      	str	r3, [r2, #32]
 800264e:	4b67      	ldr	r3, [pc, #412]	@ (80027ec <HAL_RCC_OscConfig+0x4c4>)
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	4a66      	ldr	r2, [pc, #408]	@ (80027ec <HAL_RCC_OscConfig+0x4c4>)
 8002654:	f023 0304 	bic.w	r3, r3, #4
 8002658:	6213      	str	r3, [r2, #32]
 800265a:	e01c      	b.n	8002696 <HAL_RCC_OscConfig+0x36e>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	2b05      	cmp	r3, #5
 8002662:	d10c      	bne.n	800267e <HAL_RCC_OscConfig+0x356>
 8002664:	4b61      	ldr	r3, [pc, #388]	@ (80027ec <HAL_RCC_OscConfig+0x4c4>)
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	4a60      	ldr	r2, [pc, #384]	@ (80027ec <HAL_RCC_OscConfig+0x4c4>)
 800266a:	f043 0304 	orr.w	r3, r3, #4
 800266e:	6213      	str	r3, [r2, #32]
 8002670:	4b5e      	ldr	r3, [pc, #376]	@ (80027ec <HAL_RCC_OscConfig+0x4c4>)
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	4a5d      	ldr	r2, [pc, #372]	@ (80027ec <HAL_RCC_OscConfig+0x4c4>)
 8002676:	f043 0301 	orr.w	r3, r3, #1
 800267a:	6213      	str	r3, [r2, #32]
 800267c:	e00b      	b.n	8002696 <HAL_RCC_OscConfig+0x36e>
 800267e:	4b5b      	ldr	r3, [pc, #364]	@ (80027ec <HAL_RCC_OscConfig+0x4c4>)
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	4a5a      	ldr	r2, [pc, #360]	@ (80027ec <HAL_RCC_OscConfig+0x4c4>)
 8002684:	f023 0301 	bic.w	r3, r3, #1
 8002688:	6213      	str	r3, [r2, #32]
 800268a:	4b58      	ldr	r3, [pc, #352]	@ (80027ec <HAL_RCC_OscConfig+0x4c4>)
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	4a57      	ldr	r2, [pc, #348]	@ (80027ec <HAL_RCC_OscConfig+0x4c4>)
 8002690:	f023 0304 	bic.w	r3, r3, #4
 8002694:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d015      	beq.n	80026ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800269e:	f7ff f8ed 	bl	800187c <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a4:	e00a      	b.n	80026bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026a6:	f7ff f8e9 	bl	800187c <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e0b1      	b.n	8002820 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026bc:	4b4b      	ldr	r3, [pc, #300]	@ (80027ec <HAL_RCC_OscConfig+0x4c4>)
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d0ee      	beq.n	80026a6 <HAL_RCC_OscConfig+0x37e>
 80026c8:	e014      	b.n	80026f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ca:	f7ff f8d7 	bl	800187c <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026d0:	e00a      	b.n	80026e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d2:	f7ff f8d3 	bl	800187c <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e09b      	b.n	8002820 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026e8:	4b40      	ldr	r3, [pc, #256]	@ (80027ec <HAL_RCC_OscConfig+0x4c4>)
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1ee      	bne.n	80026d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026f4:	7dfb      	ldrb	r3, [r7, #23]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d105      	bne.n	8002706 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026fa:	4b3c      	ldr	r3, [pc, #240]	@ (80027ec <HAL_RCC_OscConfig+0x4c4>)
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	4a3b      	ldr	r2, [pc, #236]	@ (80027ec <HAL_RCC_OscConfig+0x4c4>)
 8002700:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002704:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	2b00      	cmp	r3, #0
 800270c:	f000 8087 	beq.w	800281e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002710:	4b36      	ldr	r3, [pc, #216]	@ (80027ec <HAL_RCC_OscConfig+0x4c4>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f003 030c 	and.w	r3, r3, #12
 8002718:	2b08      	cmp	r3, #8
 800271a:	d061      	beq.n	80027e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	2b02      	cmp	r3, #2
 8002722:	d146      	bne.n	80027b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002724:	4b33      	ldr	r3, [pc, #204]	@ (80027f4 <HAL_RCC_OscConfig+0x4cc>)
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272a:	f7ff f8a7 	bl	800187c <HAL_GetTick>
 800272e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002730:	e008      	b.n	8002744 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002732:	f7ff f8a3 	bl	800187c <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e06d      	b.n	8002820 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002744:	4b29      	ldr	r3, [pc, #164]	@ (80027ec <HAL_RCC_OscConfig+0x4c4>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1f0      	bne.n	8002732 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002758:	d108      	bne.n	800276c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800275a:	4b24      	ldr	r3, [pc, #144]	@ (80027ec <HAL_RCC_OscConfig+0x4c4>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	4921      	ldr	r1, [pc, #132]	@ (80027ec <HAL_RCC_OscConfig+0x4c4>)
 8002768:	4313      	orrs	r3, r2
 800276a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800276c:	4b1f      	ldr	r3, [pc, #124]	@ (80027ec <HAL_RCC_OscConfig+0x4c4>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a19      	ldr	r1, [r3, #32]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800277c:	430b      	orrs	r3, r1
 800277e:	491b      	ldr	r1, [pc, #108]	@ (80027ec <HAL_RCC_OscConfig+0x4c4>)
 8002780:	4313      	orrs	r3, r2
 8002782:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002784:	4b1b      	ldr	r3, [pc, #108]	@ (80027f4 <HAL_RCC_OscConfig+0x4cc>)
 8002786:	2201      	movs	r2, #1
 8002788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278a:	f7ff f877 	bl	800187c <HAL_GetTick>
 800278e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002790:	e008      	b.n	80027a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002792:	f7ff f873 	bl	800187c <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e03d      	b.n	8002820 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027a4:	4b11      	ldr	r3, [pc, #68]	@ (80027ec <HAL_RCC_OscConfig+0x4c4>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d0f0      	beq.n	8002792 <HAL_RCC_OscConfig+0x46a>
 80027b0:	e035      	b.n	800281e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027b2:	4b10      	ldr	r3, [pc, #64]	@ (80027f4 <HAL_RCC_OscConfig+0x4cc>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b8:	f7ff f860 	bl	800187c <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c0:	f7ff f85c 	bl	800187c <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e026      	b.n	8002820 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027d2:	4b06      	ldr	r3, [pc, #24]	@ (80027ec <HAL_RCC_OscConfig+0x4c4>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1f0      	bne.n	80027c0 <HAL_RCC_OscConfig+0x498>
 80027de:	e01e      	b.n	800281e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	69db      	ldr	r3, [r3, #28]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d107      	bne.n	80027f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e019      	b.n	8002820 <HAL_RCC_OscConfig+0x4f8>
 80027ec:	40021000 	.word	0x40021000
 80027f0:	40007000 	.word	0x40007000
 80027f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002828 <HAL_RCC_OscConfig+0x500>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	429a      	cmp	r2, r3
 800280a:	d106      	bne.n	800281a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002816:	429a      	cmp	r2, r3
 8002818:	d001      	beq.n	800281e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e000      	b.n	8002820 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	3718      	adds	r7, #24
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40021000 	.word	0x40021000

0800282c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d101      	bne.n	8002840 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e0d0      	b.n	80029e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002840:	4b6a      	ldr	r3, [pc, #424]	@ (80029ec <HAL_RCC_ClockConfig+0x1c0>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0307 	and.w	r3, r3, #7
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	429a      	cmp	r2, r3
 800284c:	d910      	bls.n	8002870 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800284e:	4b67      	ldr	r3, [pc, #412]	@ (80029ec <HAL_RCC_ClockConfig+0x1c0>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f023 0207 	bic.w	r2, r3, #7
 8002856:	4965      	ldr	r1, [pc, #404]	@ (80029ec <HAL_RCC_ClockConfig+0x1c0>)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	4313      	orrs	r3, r2
 800285c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800285e:	4b63      	ldr	r3, [pc, #396]	@ (80029ec <HAL_RCC_ClockConfig+0x1c0>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	429a      	cmp	r2, r3
 800286a:	d001      	beq.n	8002870 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e0b8      	b.n	80029e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d020      	beq.n	80028be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	2b00      	cmp	r3, #0
 8002886:	d005      	beq.n	8002894 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002888:	4b59      	ldr	r3, [pc, #356]	@ (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	4a58      	ldr	r2, [pc, #352]	@ (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 800288e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002892:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0308 	and.w	r3, r3, #8
 800289c:	2b00      	cmp	r3, #0
 800289e:	d005      	beq.n	80028ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028a0:	4b53      	ldr	r3, [pc, #332]	@ (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	4a52      	ldr	r2, [pc, #328]	@ (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 80028a6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80028aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028ac:	4b50      	ldr	r3, [pc, #320]	@ (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	494d      	ldr	r1, [pc, #308]	@ (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d040      	beq.n	800294c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d107      	bne.n	80028e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028d2:	4b47      	ldr	r3, [pc, #284]	@ (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d115      	bne.n	800290a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e07f      	b.n	80029e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d107      	bne.n	80028fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ea:	4b41      	ldr	r3, [pc, #260]	@ (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d109      	bne.n	800290a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e073      	b.n	80029e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028fa:	4b3d      	ldr	r3, [pc, #244]	@ (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e06b      	b.n	80029e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800290a:	4b39      	ldr	r3, [pc, #228]	@ (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f023 0203 	bic.w	r2, r3, #3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	4936      	ldr	r1, [pc, #216]	@ (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002918:	4313      	orrs	r3, r2
 800291a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800291c:	f7fe ffae 	bl	800187c <HAL_GetTick>
 8002920:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002922:	e00a      	b.n	800293a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002924:	f7fe ffaa 	bl	800187c <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002932:	4293      	cmp	r3, r2
 8002934:	d901      	bls.n	800293a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e053      	b.n	80029e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800293a:	4b2d      	ldr	r3, [pc, #180]	@ (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f003 020c 	and.w	r2, r3, #12
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	429a      	cmp	r2, r3
 800294a:	d1eb      	bne.n	8002924 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800294c:	4b27      	ldr	r3, [pc, #156]	@ (80029ec <HAL_RCC_ClockConfig+0x1c0>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	429a      	cmp	r2, r3
 8002958:	d210      	bcs.n	800297c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800295a:	4b24      	ldr	r3, [pc, #144]	@ (80029ec <HAL_RCC_ClockConfig+0x1c0>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f023 0207 	bic.w	r2, r3, #7
 8002962:	4922      	ldr	r1, [pc, #136]	@ (80029ec <HAL_RCC_ClockConfig+0x1c0>)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	4313      	orrs	r3, r2
 8002968:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800296a:	4b20      	ldr	r3, [pc, #128]	@ (80029ec <HAL_RCC_ClockConfig+0x1c0>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	429a      	cmp	r2, r3
 8002976:	d001      	beq.n	800297c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e032      	b.n	80029e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b00      	cmp	r3, #0
 8002986:	d008      	beq.n	800299a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002988:	4b19      	ldr	r3, [pc, #100]	@ (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	4916      	ldr	r1, [pc, #88]	@ (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002996:	4313      	orrs	r3, r2
 8002998:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0308 	and.w	r3, r3, #8
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d009      	beq.n	80029ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029a6:	4b12      	ldr	r3, [pc, #72]	@ (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	490e      	ldr	r1, [pc, #56]	@ (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029ba:	f000 f821 	bl	8002a00 <HAL_RCC_GetSysClockFreq>
 80029be:	4602      	mov	r2, r0
 80029c0:	4b0b      	ldr	r3, [pc, #44]	@ (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	091b      	lsrs	r3, r3, #4
 80029c6:	f003 030f 	and.w	r3, r3, #15
 80029ca:	490a      	ldr	r1, [pc, #40]	@ (80029f4 <HAL_RCC_ClockConfig+0x1c8>)
 80029cc:	5ccb      	ldrb	r3, [r1, r3]
 80029ce:	fa22 f303 	lsr.w	r3, r2, r3
 80029d2:	4a09      	ldr	r2, [pc, #36]	@ (80029f8 <HAL_RCC_ClockConfig+0x1cc>)
 80029d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029d6:	4b09      	ldr	r3, [pc, #36]	@ (80029fc <HAL_RCC_ClockConfig+0x1d0>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fe ff0c 	bl	80017f8 <HAL_InitTick>

  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	40022000 	.word	0x40022000
 80029f0:	40021000 	.word	0x40021000
 80029f4:	080046f0 	.word	0x080046f0
 80029f8:	20000084 	.word	0x20000084
 80029fc:	20000088 	.word	0x20000088

08002a00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b087      	sub	sp, #28
 8002a04:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	60fb      	str	r3, [r7, #12]
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60bb      	str	r3, [r7, #8]
 8002a0e:	2300      	movs	r3, #0
 8002a10:	617b      	str	r3, [r7, #20]
 8002a12:	2300      	movs	r3, #0
 8002a14:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a16:	2300      	movs	r3, #0
 8002a18:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a1a:	4b1e      	ldr	r3, [pc, #120]	@ (8002a94 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f003 030c 	and.w	r3, r3, #12
 8002a26:	2b04      	cmp	r3, #4
 8002a28:	d002      	beq.n	8002a30 <HAL_RCC_GetSysClockFreq+0x30>
 8002a2a:	2b08      	cmp	r3, #8
 8002a2c:	d003      	beq.n	8002a36 <HAL_RCC_GetSysClockFreq+0x36>
 8002a2e:	e027      	b.n	8002a80 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a30:	4b19      	ldr	r3, [pc, #100]	@ (8002a98 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a32:	613b      	str	r3, [r7, #16]
      break;
 8002a34:	e027      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	0c9b      	lsrs	r3, r3, #18
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	4a17      	ldr	r2, [pc, #92]	@ (8002a9c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a40:	5cd3      	ldrb	r3, [r2, r3]
 8002a42:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d010      	beq.n	8002a70 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a4e:	4b11      	ldr	r3, [pc, #68]	@ (8002a94 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	0c5b      	lsrs	r3, r3, #17
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	4a11      	ldr	r2, [pc, #68]	@ (8002aa0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a5a:	5cd3      	ldrb	r3, [r2, r3]
 8002a5c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a0d      	ldr	r2, [pc, #52]	@ (8002a98 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a62:	fb03 f202 	mul.w	r2, r3, r2
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a6c:	617b      	str	r3, [r7, #20]
 8002a6e:	e004      	b.n	8002a7a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a0c      	ldr	r2, [pc, #48]	@ (8002aa4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a74:	fb02 f303 	mul.w	r3, r2, r3
 8002a78:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	613b      	str	r3, [r7, #16]
      break;
 8002a7e:	e002      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a80:	4b05      	ldr	r3, [pc, #20]	@ (8002a98 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a82:	613b      	str	r3, [r7, #16]
      break;
 8002a84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a86:	693b      	ldr	r3, [r7, #16]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	371c      	adds	r7, #28
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bc80      	pop	{r7}
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	40021000 	.word	0x40021000
 8002a98:	007a1200 	.word	0x007a1200
 8002a9c:	08004700 	.word	0x08004700
 8002aa0:	08004710 	.word	0x08004710
 8002aa4:	003d0900 	.word	0x003d0900

08002aa8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ab0:	4b0a      	ldr	r3, [pc, #40]	@ (8002adc <RCC_Delay+0x34>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a0a      	ldr	r2, [pc, #40]	@ (8002ae0 <RCC_Delay+0x38>)
 8002ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aba:	0a5b      	lsrs	r3, r3, #9
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	fb02 f303 	mul.w	r3, r2, r3
 8002ac2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ac4:	bf00      	nop
  }
  while (Delay --);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	1e5a      	subs	r2, r3, #1
 8002aca:	60fa      	str	r2, [r7, #12]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1f9      	bne.n	8002ac4 <RCC_Delay+0x1c>
}
 8002ad0:	bf00      	nop
 8002ad2:	bf00      	nop
 8002ad4:	3714      	adds	r7, #20
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bc80      	pop	{r7}
 8002ada:	4770      	bx	lr
 8002adc:	20000084 	.word	0x20000084
 8002ae0:	10624dd3 	.word	0x10624dd3

08002ae4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e041      	b.n	8002b7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d106      	bne.n	8002b10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7fe fd48 	bl	80015a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2202      	movs	r2, #2
 8002b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	3304      	adds	r3, #4
 8002b20:	4619      	mov	r1, r3
 8002b22:	4610      	mov	r0, r2
 8002b24:	f000 fd5a 	bl	80035dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b082      	sub	sp, #8
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d101      	bne.n	8002b94 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e041      	b.n	8002c18 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d106      	bne.n	8002bae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 f839 	bl	8002c20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2202      	movs	r2, #2
 8002bb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	3304      	adds	r3, #4
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	4610      	mov	r0, r2
 8002bc2:	f000 fd0b 	bl	80035dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bc80      	pop	{r7}
 8002c30:	4770      	bx	lr
	...

08002c34 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
 8002c40:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8002c42:	2300      	movs	r3, #0
 8002c44:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d109      	bne.n	8002c60 <HAL_TIM_PWM_Start_DMA+0x2c>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	bf0c      	ite	eq
 8002c58:	2301      	moveq	r3, #1
 8002c5a:	2300      	movne	r3, #0
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	e022      	b.n	8002ca6 <HAL_TIM_PWM_Start_DMA+0x72>
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	2b04      	cmp	r3, #4
 8002c64:	d109      	bne.n	8002c7a <HAL_TIM_PWM_Start_DMA+0x46>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	bf0c      	ite	eq
 8002c72:	2301      	moveq	r3, #1
 8002c74:	2300      	movne	r3, #0
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	e015      	b.n	8002ca6 <HAL_TIM_PWM_Start_DMA+0x72>
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	2b08      	cmp	r3, #8
 8002c7e:	d109      	bne.n	8002c94 <HAL_TIM_PWM_Start_DMA+0x60>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	bf0c      	ite	eq
 8002c8c:	2301      	moveq	r3, #1
 8002c8e:	2300      	movne	r3, #0
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	e008      	b.n	8002ca6 <HAL_TIM_PWM_Start_DMA+0x72>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	bf0c      	ite	eq
 8002ca0:	2301      	moveq	r3, #1
 8002ca2:	2300      	movne	r3, #0
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8002caa:	2302      	movs	r3, #2
 8002cac:	e153      	b.n	8002f56 <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d109      	bne.n	8002cc8 <HAL_TIM_PWM_Start_DMA+0x94>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	bf0c      	ite	eq
 8002cc0:	2301      	moveq	r3, #1
 8002cc2:	2300      	movne	r3, #0
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	e022      	b.n	8002d0e <HAL_TIM_PWM_Start_DMA+0xda>
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	d109      	bne.n	8002ce2 <HAL_TIM_PWM_Start_DMA+0xae>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	bf0c      	ite	eq
 8002cda:	2301      	moveq	r3, #1
 8002cdc:	2300      	movne	r3, #0
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	e015      	b.n	8002d0e <HAL_TIM_PWM_Start_DMA+0xda>
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	2b08      	cmp	r3, #8
 8002ce6:	d109      	bne.n	8002cfc <HAL_TIM_PWM_Start_DMA+0xc8>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	bf0c      	ite	eq
 8002cf4:	2301      	moveq	r3, #1
 8002cf6:	2300      	movne	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	e008      	b.n	8002d0e <HAL_TIM_PWM_Start_DMA+0xda>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	bf0c      	ite	eq
 8002d08:	2301      	moveq	r3, #1
 8002d0a:	2300      	movne	r3, #0
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d024      	beq.n	8002d5c <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d002      	beq.n	8002d1e <HAL_TIM_PWM_Start_DMA+0xea>
 8002d18:	887b      	ldrh	r3, [r7, #2]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e119      	b.n	8002f56 <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d104      	bne.n	8002d32 <HAL_TIM_PWM_Start_DMA+0xfe>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d30:	e016      	b.n	8002d60 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	2b04      	cmp	r3, #4
 8002d36:	d104      	bne.n	8002d42 <HAL_TIM_PWM_Start_DMA+0x10e>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d40:	e00e      	b.n	8002d60 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	2b08      	cmp	r3, #8
 8002d46:	d104      	bne.n	8002d52 <HAL_TIM_PWM_Start_DMA+0x11e>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d50:	e006      	b.n	8002d60 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2202      	movs	r2, #2
 8002d56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002d5a:	e001      	b.n	8002d60 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e0fa      	b.n	8002f56 <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	2b0c      	cmp	r3, #12
 8002d64:	f200 80ae 	bhi.w	8002ec4 <HAL_TIM_PWM_Start_DMA+0x290>
 8002d68:	a201      	add	r2, pc, #4	@ (adr r2, 8002d70 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8002d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d6e:	bf00      	nop
 8002d70:	08002da5 	.word	0x08002da5
 8002d74:	08002ec5 	.word	0x08002ec5
 8002d78:	08002ec5 	.word	0x08002ec5
 8002d7c:	08002ec5 	.word	0x08002ec5
 8002d80:	08002ded 	.word	0x08002ded
 8002d84:	08002ec5 	.word	0x08002ec5
 8002d88:	08002ec5 	.word	0x08002ec5
 8002d8c:	08002ec5 	.word	0x08002ec5
 8002d90:	08002e35 	.word	0x08002e35
 8002d94:	08002ec5 	.word	0x08002ec5
 8002d98:	08002ec5 	.word	0x08002ec5
 8002d9c:	08002ec5 	.word	0x08002ec5
 8002da0:	08002e7d 	.word	0x08002e7d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da8:	4a6d      	ldr	r2, [pc, #436]	@ (8002f60 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002daa:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db0:	4a6c      	ldr	r2, [pc, #432]	@ (8002f64 <HAL_TIM_PWM_Start_DMA+0x330>)
 8002db2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db8:	4a6b      	ldr	r2, [pc, #428]	@ (8002f68 <HAL_TIM_PWM_Start_DMA+0x334>)
 8002dba:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	3334      	adds	r3, #52	@ 0x34
 8002dc8:	461a      	mov	r2, r3
 8002dca:	887b      	ldrh	r3, [r7, #2]
 8002dcc:	f7fe feec 	bl	8001ba8 <HAL_DMA_Start_IT>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e0bd      	b.n	8002f56 <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68da      	ldr	r2, [r3, #12]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002de8:	60da      	str	r2, [r3, #12]
      break;
 8002dea:	e06e      	b.n	8002eca <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002df0:	4a5b      	ldr	r2, [pc, #364]	@ (8002f60 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002df2:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002df8:	4a5a      	ldr	r2, [pc, #360]	@ (8002f64 <HAL_TIM_PWM_Start_DMA+0x330>)
 8002dfa:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e00:	4a59      	ldr	r2, [pc, #356]	@ (8002f68 <HAL_TIM_PWM_Start_DMA+0x334>)
 8002e02:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002e08:	6879      	ldr	r1, [r7, #4]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	3338      	adds	r3, #56	@ 0x38
 8002e10:	461a      	mov	r2, r3
 8002e12:	887b      	ldrh	r3, [r7, #2]
 8002e14:	f7fe fec8 	bl	8001ba8 <HAL_DMA_Start_IT>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e099      	b.n	8002f56 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68da      	ldr	r2, [r3, #12]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e30:	60da      	str	r2, [r3, #12]
      break;
 8002e32:	e04a      	b.n	8002eca <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e38:	4a49      	ldr	r2, [pc, #292]	@ (8002f60 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002e3a:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e40:	4a48      	ldr	r2, [pc, #288]	@ (8002f64 <HAL_TIM_PWM_Start_DMA+0x330>)
 8002e42:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e48:	4a47      	ldr	r2, [pc, #284]	@ (8002f68 <HAL_TIM_PWM_Start_DMA+0x334>)
 8002e4a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002e50:	6879      	ldr	r1, [r7, #4]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	333c      	adds	r3, #60	@ 0x3c
 8002e58:	461a      	mov	r2, r3
 8002e5a:	887b      	ldrh	r3, [r7, #2]
 8002e5c:	f7fe fea4 	bl	8001ba8 <HAL_DMA_Start_IT>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e075      	b.n	8002f56 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68da      	ldr	r2, [r3, #12]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e78:	60da      	str	r2, [r3, #12]
      break;
 8002e7a:	e026      	b.n	8002eca <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e80:	4a37      	ldr	r2, [pc, #220]	@ (8002f60 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002e82:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e88:	4a36      	ldr	r2, [pc, #216]	@ (8002f64 <HAL_TIM_PWM_Start_DMA+0x330>)
 8002e8a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e90:	4a35      	ldr	r2, [pc, #212]	@ (8002f68 <HAL_TIM_PWM_Start_DMA+0x334>)
 8002e92:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002e98:	6879      	ldr	r1, [r7, #4]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	3340      	adds	r3, #64	@ 0x40
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	887b      	ldrh	r3, [r7, #2]
 8002ea4:	f7fe fe80 	bl	8001ba8 <HAL_DMA_Start_IT>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e051      	b.n	8002f56 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68da      	ldr	r2, [r3, #12]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002ec0:	60da      	str	r2, [r3, #12]
      break;
 8002ec2:	e002      	b.n	8002eca <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	75fb      	strb	r3, [r7, #23]
      break;
 8002ec8:	bf00      	nop
  }

  if (status == HAL_OK)
 8002eca:	7dfb      	ldrb	r3, [r7, #23]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d141      	bne.n	8002f54 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	68b9      	ldr	r1, [r7, #8]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f000 fe0b 	bl	8003af4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a22      	ldr	r2, [pc, #136]	@ (8002f6c <HAL_TIM_PWM_Start_DMA+0x338>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d107      	bne.n	8002ef8 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ef6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a1b      	ldr	r2, [pc, #108]	@ (8002f6c <HAL_TIM_PWM_Start_DMA+0x338>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d00e      	beq.n	8002f20 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f0a:	d009      	beq.n	8002f20 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a17      	ldr	r2, [pc, #92]	@ (8002f70 <HAL_TIM_PWM_Start_DMA+0x33c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d004      	beq.n	8002f20 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a16      	ldr	r2, [pc, #88]	@ (8002f74 <HAL_TIM_PWM_Start_DMA+0x340>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d111      	bne.n	8002f44 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 0307 	and.w	r3, r3, #7
 8002f2a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	2b06      	cmp	r3, #6
 8002f30:	d010      	beq.n	8002f54 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f042 0201 	orr.w	r2, r2, #1
 8002f40:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f42:	e007      	b.n	8002f54 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f042 0201 	orr.w	r2, r2, #1
 8002f52:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002f54:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3718      	adds	r7, #24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	080034cd 	.word	0x080034cd
 8002f64:	08003575 	.word	0x08003575
 8002f68:	0800343b 	.word	0x0800343b
 8002f6c:	40012c00 	.word	0x40012c00
 8002f70:	40000400 	.word	0x40000400
 8002f74:	40000800 	.word	0x40000800

08002f78 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f82:	2300      	movs	r3, #0
 8002f84:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	2b0c      	cmp	r3, #12
 8002f8a:	d855      	bhi.n	8003038 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8002f8c:	a201      	add	r2, pc, #4	@ (adr r2, 8002f94 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8002f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f92:	bf00      	nop
 8002f94:	08002fc9 	.word	0x08002fc9
 8002f98:	08003039 	.word	0x08003039
 8002f9c:	08003039 	.word	0x08003039
 8002fa0:	08003039 	.word	0x08003039
 8002fa4:	08002fe5 	.word	0x08002fe5
 8002fa8:	08003039 	.word	0x08003039
 8002fac:	08003039 	.word	0x08003039
 8002fb0:	08003039 	.word	0x08003039
 8002fb4:	08003001 	.word	0x08003001
 8002fb8:	08003039 	.word	0x08003039
 8002fbc:	08003039 	.word	0x08003039
 8002fc0:	08003039 	.word	0x08003039
 8002fc4:	0800301d 	.word	0x0800301d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68da      	ldr	r2, [r3, #12]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002fd6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7fe fe43 	bl	8001c68 <HAL_DMA_Abort_IT>
      break;
 8002fe2:	e02c      	b.n	800303e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68da      	ldr	r2, [r3, #12]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ff2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7fe fe35 	bl	8001c68 <HAL_DMA_Abort_IT>
      break;
 8002ffe:	e01e      	b.n	800303e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68da      	ldr	r2, [r3, #12]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800300e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003014:	4618      	mov	r0, r3
 8003016:	f7fe fe27 	bl	8001c68 <HAL_DMA_Abort_IT>
      break;
 800301a:	e010      	b.n	800303e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68da      	ldr	r2, [r3, #12]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800302a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003030:	4618      	mov	r0, r3
 8003032:	f7fe fe19 	bl	8001c68 <HAL_DMA_Abort_IT>
      break;
 8003036:	e002      	b.n	800303e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	73fb      	strb	r3, [r7, #15]
      break;
 800303c:	bf00      	nop
  }

  if (status == HAL_OK)
 800303e:	7bfb      	ldrb	r3, [r7, #15]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d157      	bne.n	80030f4 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2200      	movs	r2, #0
 800304a:	6839      	ldr	r1, [r7, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f000 fd51 	bl	8003af4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a2a      	ldr	r2, [pc, #168]	@ (8003100 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d117      	bne.n	800308c <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6a1a      	ldr	r2, [r3, #32]
 8003062:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003066:	4013      	ands	r3, r2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10f      	bne.n	800308c <HAL_TIM_PWM_Stop_DMA+0x114>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6a1a      	ldr	r2, [r3, #32]
 8003072:	f240 4344 	movw	r3, #1092	@ 0x444
 8003076:	4013      	ands	r3, r2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d107      	bne.n	800308c <HAL_TIM_PWM_Stop_DMA+0x114>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800308a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6a1a      	ldr	r2, [r3, #32]
 8003092:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003096:	4013      	ands	r3, r2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d10f      	bne.n	80030bc <HAL_TIM_PWM_Stop_DMA+0x144>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6a1a      	ldr	r2, [r3, #32]
 80030a2:	f240 4344 	movw	r3, #1092	@ 0x444
 80030a6:	4013      	ands	r3, r2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d107      	bne.n	80030bc <HAL_TIM_PWM_Stop_DMA+0x144>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f022 0201 	bic.w	r2, r2, #1
 80030ba:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d104      	bne.n	80030cc <HAL_TIM_PWM_Stop_DMA+0x154>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030ca:	e013      	b.n	80030f4 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	2b04      	cmp	r3, #4
 80030d0:	d104      	bne.n	80030dc <HAL_TIM_PWM_Stop_DMA+0x164>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2201      	movs	r2, #1
 80030d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030da:	e00b      	b.n	80030f4 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	2b08      	cmp	r3, #8
 80030e0:	d104      	bne.n	80030ec <HAL_TIM_PWM_Stop_DMA+0x174>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2201      	movs	r2, #1
 80030e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030ea:	e003      	b.n	80030f4 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 80030f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	40012c00 	.word	0x40012c00

08003104 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003110:	2300      	movs	r3, #0
 8003112:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800311a:	2b01      	cmp	r3, #1
 800311c:	d101      	bne.n	8003122 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800311e:	2302      	movs	r3, #2
 8003120:	e0ae      	b.n	8003280 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b0c      	cmp	r3, #12
 800312e:	f200 809f 	bhi.w	8003270 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003132:	a201      	add	r2, pc, #4	@ (adr r2, 8003138 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003138:	0800316d 	.word	0x0800316d
 800313c:	08003271 	.word	0x08003271
 8003140:	08003271 	.word	0x08003271
 8003144:	08003271 	.word	0x08003271
 8003148:	080031ad 	.word	0x080031ad
 800314c:	08003271 	.word	0x08003271
 8003150:	08003271 	.word	0x08003271
 8003154:	08003271 	.word	0x08003271
 8003158:	080031ef 	.word	0x080031ef
 800315c:	08003271 	.word	0x08003271
 8003160:	08003271 	.word	0x08003271
 8003164:	08003271 	.word	0x08003271
 8003168:	0800322f 	.word	0x0800322f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68b9      	ldr	r1, [r7, #8]
 8003172:	4618      	mov	r0, r3
 8003174:	f000 faa0 	bl	80036b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	699a      	ldr	r2, [r3, #24]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f042 0208 	orr.w	r2, r2, #8
 8003186:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	699a      	ldr	r2, [r3, #24]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f022 0204 	bic.w	r2, r2, #4
 8003196:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6999      	ldr	r1, [r3, #24]
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	691a      	ldr	r2, [r3, #16]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	619a      	str	r2, [r3, #24]
      break;
 80031aa:	e064      	b.n	8003276 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68b9      	ldr	r1, [r7, #8]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f000 fae6 	bl	8003784 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	699a      	ldr	r2, [r3, #24]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	699a      	ldr	r2, [r3, #24]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6999      	ldr	r1, [r3, #24]
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	021a      	lsls	r2, r3, #8
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	619a      	str	r2, [r3, #24]
      break;
 80031ec:	e043      	b.n	8003276 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68b9      	ldr	r1, [r7, #8]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f000 fb2f 	bl	8003858 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	69da      	ldr	r2, [r3, #28]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f042 0208 	orr.w	r2, r2, #8
 8003208:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	69da      	ldr	r2, [r3, #28]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 0204 	bic.w	r2, r2, #4
 8003218:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	69d9      	ldr	r1, [r3, #28]
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	691a      	ldr	r2, [r3, #16]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	430a      	orrs	r2, r1
 800322a:	61da      	str	r2, [r3, #28]
      break;
 800322c:	e023      	b.n	8003276 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68b9      	ldr	r1, [r7, #8]
 8003234:	4618      	mov	r0, r3
 8003236:	f000 fb79 	bl	800392c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	69da      	ldr	r2, [r3, #28]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003248:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	69da      	ldr	r2, [r3, #28]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003258:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	69d9      	ldr	r1, [r3, #28]
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	021a      	lsls	r2, r3, #8
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	61da      	str	r2, [r3, #28]
      break;
 800326e:	e002      	b.n	8003276 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	75fb      	strb	r3, [r7, #23]
      break;
 8003274:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800327e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003280:	4618      	mov	r0, r3
 8003282:	3718      	adds	r7, #24
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003292:	2300      	movs	r3, #0
 8003294:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800329c:	2b01      	cmp	r3, #1
 800329e:	d101      	bne.n	80032a4 <HAL_TIM_ConfigClockSource+0x1c>
 80032a0:	2302      	movs	r3, #2
 80032a2:	e0b4      	b.n	800340e <HAL_TIM_ConfigClockSource+0x186>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2202      	movs	r2, #2
 80032b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80032c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80032ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68ba      	ldr	r2, [r7, #8]
 80032d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032dc:	d03e      	beq.n	800335c <HAL_TIM_ConfigClockSource+0xd4>
 80032de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032e2:	f200 8087 	bhi.w	80033f4 <HAL_TIM_ConfigClockSource+0x16c>
 80032e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032ea:	f000 8086 	beq.w	80033fa <HAL_TIM_ConfigClockSource+0x172>
 80032ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032f2:	d87f      	bhi.n	80033f4 <HAL_TIM_ConfigClockSource+0x16c>
 80032f4:	2b70      	cmp	r3, #112	@ 0x70
 80032f6:	d01a      	beq.n	800332e <HAL_TIM_ConfigClockSource+0xa6>
 80032f8:	2b70      	cmp	r3, #112	@ 0x70
 80032fa:	d87b      	bhi.n	80033f4 <HAL_TIM_ConfigClockSource+0x16c>
 80032fc:	2b60      	cmp	r3, #96	@ 0x60
 80032fe:	d050      	beq.n	80033a2 <HAL_TIM_ConfigClockSource+0x11a>
 8003300:	2b60      	cmp	r3, #96	@ 0x60
 8003302:	d877      	bhi.n	80033f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003304:	2b50      	cmp	r3, #80	@ 0x50
 8003306:	d03c      	beq.n	8003382 <HAL_TIM_ConfigClockSource+0xfa>
 8003308:	2b50      	cmp	r3, #80	@ 0x50
 800330a:	d873      	bhi.n	80033f4 <HAL_TIM_ConfigClockSource+0x16c>
 800330c:	2b40      	cmp	r3, #64	@ 0x40
 800330e:	d058      	beq.n	80033c2 <HAL_TIM_ConfigClockSource+0x13a>
 8003310:	2b40      	cmp	r3, #64	@ 0x40
 8003312:	d86f      	bhi.n	80033f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003314:	2b30      	cmp	r3, #48	@ 0x30
 8003316:	d064      	beq.n	80033e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003318:	2b30      	cmp	r3, #48	@ 0x30
 800331a:	d86b      	bhi.n	80033f4 <HAL_TIM_ConfigClockSource+0x16c>
 800331c:	2b20      	cmp	r3, #32
 800331e:	d060      	beq.n	80033e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003320:	2b20      	cmp	r3, #32
 8003322:	d867      	bhi.n	80033f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003324:	2b00      	cmp	r3, #0
 8003326:	d05c      	beq.n	80033e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003328:	2b10      	cmp	r3, #16
 800332a:	d05a      	beq.n	80033e2 <HAL_TIM_ConfigClockSource+0x15a>
 800332c:	e062      	b.n	80033f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800333e:	f000 fbba 	bl	8003ab6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003350:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68ba      	ldr	r2, [r7, #8]
 8003358:	609a      	str	r2, [r3, #8]
      break;
 800335a:	e04f      	b.n	80033fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800336c:	f000 fba3 	bl	8003ab6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689a      	ldr	r2, [r3, #8]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800337e:	609a      	str	r2, [r3, #8]
      break;
 8003380:	e03c      	b.n	80033fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800338e:	461a      	mov	r2, r3
 8003390:	f000 fb1a 	bl	80039c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2150      	movs	r1, #80	@ 0x50
 800339a:	4618      	mov	r0, r3
 800339c:	f000 fb71 	bl	8003a82 <TIM_ITRx_SetConfig>
      break;
 80033a0:	e02c      	b.n	80033fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033ae:	461a      	mov	r2, r3
 80033b0:	f000 fb38 	bl	8003a24 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2160      	movs	r1, #96	@ 0x60
 80033ba:	4618      	mov	r0, r3
 80033bc:	f000 fb61 	bl	8003a82 <TIM_ITRx_SetConfig>
      break;
 80033c0:	e01c      	b.n	80033fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ce:	461a      	mov	r2, r3
 80033d0:	f000 fafa 	bl	80039c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2140      	movs	r1, #64	@ 0x40
 80033da:	4618      	mov	r0, r3
 80033dc:	f000 fb51 	bl	8003a82 <TIM_ITRx_SetConfig>
      break;
 80033e0:	e00c      	b.n	80033fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4619      	mov	r1, r3
 80033ec:	4610      	mov	r0, r2
 80033ee:	f000 fb48 	bl	8003a82 <TIM_ITRx_SetConfig>
      break;
 80033f2:	e003      	b.n	80033fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	73fb      	strb	r3, [r7, #15]
      break;
 80033f8:	e000      	b.n	80033fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80033fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800340c:	7bfb      	ldrb	r3, [r7, #15]
}
 800340e:	4618      	mov	r0, r3
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003416:	b480      	push	{r7}
 8003418:	b083      	sub	sp, #12
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800341e:	bf00      	nop
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	bc80      	pop	{r7}
 8003426:	4770      	bx	lr

08003428 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	bc80      	pop	{r7}
 8003438:	4770      	bx	lr

0800343a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b084      	sub	sp, #16
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003446:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	429a      	cmp	r2, r3
 8003450:	d107      	bne.n	8003462 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2201      	movs	r2, #1
 8003456:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003460:	e02a      	b.n	80034b8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	429a      	cmp	r2, r3
 800346a:	d107      	bne.n	800347c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2202      	movs	r2, #2
 8003470:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800347a:	e01d      	b.n	80034b8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	429a      	cmp	r2, r3
 8003484:	d107      	bne.n	8003496 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2204      	movs	r2, #4
 800348a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003494:	e010      	b.n	80034b8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	429a      	cmp	r2, r3
 800349e:	d107      	bne.n	80034b0 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2208      	movs	r2, #8
 80034a4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80034ae:	e003      	b.n	80034b8 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f7ff ffb5 	bl	8003428 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	771a      	strb	r2, [r3, #28]
}
 80034c4:	bf00      	nop
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d10b      	bne.n	80034fc <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2201      	movs	r2, #1
 80034e8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d136      	bne.n	8003560 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034fa:	e031      	b.n	8003560 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	429a      	cmp	r2, r3
 8003504:	d10b      	bne.n	800351e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2202      	movs	r2, #2
 800350a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d125      	bne.n	8003560 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800351c:	e020      	b.n	8003560 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	429a      	cmp	r2, r3
 8003526:	d10b      	bne.n	8003540 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2204      	movs	r2, #4
 800352c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d114      	bne.n	8003560 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800353e:	e00f      	b.n	8003560 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	429a      	cmp	r2, r3
 8003548:	d10a      	bne.n	8003560 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2208      	movs	r2, #8
 800354e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d103      	bne.n	8003560 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f7fc ffc1 	bl	80004e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	771a      	strb	r2, [r3, #28]
}
 800356c:	bf00      	nop
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003580:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	429a      	cmp	r2, r3
 800358a:	d103      	bne.n	8003594 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2201      	movs	r2, #1
 8003590:	771a      	strb	r2, [r3, #28]
 8003592:	e019      	b.n	80035c8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	429a      	cmp	r2, r3
 800359c:	d103      	bne.n	80035a6 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2202      	movs	r2, #2
 80035a2:	771a      	strb	r2, [r3, #28]
 80035a4:	e010      	b.n	80035c8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d103      	bne.n	80035b8 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2204      	movs	r2, #4
 80035b4:	771a      	strb	r2, [r3, #28]
 80035b6:	e007      	b.n	80035c8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d102      	bne.n	80035c8 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2208      	movs	r2, #8
 80035c6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f7ff ff24 	bl	8003416 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	771a      	strb	r2, [r3, #28]
}
 80035d4:	bf00      	nop
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a2f      	ldr	r2, [pc, #188]	@ (80036ac <TIM_Base_SetConfig+0xd0>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d00b      	beq.n	800360c <TIM_Base_SetConfig+0x30>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035fa:	d007      	beq.n	800360c <TIM_Base_SetConfig+0x30>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a2c      	ldr	r2, [pc, #176]	@ (80036b0 <TIM_Base_SetConfig+0xd4>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d003      	beq.n	800360c <TIM_Base_SetConfig+0x30>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a2b      	ldr	r2, [pc, #172]	@ (80036b4 <TIM_Base_SetConfig+0xd8>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d108      	bne.n	800361e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003612:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	4313      	orrs	r3, r2
 800361c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a22      	ldr	r2, [pc, #136]	@ (80036ac <TIM_Base_SetConfig+0xd0>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d00b      	beq.n	800363e <TIM_Base_SetConfig+0x62>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800362c:	d007      	beq.n	800363e <TIM_Base_SetConfig+0x62>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a1f      	ldr	r2, [pc, #124]	@ (80036b0 <TIM_Base_SetConfig+0xd4>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d003      	beq.n	800363e <TIM_Base_SetConfig+0x62>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a1e      	ldr	r2, [pc, #120]	@ (80036b4 <TIM_Base_SetConfig+0xd8>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d108      	bne.n	8003650 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003644:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	4313      	orrs	r3, r2
 800364e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	4313      	orrs	r3, r2
 800365c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a0d      	ldr	r2, [pc, #52]	@ (80036ac <TIM_Base_SetConfig+0xd0>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d103      	bne.n	8003684 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	691a      	ldr	r2, [r3, #16]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b00      	cmp	r3, #0
 8003694:	d005      	beq.n	80036a2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	f023 0201 	bic.w	r2, r3, #1
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	611a      	str	r2, [r3, #16]
  }
}
 80036a2:	bf00      	nop
 80036a4:	3714      	adds	r7, #20
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bc80      	pop	{r7}
 80036aa:	4770      	bx	lr
 80036ac:	40012c00 	.word	0x40012c00
 80036b0:	40000400 	.word	0x40000400
 80036b4:	40000800 	.word	0x40000800

080036b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b087      	sub	sp, #28
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	f023 0201 	bic.w	r2, r3, #1
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f023 0303 	bic.w	r3, r3, #3
 80036ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f023 0302 	bic.w	r3, r3, #2
 8003700:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	4313      	orrs	r3, r2
 800370a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a1c      	ldr	r2, [pc, #112]	@ (8003780 <TIM_OC1_SetConfig+0xc8>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d10c      	bne.n	800372e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	f023 0308 	bic.w	r3, r3, #8
 800371a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	4313      	orrs	r3, r2
 8003724:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f023 0304 	bic.w	r3, r3, #4
 800372c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a13      	ldr	r2, [pc, #76]	@ (8003780 <TIM_OC1_SetConfig+0xc8>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d111      	bne.n	800375a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800373c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003744:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	4313      	orrs	r3, r2
 800374e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	4313      	orrs	r3, r2
 8003758:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	697a      	ldr	r2, [r7, #20]
 8003772:	621a      	str	r2, [r3, #32]
}
 8003774:	bf00      	nop
 8003776:	371c      	adds	r7, #28
 8003778:	46bd      	mov	sp, r7
 800377a:	bc80      	pop	{r7}
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	40012c00 	.word	0x40012c00

08003784 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003784:	b480      	push	{r7}
 8003786:	b087      	sub	sp, #28
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	f023 0210 	bic.w	r2, r3, #16
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	021b      	lsls	r3, r3, #8
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	f023 0320 	bic.w	r3, r3, #32
 80037ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	011b      	lsls	r3, r3, #4
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	4313      	orrs	r3, r2
 80037da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a1d      	ldr	r2, [pc, #116]	@ (8003854 <TIM_OC2_SetConfig+0xd0>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d10d      	bne.n	8003800 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	011b      	lsls	r3, r3, #4
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a14      	ldr	r2, [pc, #80]	@ (8003854 <TIM_OC2_SetConfig+0xd0>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d113      	bne.n	8003830 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800380e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003816:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	4313      	orrs	r3, r2
 8003822:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	4313      	orrs	r3, r2
 800382e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	621a      	str	r2, [r3, #32]
}
 800384a:	bf00      	nop
 800384c:	371c      	adds	r7, #28
 800384e:	46bd      	mov	sp, r7
 8003850:	bc80      	pop	{r7}
 8003852:	4770      	bx	lr
 8003854:	40012c00 	.word	0x40012c00

08003858 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003858:	b480      	push	{r7}
 800385a:	b087      	sub	sp, #28
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a1b      	ldr	r3, [r3, #32]
 8003866:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	69db      	ldr	r3, [r3, #28]
 800387e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f023 0303 	bic.w	r3, r3, #3
 800388e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	4313      	orrs	r3, r2
 8003898:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80038a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	021b      	lsls	r3, r3, #8
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a1d      	ldr	r2, [pc, #116]	@ (8003928 <TIM_OC3_SetConfig+0xd0>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d10d      	bne.n	80038d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80038bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	021b      	lsls	r3, r3, #8
 80038c4:	697a      	ldr	r2, [r7, #20]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80038d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a14      	ldr	r2, [pc, #80]	@ (8003928 <TIM_OC3_SetConfig+0xd0>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d113      	bne.n	8003902 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80038e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80038e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	011b      	lsls	r3, r3, #4
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	011b      	lsls	r3, r3, #4
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	4313      	orrs	r3, r2
 8003900:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	621a      	str	r2, [r3, #32]
}
 800391c:	bf00      	nop
 800391e:	371c      	adds	r7, #28
 8003920:	46bd      	mov	sp, r7
 8003922:	bc80      	pop	{r7}
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	40012c00 	.word	0x40012c00

0800392c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800392c:	b480      	push	{r7}
 800392e:	b087      	sub	sp, #28
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	69db      	ldr	r3, [r3, #28]
 8003952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800395a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003962:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	021b      	lsls	r3, r3, #8
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	4313      	orrs	r3, r2
 800396e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003976:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	031b      	lsls	r3, r3, #12
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	4313      	orrs	r3, r2
 8003982:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a0f      	ldr	r2, [pc, #60]	@ (80039c4 <TIM_OC4_SetConfig+0x98>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d109      	bne.n	80039a0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003992:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	019b      	lsls	r3, r3, #6
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	4313      	orrs	r3, r2
 800399e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	621a      	str	r2, [r3, #32]
}
 80039ba:	bf00      	nop
 80039bc:	371c      	adds	r7, #28
 80039be:	46bd      	mov	sp, r7
 80039c0:	bc80      	pop	{r7}
 80039c2:	4770      	bx	lr
 80039c4:	40012c00 	.word	0x40012c00

080039c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b087      	sub	sp, #28
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6a1b      	ldr	r3, [r3, #32]
 80039d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	f023 0201 	bic.w	r2, r3, #1
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	011b      	lsls	r3, r3, #4
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	f023 030a 	bic.w	r3, r3, #10
 8003a04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	621a      	str	r2, [r3, #32]
}
 8003a1a:	bf00      	nop
 8003a1c:	371c      	adds	r7, #28
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bc80      	pop	{r7}
 8003a22:	4770      	bx	lr

08003a24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b087      	sub	sp, #28
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	f023 0210 	bic.w	r2, r3, #16
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003a4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	031b      	lsls	r3, r3, #12
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003a60:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	011b      	lsls	r3, r3, #4
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	621a      	str	r2, [r3, #32]
}
 8003a78:	bf00      	nop
 8003a7a:	371c      	adds	r7, #28
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bc80      	pop	{r7}
 8003a80:	4770      	bx	lr

08003a82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a82:	b480      	push	{r7}
 8003a84:	b085      	sub	sp, #20
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
 8003a8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	f043 0307 	orr.w	r3, r3, #7
 8003aa4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	609a      	str	r2, [r3, #8]
}
 8003aac:	bf00      	nop
 8003aae:	3714      	adds	r7, #20
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bc80      	pop	{r7}
 8003ab4:	4770      	bx	lr

08003ab6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	b087      	sub	sp, #28
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	60f8      	str	r0, [r7, #12]
 8003abe:	60b9      	str	r1, [r7, #8]
 8003ac0:	607a      	str	r2, [r7, #4]
 8003ac2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ad0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	021a      	lsls	r2, r3, #8
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	431a      	orrs	r2, r3
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	609a      	str	r2, [r3, #8]
}
 8003aea:	bf00      	nop
 8003aec:	371c      	adds	r7, #28
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bc80      	pop	{r7}
 8003af2:	4770      	bx	lr

08003af4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b087      	sub	sp, #28
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	f003 031f 	and.w	r3, r3, #31
 8003b06:	2201      	movs	r2, #1
 8003b08:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6a1a      	ldr	r2, [r3, #32]
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	43db      	mvns	r3, r3
 8003b16:	401a      	ands	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6a1a      	ldr	r2, [r3, #32]
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	f003 031f 	and.w	r3, r3, #31
 8003b26:	6879      	ldr	r1, [r7, #4]
 8003b28:	fa01 f303 	lsl.w	r3, r1, r3
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	621a      	str	r2, [r3, #32]
}
 8003b32:	bf00      	nop
 8003b34:	371c      	adds	r7, #28
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bc80      	pop	{r7}
 8003b3a:	4770      	bx	lr

08003b3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d101      	bne.n	8003b54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b50:	2302      	movs	r3, #2
 8003b52:	e046      	b.n	8003be2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2202      	movs	r2, #2
 8003b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a16      	ldr	r2, [pc, #88]	@ (8003bec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d00e      	beq.n	8003bb6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ba0:	d009      	beq.n	8003bb6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a12      	ldr	r2, [pc, #72]	@ (8003bf0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d004      	beq.n	8003bb6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a10      	ldr	r2, [pc, #64]	@ (8003bf4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d10c      	bne.n	8003bd0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	68ba      	ldr	r2, [r7, #8]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68ba      	ldr	r2, [r7, #8]
 8003bce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3714      	adds	r7, #20
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bc80      	pop	{r7}
 8003bea:	4770      	bx	lr
 8003bec:	40012c00 	.word	0x40012c00
 8003bf0:	40000400 	.word	0x40000400
 8003bf4:	40000800 	.word	0x40000800

08003bf8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003c02:	2300      	movs	r3, #0
 8003c04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d101      	bne.n	8003c14 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003c10:	2302      	movs	r3, #2
 8003c12:	e03d      	b.n	8003c90 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	695b      	ldr	r3, [r3, #20]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	69db      	ldr	r3, [r3, #28]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3714      	adds	r7, #20
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bc80      	pop	{r7}
 8003c98:	4770      	bx	lr
	...

08003c9c <sniprintf>:
 8003c9c:	b40c      	push	{r2, r3}
 8003c9e:	b530      	push	{r4, r5, lr}
 8003ca0:	4b18      	ldr	r3, [pc, #96]	@ (8003d04 <sniprintf+0x68>)
 8003ca2:	1e0c      	subs	r4, r1, #0
 8003ca4:	681d      	ldr	r5, [r3, #0]
 8003ca6:	b09d      	sub	sp, #116	@ 0x74
 8003ca8:	da08      	bge.n	8003cbc <sniprintf+0x20>
 8003caa:	238b      	movs	r3, #139	@ 0x8b
 8003cac:	f04f 30ff 	mov.w	r0, #4294967295
 8003cb0:	602b      	str	r3, [r5, #0]
 8003cb2:	b01d      	add	sp, #116	@ 0x74
 8003cb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003cb8:	b002      	add	sp, #8
 8003cba:	4770      	bx	lr
 8003cbc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003cc0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003cc4:	f04f 0300 	mov.w	r3, #0
 8003cc8:	931b      	str	r3, [sp, #108]	@ 0x6c
 8003cca:	bf0c      	ite	eq
 8003ccc:	4623      	moveq	r3, r4
 8003cce:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003cd2:	9304      	str	r3, [sp, #16]
 8003cd4:	9307      	str	r3, [sp, #28]
 8003cd6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003cda:	9002      	str	r0, [sp, #8]
 8003cdc:	9006      	str	r0, [sp, #24]
 8003cde:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003ce2:	4628      	mov	r0, r5
 8003ce4:	ab21      	add	r3, sp, #132	@ 0x84
 8003ce6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003ce8:	a902      	add	r1, sp, #8
 8003cea:	9301      	str	r3, [sp, #4]
 8003cec:	f000 f992 	bl	8004014 <_svfiprintf_r>
 8003cf0:	1c43      	adds	r3, r0, #1
 8003cf2:	bfbc      	itt	lt
 8003cf4:	238b      	movlt	r3, #139	@ 0x8b
 8003cf6:	602b      	strlt	r3, [r5, #0]
 8003cf8:	2c00      	cmp	r4, #0
 8003cfa:	d0da      	beq.n	8003cb2 <sniprintf+0x16>
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	9b02      	ldr	r3, [sp, #8]
 8003d00:	701a      	strb	r2, [r3, #0]
 8003d02:	e7d6      	b.n	8003cb2 <sniprintf+0x16>
 8003d04:	20000090 	.word	0x20000090

08003d08 <memset>:
 8003d08:	4603      	mov	r3, r0
 8003d0a:	4402      	add	r2, r0
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d100      	bne.n	8003d12 <memset+0xa>
 8003d10:	4770      	bx	lr
 8003d12:	f803 1b01 	strb.w	r1, [r3], #1
 8003d16:	e7f9      	b.n	8003d0c <memset+0x4>

08003d18 <__errno>:
 8003d18:	4b01      	ldr	r3, [pc, #4]	@ (8003d20 <__errno+0x8>)
 8003d1a:	6818      	ldr	r0, [r3, #0]
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	20000090 	.word	0x20000090

08003d24 <__libc_init_array>:
 8003d24:	b570      	push	{r4, r5, r6, lr}
 8003d26:	2600      	movs	r6, #0
 8003d28:	4d0c      	ldr	r5, [pc, #48]	@ (8003d5c <__libc_init_array+0x38>)
 8003d2a:	4c0d      	ldr	r4, [pc, #52]	@ (8003d60 <__libc_init_array+0x3c>)
 8003d2c:	1b64      	subs	r4, r4, r5
 8003d2e:	10a4      	asrs	r4, r4, #2
 8003d30:	42a6      	cmp	r6, r4
 8003d32:	d109      	bne.n	8003d48 <__libc_init_array+0x24>
 8003d34:	f000 fc76 	bl	8004624 <_init>
 8003d38:	2600      	movs	r6, #0
 8003d3a:	4d0a      	ldr	r5, [pc, #40]	@ (8003d64 <__libc_init_array+0x40>)
 8003d3c:	4c0a      	ldr	r4, [pc, #40]	@ (8003d68 <__libc_init_array+0x44>)
 8003d3e:	1b64      	subs	r4, r4, r5
 8003d40:	10a4      	asrs	r4, r4, #2
 8003d42:	42a6      	cmp	r6, r4
 8003d44:	d105      	bne.n	8003d52 <__libc_init_array+0x2e>
 8003d46:	bd70      	pop	{r4, r5, r6, pc}
 8003d48:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d4c:	4798      	blx	r3
 8003d4e:	3601      	adds	r6, #1
 8003d50:	e7ee      	b.n	8003d30 <__libc_init_array+0xc>
 8003d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d56:	4798      	blx	r3
 8003d58:	3601      	adds	r6, #1
 8003d5a:	e7f2      	b.n	8003d42 <__libc_init_array+0x1e>
 8003d5c:	08004750 	.word	0x08004750
 8003d60:	08004750 	.word	0x08004750
 8003d64:	08004750 	.word	0x08004750
 8003d68:	08004754 	.word	0x08004754

08003d6c <__retarget_lock_acquire_recursive>:
 8003d6c:	4770      	bx	lr

08003d6e <__retarget_lock_release_recursive>:
 8003d6e:	4770      	bx	lr

08003d70 <_free_r>:
 8003d70:	b538      	push	{r3, r4, r5, lr}
 8003d72:	4605      	mov	r5, r0
 8003d74:	2900      	cmp	r1, #0
 8003d76:	d040      	beq.n	8003dfa <_free_r+0x8a>
 8003d78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d7c:	1f0c      	subs	r4, r1, #4
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	bfb8      	it	lt
 8003d82:	18e4      	addlt	r4, r4, r3
 8003d84:	f000 f8de 	bl	8003f44 <__malloc_lock>
 8003d88:	4a1c      	ldr	r2, [pc, #112]	@ (8003dfc <_free_r+0x8c>)
 8003d8a:	6813      	ldr	r3, [r2, #0]
 8003d8c:	b933      	cbnz	r3, 8003d9c <_free_r+0x2c>
 8003d8e:	6063      	str	r3, [r4, #4]
 8003d90:	6014      	str	r4, [r2, #0]
 8003d92:	4628      	mov	r0, r5
 8003d94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d98:	f000 b8da 	b.w	8003f50 <__malloc_unlock>
 8003d9c:	42a3      	cmp	r3, r4
 8003d9e:	d908      	bls.n	8003db2 <_free_r+0x42>
 8003da0:	6820      	ldr	r0, [r4, #0]
 8003da2:	1821      	adds	r1, r4, r0
 8003da4:	428b      	cmp	r3, r1
 8003da6:	bf01      	itttt	eq
 8003da8:	6819      	ldreq	r1, [r3, #0]
 8003daa:	685b      	ldreq	r3, [r3, #4]
 8003dac:	1809      	addeq	r1, r1, r0
 8003dae:	6021      	streq	r1, [r4, #0]
 8003db0:	e7ed      	b.n	8003d8e <_free_r+0x1e>
 8003db2:	461a      	mov	r2, r3
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	b10b      	cbz	r3, 8003dbc <_free_r+0x4c>
 8003db8:	42a3      	cmp	r3, r4
 8003dba:	d9fa      	bls.n	8003db2 <_free_r+0x42>
 8003dbc:	6811      	ldr	r1, [r2, #0]
 8003dbe:	1850      	adds	r0, r2, r1
 8003dc0:	42a0      	cmp	r0, r4
 8003dc2:	d10b      	bne.n	8003ddc <_free_r+0x6c>
 8003dc4:	6820      	ldr	r0, [r4, #0]
 8003dc6:	4401      	add	r1, r0
 8003dc8:	1850      	adds	r0, r2, r1
 8003dca:	4283      	cmp	r3, r0
 8003dcc:	6011      	str	r1, [r2, #0]
 8003dce:	d1e0      	bne.n	8003d92 <_free_r+0x22>
 8003dd0:	6818      	ldr	r0, [r3, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	4408      	add	r0, r1
 8003dd6:	6010      	str	r0, [r2, #0]
 8003dd8:	6053      	str	r3, [r2, #4]
 8003dda:	e7da      	b.n	8003d92 <_free_r+0x22>
 8003ddc:	d902      	bls.n	8003de4 <_free_r+0x74>
 8003dde:	230c      	movs	r3, #12
 8003de0:	602b      	str	r3, [r5, #0]
 8003de2:	e7d6      	b.n	8003d92 <_free_r+0x22>
 8003de4:	6820      	ldr	r0, [r4, #0]
 8003de6:	1821      	adds	r1, r4, r0
 8003de8:	428b      	cmp	r3, r1
 8003dea:	bf01      	itttt	eq
 8003dec:	6819      	ldreq	r1, [r3, #0]
 8003dee:	685b      	ldreq	r3, [r3, #4]
 8003df0:	1809      	addeq	r1, r1, r0
 8003df2:	6021      	streq	r1, [r4, #0]
 8003df4:	6063      	str	r3, [r4, #4]
 8003df6:	6054      	str	r4, [r2, #4]
 8003df8:	e7cb      	b.n	8003d92 <_free_r+0x22>
 8003dfa:	bd38      	pop	{r3, r4, r5, pc}
 8003dfc:	20001074 	.word	0x20001074

08003e00 <sbrk_aligned>:
 8003e00:	b570      	push	{r4, r5, r6, lr}
 8003e02:	4e0f      	ldr	r6, [pc, #60]	@ (8003e40 <sbrk_aligned+0x40>)
 8003e04:	460c      	mov	r4, r1
 8003e06:	6831      	ldr	r1, [r6, #0]
 8003e08:	4605      	mov	r5, r0
 8003e0a:	b911      	cbnz	r1, 8003e12 <sbrk_aligned+0x12>
 8003e0c:	f000 fba8 	bl	8004560 <_sbrk_r>
 8003e10:	6030      	str	r0, [r6, #0]
 8003e12:	4621      	mov	r1, r4
 8003e14:	4628      	mov	r0, r5
 8003e16:	f000 fba3 	bl	8004560 <_sbrk_r>
 8003e1a:	1c43      	adds	r3, r0, #1
 8003e1c:	d103      	bne.n	8003e26 <sbrk_aligned+0x26>
 8003e1e:	f04f 34ff 	mov.w	r4, #4294967295
 8003e22:	4620      	mov	r0, r4
 8003e24:	bd70      	pop	{r4, r5, r6, pc}
 8003e26:	1cc4      	adds	r4, r0, #3
 8003e28:	f024 0403 	bic.w	r4, r4, #3
 8003e2c:	42a0      	cmp	r0, r4
 8003e2e:	d0f8      	beq.n	8003e22 <sbrk_aligned+0x22>
 8003e30:	1a21      	subs	r1, r4, r0
 8003e32:	4628      	mov	r0, r5
 8003e34:	f000 fb94 	bl	8004560 <_sbrk_r>
 8003e38:	3001      	adds	r0, #1
 8003e3a:	d1f2      	bne.n	8003e22 <sbrk_aligned+0x22>
 8003e3c:	e7ef      	b.n	8003e1e <sbrk_aligned+0x1e>
 8003e3e:	bf00      	nop
 8003e40:	20001070 	.word	0x20001070

08003e44 <_malloc_r>:
 8003e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e48:	1ccd      	adds	r5, r1, #3
 8003e4a:	f025 0503 	bic.w	r5, r5, #3
 8003e4e:	3508      	adds	r5, #8
 8003e50:	2d0c      	cmp	r5, #12
 8003e52:	bf38      	it	cc
 8003e54:	250c      	movcc	r5, #12
 8003e56:	2d00      	cmp	r5, #0
 8003e58:	4606      	mov	r6, r0
 8003e5a:	db01      	blt.n	8003e60 <_malloc_r+0x1c>
 8003e5c:	42a9      	cmp	r1, r5
 8003e5e:	d904      	bls.n	8003e6a <_malloc_r+0x26>
 8003e60:	230c      	movs	r3, #12
 8003e62:	6033      	str	r3, [r6, #0]
 8003e64:	2000      	movs	r0, #0
 8003e66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003f40 <_malloc_r+0xfc>
 8003e6e:	f000 f869 	bl	8003f44 <__malloc_lock>
 8003e72:	f8d8 3000 	ldr.w	r3, [r8]
 8003e76:	461c      	mov	r4, r3
 8003e78:	bb44      	cbnz	r4, 8003ecc <_malloc_r+0x88>
 8003e7a:	4629      	mov	r1, r5
 8003e7c:	4630      	mov	r0, r6
 8003e7e:	f7ff ffbf 	bl	8003e00 <sbrk_aligned>
 8003e82:	1c43      	adds	r3, r0, #1
 8003e84:	4604      	mov	r4, r0
 8003e86:	d158      	bne.n	8003f3a <_malloc_r+0xf6>
 8003e88:	f8d8 4000 	ldr.w	r4, [r8]
 8003e8c:	4627      	mov	r7, r4
 8003e8e:	2f00      	cmp	r7, #0
 8003e90:	d143      	bne.n	8003f1a <_malloc_r+0xd6>
 8003e92:	2c00      	cmp	r4, #0
 8003e94:	d04b      	beq.n	8003f2e <_malloc_r+0xea>
 8003e96:	6823      	ldr	r3, [r4, #0]
 8003e98:	4639      	mov	r1, r7
 8003e9a:	4630      	mov	r0, r6
 8003e9c:	eb04 0903 	add.w	r9, r4, r3
 8003ea0:	f000 fb5e 	bl	8004560 <_sbrk_r>
 8003ea4:	4581      	cmp	r9, r0
 8003ea6:	d142      	bne.n	8003f2e <_malloc_r+0xea>
 8003ea8:	6821      	ldr	r1, [r4, #0]
 8003eaa:	4630      	mov	r0, r6
 8003eac:	1a6d      	subs	r5, r5, r1
 8003eae:	4629      	mov	r1, r5
 8003eb0:	f7ff ffa6 	bl	8003e00 <sbrk_aligned>
 8003eb4:	3001      	adds	r0, #1
 8003eb6:	d03a      	beq.n	8003f2e <_malloc_r+0xea>
 8003eb8:	6823      	ldr	r3, [r4, #0]
 8003eba:	442b      	add	r3, r5
 8003ebc:	6023      	str	r3, [r4, #0]
 8003ebe:	f8d8 3000 	ldr.w	r3, [r8]
 8003ec2:	685a      	ldr	r2, [r3, #4]
 8003ec4:	bb62      	cbnz	r2, 8003f20 <_malloc_r+0xdc>
 8003ec6:	f8c8 7000 	str.w	r7, [r8]
 8003eca:	e00f      	b.n	8003eec <_malloc_r+0xa8>
 8003ecc:	6822      	ldr	r2, [r4, #0]
 8003ece:	1b52      	subs	r2, r2, r5
 8003ed0:	d420      	bmi.n	8003f14 <_malloc_r+0xd0>
 8003ed2:	2a0b      	cmp	r2, #11
 8003ed4:	d917      	bls.n	8003f06 <_malloc_r+0xc2>
 8003ed6:	1961      	adds	r1, r4, r5
 8003ed8:	42a3      	cmp	r3, r4
 8003eda:	6025      	str	r5, [r4, #0]
 8003edc:	bf18      	it	ne
 8003ede:	6059      	strne	r1, [r3, #4]
 8003ee0:	6863      	ldr	r3, [r4, #4]
 8003ee2:	bf08      	it	eq
 8003ee4:	f8c8 1000 	streq.w	r1, [r8]
 8003ee8:	5162      	str	r2, [r4, r5]
 8003eea:	604b      	str	r3, [r1, #4]
 8003eec:	4630      	mov	r0, r6
 8003eee:	f000 f82f 	bl	8003f50 <__malloc_unlock>
 8003ef2:	f104 000b 	add.w	r0, r4, #11
 8003ef6:	1d23      	adds	r3, r4, #4
 8003ef8:	f020 0007 	bic.w	r0, r0, #7
 8003efc:	1ac2      	subs	r2, r0, r3
 8003efe:	bf1c      	itt	ne
 8003f00:	1a1b      	subne	r3, r3, r0
 8003f02:	50a3      	strne	r3, [r4, r2]
 8003f04:	e7af      	b.n	8003e66 <_malloc_r+0x22>
 8003f06:	6862      	ldr	r2, [r4, #4]
 8003f08:	42a3      	cmp	r3, r4
 8003f0a:	bf0c      	ite	eq
 8003f0c:	f8c8 2000 	streq.w	r2, [r8]
 8003f10:	605a      	strne	r2, [r3, #4]
 8003f12:	e7eb      	b.n	8003eec <_malloc_r+0xa8>
 8003f14:	4623      	mov	r3, r4
 8003f16:	6864      	ldr	r4, [r4, #4]
 8003f18:	e7ae      	b.n	8003e78 <_malloc_r+0x34>
 8003f1a:	463c      	mov	r4, r7
 8003f1c:	687f      	ldr	r7, [r7, #4]
 8003f1e:	e7b6      	b.n	8003e8e <_malloc_r+0x4a>
 8003f20:	461a      	mov	r2, r3
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	42a3      	cmp	r3, r4
 8003f26:	d1fb      	bne.n	8003f20 <_malloc_r+0xdc>
 8003f28:	2300      	movs	r3, #0
 8003f2a:	6053      	str	r3, [r2, #4]
 8003f2c:	e7de      	b.n	8003eec <_malloc_r+0xa8>
 8003f2e:	230c      	movs	r3, #12
 8003f30:	4630      	mov	r0, r6
 8003f32:	6033      	str	r3, [r6, #0]
 8003f34:	f000 f80c 	bl	8003f50 <__malloc_unlock>
 8003f38:	e794      	b.n	8003e64 <_malloc_r+0x20>
 8003f3a:	6005      	str	r5, [r0, #0]
 8003f3c:	e7d6      	b.n	8003eec <_malloc_r+0xa8>
 8003f3e:	bf00      	nop
 8003f40:	20001074 	.word	0x20001074

08003f44 <__malloc_lock>:
 8003f44:	4801      	ldr	r0, [pc, #4]	@ (8003f4c <__malloc_lock+0x8>)
 8003f46:	f7ff bf11 	b.w	8003d6c <__retarget_lock_acquire_recursive>
 8003f4a:	bf00      	nop
 8003f4c:	2000106c 	.word	0x2000106c

08003f50 <__malloc_unlock>:
 8003f50:	4801      	ldr	r0, [pc, #4]	@ (8003f58 <__malloc_unlock+0x8>)
 8003f52:	f7ff bf0c 	b.w	8003d6e <__retarget_lock_release_recursive>
 8003f56:	bf00      	nop
 8003f58:	2000106c 	.word	0x2000106c

08003f5c <__ssputs_r>:
 8003f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f60:	461f      	mov	r7, r3
 8003f62:	688e      	ldr	r6, [r1, #8]
 8003f64:	4682      	mov	sl, r0
 8003f66:	42be      	cmp	r6, r7
 8003f68:	460c      	mov	r4, r1
 8003f6a:	4690      	mov	r8, r2
 8003f6c:	680b      	ldr	r3, [r1, #0]
 8003f6e:	d82d      	bhi.n	8003fcc <__ssputs_r+0x70>
 8003f70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003f74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003f78:	d026      	beq.n	8003fc8 <__ssputs_r+0x6c>
 8003f7a:	6965      	ldr	r5, [r4, #20]
 8003f7c:	6909      	ldr	r1, [r1, #16]
 8003f7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f82:	eba3 0901 	sub.w	r9, r3, r1
 8003f86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f8a:	1c7b      	adds	r3, r7, #1
 8003f8c:	444b      	add	r3, r9
 8003f8e:	106d      	asrs	r5, r5, #1
 8003f90:	429d      	cmp	r5, r3
 8003f92:	bf38      	it	cc
 8003f94:	461d      	movcc	r5, r3
 8003f96:	0553      	lsls	r3, r2, #21
 8003f98:	d527      	bpl.n	8003fea <__ssputs_r+0x8e>
 8003f9a:	4629      	mov	r1, r5
 8003f9c:	f7ff ff52 	bl	8003e44 <_malloc_r>
 8003fa0:	4606      	mov	r6, r0
 8003fa2:	b360      	cbz	r0, 8003ffe <__ssputs_r+0xa2>
 8003fa4:	464a      	mov	r2, r9
 8003fa6:	6921      	ldr	r1, [r4, #16]
 8003fa8:	f000 faf8 	bl	800459c <memcpy>
 8003fac:	89a3      	ldrh	r3, [r4, #12]
 8003fae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003fb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fb6:	81a3      	strh	r3, [r4, #12]
 8003fb8:	6126      	str	r6, [r4, #16]
 8003fba:	444e      	add	r6, r9
 8003fbc:	6026      	str	r6, [r4, #0]
 8003fbe:	463e      	mov	r6, r7
 8003fc0:	6165      	str	r5, [r4, #20]
 8003fc2:	eba5 0509 	sub.w	r5, r5, r9
 8003fc6:	60a5      	str	r5, [r4, #8]
 8003fc8:	42be      	cmp	r6, r7
 8003fca:	d900      	bls.n	8003fce <__ssputs_r+0x72>
 8003fcc:	463e      	mov	r6, r7
 8003fce:	4632      	mov	r2, r6
 8003fd0:	4641      	mov	r1, r8
 8003fd2:	6820      	ldr	r0, [r4, #0]
 8003fd4:	f000 faaa 	bl	800452c <memmove>
 8003fd8:	2000      	movs	r0, #0
 8003fda:	68a3      	ldr	r3, [r4, #8]
 8003fdc:	1b9b      	subs	r3, r3, r6
 8003fde:	60a3      	str	r3, [r4, #8]
 8003fe0:	6823      	ldr	r3, [r4, #0]
 8003fe2:	4433      	add	r3, r6
 8003fe4:	6023      	str	r3, [r4, #0]
 8003fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fea:	462a      	mov	r2, r5
 8003fec:	f000 fae4 	bl	80045b8 <_realloc_r>
 8003ff0:	4606      	mov	r6, r0
 8003ff2:	2800      	cmp	r0, #0
 8003ff4:	d1e0      	bne.n	8003fb8 <__ssputs_r+0x5c>
 8003ff6:	4650      	mov	r0, sl
 8003ff8:	6921      	ldr	r1, [r4, #16]
 8003ffa:	f7ff feb9 	bl	8003d70 <_free_r>
 8003ffe:	230c      	movs	r3, #12
 8004000:	f8ca 3000 	str.w	r3, [sl]
 8004004:	89a3      	ldrh	r3, [r4, #12]
 8004006:	f04f 30ff 	mov.w	r0, #4294967295
 800400a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800400e:	81a3      	strh	r3, [r4, #12]
 8004010:	e7e9      	b.n	8003fe6 <__ssputs_r+0x8a>
	...

08004014 <_svfiprintf_r>:
 8004014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004018:	4698      	mov	r8, r3
 800401a:	898b      	ldrh	r3, [r1, #12]
 800401c:	4607      	mov	r7, r0
 800401e:	061b      	lsls	r3, r3, #24
 8004020:	460d      	mov	r5, r1
 8004022:	4614      	mov	r4, r2
 8004024:	b09d      	sub	sp, #116	@ 0x74
 8004026:	d510      	bpl.n	800404a <_svfiprintf_r+0x36>
 8004028:	690b      	ldr	r3, [r1, #16]
 800402a:	b973      	cbnz	r3, 800404a <_svfiprintf_r+0x36>
 800402c:	2140      	movs	r1, #64	@ 0x40
 800402e:	f7ff ff09 	bl	8003e44 <_malloc_r>
 8004032:	6028      	str	r0, [r5, #0]
 8004034:	6128      	str	r0, [r5, #16]
 8004036:	b930      	cbnz	r0, 8004046 <_svfiprintf_r+0x32>
 8004038:	230c      	movs	r3, #12
 800403a:	603b      	str	r3, [r7, #0]
 800403c:	f04f 30ff 	mov.w	r0, #4294967295
 8004040:	b01d      	add	sp, #116	@ 0x74
 8004042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004046:	2340      	movs	r3, #64	@ 0x40
 8004048:	616b      	str	r3, [r5, #20]
 800404a:	2300      	movs	r3, #0
 800404c:	9309      	str	r3, [sp, #36]	@ 0x24
 800404e:	2320      	movs	r3, #32
 8004050:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004054:	2330      	movs	r3, #48	@ 0x30
 8004056:	f04f 0901 	mov.w	r9, #1
 800405a:	f8cd 800c 	str.w	r8, [sp, #12]
 800405e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80041f8 <_svfiprintf_r+0x1e4>
 8004062:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004066:	4623      	mov	r3, r4
 8004068:	469a      	mov	sl, r3
 800406a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800406e:	b10a      	cbz	r2, 8004074 <_svfiprintf_r+0x60>
 8004070:	2a25      	cmp	r2, #37	@ 0x25
 8004072:	d1f9      	bne.n	8004068 <_svfiprintf_r+0x54>
 8004074:	ebba 0b04 	subs.w	fp, sl, r4
 8004078:	d00b      	beq.n	8004092 <_svfiprintf_r+0x7e>
 800407a:	465b      	mov	r3, fp
 800407c:	4622      	mov	r2, r4
 800407e:	4629      	mov	r1, r5
 8004080:	4638      	mov	r0, r7
 8004082:	f7ff ff6b 	bl	8003f5c <__ssputs_r>
 8004086:	3001      	adds	r0, #1
 8004088:	f000 80a7 	beq.w	80041da <_svfiprintf_r+0x1c6>
 800408c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800408e:	445a      	add	r2, fp
 8004090:	9209      	str	r2, [sp, #36]	@ 0x24
 8004092:	f89a 3000 	ldrb.w	r3, [sl]
 8004096:	2b00      	cmp	r3, #0
 8004098:	f000 809f 	beq.w	80041da <_svfiprintf_r+0x1c6>
 800409c:	2300      	movs	r3, #0
 800409e:	f04f 32ff 	mov.w	r2, #4294967295
 80040a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040a6:	f10a 0a01 	add.w	sl, sl, #1
 80040aa:	9304      	str	r3, [sp, #16]
 80040ac:	9307      	str	r3, [sp, #28]
 80040ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80040b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80040b4:	4654      	mov	r4, sl
 80040b6:	2205      	movs	r2, #5
 80040b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040bc:	484e      	ldr	r0, [pc, #312]	@ (80041f8 <_svfiprintf_r+0x1e4>)
 80040be:	f000 fa5f 	bl	8004580 <memchr>
 80040c2:	9a04      	ldr	r2, [sp, #16]
 80040c4:	b9d8      	cbnz	r0, 80040fe <_svfiprintf_r+0xea>
 80040c6:	06d0      	lsls	r0, r2, #27
 80040c8:	bf44      	itt	mi
 80040ca:	2320      	movmi	r3, #32
 80040cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040d0:	0711      	lsls	r1, r2, #28
 80040d2:	bf44      	itt	mi
 80040d4:	232b      	movmi	r3, #43	@ 0x2b
 80040d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040da:	f89a 3000 	ldrb.w	r3, [sl]
 80040de:	2b2a      	cmp	r3, #42	@ 0x2a
 80040e0:	d015      	beq.n	800410e <_svfiprintf_r+0xfa>
 80040e2:	4654      	mov	r4, sl
 80040e4:	2000      	movs	r0, #0
 80040e6:	f04f 0c0a 	mov.w	ip, #10
 80040ea:	9a07      	ldr	r2, [sp, #28]
 80040ec:	4621      	mov	r1, r4
 80040ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040f2:	3b30      	subs	r3, #48	@ 0x30
 80040f4:	2b09      	cmp	r3, #9
 80040f6:	d94b      	bls.n	8004190 <_svfiprintf_r+0x17c>
 80040f8:	b1b0      	cbz	r0, 8004128 <_svfiprintf_r+0x114>
 80040fa:	9207      	str	r2, [sp, #28]
 80040fc:	e014      	b.n	8004128 <_svfiprintf_r+0x114>
 80040fe:	eba0 0308 	sub.w	r3, r0, r8
 8004102:	fa09 f303 	lsl.w	r3, r9, r3
 8004106:	4313      	orrs	r3, r2
 8004108:	46a2      	mov	sl, r4
 800410a:	9304      	str	r3, [sp, #16]
 800410c:	e7d2      	b.n	80040b4 <_svfiprintf_r+0xa0>
 800410e:	9b03      	ldr	r3, [sp, #12]
 8004110:	1d19      	adds	r1, r3, #4
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	9103      	str	r1, [sp, #12]
 8004116:	2b00      	cmp	r3, #0
 8004118:	bfbb      	ittet	lt
 800411a:	425b      	neglt	r3, r3
 800411c:	f042 0202 	orrlt.w	r2, r2, #2
 8004120:	9307      	strge	r3, [sp, #28]
 8004122:	9307      	strlt	r3, [sp, #28]
 8004124:	bfb8      	it	lt
 8004126:	9204      	strlt	r2, [sp, #16]
 8004128:	7823      	ldrb	r3, [r4, #0]
 800412a:	2b2e      	cmp	r3, #46	@ 0x2e
 800412c:	d10a      	bne.n	8004144 <_svfiprintf_r+0x130>
 800412e:	7863      	ldrb	r3, [r4, #1]
 8004130:	2b2a      	cmp	r3, #42	@ 0x2a
 8004132:	d132      	bne.n	800419a <_svfiprintf_r+0x186>
 8004134:	9b03      	ldr	r3, [sp, #12]
 8004136:	3402      	adds	r4, #2
 8004138:	1d1a      	adds	r2, r3, #4
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	9203      	str	r2, [sp, #12]
 800413e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004142:	9305      	str	r3, [sp, #20]
 8004144:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80041fc <_svfiprintf_r+0x1e8>
 8004148:	2203      	movs	r2, #3
 800414a:	4650      	mov	r0, sl
 800414c:	7821      	ldrb	r1, [r4, #0]
 800414e:	f000 fa17 	bl	8004580 <memchr>
 8004152:	b138      	cbz	r0, 8004164 <_svfiprintf_r+0x150>
 8004154:	2240      	movs	r2, #64	@ 0x40
 8004156:	9b04      	ldr	r3, [sp, #16]
 8004158:	eba0 000a 	sub.w	r0, r0, sl
 800415c:	4082      	lsls	r2, r0
 800415e:	4313      	orrs	r3, r2
 8004160:	3401      	adds	r4, #1
 8004162:	9304      	str	r3, [sp, #16]
 8004164:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004168:	2206      	movs	r2, #6
 800416a:	4825      	ldr	r0, [pc, #148]	@ (8004200 <_svfiprintf_r+0x1ec>)
 800416c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004170:	f000 fa06 	bl	8004580 <memchr>
 8004174:	2800      	cmp	r0, #0
 8004176:	d036      	beq.n	80041e6 <_svfiprintf_r+0x1d2>
 8004178:	4b22      	ldr	r3, [pc, #136]	@ (8004204 <_svfiprintf_r+0x1f0>)
 800417a:	bb1b      	cbnz	r3, 80041c4 <_svfiprintf_r+0x1b0>
 800417c:	9b03      	ldr	r3, [sp, #12]
 800417e:	3307      	adds	r3, #7
 8004180:	f023 0307 	bic.w	r3, r3, #7
 8004184:	3308      	adds	r3, #8
 8004186:	9303      	str	r3, [sp, #12]
 8004188:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800418a:	4433      	add	r3, r6
 800418c:	9309      	str	r3, [sp, #36]	@ 0x24
 800418e:	e76a      	b.n	8004066 <_svfiprintf_r+0x52>
 8004190:	460c      	mov	r4, r1
 8004192:	2001      	movs	r0, #1
 8004194:	fb0c 3202 	mla	r2, ip, r2, r3
 8004198:	e7a8      	b.n	80040ec <_svfiprintf_r+0xd8>
 800419a:	2300      	movs	r3, #0
 800419c:	f04f 0c0a 	mov.w	ip, #10
 80041a0:	4619      	mov	r1, r3
 80041a2:	3401      	adds	r4, #1
 80041a4:	9305      	str	r3, [sp, #20]
 80041a6:	4620      	mov	r0, r4
 80041a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041ac:	3a30      	subs	r2, #48	@ 0x30
 80041ae:	2a09      	cmp	r2, #9
 80041b0:	d903      	bls.n	80041ba <_svfiprintf_r+0x1a6>
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d0c6      	beq.n	8004144 <_svfiprintf_r+0x130>
 80041b6:	9105      	str	r1, [sp, #20]
 80041b8:	e7c4      	b.n	8004144 <_svfiprintf_r+0x130>
 80041ba:	4604      	mov	r4, r0
 80041bc:	2301      	movs	r3, #1
 80041be:	fb0c 2101 	mla	r1, ip, r1, r2
 80041c2:	e7f0      	b.n	80041a6 <_svfiprintf_r+0x192>
 80041c4:	ab03      	add	r3, sp, #12
 80041c6:	9300      	str	r3, [sp, #0]
 80041c8:	462a      	mov	r2, r5
 80041ca:	4638      	mov	r0, r7
 80041cc:	4b0e      	ldr	r3, [pc, #56]	@ (8004208 <_svfiprintf_r+0x1f4>)
 80041ce:	a904      	add	r1, sp, #16
 80041d0:	f3af 8000 	nop.w
 80041d4:	1c42      	adds	r2, r0, #1
 80041d6:	4606      	mov	r6, r0
 80041d8:	d1d6      	bne.n	8004188 <_svfiprintf_r+0x174>
 80041da:	89ab      	ldrh	r3, [r5, #12]
 80041dc:	065b      	lsls	r3, r3, #25
 80041de:	f53f af2d 	bmi.w	800403c <_svfiprintf_r+0x28>
 80041e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80041e4:	e72c      	b.n	8004040 <_svfiprintf_r+0x2c>
 80041e6:	ab03      	add	r3, sp, #12
 80041e8:	9300      	str	r3, [sp, #0]
 80041ea:	462a      	mov	r2, r5
 80041ec:	4638      	mov	r0, r7
 80041ee:	4b06      	ldr	r3, [pc, #24]	@ (8004208 <_svfiprintf_r+0x1f4>)
 80041f0:	a904      	add	r1, sp, #16
 80041f2:	f000 f87d 	bl	80042f0 <_printf_i>
 80041f6:	e7ed      	b.n	80041d4 <_svfiprintf_r+0x1c0>
 80041f8:	08004712 	.word	0x08004712
 80041fc:	08004718 	.word	0x08004718
 8004200:	0800471c 	.word	0x0800471c
 8004204:	00000000 	.word	0x00000000
 8004208:	08003f5d 	.word	0x08003f5d

0800420c <_printf_common>:
 800420c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004210:	4616      	mov	r6, r2
 8004212:	4698      	mov	r8, r3
 8004214:	688a      	ldr	r2, [r1, #8]
 8004216:	690b      	ldr	r3, [r1, #16]
 8004218:	4607      	mov	r7, r0
 800421a:	4293      	cmp	r3, r2
 800421c:	bfb8      	it	lt
 800421e:	4613      	movlt	r3, r2
 8004220:	6033      	str	r3, [r6, #0]
 8004222:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004226:	460c      	mov	r4, r1
 8004228:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800422c:	b10a      	cbz	r2, 8004232 <_printf_common+0x26>
 800422e:	3301      	adds	r3, #1
 8004230:	6033      	str	r3, [r6, #0]
 8004232:	6823      	ldr	r3, [r4, #0]
 8004234:	0699      	lsls	r1, r3, #26
 8004236:	bf42      	ittt	mi
 8004238:	6833      	ldrmi	r3, [r6, #0]
 800423a:	3302      	addmi	r3, #2
 800423c:	6033      	strmi	r3, [r6, #0]
 800423e:	6825      	ldr	r5, [r4, #0]
 8004240:	f015 0506 	ands.w	r5, r5, #6
 8004244:	d106      	bne.n	8004254 <_printf_common+0x48>
 8004246:	f104 0a19 	add.w	sl, r4, #25
 800424a:	68e3      	ldr	r3, [r4, #12]
 800424c:	6832      	ldr	r2, [r6, #0]
 800424e:	1a9b      	subs	r3, r3, r2
 8004250:	42ab      	cmp	r3, r5
 8004252:	dc2b      	bgt.n	80042ac <_printf_common+0xa0>
 8004254:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004258:	6822      	ldr	r2, [r4, #0]
 800425a:	3b00      	subs	r3, #0
 800425c:	bf18      	it	ne
 800425e:	2301      	movne	r3, #1
 8004260:	0692      	lsls	r2, r2, #26
 8004262:	d430      	bmi.n	80042c6 <_printf_common+0xba>
 8004264:	4641      	mov	r1, r8
 8004266:	4638      	mov	r0, r7
 8004268:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800426c:	47c8      	blx	r9
 800426e:	3001      	adds	r0, #1
 8004270:	d023      	beq.n	80042ba <_printf_common+0xae>
 8004272:	6823      	ldr	r3, [r4, #0]
 8004274:	6922      	ldr	r2, [r4, #16]
 8004276:	f003 0306 	and.w	r3, r3, #6
 800427a:	2b04      	cmp	r3, #4
 800427c:	bf14      	ite	ne
 800427e:	2500      	movne	r5, #0
 8004280:	6833      	ldreq	r3, [r6, #0]
 8004282:	f04f 0600 	mov.w	r6, #0
 8004286:	bf08      	it	eq
 8004288:	68e5      	ldreq	r5, [r4, #12]
 800428a:	f104 041a 	add.w	r4, r4, #26
 800428e:	bf08      	it	eq
 8004290:	1aed      	subeq	r5, r5, r3
 8004292:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004296:	bf08      	it	eq
 8004298:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800429c:	4293      	cmp	r3, r2
 800429e:	bfc4      	itt	gt
 80042a0:	1a9b      	subgt	r3, r3, r2
 80042a2:	18ed      	addgt	r5, r5, r3
 80042a4:	42b5      	cmp	r5, r6
 80042a6:	d11a      	bne.n	80042de <_printf_common+0xd2>
 80042a8:	2000      	movs	r0, #0
 80042aa:	e008      	b.n	80042be <_printf_common+0xb2>
 80042ac:	2301      	movs	r3, #1
 80042ae:	4652      	mov	r2, sl
 80042b0:	4641      	mov	r1, r8
 80042b2:	4638      	mov	r0, r7
 80042b4:	47c8      	blx	r9
 80042b6:	3001      	adds	r0, #1
 80042b8:	d103      	bne.n	80042c2 <_printf_common+0xb6>
 80042ba:	f04f 30ff 	mov.w	r0, #4294967295
 80042be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042c2:	3501      	adds	r5, #1
 80042c4:	e7c1      	b.n	800424a <_printf_common+0x3e>
 80042c6:	2030      	movs	r0, #48	@ 0x30
 80042c8:	18e1      	adds	r1, r4, r3
 80042ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80042ce:	1c5a      	adds	r2, r3, #1
 80042d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80042d4:	4422      	add	r2, r4
 80042d6:	3302      	adds	r3, #2
 80042d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80042dc:	e7c2      	b.n	8004264 <_printf_common+0x58>
 80042de:	2301      	movs	r3, #1
 80042e0:	4622      	mov	r2, r4
 80042e2:	4641      	mov	r1, r8
 80042e4:	4638      	mov	r0, r7
 80042e6:	47c8      	blx	r9
 80042e8:	3001      	adds	r0, #1
 80042ea:	d0e6      	beq.n	80042ba <_printf_common+0xae>
 80042ec:	3601      	adds	r6, #1
 80042ee:	e7d9      	b.n	80042a4 <_printf_common+0x98>

080042f0 <_printf_i>:
 80042f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042f4:	7e0f      	ldrb	r7, [r1, #24]
 80042f6:	4691      	mov	r9, r2
 80042f8:	2f78      	cmp	r7, #120	@ 0x78
 80042fa:	4680      	mov	r8, r0
 80042fc:	460c      	mov	r4, r1
 80042fe:	469a      	mov	sl, r3
 8004300:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004302:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004306:	d807      	bhi.n	8004318 <_printf_i+0x28>
 8004308:	2f62      	cmp	r7, #98	@ 0x62
 800430a:	d80a      	bhi.n	8004322 <_printf_i+0x32>
 800430c:	2f00      	cmp	r7, #0
 800430e:	f000 80d1 	beq.w	80044b4 <_printf_i+0x1c4>
 8004312:	2f58      	cmp	r7, #88	@ 0x58
 8004314:	f000 80b8 	beq.w	8004488 <_printf_i+0x198>
 8004318:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800431c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004320:	e03a      	b.n	8004398 <_printf_i+0xa8>
 8004322:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004326:	2b15      	cmp	r3, #21
 8004328:	d8f6      	bhi.n	8004318 <_printf_i+0x28>
 800432a:	a101      	add	r1, pc, #4	@ (adr r1, 8004330 <_printf_i+0x40>)
 800432c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004330:	08004389 	.word	0x08004389
 8004334:	0800439d 	.word	0x0800439d
 8004338:	08004319 	.word	0x08004319
 800433c:	08004319 	.word	0x08004319
 8004340:	08004319 	.word	0x08004319
 8004344:	08004319 	.word	0x08004319
 8004348:	0800439d 	.word	0x0800439d
 800434c:	08004319 	.word	0x08004319
 8004350:	08004319 	.word	0x08004319
 8004354:	08004319 	.word	0x08004319
 8004358:	08004319 	.word	0x08004319
 800435c:	0800449b 	.word	0x0800449b
 8004360:	080043c7 	.word	0x080043c7
 8004364:	08004455 	.word	0x08004455
 8004368:	08004319 	.word	0x08004319
 800436c:	08004319 	.word	0x08004319
 8004370:	080044bd 	.word	0x080044bd
 8004374:	08004319 	.word	0x08004319
 8004378:	080043c7 	.word	0x080043c7
 800437c:	08004319 	.word	0x08004319
 8004380:	08004319 	.word	0x08004319
 8004384:	0800445d 	.word	0x0800445d
 8004388:	6833      	ldr	r3, [r6, #0]
 800438a:	1d1a      	adds	r2, r3, #4
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	6032      	str	r2, [r6, #0]
 8004390:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004394:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004398:	2301      	movs	r3, #1
 800439a:	e09c      	b.n	80044d6 <_printf_i+0x1e6>
 800439c:	6833      	ldr	r3, [r6, #0]
 800439e:	6820      	ldr	r0, [r4, #0]
 80043a0:	1d19      	adds	r1, r3, #4
 80043a2:	6031      	str	r1, [r6, #0]
 80043a4:	0606      	lsls	r6, r0, #24
 80043a6:	d501      	bpl.n	80043ac <_printf_i+0xbc>
 80043a8:	681d      	ldr	r5, [r3, #0]
 80043aa:	e003      	b.n	80043b4 <_printf_i+0xc4>
 80043ac:	0645      	lsls	r5, r0, #25
 80043ae:	d5fb      	bpl.n	80043a8 <_printf_i+0xb8>
 80043b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80043b4:	2d00      	cmp	r5, #0
 80043b6:	da03      	bge.n	80043c0 <_printf_i+0xd0>
 80043b8:	232d      	movs	r3, #45	@ 0x2d
 80043ba:	426d      	negs	r5, r5
 80043bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043c0:	230a      	movs	r3, #10
 80043c2:	4858      	ldr	r0, [pc, #352]	@ (8004524 <_printf_i+0x234>)
 80043c4:	e011      	b.n	80043ea <_printf_i+0xfa>
 80043c6:	6821      	ldr	r1, [r4, #0]
 80043c8:	6833      	ldr	r3, [r6, #0]
 80043ca:	0608      	lsls	r0, r1, #24
 80043cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80043d0:	d402      	bmi.n	80043d8 <_printf_i+0xe8>
 80043d2:	0649      	lsls	r1, r1, #25
 80043d4:	bf48      	it	mi
 80043d6:	b2ad      	uxthmi	r5, r5
 80043d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80043da:	6033      	str	r3, [r6, #0]
 80043dc:	bf14      	ite	ne
 80043de:	230a      	movne	r3, #10
 80043e0:	2308      	moveq	r3, #8
 80043e2:	4850      	ldr	r0, [pc, #320]	@ (8004524 <_printf_i+0x234>)
 80043e4:	2100      	movs	r1, #0
 80043e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80043ea:	6866      	ldr	r6, [r4, #4]
 80043ec:	2e00      	cmp	r6, #0
 80043ee:	60a6      	str	r6, [r4, #8]
 80043f0:	db05      	blt.n	80043fe <_printf_i+0x10e>
 80043f2:	6821      	ldr	r1, [r4, #0]
 80043f4:	432e      	orrs	r6, r5
 80043f6:	f021 0104 	bic.w	r1, r1, #4
 80043fa:	6021      	str	r1, [r4, #0]
 80043fc:	d04b      	beq.n	8004496 <_printf_i+0x1a6>
 80043fe:	4616      	mov	r6, r2
 8004400:	fbb5 f1f3 	udiv	r1, r5, r3
 8004404:	fb03 5711 	mls	r7, r3, r1, r5
 8004408:	5dc7      	ldrb	r7, [r0, r7]
 800440a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800440e:	462f      	mov	r7, r5
 8004410:	42bb      	cmp	r3, r7
 8004412:	460d      	mov	r5, r1
 8004414:	d9f4      	bls.n	8004400 <_printf_i+0x110>
 8004416:	2b08      	cmp	r3, #8
 8004418:	d10b      	bne.n	8004432 <_printf_i+0x142>
 800441a:	6823      	ldr	r3, [r4, #0]
 800441c:	07df      	lsls	r7, r3, #31
 800441e:	d508      	bpl.n	8004432 <_printf_i+0x142>
 8004420:	6923      	ldr	r3, [r4, #16]
 8004422:	6861      	ldr	r1, [r4, #4]
 8004424:	4299      	cmp	r1, r3
 8004426:	bfde      	ittt	le
 8004428:	2330      	movle	r3, #48	@ 0x30
 800442a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800442e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004432:	1b92      	subs	r2, r2, r6
 8004434:	6122      	str	r2, [r4, #16]
 8004436:	464b      	mov	r3, r9
 8004438:	4621      	mov	r1, r4
 800443a:	4640      	mov	r0, r8
 800443c:	f8cd a000 	str.w	sl, [sp]
 8004440:	aa03      	add	r2, sp, #12
 8004442:	f7ff fee3 	bl	800420c <_printf_common>
 8004446:	3001      	adds	r0, #1
 8004448:	d14a      	bne.n	80044e0 <_printf_i+0x1f0>
 800444a:	f04f 30ff 	mov.w	r0, #4294967295
 800444e:	b004      	add	sp, #16
 8004450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004454:	6823      	ldr	r3, [r4, #0]
 8004456:	f043 0320 	orr.w	r3, r3, #32
 800445a:	6023      	str	r3, [r4, #0]
 800445c:	2778      	movs	r7, #120	@ 0x78
 800445e:	4832      	ldr	r0, [pc, #200]	@ (8004528 <_printf_i+0x238>)
 8004460:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004464:	6823      	ldr	r3, [r4, #0]
 8004466:	6831      	ldr	r1, [r6, #0]
 8004468:	061f      	lsls	r7, r3, #24
 800446a:	f851 5b04 	ldr.w	r5, [r1], #4
 800446e:	d402      	bmi.n	8004476 <_printf_i+0x186>
 8004470:	065f      	lsls	r7, r3, #25
 8004472:	bf48      	it	mi
 8004474:	b2ad      	uxthmi	r5, r5
 8004476:	6031      	str	r1, [r6, #0]
 8004478:	07d9      	lsls	r1, r3, #31
 800447a:	bf44      	itt	mi
 800447c:	f043 0320 	orrmi.w	r3, r3, #32
 8004480:	6023      	strmi	r3, [r4, #0]
 8004482:	b11d      	cbz	r5, 800448c <_printf_i+0x19c>
 8004484:	2310      	movs	r3, #16
 8004486:	e7ad      	b.n	80043e4 <_printf_i+0xf4>
 8004488:	4826      	ldr	r0, [pc, #152]	@ (8004524 <_printf_i+0x234>)
 800448a:	e7e9      	b.n	8004460 <_printf_i+0x170>
 800448c:	6823      	ldr	r3, [r4, #0]
 800448e:	f023 0320 	bic.w	r3, r3, #32
 8004492:	6023      	str	r3, [r4, #0]
 8004494:	e7f6      	b.n	8004484 <_printf_i+0x194>
 8004496:	4616      	mov	r6, r2
 8004498:	e7bd      	b.n	8004416 <_printf_i+0x126>
 800449a:	6833      	ldr	r3, [r6, #0]
 800449c:	6825      	ldr	r5, [r4, #0]
 800449e:	1d18      	adds	r0, r3, #4
 80044a0:	6961      	ldr	r1, [r4, #20]
 80044a2:	6030      	str	r0, [r6, #0]
 80044a4:	062e      	lsls	r6, r5, #24
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	d501      	bpl.n	80044ae <_printf_i+0x1be>
 80044aa:	6019      	str	r1, [r3, #0]
 80044ac:	e002      	b.n	80044b4 <_printf_i+0x1c4>
 80044ae:	0668      	lsls	r0, r5, #25
 80044b0:	d5fb      	bpl.n	80044aa <_printf_i+0x1ba>
 80044b2:	8019      	strh	r1, [r3, #0]
 80044b4:	2300      	movs	r3, #0
 80044b6:	4616      	mov	r6, r2
 80044b8:	6123      	str	r3, [r4, #16]
 80044ba:	e7bc      	b.n	8004436 <_printf_i+0x146>
 80044bc:	6833      	ldr	r3, [r6, #0]
 80044be:	2100      	movs	r1, #0
 80044c0:	1d1a      	adds	r2, r3, #4
 80044c2:	6032      	str	r2, [r6, #0]
 80044c4:	681e      	ldr	r6, [r3, #0]
 80044c6:	6862      	ldr	r2, [r4, #4]
 80044c8:	4630      	mov	r0, r6
 80044ca:	f000 f859 	bl	8004580 <memchr>
 80044ce:	b108      	cbz	r0, 80044d4 <_printf_i+0x1e4>
 80044d0:	1b80      	subs	r0, r0, r6
 80044d2:	6060      	str	r0, [r4, #4]
 80044d4:	6863      	ldr	r3, [r4, #4]
 80044d6:	6123      	str	r3, [r4, #16]
 80044d8:	2300      	movs	r3, #0
 80044da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044de:	e7aa      	b.n	8004436 <_printf_i+0x146>
 80044e0:	4632      	mov	r2, r6
 80044e2:	4649      	mov	r1, r9
 80044e4:	4640      	mov	r0, r8
 80044e6:	6923      	ldr	r3, [r4, #16]
 80044e8:	47d0      	blx	sl
 80044ea:	3001      	adds	r0, #1
 80044ec:	d0ad      	beq.n	800444a <_printf_i+0x15a>
 80044ee:	6823      	ldr	r3, [r4, #0]
 80044f0:	079b      	lsls	r3, r3, #30
 80044f2:	d413      	bmi.n	800451c <_printf_i+0x22c>
 80044f4:	68e0      	ldr	r0, [r4, #12]
 80044f6:	9b03      	ldr	r3, [sp, #12]
 80044f8:	4298      	cmp	r0, r3
 80044fa:	bfb8      	it	lt
 80044fc:	4618      	movlt	r0, r3
 80044fe:	e7a6      	b.n	800444e <_printf_i+0x15e>
 8004500:	2301      	movs	r3, #1
 8004502:	4632      	mov	r2, r6
 8004504:	4649      	mov	r1, r9
 8004506:	4640      	mov	r0, r8
 8004508:	47d0      	blx	sl
 800450a:	3001      	adds	r0, #1
 800450c:	d09d      	beq.n	800444a <_printf_i+0x15a>
 800450e:	3501      	adds	r5, #1
 8004510:	68e3      	ldr	r3, [r4, #12]
 8004512:	9903      	ldr	r1, [sp, #12]
 8004514:	1a5b      	subs	r3, r3, r1
 8004516:	42ab      	cmp	r3, r5
 8004518:	dcf2      	bgt.n	8004500 <_printf_i+0x210>
 800451a:	e7eb      	b.n	80044f4 <_printf_i+0x204>
 800451c:	2500      	movs	r5, #0
 800451e:	f104 0619 	add.w	r6, r4, #25
 8004522:	e7f5      	b.n	8004510 <_printf_i+0x220>
 8004524:	08004723 	.word	0x08004723
 8004528:	08004734 	.word	0x08004734

0800452c <memmove>:
 800452c:	4288      	cmp	r0, r1
 800452e:	b510      	push	{r4, lr}
 8004530:	eb01 0402 	add.w	r4, r1, r2
 8004534:	d902      	bls.n	800453c <memmove+0x10>
 8004536:	4284      	cmp	r4, r0
 8004538:	4623      	mov	r3, r4
 800453a:	d807      	bhi.n	800454c <memmove+0x20>
 800453c:	1e43      	subs	r3, r0, #1
 800453e:	42a1      	cmp	r1, r4
 8004540:	d008      	beq.n	8004554 <memmove+0x28>
 8004542:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004546:	f803 2f01 	strb.w	r2, [r3, #1]!
 800454a:	e7f8      	b.n	800453e <memmove+0x12>
 800454c:	4601      	mov	r1, r0
 800454e:	4402      	add	r2, r0
 8004550:	428a      	cmp	r2, r1
 8004552:	d100      	bne.n	8004556 <memmove+0x2a>
 8004554:	bd10      	pop	{r4, pc}
 8004556:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800455a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800455e:	e7f7      	b.n	8004550 <memmove+0x24>

08004560 <_sbrk_r>:
 8004560:	b538      	push	{r3, r4, r5, lr}
 8004562:	2300      	movs	r3, #0
 8004564:	4d05      	ldr	r5, [pc, #20]	@ (800457c <_sbrk_r+0x1c>)
 8004566:	4604      	mov	r4, r0
 8004568:	4608      	mov	r0, r1
 800456a:	602b      	str	r3, [r5, #0]
 800456c:	f7fd f8cc 	bl	8001708 <_sbrk>
 8004570:	1c43      	adds	r3, r0, #1
 8004572:	d102      	bne.n	800457a <_sbrk_r+0x1a>
 8004574:	682b      	ldr	r3, [r5, #0]
 8004576:	b103      	cbz	r3, 800457a <_sbrk_r+0x1a>
 8004578:	6023      	str	r3, [r4, #0]
 800457a:	bd38      	pop	{r3, r4, r5, pc}
 800457c:	20001068 	.word	0x20001068

08004580 <memchr>:
 8004580:	4603      	mov	r3, r0
 8004582:	b510      	push	{r4, lr}
 8004584:	b2c9      	uxtb	r1, r1
 8004586:	4402      	add	r2, r0
 8004588:	4293      	cmp	r3, r2
 800458a:	4618      	mov	r0, r3
 800458c:	d101      	bne.n	8004592 <memchr+0x12>
 800458e:	2000      	movs	r0, #0
 8004590:	e003      	b.n	800459a <memchr+0x1a>
 8004592:	7804      	ldrb	r4, [r0, #0]
 8004594:	3301      	adds	r3, #1
 8004596:	428c      	cmp	r4, r1
 8004598:	d1f6      	bne.n	8004588 <memchr+0x8>
 800459a:	bd10      	pop	{r4, pc}

0800459c <memcpy>:
 800459c:	440a      	add	r2, r1
 800459e:	4291      	cmp	r1, r2
 80045a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80045a4:	d100      	bne.n	80045a8 <memcpy+0xc>
 80045a6:	4770      	bx	lr
 80045a8:	b510      	push	{r4, lr}
 80045aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045ae:	4291      	cmp	r1, r2
 80045b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045b4:	d1f9      	bne.n	80045aa <memcpy+0xe>
 80045b6:	bd10      	pop	{r4, pc}

080045b8 <_realloc_r>:
 80045b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045bc:	4607      	mov	r7, r0
 80045be:	4614      	mov	r4, r2
 80045c0:	460d      	mov	r5, r1
 80045c2:	b921      	cbnz	r1, 80045ce <_realloc_r+0x16>
 80045c4:	4611      	mov	r1, r2
 80045c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045ca:	f7ff bc3b 	b.w	8003e44 <_malloc_r>
 80045ce:	b92a      	cbnz	r2, 80045dc <_realloc_r+0x24>
 80045d0:	f7ff fbce 	bl	8003d70 <_free_r>
 80045d4:	4625      	mov	r5, r4
 80045d6:	4628      	mov	r0, r5
 80045d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045dc:	f000 f81a 	bl	8004614 <_malloc_usable_size_r>
 80045e0:	4284      	cmp	r4, r0
 80045e2:	4606      	mov	r6, r0
 80045e4:	d802      	bhi.n	80045ec <_realloc_r+0x34>
 80045e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80045ea:	d8f4      	bhi.n	80045d6 <_realloc_r+0x1e>
 80045ec:	4621      	mov	r1, r4
 80045ee:	4638      	mov	r0, r7
 80045f0:	f7ff fc28 	bl	8003e44 <_malloc_r>
 80045f4:	4680      	mov	r8, r0
 80045f6:	b908      	cbnz	r0, 80045fc <_realloc_r+0x44>
 80045f8:	4645      	mov	r5, r8
 80045fa:	e7ec      	b.n	80045d6 <_realloc_r+0x1e>
 80045fc:	42b4      	cmp	r4, r6
 80045fe:	4622      	mov	r2, r4
 8004600:	4629      	mov	r1, r5
 8004602:	bf28      	it	cs
 8004604:	4632      	movcs	r2, r6
 8004606:	f7ff ffc9 	bl	800459c <memcpy>
 800460a:	4629      	mov	r1, r5
 800460c:	4638      	mov	r0, r7
 800460e:	f7ff fbaf 	bl	8003d70 <_free_r>
 8004612:	e7f1      	b.n	80045f8 <_realloc_r+0x40>

08004614 <_malloc_usable_size_r>:
 8004614:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004618:	1f18      	subs	r0, r3, #4
 800461a:	2b00      	cmp	r3, #0
 800461c:	bfbc      	itt	lt
 800461e:	580b      	ldrlt	r3, [r1, r0]
 8004620:	18c0      	addlt	r0, r0, r3
 8004622:	4770      	bx	lr

08004624 <_init>:
 8004624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004626:	bf00      	nop
 8004628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800462a:	bc08      	pop	{r3}
 800462c:	469e      	mov	lr, r3
 800462e:	4770      	bx	lr

08004630 <_fini>:
 8004630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004632:	bf00      	nop
 8004634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004636:	bc08      	pop	{r3}
 8004638:	469e      	mov	lr, r3
 800463a:	4770      	bx	lr
